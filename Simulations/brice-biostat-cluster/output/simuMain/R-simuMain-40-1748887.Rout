
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### BATCH_simuMain.R --- 
> #----------------------------------------------------------------------
> ## Author: Paul Blanche
> ## Created: Mar  5 2021 (10:56) 
> ## Version: 
> ## Last-Updated: jul  7 2022 (13:56) 
> ##           By: Brice Ozenne
> ##     Update #: 518
> #----------------------------------------------------------------------
> ## 
> ### Commentary: 
> ## 
> ### Change Log:
> #----------------------------------------------------------------------
> ## 
> ### Code:
> 
> ## ** BATCH loop
> ## cd /projects/biostat01/people/hpl802/DelayedGSD/
> ## for ITER in `seq 1 10`;
> ## do
> ## eval 'R CMD BATCH --vanilla "--args iter_sim='$ITER' n.iter_sim=10" BATCH_simuMain.R output/R-simuMain-'$ITER'.Rout &'
> ## done
> 
> ## [1] 1186669
> ## [2] 1186670
> ## [3] 1186671
> ## [4] 1186672
> ## [5] 1186673
> ## [6] 1186674
> ## [7] 1186675
> ## [8] 1186676
> ## [9] 1186677
> ## [10] 1186678
> 
> rm(list=ls())
>                                    # {{{ parameters
> ## * parameters
> name <- "ScenarioName" # To save the results
> method <- 1:2 # methods used to compute the boundaries
>                                         #---
> myseed <- 140786598
>                                         #--- to plan the trial ----
> NMC <- 250 # number of sequential simulations to run in parallel. Eg. with 250, then we can run 40 scripts in paralell to get N=10,000 runs in total.
> kMax <- 2  #max number of analyses (including final)
> alpha <- 0.025  #type I error (one sided)
> beta <- 0.2  #type II error
> informationRates <- c(0.5,1)  #planned  information rates
> rho_alpha <- 2  # rho parameter for alpha error spending function
> rho_beta <- 2  # rho parameter for beta error spending function
> ## deltaPower <- 0.75 # just to try another value when Id > Imax
> Id <- 0.55  #(expected) information rate at each decision analysis
> binding <- TRUE
>                                         #
>                                         #---- to generate data -----------
>                                         #
> block <- c(1,1,0,0) 
> allsd <- c(2.5,2.1,2.4) # sd, first from baseline measurement, then the two changes from baseline
> mean0 <- c(10,0,0) # mean placebo group (again, first is absolute value, then change from baseline)
> delta <- c(0,0.6,0.8) # treatment effect
> ar <- (0.86*2)*2 # orginial accrual rate from data from Corine is 0.86 per week, hence we multiply by 2 for by 14 days. As to low, we further multiply by 2
> cor011 <- -0.15 # ~ from data from Corine
> corij1 <- 0.68  # ~ from data from Corine
> cor0j1 <- -0.27  # ~ from data from Corine
> Miss11 <- 5/104 # miss both V1 and V2
> Miss12 <- 1/104 # miss V1 and but not V2
> Miss21 <- 6/104 # do not miss V1 and but miss V2
> Miss22 <- 92/104 # miss none
> PropForInterim <- 0.5 # Decide to have interim analysiz when PropForInterim % of all subjects have had the chance to have one follow-up measuement recorded in the data to be available for analysis.
> theDelta.t <- 1.50001 # time lag to process the data and make them ready to analyze after collecting them (unit is time between two follow-up visits)
> TimeFactor <- 14 ## number of days between two visits
>                                         #
>                                         #--- actually for both planing the trial  and generating data-----
>                                         #
>                                         #
> deltaPower <- abs(delta[3]) # effect (NOT Z-scale/unit, but outcome scale/unit!) that the study is powered for: should we choose ourselves or compute from other numbers above ???
> n <- ceiling(2*2*((allsd[3]/deltaPower)^2)*(qnorm(1-beta)-qnorm(alpha))^2) #104 with Corine's data # should we choose ourselves or compute from the above numbers ???
>                                         # inflate SS as required for interim
> 
>                                         # {{{ Set seeds for parallel computing and reproducibility
> ## * Seed
> args <- commandArgs(TRUE) ## BATCH MODE
> if(length(args)>0){
+     for (arg in args){
+         eval(parse(text=arg))
+     }
+ }else{ ## SLUMR
+     iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_ID"))
+     n.iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_COUNT"))
+ } ## interactive
> if(is.na(iter_sim)){iter_sim <- 1}
> if(is.na(n.iter_sim)){n.iter_sim <- 40}
> 
> set.seed(140786598)
> allseeds <- sample.int(n = 10*n.iter_sim*NMC, size = n.iter_sim*NMC, replace=FALSE) #x=1:(.Machine$integer.max) seems to be maximal possible
> # }}}
> 
> # {{{ set path to load and save and othe machine specific variables
> ## * path
> path <- "."
> path.res <- file.path(path,"Results","simuMain")
> if(dir.exists(path.res)==FALSE){
+     if(dir.exists(file.path(path,"Results"))==FALSE){
+     dir.create(file.path(path,"Results"))
+     }
+     dir.create(path.res)
+ }
> path.output <- file.path(path,"output","simuMain")
> if(dir.exists(path.output)==FALSE){
+     if(dir.exists(file.path(path,"output"))==FALSE){
+     dir.create(file.path(path,"output"))
+     }
+     dir.create(path.output)
+ }
> # }}}
> 
> 
> ## * libraries and functions
> library(DelayedGSD)
DelayedGSD version 0.0.3
> ## sourceDir <- function(path, trace = TRUE, ...) {
> ##     for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
> ##         if(trace) cat(nm,":")
> ##         source(file.path(path, nm), ...)
> ##         if(trace) cat("\n")
> ##     }
> ## }
> ## sourceDir(pathToLoad)
>     
> 
> ## * Compute inflation factor and sample size
> plannedB <- vector(mode = "list", length = 3)
> for(iMeth in method){ ## iMeth <- 1
+     plannedB[[iMeth]] <- CalcBoundaries(kMax=kMax,  
+                                         alpha=alpha, 
+                                         beta=beta,  
+                                         InfoR.i=informationRates,  
+                                         InfoR.d=c(Id,1),  
+                                         rho_alpha=rho_alpha,  
+                                         rho_beta=rho_beta,  
+                                         method=iMeth,  
+                                         cNotBelowFixedc=FALSE,
+                                         bindingFutility=binding,
+                                         delta=tail(delta,1))
+     ## summary(plannedB[[1]])
+     ## coef(plannedB[[iMeth]], type = "information")
+ }
Loading required namespace: gsDesign
Loading required package: mvtnorm
Loading required namespace: BB
> inflationFactor <- unlist(lapply(plannedB,function(iP){iP$planned$InflationFactor}))
> nGSD <- ceiling(n*inflationFactor)
> ##  plot(plannedB[[1]])
> 
> #
> # --- just to check---
> ## n
> ## InfoFixed <- ((qnorm(1-beta)-qnorm(alpha))/(deltaPower))^2
> ## InfoFixed
> ## n/(4*(allsd[3])^2)
> #---
> # }}}
> 
> 
> 
> 
> # {{{ technical details to loop
> RES <- NULL # initialize results to save
> allj <- ((iter_sim-1)*NMC + 1):(iter_sim*NMC) # indices of all iterations (replicates) for this job, accountng for the other jobs running in parallel
> # }}}
> 
> ## * Loop
> for(j in allj){ ## j <- 51 ## 5
+     startComp <- Sys.time()
+     myseedi <- allseeds[j]
+     # {{{ TRACE info (e.g. to check the Rout)
+     print(paste0("seed ",myseedi," for ","j=",which(j==allj)," out of ",NMC, " (i.e. j=",j," in [",(iter_sim-1)*NMC + 1,";",iter_sim*NMC,"], as job id is i=",iter_sim,")"))
+     # }}}
+     # {{{ Missing probabilities
+     MyMissProb <- matrix(c(Miss11,Miss12,Miss21,Miss22),ncol=2,nrow=2,byrow=TRUE) # to additionnally remove 1 more because some FASFL=N
+     colnames(MyMissProb) <- c("V2 missing","V2 not missing")
+     rownames(MyMissProb) <- c("V1 missing","V1 not missing")
+     # }}}
+ 
+                                         # {{{ generate data
+     ## ** simulate
+     res <- GenData(n=n, 
+                    N.fw=2,
+                    rand.block=block,
+                    allsd=allsd,
+                    mean0=mean0,
+                    delta=delta,
+                    ar=ar,
+                    cor.01.1=cor011,
+                    cor.ij.1=corij1,
+                    cor.0j.1=cor0j1,
+                    seed=myseedi,
+                    MissProb=MyMissProb,
+                    DigitsOutcome=2,
+                    TimeFactor=TimeFactor,
+                    DigitsTime=0
+                    )
+     d <- res$d
+     ## head(d,n=20)
+                                         # }}}
+                                         # {{{ reformat data like those of Corine
+     ## Make data long format
+     ## dd <- FormatAsCase(d)
+     ## head(dd)
+     ## summary(dd)
+                                         # }}}
+    
+                                         # {{{ make data available at interim
+                                         # Here we stop inclusion data collection for the interim analysis as soon as
+                                         # half of the participants have completed (or had the opportunity to complete) the follow-up 
+     thet <- d$t3[ceiling(n*PropForInterim)]
+     di <- SelectData(d,t=thet)
+     ## ddi <- FormatAsCase(di) # needed ????
+     ## head(d[d$id==52,])
+                                         # }}}
+     ## {{{ analyze data at at interim
+     ## ** interim
+     lmmI <- analyzeData(di, ddf = "nlme", data.decision = sum(d$t1 <= thet + theDelta.t*TimeFactor), getinfo = TRUE, trace = TRUE)
+     ## lmmI <- analyzeData(di, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     currentGSD <- vector(mode = "list", length = 3)
+     out.interim <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+ 
+         currentGSD[[iMeth]] <- update(plannedB[[iMeth]], delta = lmmI, trace = FALSE)
+ 
+         iConfint.interim <- confint(currentGSD[[iMeth]])
+         iInfo.interim <- coef(currentGSD[[iMeth]], type = "information")
+         iBoundary.interim <- coef(currentGSD[[iMeth]], type = "boundary")
+         iDecision.interim <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+         out.interim[[iMeth]] <-  data.frame(statistic = iConfint.interim[1,"statistic"],
+                                             estimate_ML = iConfint.interim[1,"estimate"],
+                                             se_ML = iConfint.interim[1,"se"],
+                                             info = iInfo.interim[1,"Interim"],
+                                             infoPC = iInfo.interim[1,"Interim.pc"],
+                                             info.pred = iInfo.interim[1,"Decision"],
+                                             infoPC.pred = iInfo.interim[1,"Decision.pc"],
+                                             uk = iBoundary.interim[1,"Ebound"],
+                                             lk = iBoundary.interim[1,"Fbound"],
+                                             decision = iDecision.interim["decision","stage 1"],
+                                             reason = iDecision.interim["reason.interim","stage 1"])
+     }
+     ## currentGSD[[1]]
+     ## plot(currentGSD[[1]])
+ 
+     ## ** decision
+     dDecision <- d[which(d$t1 <= thet + theDelta.t*TimeFactor),]
+     lmmD <- analyzeData(dDecision, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+     
+     out.decision <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+           
+         if(out.interim[[iMeth]]$decision == "stop"){
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, trace = FALSE)
+             ## plot(currentGSD[[iMeth]])
+ 
+             iConfint.decision <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.decision  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = iConfint.decision[1,"statistic"],
+                                                 p.value_ML = iConfint.decision[iConfint.decision$method == "ML","p.value"],
+                                                 lower_ML = iConfint.decision[iConfint.decision$method == "ML","lower"],
+                                                 upper_ML = iConfint.decision[iConfint.decision$method == "ML","upper"],
+                                                 estimate_ML = iConfint.decision[iConfint.decision$method == "ML","estimate"],
+                                                 p.value_MUE = iConfint.decision[iConfint.decision$method == "MUE","p.value"],
+                                                 lower_MUE = iConfint.decision[iConfint.decision$method == "MUE","lower"],
+                                                 upper_MUE = iConfint.decision[iConfint.decision$method == "MUE","upper"],
+                                                 estimate_MUE = iConfint.decision[iConfint.decision$method == "MUE","estimate"],
+                                                 info = iInfo.decision[1,"Interim"],
+                                                 infoPC = iInfo.decision[1,"Interim.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = unname(iDecision.decision["decision","stage 2"])
+                                                 )
+ 
+         }else{
+             ## update information
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, k = 1, type.k = "decision", trace = FALSE)
+ 
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = NA,
+                                                 p.value_ML = NA,
+                                                 lower_ML = NA,
+                                                 upper_ML = NA,
+                                                 estimate_ML = NA,
+                                                 p.value_MUE = NA,
+                                                 lower_MUE = NA,
+                                                 upper_MUE = NA,
+                                                 estimate_MUE = NA,
+                                                 info = iInfo.decision[1,"Decision"],
+                                                 infoPC = iInfo.decision[1,"Decision.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = NA)
+         }
+     }
+                                         # }}}
+                                         # {{{ Analyze data at decision
+ 
+     ## ** finale
+     dFinal <- d
+     lmmF <- analyzeData(dFinal, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     out.final <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+         if(out.interim[[iMeth]]$decision == "stop"){
+             out.final[[iMeth]] <- data.frame(statistic = NA,
+                                              p.value_ML = NA,
+                                              lower_ML = NA,
+                                              upper_ML = NA,
+                                              estimate_ML = NA,
+                                              p.value_MUE = NA,
+                                              lower_MUE = NA,
+                                              upper_MUE = NA,
+                                              estimate_MUE = NA,
+                                              info = NA,
+                                              infoPC = NA,
+                                              ck = NA,
+                                              decision = NA)
+ 
+         }else{
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmF, trace = FALSE)
+ 
+             ## plot(test)
+             ## summary(test)
+             iConfint.final <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.final <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.final <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.final  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.final[[iMeth]] <- data.frame(statistic = iConfint.final[1,"statistic"],
+                                              p.value_ML = iConfint.final[iConfint.final$method == "ML","p.value"],
+                                              lower_ML = iConfint.final[iConfint.final$method == "ML","lower"],
+                                              upper_ML = iConfint.final[iConfint.final$method == "ML","upper"],
+                                              estimate_ML = iConfint.final[iConfint.final$method == "ML","estimate"],
+                                              p.value_MUE = iConfint.final[iConfint.final$method == "MUE","p.value"],
+                                              lower_MUE = iConfint.final[iConfint.final$method == "MUE","lower"],
+                                              upper_MUE = iConfint.final[iConfint.final$method == "MUE","upper"],
+                                              estimate_MUE = iConfint.final[iConfint.final$method == "MUE","estimate"],
+                                              info = iInfo.final[1,"Interim"],
+                                              infoPC = iInfo.final[1,"Interim.pc"],
+                                              ck = iBoundary.final[1,"Cbound"],
+                                              decision = unname(coef(currentGSD[[iMeth]], type = "decision")["decision","stage 2"])
+                                              )
+         }
+     }
+                                         # }}}
+ 
+     stopComp <- Sys.time()
+                                         # {{{ Save results
+ 
+     outMerge <- do.call(rbind,lapply(method, function(iMeth){
+         iNames <- unique(c(names(out.interim[[iMeth]]),names(out.decision[[iMeth]]),names(out.final[[iMeth]])))
+         iMerge <- data.frame(matrix(NA, ncol = length(iNames)+3, nrow = 3, dimnames = list(NULL, c("method", "stage", "type", iNames))))
+         iMerge[1,c("method","stage","type",names(out.interim[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "interim", out.interim[[iMeth]]) 
+         iMerge[2,c("method","stage","type",names(out.decision[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "decision", out.decision[[iMeth]]) 
+         iMerge[3,c("method","stage","type",names(out.final[[iMeth]]))] <- data.frame(method = iMeth, stage = 2, type = "final", out.final[[iMeth]])
+         return(iMerge)
+     }))
+ 
+     ## outMerge[outMerge$method==3,]
+ 
+     out <- cbind(
+         ## results
+         outMerge,
+         ## simulation details
+         time.interim = thet,
+         seed=myseedi,             
+         nX1.interim = sum(!is.na(di$X1)),
+         nX2.interim = sum(!is.na(di$X2)),
+         nX3.interim = sum(!is.na(di$X3)),
+         ## computation time
+         computation.time=as.double(round(difftime(stopComp,startComp,units="secs"),3))
+     )
+     ## names(out) <- myColNames
+     RES <- rbind(RES,out)
+     save(RES,file=paste0(path.res,name,"(tempo)-",iter_sim,".rda"))
+                                         # }}}
+ }
[1] "seed 28308 for j=1 out of 250 (i.e. j=9751 in [9751;10000], as job id is i=40)"
Loading required namespace: nlme
[1] "seed 46731 for j=2 out of 250 (i.e. j=9752 in [9751;10000], as job id is i=40)"
[1] "seed 57213 for j=3 out of 250 (i.e. j=9753 in [9751;10000], as job id is i=40)"
[1] "seed 87785 for j=4 out of 250 (i.e. j=9754 in [9751;10000], as job id is i=40)"
[1] "seed 75566 for j=5 out of 250 (i.e. j=9755 in [9751;10000], as job id is i=40)"
[1] "seed 86504 for j=6 out of 250 (i.e. j=9756 in [9751;10000], as job id is i=40)"
[1] "seed 78928 for j=7 out of 250 (i.e. j=9757 in [9751;10000], as job id is i=40)"
[1] "seed 58866 for j=8 out of 250 (i.e. j=9758 in [9751;10000], as job id is i=40)"
[1] "seed 40903 for j=9 out of 250 (i.e. j=9759 in [9751;10000], as job id is i=40)"
[1] "seed 25093 for j=10 out of 250 (i.e. j=9760 in [9751;10000], as job id is i=40)"
[1] "seed 35219 for j=11 out of 250 (i.e. j=9761 in [9751;10000], as job id is i=40)"
[1] "seed 15520 for j=12 out of 250 (i.e. j=9762 in [9751;10000], as job id is i=40)"
[1] "seed 47002 for j=13 out of 250 (i.e. j=9763 in [9751;10000], as job id is i=40)"
[1] "seed 57835 for j=14 out of 250 (i.e. j=9764 in [9751;10000], as job id is i=40)"
[1] "seed 38467 for j=15 out of 250 (i.e. j=9765 in [9751;10000], as job id is i=40)"
[1] "seed 76118 for j=16 out of 250 (i.e. j=9766 in [9751;10000], as job id is i=40)"
[1] "seed 77208 for j=17 out of 250 (i.e. j=9767 in [9751;10000], as job id is i=40)"
[1] "seed 56927 for j=18 out of 250 (i.e. j=9768 in [9751;10000], as job id is i=40)"
[1] "seed 83228 for j=19 out of 250 (i.e. j=9769 in [9751;10000], as job id is i=40)"
[1] "seed 91722 for j=20 out of 250 (i.e. j=9770 in [9751;10000], as job id is i=40)"
[1] "seed 30999 for j=21 out of 250 (i.e. j=9771 in [9751;10000], as job id is i=40)"
[1] "seed 58910 for j=22 out of 250 (i.e. j=9772 in [9751;10000], as job id is i=40)"
[1] "seed 40429 for j=23 out of 250 (i.e. j=9773 in [9751;10000], as job id is i=40)"
[1] "seed 91057 for j=24 out of 250 (i.e. j=9774 in [9751;10000], as job id is i=40)"
[1] "seed 43710 for j=25 out of 250 (i.e. j=9775 in [9751;10000], as job id is i=40)"
[1] "seed 90567 for j=26 out of 250 (i.e. j=9776 in [9751;10000], as job id is i=40)"
[1] "seed 87176 for j=27 out of 250 (i.e. j=9777 in [9751;10000], as job id is i=40)"
[1] "seed 93634 for j=28 out of 250 (i.e. j=9778 in [9751;10000], as job id is i=40)"
[1] "seed 37257 for j=29 out of 250 (i.e. j=9779 in [9751;10000], as job id is i=40)"
[1] "seed 68658 for j=30 out of 250 (i.e. j=9780 in [9751;10000], as job id is i=40)"
[1] "seed 75686 for j=31 out of 250 (i.e. j=9781 in [9751;10000], as job id is i=40)"
[1] "seed 35971 for j=32 out of 250 (i.e. j=9782 in [9751;10000], as job id is i=40)"
[1] "seed 23461 for j=33 out of 250 (i.e. j=9783 in [9751;10000], as job id is i=40)"
[1] "seed 20675 for j=34 out of 250 (i.e. j=9784 in [9751;10000], as job id is i=40)"
[1] "seed 16596 for j=35 out of 250 (i.e. j=9785 in [9751;10000], as job id is i=40)"
[1] "seed 13390 for j=36 out of 250 (i.e. j=9786 in [9751;10000], as job id is i=40)"
[1] "seed 6560 for j=37 out of 250 (i.e. j=9787 in [9751;10000], as job id is i=40)"
[1] "seed 99054 for j=38 out of 250 (i.e. j=9788 in [9751;10000], as job id is i=40)"
[1] "seed 63487 for j=39 out of 250 (i.e. j=9789 in [9751;10000], as job id is i=40)"
[1] "seed 94694 for j=40 out of 250 (i.e. j=9790 in [9751;10000], as job id is i=40)"
[1] "seed 15136 for j=41 out of 250 (i.e. j=9791 in [9751;10000], as job id is i=40)"
[1] "seed 96438 for j=42 out of 250 (i.e. j=9792 in [9751;10000], as job id is i=40)"
[1] "seed 28719 for j=43 out of 250 (i.e. j=9793 in [9751;10000], as job id is i=40)"
[1] "seed 26407 for j=44 out of 250 (i.e. j=9794 in [9751;10000], as job id is i=40)"
[1] "seed 44197 for j=45 out of 250 (i.e. j=9795 in [9751;10000], as job id is i=40)"
[1] "seed 28480 for j=46 out of 250 (i.e. j=9796 in [9751;10000], as job id is i=40)"
[1] "seed 65525 for j=47 out of 250 (i.e. j=9797 in [9751;10000], as job id is i=40)"
[1] "seed 52329 for j=48 out of 250 (i.e. j=9798 in [9751;10000], as job id is i=40)"
[1] "seed 8393 for j=49 out of 250 (i.e. j=9799 in [9751;10000], as job id is i=40)"
[1] "seed 8699 for j=50 out of 250 (i.e. j=9800 in [9751;10000], as job id is i=40)"
[1] "seed 77528 for j=51 out of 250 (i.e. j=9801 in [9751;10000], as job id is i=40)"
[1] "seed 53963 for j=52 out of 250 (i.e. j=9802 in [9751;10000], as job id is i=40)"
[1] "seed 26929 for j=53 out of 250 (i.e. j=9803 in [9751;10000], as job id is i=40)"
[1] "seed 17072 for j=54 out of 250 (i.e. j=9804 in [9751;10000], as job id is i=40)"
[1] "seed 73934 for j=55 out of 250 (i.e. j=9805 in [9751;10000], as job id is i=40)"
[1] "seed 42860 for j=56 out of 250 (i.e. j=9806 in [9751;10000], as job id is i=40)"
[1] "seed 27808 for j=57 out of 250 (i.e. j=9807 in [9751;10000], as job id is i=40)"
[1] "seed 41987 for j=58 out of 250 (i.e. j=9808 in [9751;10000], as job id is i=40)"
[1] "seed 31426 for j=59 out of 250 (i.e. j=9809 in [9751;10000], as job id is i=40)"
[1] "seed 20672 for j=60 out of 250 (i.e. j=9810 in [9751;10000], as job id is i=40)"
[1] "seed 18452 for j=61 out of 250 (i.e. j=9811 in [9751;10000], as job id is i=40)"
[1] "seed 23524 for j=62 out of 250 (i.e. j=9812 in [9751;10000], as job id is i=40)"
[1] "seed 85584 for j=63 out of 250 (i.e. j=9813 in [9751;10000], as job id is i=40)"
[1] "seed 51767 for j=64 out of 250 (i.e. j=9814 in [9751;10000], as job id is i=40)"
[1] "seed 44842 for j=65 out of 250 (i.e. j=9815 in [9751;10000], as job id is i=40)"
[1] "seed 91501 for j=66 out of 250 (i.e. j=9816 in [9751;10000], as job id is i=40)"
[1] "seed 63292 for j=67 out of 250 (i.e. j=9817 in [9751;10000], as job id is i=40)"
[1] "seed 86246 for j=68 out of 250 (i.e. j=9818 in [9751;10000], as job id is i=40)"
[1] "seed 14859 for j=69 out of 250 (i.e. j=9819 in [9751;10000], as job id is i=40)"
[1] "seed 18781 for j=70 out of 250 (i.e. j=9820 in [9751;10000], as job id is i=40)"
[1] "seed 23828 for j=71 out of 250 (i.e. j=9821 in [9751;10000], as job id is i=40)"
[1] "seed 59406 for j=72 out of 250 (i.e. j=9822 in [9751;10000], as job id is i=40)"
[1] "seed 72363 for j=73 out of 250 (i.e. j=9823 in [9751;10000], as job id is i=40)"
[1] "seed 25510 for j=74 out of 250 (i.e. j=9824 in [9751;10000], as job id is i=40)"
[1] "seed 75961 for j=75 out of 250 (i.e. j=9825 in [9751;10000], as job id is i=40)"
[1] "seed 94371 for j=76 out of 250 (i.e. j=9826 in [9751;10000], as job id is i=40)"
[1] "seed 84549 for j=77 out of 250 (i.e. j=9827 in [9751;10000], as job id is i=40)"
[1] "seed 7901 for j=78 out of 250 (i.e. j=9828 in [9751;10000], as job id is i=40)"
[1] "seed 27365 for j=79 out of 250 (i.e. j=9829 in [9751;10000], as job id is i=40)"
[1] "seed 2005 for j=80 out of 250 (i.e. j=9830 in [9751;10000], as job id is i=40)"
[1] "seed 31590 for j=81 out of 250 (i.e. j=9831 in [9751;10000], as job id is i=40)"
[1] "seed 28058 for j=82 out of 250 (i.e. j=9832 in [9751;10000], as job id is i=40)"
[1] "seed 47576 for j=83 out of 250 (i.e. j=9833 in [9751;10000], as job id is i=40)"
[1] "seed 29817 for j=84 out of 250 (i.e. j=9834 in [9751;10000], as job id is i=40)"
[1] "seed 26055 for j=85 out of 250 (i.e. j=9835 in [9751;10000], as job id is i=40)"
[1] "seed 74787 for j=86 out of 250 (i.e. j=9836 in [9751;10000], as job id is i=40)"
[1] "seed 14148 for j=87 out of 250 (i.e. j=9837 in [9751;10000], as job id is i=40)"
[1] "seed 77245 for j=88 out of 250 (i.e. j=9838 in [9751;10000], as job id is i=40)"
[1] "seed 17806 for j=89 out of 250 (i.e. j=9839 in [9751;10000], as job id is i=40)"
[1] "seed 12505 for j=90 out of 250 (i.e. j=9840 in [9751;10000], as job id is i=40)"
[1] "seed 9832 for j=91 out of 250 (i.e. j=9841 in [9751;10000], as job id is i=40)"
[1] "seed 46831 for j=92 out of 250 (i.e. j=9842 in [9751;10000], as job id is i=40)"
[1] "seed 64086 for j=93 out of 250 (i.e. j=9843 in [9751;10000], as job id is i=40)"
[1] "seed 45627 for j=94 out of 250 (i.e. j=9844 in [9751;10000], as job id is i=40)"
[1] "seed 48132 for j=95 out of 250 (i.e. j=9845 in [9751;10000], as job id is i=40)"
[1] "seed 74784 for j=96 out of 250 (i.e. j=9846 in [9751;10000], as job id is i=40)"
[1] "seed 52676 for j=97 out of 250 (i.e. j=9847 in [9751;10000], as job id is i=40)"
[1] "seed 51782 for j=98 out of 250 (i.e. j=9848 in [9751;10000], as job id is i=40)"
[1] "seed 47516 for j=99 out of 250 (i.e. j=9849 in [9751;10000], as job id is i=40)"
[1] "seed 43190 for j=100 out of 250 (i.e. j=9850 in [9751;10000], as job id is i=40)"
[1] "seed 76819 for j=101 out of 250 (i.e. j=9851 in [9751;10000], as job id is i=40)"
[1] "seed 14674 for j=102 out of 250 (i.e. j=9852 in [9751;10000], as job id is i=40)"
[1] "seed 81739 for j=103 out of 250 (i.e. j=9853 in [9751;10000], as job id is i=40)"
[1] "seed 79140 for j=104 out of 250 (i.e. j=9854 in [9751;10000], as job id is i=40)"
[1] "seed 28342 for j=105 out of 250 (i.e. j=9855 in [9751;10000], as job id is i=40)"
[1] "seed 88369 for j=106 out of 250 (i.e. j=9856 in [9751;10000], as job id is i=40)"
[1] "seed 83130 for j=107 out of 250 (i.e. j=9857 in [9751;10000], as job id is i=40)"
[1] "seed 36520 for j=108 out of 250 (i.e. j=9858 in [9751;10000], as job id is i=40)"
[1] "seed 70065 for j=109 out of 250 (i.e. j=9859 in [9751;10000], as job id is i=40)"
[1] "seed 80231 for j=110 out of 250 (i.e. j=9860 in [9751;10000], as job id is i=40)"
[1] "seed 60127 for j=111 out of 250 (i.e. j=9861 in [9751;10000], as job id is i=40)"
[1] "seed 87940 for j=112 out of 250 (i.e. j=9862 in [9751;10000], as job id is i=40)"
[1] "seed 54869 for j=113 out of 250 (i.e. j=9863 in [9751;10000], as job id is i=40)"
[1] "seed 87791 for j=114 out of 250 (i.e. j=9864 in [9751;10000], as job id is i=40)"
[1] "seed 39133 for j=115 out of 250 (i.e. j=9865 in [9751;10000], as job id is i=40)"
[1] "seed 25371 for j=116 out of 250 (i.e. j=9866 in [9751;10000], as job id is i=40)"
[1] "seed 98271 for j=117 out of 250 (i.e. j=9867 in [9751;10000], as job id is i=40)"
[1] "seed 2053 for j=118 out of 250 (i.e. j=9868 in [9751;10000], as job id is i=40)"
[1] "seed 27199 for j=119 out of 250 (i.e. j=9869 in [9751;10000], as job id is i=40)"
[1] "seed 66465 for j=120 out of 250 (i.e. j=9870 in [9751;10000], as job id is i=40)"
[1] "seed 13371 for j=121 out of 250 (i.e. j=9871 in [9751;10000], as job id is i=40)"
[1] "seed 64139 for j=122 out of 250 (i.e. j=9872 in [9751;10000], as job id is i=40)"
[1] "seed 67062 for j=123 out of 250 (i.e. j=9873 in [9751;10000], as job id is i=40)"
[1] "seed 93735 for j=124 out of 250 (i.e. j=9874 in [9751;10000], as job id is i=40)"
[1] "seed 22330 for j=125 out of 250 (i.e. j=9875 in [9751;10000], as job id is i=40)"
[1] "seed 58872 for j=126 out of 250 (i.e. j=9876 in [9751;10000], as job id is i=40)"
[1] "seed 63079 for j=127 out of 250 (i.e. j=9877 in [9751;10000], as job id is i=40)"
[1] "seed 95038 for j=128 out of 250 (i.e. j=9878 in [9751;10000], as job id is i=40)"
[1] "seed 68501 for j=129 out of 250 (i.e. j=9879 in [9751;10000], as job id is i=40)"
[1] "seed 94330 for j=130 out of 250 (i.e. j=9880 in [9751;10000], as job id is i=40)"
[1] "seed 58229 for j=131 out of 250 (i.e. j=9881 in [9751;10000], as job id is i=40)"
[1] "seed 41389 for j=132 out of 250 (i.e. j=9882 in [9751;10000], as job id is i=40)"
[1] "seed 83957 for j=133 out of 250 (i.e. j=9883 in [9751;10000], as job id is i=40)"
[1] "seed 82739 for j=134 out of 250 (i.e. j=9884 in [9751;10000], as job id is i=40)"
[1] "seed 74857 for j=135 out of 250 (i.e. j=9885 in [9751;10000], as job id is i=40)"
[1] "seed 17700 for j=136 out of 250 (i.e. j=9886 in [9751;10000], as job id is i=40)"
[1] "seed 12778 for j=137 out of 250 (i.e. j=9887 in [9751;10000], as job id is i=40)"
[1] "seed 22872 for j=138 out of 250 (i.e. j=9888 in [9751;10000], as job id is i=40)"
[1] "seed 49395 for j=139 out of 250 (i.e. j=9889 in [9751;10000], as job id is i=40)"
[1] "seed 74473 for j=140 out of 250 (i.e. j=9890 in [9751;10000], as job id is i=40)"
[1] "seed 91546 for j=141 out of 250 (i.e. j=9891 in [9751;10000], as job id is i=40)"
[1] "seed 9708 for j=142 out of 250 (i.e. j=9892 in [9751;10000], as job id is i=40)"
[1] "seed 1026 for j=143 out of 250 (i.e. j=9893 in [9751;10000], as job id is i=40)"
[1] "seed 35185 for j=144 out of 250 (i.e. j=9894 in [9751;10000], as job id is i=40)"
[1] "seed 69309 for j=145 out of 250 (i.e. j=9895 in [9751;10000], as job id is i=40)"
[1] "seed 98606 for j=146 out of 250 (i.e. j=9896 in [9751;10000], as job id is i=40)"
[1] "seed 93975 for j=147 out of 250 (i.e. j=9897 in [9751;10000], as job id is i=40)"
[1] "seed 57244 for j=148 out of 250 (i.e. j=9898 in [9751;10000], as job id is i=40)"
[1] "seed 476 for j=149 out of 250 (i.e. j=9899 in [9751;10000], as job id is i=40)"
[1] "seed 89298 for j=150 out of 250 (i.e. j=9900 in [9751;10000], as job id is i=40)"
[1] "seed 82699 for j=151 out of 250 (i.e. j=9901 in [9751;10000], as job id is i=40)"
[1] "seed 49585 for j=152 out of 250 (i.e. j=9902 in [9751;10000], as job id is i=40)"
[1] "seed 47021 for j=153 out of 250 (i.e. j=9903 in [9751;10000], as job id is i=40)"
[1] "seed 60239 for j=154 out of 250 (i.e. j=9904 in [9751;10000], as job id is i=40)"
[1] "seed 28657 for j=155 out of 250 (i.e. j=9905 in [9751;10000], as job id is i=40)"
[1] "seed 6396 for j=156 out of 250 (i.e. j=9906 in [9751;10000], as job id is i=40)"
[1] "seed 27601 for j=157 out of 250 (i.e. j=9907 in [9751;10000], as job id is i=40)"
[1] "seed 31641 for j=158 out of 250 (i.e. j=9908 in [9751;10000], as job id is i=40)"
[1] "seed 36451 for j=159 out of 250 (i.e. j=9909 in [9751;10000], as job id is i=40)"
[1] "seed 29125 for j=160 out of 250 (i.e. j=9910 in [9751;10000], as job id is i=40)"
[1] "seed 72261 for j=161 out of 250 (i.e. j=9911 in [9751;10000], as job id is i=40)"
[1] "seed 33821 for j=162 out of 250 (i.e. j=9912 in [9751;10000], as job id is i=40)"
[1] "seed 47402 for j=163 out of 250 (i.e. j=9913 in [9751;10000], as job id is i=40)"
[1] "seed 67094 for j=164 out of 250 (i.e. j=9914 in [9751;10000], as job id is i=40)"
[1] "seed 64103 for j=165 out of 250 (i.e. j=9915 in [9751;10000], as job id is i=40)"
[1] "seed 99791 for j=166 out of 250 (i.e. j=9916 in [9751;10000], as job id is i=40)"
[1] "seed 4941 for j=167 out of 250 (i.e. j=9917 in [9751;10000], as job id is i=40)"
[1] "seed 88718 for j=168 out of 250 (i.e. j=9918 in [9751;10000], as job id is i=40)"
[1] "seed 27815 for j=169 out of 250 (i.e. j=9919 in [9751;10000], as job id is i=40)"
[1] "seed 58729 for j=170 out of 250 (i.e. j=9920 in [9751;10000], as job id is i=40)"
[1] "seed 81658 for j=171 out of 250 (i.e. j=9921 in [9751;10000], as job id is i=40)"
[1] "seed 26783 for j=172 out of 250 (i.e. j=9922 in [9751;10000], as job id is i=40)"
[1] "seed 15226 for j=173 out of 250 (i.e. j=9923 in [9751;10000], as job id is i=40)"
[1] "seed 82112 for j=174 out of 250 (i.e. j=9924 in [9751;10000], as job id is i=40)"
[1] "seed 9949 for j=175 out of 250 (i.e. j=9925 in [9751;10000], as job id is i=40)"
[1] "seed 4901 for j=176 out of 250 (i.e. j=9926 in [9751;10000], as job id is i=40)"
[1] "seed 88861 for j=177 out of 250 (i.e. j=9927 in [9751;10000], as job id is i=40)"
[1] "seed 96674 for j=178 out of 250 (i.e. j=9928 in [9751;10000], as job id is i=40)"
[1] "seed 91193 for j=179 out of 250 (i.e. j=9929 in [9751;10000], as job id is i=40)"
[1] "seed 17211 for j=180 out of 250 (i.e. j=9930 in [9751;10000], as job id is i=40)"
[1] "seed 68218 for j=181 out of 250 (i.e. j=9931 in [9751;10000], as job id is i=40)"
[1] "seed 63886 for j=182 out of 250 (i.e. j=9932 in [9751;10000], as job id is i=40)"
[1] "seed 29705 for j=183 out of 250 (i.e. j=9933 in [9751;10000], as job id is i=40)"
[1] "seed 70352 for j=184 out of 250 (i.e. j=9934 in [9751;10000], as job id is i=40)"
[1] "seed 51309 for j=185 out of 250 (i.e. j=9935 in [9751;10000], as job id is i=40)"
[1] "seed 45988 for j=186 out of 250 (i.e. j=9936 in [9751;10000], as job id is i=40)"
[1] "seed 22587 for j=187 out of 250 (i.e. j=9937 in [9751;10000], as job id is i=40)"
[1] "seed 13645 for j=188 out of 250 (i.e. j=9938 in [9751;10000], as job id is i=40)"
[1] "seed 3280 for j=189 out of 250 (i.e. j=9939 in [9751;10000], as job id is i=40)"
[1] "seed 93078 for j=190 out of 250 (i.e. j=9940 in [9751;10000], as job id is i=40)"
[1] "seed 19003 for j=191 out of 250 (i.e. j=9941 in [9751;10000], as job id is i=40)"
[1] "seed 87921 for j=192 out of 250 (i.e. j=9942 in [9751;10000], as job id is i=40)"
[1] "seed 34304 for j=193 out of 250 (i.e. j=9943 in [9751;10000], as job id is i=40)"
[1] "seed 75834 for j=194 out of 250 (i.e. j=9944 in [9751;10000], as job id is i=40)"
[1] "seed 81393 for j=195 out of 250 (i.e. j=9945 in [9751;10000], as job id is i=40)"
[1] "seed 247 for j=196 out of 250 (i.e. j=9946 in [9751;10000], as job id is i=40)"
[1] "seed 25818 for j=197 out of 250 (i.e. j=9947 in [9751;10000], as job id is i=40)"
[1] "seed 66523 for j=198 out of 250 (i.e. j=9948 in [9751;10000], as job id is i=40)"
[1] "seed 41137 for j=199 out of 250 (i.e. j=9949 in [9751;10000], as job id is i=40)"
[1] "seed 56562 for j=200 out of 250 (i.e. j=9950 in [9751;10000], as job id is i=40)"
[1] "seed 60024 for j=201 out of 250 (i.e. j=9951 in [9751;10000], as job id is i=40)"
[1] "seed 98803 for j=202 out of 250 (i.e. j=9952 in [9751;10000], as job id is i=40)"
[1] "seed 75885 for j=203 out of 250 (i.e. j=9953 in [9751;10000], as job id is i=40)"
[1] "seed 84638 for j=204 out of 250 (i.e. j=9954 in [9751;10000], as job id is i=40)"
[1] "seed 13508 for j=205 out of 250 (i.e. j=9955 in [9751;10000], as job id is i=40)"
[1] "seed 77778 for j=206 out of 250 (i.e. j=9956 in [9751;10000], as job id is i=40)"
[1] "seed 91262 for j=207 out of 250 (i.e. j=9957 in [9751;10000], as job id is i=40)"
[1] "seed 2530 for j=208 out of 250 (i.e. j=9958 in [9751;10000], as job id is i=40)"
[1] "seed 66837 for j=209 out of 250 (i.e. j=9959 in [9751;10000], as job id is i=40)"
[1] "seed 30868 for j=210 out of 250 (i.e. j=9960 in [9751;10000], as job id is i=40)"
[1] "seed 25110 for j=211 out of 250 (i.e. j=9961 in [9751;10000], as job id is i=40)"
[1] "seed 61994 for j=212 out of 250 (i.e. j=9962 in [9751;10000], as job id is i=40)"
[1] "seed 2715 for j=213 out of 250 (i.e. j=9963 in [9751;10000], as job id is i=40)"
[1] "seed 73827 for j=214 out of 250 (i.e. j=9964 in [9751;10000], as job id is i=40)"
[1] "seed 8652 for j=215 out of 250 (i.e. j=9965 in [9751;10000], as job id is i=40)"
[1] "seed 98805 for j=216 out of 250 (i.e. j=9966 in [9751;10000], as job id is i=40)"
[1] "seed 17399 for j=217 out of 250 (i.e. j=9967 in [9751;10000], as job id is i=40)"
[1] "seed 12669 for j=218 out of 250 (i.e. j=9968 in [9751;10000], as job id is i=40)"
[1] "seed 89951 for j=219 out of 250 (i.e. j=9969 in [9751;10000], as job id is i=40)"
[1] "seed 35344 for j=220 out of 250 (i.e. j=9970 in [9751;10000], as job id is i=40)"
[1] "seed 90792 for j=221 out of 250 (i.e. j=9971 in [9751;10000], as job id is i=40)"
[1] "seed 41303 for j=222 out of 250 (i.e. j=9972 in [9751;10000], as job id is i=40)"
[1] "seed 64861 for j=223 out of 250 (i.e. j=9973 in [9751;10000], as job id is i=40)"
[1] "seed 50721 for j=224 out of 250 (i.e. j=9974 in [9751;10000], as job id is i=40)"
[1] "seed 8172 for j=225 out of 250 (i.e. j=9975 in [9751;10000], as job id is i=40)"
[1] "seed 26143 for j=226 out of 250 (i.e. j=9976 in [9751;10000], as job id is i=40)"
[1] "seed 3345 for j=227 out of 250 (i.e. j=9977 in [9751;10000], as job id is i=40)"
[1] "seed 29132 for j=228 out of 250 (i.e. j=9978 in [9751;10000], as job id is i=40)"
[1] "seed 59177 for j=229 out of 250 (i.e. j=9979 in [9751;10000], as job id is i=40)"
[1] "seed 60610 for j=230 out of 250 (i.e. j=9980 in [9751;10000], as job id is i=40)"
[1] "seed 85949 for j=231 out of 250 (i.e. j=9981 in [9751;10000], as job id is i=40)"
[1] "seed 86040 for j=232 out of 250 (i.e. j=9982 in [9751;10000], as job id is i=40)"
[1] "seed 28213 for j=233 out of 250 (i.e. j=9983 in [9751;10000], as job id is i=40)"
[1] "seed 38644 for j=234 out of 250 (i.e. j=9984 in [9751;10000], as job id is i=40)"
[1] "seed 72390 for j=235 out of 250 (i.e. j=9985 in [9751;10000], as job id is i=40)"
[1] "seed 78204 for j=236 out of 250 (i.e. j=9986 in [9751;10000], as job id is i=40)"
[1] "seed 84284 for j=237 out of 250 (i.e. j=9987 in [9751;10000], as job id is i=40)"
[1] "seed 78181 for j=238 out of 250 (i.e. j=9988 in [9751;10000], as job id is i=40)"
[1] "seed 62730 for j=239 out of 250 (i.e. j=9989 in [9751;10000], as job id is i=40)"
[1] "seed 12711 for j=240 out of 250 (i.e. j=9990 in [9751;10000], as job id is i=40)"
[1] "seed 47951 for j=241 out of 250 (i.e. j=9991 in [9751;10000], as job id is i=40)"
[1] "seed 57873 for j=242 out of 250 (i.e. j=9992 in [9751;10000], as job id is i=40)"
[1] "seed 60090 for j=243 out of 250 (i.e. j=9993 in [9751;10000], as job id is i=40)"
[1] "seed 1316 for j=244 out of 250 (i.e. j=9994 in [9751;10000], as job id is i=40)"
[1] "seed 21645 for j=245 out of 250 (i.e. j=9995 in [9751;10000], as job id is i=40)"
[1] "seed 62563 for j=246 out of 250 (i.e. j=9996 in [9751;10000], as job id is i=40)"
[1] "seed 2422 for j=247 out of 250 (i.e. j=9997 in [9751;10000], as job id is i=40)"
[1] "seed 12334 for j=248 out of 250 (i.e. j=9998 in [9751;10000], as job id is i=40)"
[1] "seed 589 for j=249 out of 250 (i.e. j=9999 in [9751;10000], as job id is i=40)"
[1] "seed 23124 for j=250 out of 250 (i.e. j=10000 in [9751;10000], as job id is i=40)"
There were 20 warnings (use warnings() to see them)
> rownames(RES) <- NULL
> save(RES,file=paste0(path.res,name,"-",iter_sim,".rda"))
> 
> ## * Summary results
> sessionInfo()
R version 4.1.2 (2021-11-01)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Red Hat Enterprise Linux 8.5 (Ootpa)

Matrix products: default
BLAS:   /opt/software/R/4.1.2/lib64/R/lib/libRblas.so
LAPACK: /opt/software/R/4.1.2/lib64/R/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] mvtnorm_1.1-3    DelayedGSD_0.0.3

loaded via a namespace (and not attached):
 [1] BB_2019.10-1     magrittr_2.0.3   tidyselect_1.1.2 munsell_0.5.0   
 [5] lattice_0.20-45  colorspace_2.0-3 xtable_1.8-4     R6_2.5.1        
 [9] quadprog_1.5-8   rlang_1.0.3      fansi_1.0.3      dplyr_1.0.9     
[13] grid_4.1.2       nlme_3.1-153     gtable_0.3.0     gsDesign_3.3.0  
[17] utf8_1.2.2       cli_3.3.0        ellipsis_0.3.2   tibble_3.1.7    
[21] lifecycle_1.0.1  crayon_1.5.1     purrr_0.3.4      ggplot2_3.3.6   
[25] tidyr_1.2.0      vctrs_0.4.1      glue_1.6.2       compiler_4.1.2  
[29] pillar_1.7.0     generics_0.1.3   scales_1.2.0     pkgconfig_2.0.3 
> summary(RES)
     method        stage           type             statistic     
 Min.   :1.0   Min.   :1.000   Length:1500        Min.   :0.0124  
 1st Qu.:1.0   1st Qu.:1.000   Class :character   1st Qu.:1.5956  
 Median :1.5   Median :1.000   Mode  :character   Median :2.4072  
 Mean   :1.5   Mean   :1.333                      Mean   :2.2569  
 3rd Qu.:2.0   3rd Qu.:2.000                      3rd Qu.:2.9334  
 Max.   :2.0   Max.   :2.000                      Max.   :5.3111  
                                                  NA's   :500     
  estimate_ML          se_ML             info           infoPC      
 Min.   :-0.2321   Min.   :0.3468   Min.   :4.185   Min.   :0.3270  
 1st Qu.: 0.5497   1st Qu.:0.3843   1st Qu.:5.743   1st Qu.:0.4488  
 Median : 0.8267   Median :0.4017   Median :6.293   Median :0.4917  
 Mean   : 0.8069   Mean   :0.4031   Mean   :6.308   Mean   :0.4929  
 3rd Qu.: 1.0851   3rd Qu.:0.4190   3rd Qu.:6.823   3rd Qu.:0.5331  
 Max.   : 1.9656   Max.   :0.4888   Max.   :8.766   Max.   :0.6850  
 NA's   :500       NA's   :1000     NA's   :190     NA's   :190     
   info.pred      infoPC.pred           uk              lk         
 Min.   :4.399   Min.   :0.3437   Min.   :2.306   Min.   :-0.3894  
 1st Qu.:6.019   1st Qu.:0.4704   1st Qu.:2.457   1st Qu.: 0.1542  
 Median :6.616   Median :0.5170   Median :2.520   Median : 0.3160  
 Mean   :6.620   Mean   :0.5173   Mean   :2.521   Mean   : 0.3170  
 3rd Qu.:7.157   3rd Qu.:0.5592   3rd Qu.:2.579   3rd Qu.: 0.4920  
 Max.   :8.746   Max.   :0.6834   Max.   :2.785   Max.   : 0.9311  
 NA's   :1000    NA's   :1000     NA's   :1000    NA's   :1000     
   decision            reason            p.value_ML        lower_ML      
 Length:1500        Length:1500        Min.   :0.0000   Min.   :-0.9277  
 Class :character   Class :character   1st Qu.:0.0017   1st Qu.:-0.0538  
 Mode  :character   Mode  :character   Median :0.0079   Median : 0.1370  
                                       Mean   :0.0773   Mean   : 0.1014  
                                       3rd Qu.:0.0390   3rd Qu.: 0.3109  
                                       Max.   :0.9901   Max.   : 1.0709  
                                       NA's   :1000     NA's   :1000     
    upper_ML       p.value_MUE       lower_MUE         upper_MUE     
 Min.   :0.8234   Min.   :0.0000   Min.   :-0.9731   Min.   :0.8449  
 1st Qu.:1.2208   1st Qu.:0.0022   1st Qu.:-0.0604   1st Qu.:1.2202  
 Median :1.5000   Median :0.0071   Median : 0.0792   Median :1.4733  
 Mean   :1.5596   Mean   :0.0430   Mean   : 0.0759   Mean   :1.5676  
 3rd Qu.:1.9023   3rd Qu.:0.0214   3rd Qu.: 0.2310   3rd Qu.:1.9357  
 Max.   :2.8528   Max.   :0.6761   Max.   : 1.4471   Max.   :2.8477  
 NA's   :1000     NA's   :1000     NA's   :1000      NA's   :1000    
  estimate_MUE           ck          time.interim        seed      
 Min.   :-0.0455   Min.   :0.1919   Min.   :533.0   Min.   :  247  
 1st Qu.: 0.5911   1st Qu.:1.4003   1st Qu.:583.0   1st Qu.:25818  
 Median : 0.8122   Median :1.4561   Median :602.0   Median :50153  
 Mean   : 0.8343   Mean   :1.4196   Mean   :601.8   Mean   :50259  
 3rd Qu.: 1.0948   3rd Qu.:1.5134   3rd Qu.:622.0   3rd Qu.:75961  
 Max.   : 2.0442   Max.   :1.6488   Max.   :667.0   Max.   :99791  
 NA's   :1000      NA's   :690                                     
  nX1.interim     nX2.interim     nX3.interim    computation.time
 Min.   :145.0   Min.   :130.0   Min.   :121.0   Min.   :0.689   
 1st Qu.:147.0   1st Qu.:135.0   1st Qu.:125.0   1st Qu.:0.936   
 Median :149.0   Median :136.0   Median :127.0   Median :1.014   
 Mean   :148.7   Mean   :136.4   Mean   :126.9   Mean   :1.037   
 3rd Qu.:150.0   3rd Qu.:138.0   3rd Qu.:129.0   3rd Qu.:1.134   
 Max.   :155.0   Max.   :144.0   Max.   :134.0   Max.   :3.607   
                                                                 
> 
> #----------------------------------------------------------------------
> ### BATCH_simuMain.R ends here
> 
> proc.time()
   user  system elapsed 
262.070   0.446 272.713 
