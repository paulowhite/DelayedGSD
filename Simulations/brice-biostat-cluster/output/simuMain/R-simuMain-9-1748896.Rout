
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### BATCH_simuMain.R --- 
> #----------------------------------------------------------------------
> ## Author: Paul Blanche
> ## Created: Mar  5 2021 (10:56) 
> ## Version: 
> ## Last-Updated: jul  7 2022 (13:56) 
> ##           By: Brice Ozenne
> ##     Update #: 518
> #----------------------------------------------------------------------
> ## 
> ### Commentary: 
> ## 
> ### Change Log:
> #----------------------------------------------------------------------
> ## 
> ### Code:
> 
> ## ** BATCH loop
> ## cd /projects/biostat01/people/hpl802/DelayedGSD/
> ## for ITER in `seq 1 10`;
> ## do
> ## eval 'R CMD BATCH --vanilla "--args iter_sim='$ITER' n.iter_sim=10" BATCH_simuMain.R output/R-simuMain-'$ITER'.Rout &'
> ## done
> 
> ## [1] 1186669
> ## [2] 1186670
> ## [3] 1186671
> ## [4] 1186672
> ## [5] 1186673
> ## [6] 1186674
> ## [7] 1186675
> ## [8] 1186676
> ## [9] 1186677
> ## [10] 1186678
> 
> rm(list=ls())
>                                    # {{{ parameters
> ## * parameters
> name <- "ScenarioName" # To save the results
> method <- 1:2 # methods used to compute the boundaries
>                                         #---
> myseed <- 140786598
>                                         #--- to plan the trial ----
> NMC <- 250 # number of sequential simulations to run in parallel. Eg. with 250, then we can run 40 scripts in paralell to get N=10,000 runs in total.
> kMax <- 2  #max number of analyses (including final)
> alpha <- 0.025  #type I error (one sided)
> beta <- 0.2  #type II error
> informationRates <- c(0.5,1)  #planned  information rates
> rho_alpha <- 2  # rho parameter for alpha error spending function
> rho_beta <- 2  # rho parameter for beta error spending function
> ## deltaPower <- 0.75 # just to try another value when Id > Imax
> Id <- 0.55  #(expected) information rate at each decision analysis
> binding <- TRUE
>                                         #
>                                         #---- to generate data -----------
>                                         #
> block <- c(1,1,0,0) 
> allsd <- c(2.5,2.1,2.4) # sd, first from baseline measurement, then the two changes from baseline
> mean0 <- c(10,0,0) # mean placebo group (again, first is absolute value, then change from baseline)
> delta <- c(0,0.6,0.8) # treatment effect
> ar <- (0.86*2)*2 # orginial accrual rate from data from Corine is 0.86 per week, hence we multiply by 2 for by 14 days. As to low, we further multiply by 2
> cor011 <- -0.15 # ~ from data from Corine
> corij1 <- 0.68  # ~ from data from Corine
> cor0j1 <- -0.27  # ~ from data from Corine
> Miss11 <- 5/104 # miss both V1 and V2
> Miss12 <- 1/104 # miss V1 and but not V2
> Miss21 <- 6/104 # do not miss V1 and but miss V2
> Miss22 <- 92/104 # miss none
> PropForInterim <- 0.5 # Decide to have interim analysiz when PropForInterim % of all subjects have had the chance to have one follow-up measuement recorded in the data to be available for analysis.
> theDelta.t <- 1.50001 # time lag to process the data and make them ready to analyze after collecting them (unit is time between two follow-up visits)
> TimeFactor <- 14 ## number of days between two visits
>                                         #
>                                         #--- actually for both planing the trial  and generating data-----
>                                         #
>                                         #
> deltaPower <- abs(delta[3]) # effect (NOT Z-scale/unit, but outcome scale/unit!) that the study is powered for: should we choose ourselves or compute from other numbers above ???
> n <- ceiling(2*2*((allsd[3]/deltaPower)^2)*(qnorm(1-beta)-qnorm(alpha))^2) #104 with Corine's data # should we choose ourselves or compute from the above numbers ???
>                                         # inflate SS as required for interim
> 
>                                         # {{{ Set seeds for parallel computing and reproducibility
> ## * Seed
> args <- commandArgs(TRUE) ## BATCH MODE
> if(length(args)>0){
+     for (arg in args){
+         eval(parse(text=arg))
+     }
+ }else{ ## SLUMR
+     iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_ID"))
+     n.iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_COUNT"))
+ } ## interactive
> if(is.na(iter_sim)){iter_sim <- 1}
> if(is.na(n.iter_sim)){n.iter_sim <- 40}
> 
> set.seed(140786598)
> allseeds <- sample.int(n = 10*n.iter_sim*NMC, size = n.iter_sim*NMC, replace=FALSE) #x=1:(.Machine$integer.max) seems to be maximal possible
> # }}}
> 
> # {{{ set path to load and save and othe machine specific variables
> ## * path
> path <- "."
> path.res <- file.path(path,"Results","simuMain")
> if(dir.exists(path.res)==FALSE){
+     if(dir.exists(file.path(path,"Results"))==FALSE){
+     dir.create(file.path(path,"Results"))
+     }
+     dir.create(path.res)
+ }
> path.output <- file.path(path,"output","simuMain")
> if(dir.exists(path.output)==FALSE){
+     if(dir.exists(file.path(path,"output"))==FALSE){
+     dir.create(file.path(path,"output"))
+     }
+     dir.create(path.output)
+ }
> # }}}
> 
> 
> ## * libraries and functions
> library(DelayedGSD)
DelayedGSD version 0.0.3
> ## sourceDir <- function(path, trace = TRUE, ...) {
> ##     for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
> ##         if(trace) cat(nm,":")
> ##         source(file.path(path, nm), ...)
> ##         if(trace) cat("\n")
> ##     }
> ## }
> ## sourceDir(pathToLoad)
>     
> 
> ## * Compute inflation factor and sample size
> plannedB <- vector(mode = "list", length = 3)
> for(iMeth in method){ ## iMeth <- 1
+     plannedB[[iMeth]] <- CalcBoundaries(kMax=kMax,  
+                                         alpha=alpha, 
+                                         beta=beta,  
+                                         InfoR.i=informationRates,  
+                                         InfoR.d=c(Id,1),  
+                                         rho_alpha=rho_alpha,  
+                                         rho_beta=rho_beta,  
+                                         method=iMeth,  
+                                         cNotBelowFixedc=FALSE,
+                                         bindingFutility=binding,
+                                         delta=tail(delta,1))
+     ## summary(plannedB[[1]])
+     ## coef(plannedB[[iMeth]], type = "information")
+ }
Loading required namespace: gsDesign
Loading required package: mvtnorm
Loading required namespace: BB
> inflationFactor <- unlist(lapply(plannedB,function(iP){iP$planned$InflationFactor}))
> nGSD <- ceiling(n*inflationFactor)
> ##  plot(plannedB[[1]])
> 
> #
> # --- just to check---
> ## n
> ## InfoFixed <- ((qnorm(1-beta)-qnorm(alpha))/(deltaPower))^2
> ## InfoFixed
> ## n/(4*(allsd[3])^2)
> #---
> # }}}
> 
> 
> 
> 
> # {{{ technical details to loop
> RES <- NULL # initialize results to save
> allj <- ((iter_sim-1)*NMC + 1):(iter_sim*NMC) # indices of all iterations (replicates) for this job, accountng for the other jobs running in parallel
> # }}}
> 
> ## * Loop
> for(j in allj){ ## j <- 51 ## 5
+     startComp <- Sys.time()
+     myseedi <- allseeds[j]
+     # {{{ TRACE info (e.g. to check the Rout)
+     print(paste0("seed ",myseedi," for ","j=",which(j==allj)," out of ",NMC, " (i.e. j=",j," in [",(iter_sim-1)*NMC + 1,";",iter_sim*NMC,"], as job id is i=",iter_sim,")"))
+     # }}}
+     # {{{ Missing probabilities
+     MyMissProb <- matrix(c(Miss11,Miss12,Miss21,Miss22),ncol=2,nrow=2,byrow=TRUE) # to additionnally remove 1 more because some FASFL=N
+     colnames(MyMissProb) <- c("V2 missing","V2 not missing")
+     rownames(MyMissProb) <- c("V1 missing","V1 not missing")
+     # }}}
+ 
+                                         # {{{ generate data
+     ## ** simulate
+     res <- GenData(n=n, 
+                    N.fw=2,
+                    rand.block=block,
+                    allsd=allsd,
+                    mean0=mean0,
+                    delta=delta,
+                    ar=ar,
+                    cor.01.1=cor011,
+                    cor.ij.1=corij1,
+                    cor.0j.1=cor0j1,
+                    seed=myseedi,
+                    MissProb=MyMissProb,
+                    DigitsOutcome=2,
+                    TimeFactor=TimeFactor,
+                    DigitsTime=0
+                    )
+     d <- res$d
+     ## head(d,n=20)
+                                         # }}}
+                                         # {{{ reformat data like those of Corine
+     ## Make data long format
+     ## dd <- FormatAsCase(d)
+     ## head(dd)
+     ## summary(dd)
+                                         # }}}
+    
+                                         # {{{ make data available at interim
+                                         # Here we stop inclusion data collection for the interim analysis as soon as
+                                         # half of the participants have completed (or had the opportunity to complete) the follow-up 
+     thet <- d$t3[ceiling(n*PropForInterim)]
+     di <- SelectData(d,t=thet)
+     ## ddi <- FormatAsCase(di) # needed ????
+     ## head(d[d$id==52,])
+                                         # }}}
+     ## {{{ analyze data at at interim
+     ## ** interim
+     lmmI <- analyzeData(di, ddf = "nlme", data.decision = sum(d$t1 <= thet + theDelta.t*TimeFactor), getinfo = TRUE, trace = TRUE)
+     ## lmmI <- analyzeData(di, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     currentGSD <- vector(mode = "list", length = 3)
+     out.interim <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+ 
+         currentGSD[[iMeth]] <- update(plannedB[[iMeth]], delta = lmmI, trace = FALSE)
+ 
+         iConfint.interim <- confint(currentGSD[[iMeth]])
+         iInfo.interim <- coef(currentGSD[[iMeth]], type = "information")
+         iBoundary.interim <- coef(currentGSD[[iMeth]], type = "boundary")
+         iDecision.interim <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+         out.interim[[iMeth]] <-  data.frame(statistic = iConfint.interim[1,"statistic"],
+                                             estimate_ML = iConfint.interim[1,"estimate"],
+                                             se_ML = iConfint.interim[1,"se"],
+                                             info = iInfo.interim[1,"Interim"],
+                                             infoPC = iInfo.interim[1,"Interim.pc"],
+                                             info.pred = iInfo.interim[1,"Decision"],
+                                             infoPC.pred = iInfo.interim[1,"Decision.pc"],
+                                             uk = iBoundary.interim[1,"Ebound"],
+                                             lk = iBoundary.interim[1,"Fbound"],
+                                             decision = iDecision.interim["decision","stage 1"],
+                                             reason = iDecision.interim["reason.interim","stage 1"])
+     }
+     ## currentGSD[[1]]
+     ## plot(currentGSD[[1]])
+ 
+     ## ** decision
+     dDecision <- d[which(d$t1 <= thet + theDelta.t*TimeFactor),]
+     lmmD <- analyzeData(dDecision, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+     
+     out.decision <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+           
+         if(out.interim[[iMeth]]$decision == "stop"){
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, trace = FALSE)
+             ## plot(currentGSD[[iMeth]])
+ 
+             iConfint.decision <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.decision  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = iConfint.decision[1,"statistic"],
+                                                 p.value_ML = iConfint.decision[iConfint.decision$method == "ML","p.value"],
+                                                 lower_ML = iConfint.decision[iConfint.decision$method == "ML","lower"],
+                                                 upper_ML = iConfint.decision[iConfint.decision$method == "ML","upper"],
+                                                 estimate_ML = iConfint.decision[iConfint.decision$method == "ML","estimate"],
+                                                 p.value_MUE = iConfint.decision[iConfint.decision$method == "MUE","p.value"],
+                                                 lower_MUE = iConfint.decision[iConfint.decision$method == "MUE","lower"],
+                                                 upper_MUE = iConfint.decision[iConfint.decision$method == "MUE","upper"],
+                                                 estimate_MUE = iConfint.decision[iConfint.decision$method == "MUE","estimate"],
+                                                 info = iInfo.decision[1,"Interim"],
+                                                 infoPC = iInfo.decision[1,"Interim.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = unname(iDecision.decision["decision","stage 2"])
+                                                 )
+ 
+         }else{
+             ## update information
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, k = 1, type.k = "decision", trace = FALSE)
+ 
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = NA,
+                                                 p.value_ML = NA,
+                                                 lower_ML = NA,
+                                                 upper_ML = NA,
+                                                 estimate_ML = NA,
+                                                 p.value_MUE = NA,
+                                                 lower_MUE = NA,
+                                                 upper_MUE = NA,
+                                                 estimate_MUE = NA,
+                                                 info = iInfo.decision[1,"Decision"],
+                                                 infoPC = iInfo.decision[1,"Decision.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = NA)
+         }
+     }
+                                         # }}}
+                                         # {{{ Analyze data at decision
+ 
+     ## ** finale
+     dFinal <- d
+     lmmF <- analyzeData(dFinal, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     out.final <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+         if(out.interim[[iMeth]]$decision == "stop"){
+             out.final[[iMeth]] <- data.frame(statistic = NA,
+                                              p.value_ML = NA,
+                                              lower_ML = NA,
+                                              upper_ML = NA,
+                                              estimate_ML = NA,
+                                              p.value_MUE = NA,
+                                              lower_MUE = NA,
+                                              upper_MUE = NA,
+                                              estimate_MUE = NA,
+                                              info = NA,
+                                              infoPC = NA,
+                                              ck = NA,
+                                              decision = NA)
+ 
+         }else{
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmF, trace = FALSE)
+ 
+             ## plot(test)
+             ## summary(test)
+             iConfint.final <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.final <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.final <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.final  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.final[[iMeth]] <- data.frame(statistic = iConfint.final[1,"statistic"],
+                                              p.value_ML = iConfint.final[iConfint.final$method == "ML","p.value"],
+                                              lower_ML = iConfint.final[iConfint.final$method == "ML","lower"],
+                                              upper_ML = iConfint.final[iConfint.final$method == "ML","upper"],
+                                              estimate_ML = iConfint.final[iConfint.final$method == "ML","estimate"],
+                                              p.value_MUE = iConfint.final[iConfint.final$method == "MUE","p.value"],
+                                              lower_MUE = iConfint.final[iConfint.final$method == "MUE","lower"],
+                                              upper_MUE = iConfint.final[iConfint.final$method == "MUE","upper"],
+                                              estimate_MUE = iConfint.final[iConfint.final$method == "MUE","estimate"],
+                                              info = iInfo.final[1,"Interim"],
+                                              infoPC = iInfo.final[1,"Interim.pc"],
+                                              ck = iBoundary.final[1,"Cbound"],
+                                              decision = unname(coef(currentGSD[[iMeth]], type = "decision")["decision","stage 2"])
+                                              )
+         }
+     }
+                                         # }}}
+ 
+     stopComp <- Sys.time()
+                                         # {{{ Save results
+ 
+     outMerge <- do.call(rbind,lapply(method, function(iMeth){
+         iNames <- unique(c(names(out.interim[[iMeth]]),names(out.decision[[iMeth]]),names(out.final[[iMeth]])))
+         iMerge <- data.frame(matrix(NA, ncol = length(iNames)+3, nrow = 3, dimnames = list(NULL, c("method", "stage", "type", iNames))))
+         iMerge[1,c("method","stage","type",names(out.interim[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "interim", out.interim[[iMeth]]) 
+         iMerge[2,c("method","stage","type",names(out.decision[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "decision", out.decision[[iMeth]]) 
+         iMerge[3,c("method","stage","type",names(out.final[[iMeth]]))] <- data.frame(method = iMeth, stage = 2, type = "final", out.final[[iMeth]])
+         return(iMerge)
+     }))
+ 
+     ## outMerge[outMerge$method==3,]
+ 
+     out <- cbind(
+         ## results
+         outMerge,
+         ## simulation details
+         time.interim = thet,
+         seed=myseedi,             
+         nX1.interim = sum(!is.na(di$X1)),
+         nX2.interim = sum(!is.na(di$X2)),
+         nX3.interim = sum(!is.na(di$X3)),
+         ## computation time
+         computation.time=as.double(round(difftime(stopComp,startComp,units="secs"),3))
+     )
+     ## names(out) <- myColNames
+     RES <- rbind(RES,out)
+     save(RES,file=paste0(path.res,name,"(tempo)-",iter_sim,".rda"))
+                                         # }}}
+ }
[1] "seed 37132 for j=1 out of 250 (i.e. j=2001 in [2001;2250], as job id is i=9)"
Loading required namespace: nlme
[1] "seed 86613 for j=2 out of 250 (i.e. j=2002 in [2001;2250], as job id is i=9)"
[1] "seed 16003 for j=3 out of 250 (i.e. j=2003 in [2001;2250], as job id is i=9)"
[1] "seed 2029 for j=4 out of 250 (i.e. j=2004 in [2001;2250], as job id is i=9)"
[1] "seed 99342 for j=5 out of 250 (i.e. j=2005 in [2001;2250], as job id is i=9)"
[1] "seed 1868 for j=6 out of 250 (i.e. j=2006 in [2001;2250], as job id is i=9)"
[1] "seed 64903 for j=7 out of 250 (i.e. j=2007 in [2001;2250], as job id is i=9)"
[1] "seed 43490 for j=8 out of 250 (i.e. j=2008 in [2001;2250], as job id is i=9)"
[1] "seed 40581 for j=9 out of 250 (i.e. j=2009 in [2001;2250], as job id is i=9)"
[1] "seed 70410 for j=10 out of 250 (i.e. j=2010 in [2001;2250], as job id is i=9)"
[1] "seed 58374 for j=11 out of 250 (i.e. j=2011 in [2001;2250], as job id is i=9)"
[1] "seed 28485 for j=12 out of 250 (i.e. j=2012 in [2001;2250], as job id is i=9)"
[1] "seed 99478 for j=13 out of 250 (i.e. j=2013 in [2001;2250], as job id is i=9)"
[1] "seed 98943 for j=14 out of 250 (i.e. j=2014 in [2001;2250], as job id is i=9)"
[1] "seed 812 for j=15 out of 250 (i.e. j=2015 in [2001;2250], as job id is i=9)"
[1] "seed 70421 for j=16 out of 250 (i.e. j=2016 in [2001;2250], as job id is i=9)"
[1] "seed 13921 for j=17 out of 250 (i.e. j=2017 in [2001;2250], as job id is i=9)"
[1] "seed 14020 for j=18 out of 250 (i.e. j=2018 in [2001;2250], as job id is i=9)"
[1] "seed 36710 for j=19 out of 250 (i.e. j=2019 in [2001;2250], as job id is i=9)"
[1] "seed 52357 for j=20 out of 250 (i.e. j=2020 in [2001;2250], as job id is i=9)"
[1] "seed 75914 for j=21 out of 250 (i.e. j=2021 in [2001;2250], as job id is i=9)"
[1] "seed 31270 for j=22 out of 250 (i.e. j=2022 in [2001;2250], as job id is i=9)"
[1] "seed 99089 for j=23 out of 250 (i.e. j=2023 in [2001;2250], as job id is i=9)"
[1] "seed 1977 for j=24 out of 250 (i.e. j=2024 in [2001;2250], as job id is i=9)"
[1] "seed 33608 for j=25 out of 250 (i.e. j=2025 in [2001;2250], as job id is i=9)"
[1] "seed 83066 for j=26 out of 250 (i.e. j=2026 in [2001;2250], as job id is i=9)"
[1] "seed 41392 for j=27 out of 250 (i.e. j=2027 in [2001;2250], as job id is i=9)"
[1] "seed 23811 for j=28 out of 250 (i.e. j=2028 in [2001;2250], as job id is i=9)"
[1] "seed 29685 for j=29 out of 250 (i.e. j=2029 in [2001;2250], as job id is i=9)"
[1] "seed 22770 for j=30 out of 250 (i.e. j=2030 in [2001;2250], as job id is i=9)"
[1] "seed 19868 for j=31 out of 250 (i.e. j=2031 in [2001;2250], as job id is i=9)"
[1] "seed 34183 for j=32 out of 250 (i.e. j=2032 in [2001;2250], as job id is i=9)"
[1] "seed 70257 for j=33 out of 250 (i.e. j=2033 in [2001;2250], as job id is i=9)"
[1] "seed 20219 for j=34 out of 250 (i.e. j=2034 in [2001;2250], as job id is i=9)"
[1] "seed 87157 for j=35 out of 250 (i.e. j=2035 in [2001;2250], as job id is i=9)"
[1] "seed 83774 for j=36 out of 250 (i.e. j=2036 in [2001;2250], as job id is i=9)"
[1] "seed 89063 for j=37 out of 250 (i.e. j=2037 in [2001;2250], as job id is i=9)"
[1] "seed 73622 for j=38 out of 250 (i.e. j=2038 in [2001;2250], as job id is i=9)"
[1] "seed 20860 for j=39 out of 250 (i.e. j=2039 in [2001;2250], as job id is i=9)"
[1] "seed 39675 for j=40 out of 250 (i.e. j=2040 in [2001;2250], as job id is i=9)"
[1] "seed 64571 for j=41 out of 250 (i.e. j=2041 in [2001;2250], as job id is i=9)"
[1] "seed 7168 for j=42 out of 250 (i.e. j=2042 in [2001;2250], as job id is i=9)"
[1] "seed 64786 for j=43 out of 250 (i.e. j=2043 in [2001;2250], as job id is i=9)"
[1] "seed 57004 for j=44 out of 250 (i.e. j=2044 in [2001;2250], as job id is i=9)"
[1] "seed 40507 for j=45 out of 250 (i.e. j=2045 in [2001;2250], as job id is i=9)"
[1] "seed 90384 for j=46 out of 250 (i.e. j=2046 in [2001;2250], as job id is i=9)"
[1] "seed 7850 for j=47 out of 250 (i.e. j=2047 in [2001;2250], as job id is i=9)"
[1] "seed 2360 for j=48 out of 250 (i.e. j=2048 in [2001;2250], as job id is i=9)"
[1] "seed 59909 for j=49 out of 250 (i.e. j=2049 in [2001;2250], as job id is i=9)"
[1] "seed 49100 for j=50 out of 250 (i.e. j=2050 in [2001;2250], as job id is i=9)"
[1] "seed 12338 for j=51 out of 250 (i.e. j=2051 in [2001;2250], as job id is i=9)"
[1] "seed 25638 for j=52 out of 250 (i.e. j=2052 in [2001;2250], as job id is i=9)"
[1] "seed 46752 for j=53 out of 250 (i.e. j=2053 in [2001;2250], as job id is i=9)"
[1] "seed 65943 for j=54 out of 250 (i.e. j=2054 in [2001;2250], as job id is i=9)"
[1] "seed 72633 for j=55 out of 250 (i.e. j=2055 in [2001;2250], as job id is i=9)"
[1] "seed 63802 for j=56 out of 250 (i.e. j=2056 in [2001;2250], as job id is i=9)"
[1] "seed 96869 for j=57 out of 250 (i.e. j=2057 in [2001;2250], as job id is i=9)"
[1] "seed 11446 for j=58 out of 250 (i.e. j=2058 in [2001;2250], as job id is i=9)"
[1] "seed 72793 for j=59 out of 250 (i.e. j=2059 in [2001;2250], as job id is i=9)"
[1] "seed 40874 for j=60 out of 250 (i.e. j=2060 in [2001;2250], as job id is i=9)"
[1] "seed 13318 for j=61 out of 250 (i.e. j=2061 in [2001;2250], as job id is i=9)"
[1] "seed 88518 for j=62 out of 250 (i.e. j=2062 in [2001;2250], as job id is i=9)"
[1] "seed 56841 for j=63 out of 250 (i.e. j=2063 in [2001;2250], as job id is i=9)"
[1] "seed 8644 for j=64 out of 250 (i.e. j=2064 in [2001;2250], as job id is i=9)"
[1] "seed 82933 for j=65 out of 250 (i.e. j=2065 in [2001;2250], as job id is i=9)"
[1] "seed 5423 for j=66 out of 250 (i.e. j=2066 in [2001;2250], as job id is i=9)"
[1] "seed 517 for j=67 out of 250 (i.e. j=2067 in [2001;2250], as job id is i=9)"
[1] "seed 67307 for j=68 out of 250 (i.e. j=2068 in [2001;2250], as job id is i=9)"
[1] "seed 75135 for j=69 out of 250 (i.e. j=2069 in [2001;2250], as job id is i=9)"
[1] "seed 3524 for j=70 out of 250 (i.e. j=2070 in [2001;2250], as job id is i=9)"
[1] "seed 10404 for j=71 out of 250 (i.e. j=2071 in [2001;2250], as job id is i=9)"
[1] "seed 23962 for j=72 out of 250 (i.e. j=2072 in [2001;2250], as job id is i=9)"
[1] "seed 96153 for j=73 out of 250 (i.e. j=2073 in [2001;2250], as job id is i=9)"
[1] "seed 52308 for j=74 out of 250 (i.e. j=2074 in [2001;2250], as job id is i=9)"
[1] "seed 64013 for j=75 out of 250 (i.e. j=2075 in [2001;2250], as job id is i=9)"
[1] "seed 80003 for j=76 out of 250 (i.e. j=2076 in [2001;2250], as job id is i=9)"
[1] "seed 73014 for j=77 out of 250 (i.e. j=2077 in [2001;2250], as job id is i=9)"
[1] "seed 79490 for j=78 out of 250 (i.e. j=2078 in [2001;2250], as job id is i=9)"
[1] "seed 26383 for j=79 out of 250 (i.e. j=2079 in [2001;2250], as job id is i=9)"
[1] "seed 41802 for j=80 out of 250 (i.e. j=2080 in [2001;2250], as job id is i=9)"
[1] "seed 73310 for j=81 out of 250 (i.e. j=2081 in [2001;2250], as job id is i=9)"
[1] "seed 14048 for j=82 out of 250 (i.e. j=2082 in [2001;2250], as job id is i=9)"
[1] "seed 81358 for j=83 out of 250 (i.e. j=2083 in [2001;2250], as job id is i=9)"
[1] "seed 54037 for j=84 out of 250 (i.e. j=2084 in [2001;2250], as job id is i=9)"
[1] "seed 25233 for j=85 out of 250 (i.e. j=2085 in [2001;2250], as job id is i=9)"
[1] "seed 97133 for j=86 out of 250 (i.e. j=2086 in [2001;2250], as job id is i=9)"
[1] "seed 29442 for j=87 out of 250 (i.e. j=2087 in [2001;2250], as job id is i=9)"
[1] "seed 89721 for j=88 out of 250 (i.e. j=2088 in [2001;2250], as job id is i=9)"
[1] "seed 47647 for j=89 out of 250 (i.e. j=2089 in [2001;2250], as job id is i=9)"
[1] "seed 45942 for j=90 out of 250 (i.e. j=2090 in [2001;2250], as job id is i=9)"
[1] "seed 58744 for j=91 out of 250 (i.e. j=2091 in [2001;2250], as job id is i=9)"
[1] "seed 96569 for j=92 out of 250 (i.e. j=2092 in [2001;2250], as job id is i=9)"
[1] "seed 47195 for j=93 out of 250 (i.e. j=2093 in [2001;2250], as job id is i=9)"
[1] "seed 37344 for j=94 out of 250 (i.e. j=2094 in [2001;2250], as job id is i=9)"
[1] "seed 58421 for j=95 out of 250 (i.e. j=2095 in [2001;2250], as job id is i=9)"
[1] "seed 30277 for j=96 out of 250 (i.e. j=2096 in [2001;2250], as job id is i=9)"
[1] "seed 55057 for j=97 out of 250 (i.e. j=2097 in [2001;2250], as job id is i=9)"
[1] "seed 7309 for j=98 out of 250 (i.e. j=2098 in [2001;2250], as job id is i=9)"
[1] "seed 55112 for j=99 out of 250 (i.e. j=2099 in [2001;2250], as job id is i=9)"
[1] "seed 80710 for j=100 out of 250 (i.e. j=2100 in [2001;2250], as job id is i=9)"
[1] "seed 30602 for j=101 out of 250 (i.e. j=2101 in [2001;2250], as job id is i=9)"
[1] "seed 57130 for j=102 out of 250 (i.e. j=2102 in [2001;2250], as job id is i=9)"
[1] "seed 84540 for j=103 out of 250 (i.e. j=2103 in [2001;2250], as job id is i=9)"
[1] "seed 97037 for j=104 out of 250 (i.e. j=2104 in [2001;2250], as job id is i=9)"
[1] "seed 10868 for j=105 out of 250 (i.e. j=2105 in [2001;2250], as job id is i=9)"
[1] "seed 38612 for j=106 out of 250 (i.e. j=2106 in [2001;2250], as job id is i=9)"
[1] "seed 76928 for j=107 out of 250 (i.e. j=2107 in [2001;2250], as job id is i=9)"
[1] "seed 54079 for j=108 out of 250 (i.e. j=2108 in [2001;2250], as job id is i=9)"
[1] "seed 40454 for j=109 out of 250 (i.e. j=2109 in [2001;2250], as job id is i=9)"
[1] "seed 67131 for j=110 out of 250 (i.e. j=2110 in [2001;2250], as job id is i=9)"
[1] "seed 28111 for j=111 out of 250 (i.e. j=2111 in [2001;2250], as job id is i=9)"
[1] "seed 90403 for j=112 out of 250 (i.e. j=2112 in [2001;2250], as job id is i=9)"
[1] "seed 93458 for j=113 out of 250 (i.e. j=2113 in [2001;2250], as job id is i=9)"
[1] "seed 17792 for j=114 out of 250 (i.e. j=2114 in [2001;2250], as job id is i=9)"
[1] "seed 64607 for j=115 out of 250 (i.e. j=2115 in [2001;2250], as job id is i=9)"
[1] "seed 23668 for j=116 out of 250 (i.e. j=2116 in [2001;2250], as job id is i=9)"
[1] "seed 7977 for j=117 out of 250 (i.e. j=2117 in [2001;2250], as job id is i=9)"
[1] "seed 46904 for j=118 out of 250 (i.e. j=2118 in [2001;2250], as job id is i=9)"
[1] "seed 59391 for j=119 out of 250 (i.e. j=2119 in [2001;2250], as job id is i=9)"
[1] "seed 92628 for j=120 out of 250 (i.e. j=2120 in [2001;2250], as job id is i=9)"
[1] "seed 3059 for j=121 out of 250 (i.e. j=2121 in [2001;2250], as job id is i=9)"
[1] "seed 84799 for j=122 out of 250 (i.e. j=2122 in [2001;2250], as job id is i=9)"
[1] "seed 6239 for j=123 out of 250 (i.e. j=2123 in [2001;2250], as job id is i=9)"
[1] "seed 37360 for j=124 out of 250 (i.e. j=2124 in [2001;2250], as job id is i=9)"
[1] "seed 73998 for j=125 out of 250 (i.e. j=2125 in [2001;2250], as job id is i=9)"
[1] "seed 50024 for j=126 out of 250 (i.e. j=2126 in [2001;2250], as job id is i=9)"
[1] "seed 20076 for j=127 out of 250 (i.e. j=2127 in [2001;2250], as job id is i=9)"
[1] "seed 40553 for j=128 out of 250 (i.e. j=2128 in [2001;2250], as job id is i=9)"
[1] "seed 65770 for j=129 out of 250 (i.e. j=2129 in [2001;2250], as job id is i=9)"
[1] "seed 4902 for j=130 out of 250 (i.e. j=2130 in [2001;2250], as job id is i=9)"
[1] "seed 38314 for j=131 out of 250 (i.e. j=2131 in [2001;2250], as job id is i=9)"
[1] "seed 58917 for j=132 out of 250 (i.e. j=2132 in [2001;2250], as job id is i=9)"
[1] "seed 15059 for j=133 out of 250 (i.e. j=2133 in [2001;2250], as job id is i=9)"
[1] "seed 24347 for j=134 out of 250 (i.e. j=2134 in [2001;2250], as job id is i=9)"
[1] "seed 89544 for j=135 out of 250 (i.e. j=2135 in [2001;2250], as job id is i=9)"
[1] "seed 24898 for j=136 out of 250 (i.e. j=2136 in [2001;2250], as job id is i=9)"
[1] "seed 55116 for j=137 out of 250 (i.e. j=2137 in [2001;2250], as job id is i=9)"
[1] "seed 85532 for j=138 out of 250 (i.e. j=2138 in [2001;2250], as job id is i=9)"
[1] "seed 34416 for j=139 out of 250 (i.e. j=2139 in [2001;2250], as job id is i=9)"
[1] "seed 43814 for j=140 out of 250 (i.e. j=2140 in [2001;2250], as job id is i=9)"
[1] "seed 10562 for j=141 out of 250 (i.e. j=2141 in [2001;2250], as job id is i=9)"
[1] "seed 82326 for j=142 out of 250 (i.e. j=2142 in [2001;2250], as job id is i=9)"
[1] "seed 76228 for j=143 out of 250 (i.e. j=2143 in [2001;2250], as job id is i=9)"
[1] "seed 33162 for j=144 out of 250 (i.e. j=2144 in [2001;2250], as job id is i=9)"
[1] "seed 64130 for j=145 out of 250 (i.e. j=2145 in [2001;2250], as job id is i=9)"
[1] "seed 69017 for j=146 out of 250 (i.e. j=2146 in [2001;2250], as job id is i=9)"
[1] "seed 37196 for j=147 out of 250 (i.e. j=2147 in [2001;2250], as job id is i=9)"
[1] "seed 66154 for j=148 out of 250 (i.e. j=2148 in [2001;2250], as job id is i=9)"
[1] "seed 33213 for j=149 out of 250 (i.e. j=2149 in [2001;2250], as job id is i=9)"
[1] "seed 29368 for j=150 out of 250 (i.e. j=2150 in [2001;2250], as job id is i=9)"
[1] "seed 35091 for j=151 out of 250 (i.e. j=2151 in [2001;2250], as job id is i=9)"
[1] "seed 40877 for j=152 out of 250 (i.e. j=2152 in [2001;2250], as job id is i=9)"
[1] "seed 84350 for j=153 out of 250 (i.e. j=2153 in [2001;2250], as job id is i=9)"
[1] "seed 94112 for j=154 out of 250 (i.e. j=2154 in [2001;2250], as job id is i=9)"
[1] "seed 31338 for j=155 out of 250 (i.e. j=2155 in [2001;2250], as job id is i=9)"
[1] "seed 47288 for j=156 out of 250 (i.e. j=2156 in [2001;2250], as job id is i=9)"
[1] "seed 58210 for j=157 out of 250 (i.e. j=2157 in [2001;2250], as job id is i=9)"
[1] "seed 226 for j=158 out of 250 (i.e. j=2158 in [2001;2250], as job id is i=9)"
[1] "seed 86295 for j=159 out of 250 (i.e. j=2159 in [2001;2250], as job id is i=9)"
[1] "seed 4088 for j=160 out of 250 (i.e. j=2160 in [2001;2250], as job id is i=9)"
[1] "seed 76172 for j=161 out of 250 (i.e. j=2161 in [2001;2250], as job id is i=9)"
[1] "seed 75511 for j=162 out of 250 (i.e. j=2162 in [2001;2250], as job id is i=9)"
[1] "seed 10680 for j=163 out of 250 (i.e. j=2163 in [2001;2250], as job id is i=9)"
[1] "seed 9438 for j=164 out of 250 (i.e. j=2164 in [2001;2250], as job id is i=9)"
[1] "seed 41589 for j=165 out of 250 (i.e. j=2165 in [2001;2250], as job id is i=9)"
[1] "seed 96943 for j=166 out of 250 (i.e. j=2166 in [2001;2250], as job id is i=9)"
[1] "seed 67138 for j=167 out of 250 (i.e. j=2167 in [2001;2250], as job id is i=9)"
[1] "seed 75210 for j=168 out of 250 (i.e. j=2168 in [2001;2250], as job id is i=9)"
[1] "seed 48470 for j=169 out of 250 (i.e. j=2169 in [2001;2250], as job id is i=9)"
[1] "seed 9609 for j=170 out of 250 (i.e. j=2170 in [2001;2250], as job id is i=9)"
[1] "seed 42630 for j=171 out of 250 (i.e. j=2171 in [2001;2250], as job id is i=9)"
[1] "seed 39336 for j=172 out of 250 (i.e. j=2172 in [2001;2250], as job id is i=9)"
[1] "seed 67867 for j=173 out of 250 (i.e. j=2173 in [2001;2250], as job id is i=9)"
[1] "seed 36551 for j=174 out of 250 (i.e. j=2174 in [2001;2250], as job id is i=9)"
[1] "seed 41767 for j=175 out of 250 (i.e. j=2175 in [2001;2250], as job id is i=9)"
[1] "seed 15884 for j=176 out of 250 (i.e. j=2176 in [2001;2250], as job id is i=9)"
[1] "seed 37553 for j=177 out of 250 (i.e. j=2177 in [2001;2250], as job id is i=9)"
[1] "seed 75970 for j=178 out of 250 (i.e. j=2178 in [2001;2250], as job id is i=9)"
[1] "seed 8453 for j=179 out of 250 (i.e. j=2179 in [2001;2250], as job id is i=9)"
[1] "seed 61377 for j=180 out of 250 (i.e. j=2180 in [2001;2250], as job id is i=9)"
[1] "seed 79291 for j=181 out of 250 (i.e. j=2181 in [2001;2250], as job id is i=9)"
[1] "seed 14208 for j=182 out of 250 (i.e. j=2182 in [2001;2250], as job id is i=9)"
[1] "seed 46374 for j=183 out of 250 (i.e. j=2183 in [2001;2250], as job id is i=9)"
[1] "seed 92055 for j=184 out of 250 (i.e. j=2184 in [2001;2250], as job id is i=9)"
[1] "seed 60466 for j=185 out of 250 (i.e. j=2185 in [2001;2250], as job id is i=9)"
[1] "seed 36813 for j=186 out of 250 (i.e. j=2186 in [2001;2250], as job id is i=9)"
[1] "seed 95265 for j=187 out of 250 (i.e. j=2187 in [2001;2250], as job id is i=9)"
[1] "seed 52144 for j=188 out of 250 (i.e. j=2188 in [2001;2250], as job id is i=9)"
[1] "seed 42341 for j=189 out of 250 (i.e. j=2189 in [2001;2250], as job id is i=9)"
[1] "seed 11639 for j=190 out of 250 (i.e. j=2190 in [2001;2250], as job id is i=9)"
[1] "seed 78657 for j=191 out of 250 (i.e. j=2191 in [2001;2250], as job id is i=9)"
[1] "seed 34848 for j=192 out of 250 (i.e. j=2192 in [2001;2250], as job id is i=9)"
[1] "seed 95447 for j=193 out of 250 (i.e. j=2193 in [2001;2250], as job id is i=9)"
[1] "seed 11946 for j=194 out of 250 (i.e. j=2194 in [2001;2250], as job id is i=9)"
[1] "seed 48411 for j=195 out of 250 (i.e. j=2195 in [2001;2250], as job id is i=9)"
[1] "seed 50549 for j=196 out of 250 (i.e. j=2196 in [2001;2250], as job id is i=9)"
[1] "seed 63948 for j=197 out of 250 (i.e. j=2197 in [2001;2250], as job id is i=9)"
[1] "seed 28772 for j=198 out of 250 (i.e. j=2198 in [2001;2250], as job id is i=9)"
[1] "seed 70819 for j=199 out of 250 (i.e. j=2199 in [2001;2250], as job id is i=9)"
[1] "seed 29334 for j=200 out of 250 (i.e. j=2200 in [2001;2250], as job id is i=9)"
[1] "seed 46231 for j=201 out of 250 (i.e. j=2201 in [2001;2250], as job id is i=9)"
[1] "seed 8100 for j=202 out of 250 (i.e. j=2202 in [2001;2250], as job id is i=9)"
[1] "seed 1632 for j=203 out of 250 (i.e. j=2203 in [2001;2250], as job id is i=9)"
[1] "seed 58344 for j=204 out of 250 (i.e. j=2204 in [2001;2250], as job id is i=9)"
[1] "seed 67186 for j=205 out of 250 (i.e. j=2205 in [2001;2250], as job id is i=9)"
[1] "seed 84359 for j=206 out of 250 (i.e. j=2206 in [2001;2250], as job id is i=9)"
[1] "seed 36395 for j=207 out of 250 (i.e. j=2207 in [2001;2250], as job id is i=9)"
[1] "seed 18649 for j=208 out of 250 (i.e. j=2208 in [2001;2250], as job id is i=9)"
[1] "seed 22325 for j=209 out of 250 (i.e. j=2209 in [2001;2250], as job id is i=9)"
[1] "seed 40645 for j=210 out of 250 (i.e. j=2210 in [2001;2250], as job id is i=9)"
[1] "seed 74741 for j=211 out of 250 (i.e. j=2211 in [2001;2250], as job id is i=9)"
[1] "seed 44046 for j=212 out of 250 (i.e. j=2212 in [2001;2250], as job id is i=9)"
[1] "seed 36426 for j=213 out of 250 (i.e. j=2213 in [2001;2250], as job id is i=9)"
[1] "seed 55101 for j=214 out of 250 (i.e. j=2214 in [2001;2250], as job id is i=9)"
[1] "seed 86348 for j=215 out of 250 (i.e. j=2215 in [2001;2250], as job id is i=9)"
[1] "seed 33942 for j=216 out of 250 (i.e. j=2216 in [2001;2250], as job id is i=9)"
[1] "seed 11998 for j=217 out of 250 (i.e. j=2217 in [2001;2250], as job id is i=9)"
[1] "seed 89724 for j=218 out of 250 (i.e. j=2218 in [2001;2250], as job id is i=9)"
[1] "seed 74090 for j=219 out of 250 (i.e. j=2219 in [2001;2250], as job id is i=9)"
[1] "seed 11360 for j=220 out of 250 (i.e. j=2220 in [2001;2250], as job id is i=9)"
[1] "seed 92593 for j=221 out of 250 (i.e. j=2221 in [2001;2250], as job id is i=9)"
[1] "seed 6683 for j=222 out of 250 (i.e. j=2222 in [2001;2250], as job id is i=9)"
[1] "seed 181 for j=223 out of 250 (i.e. j=2223 in [2001;2250], as job id is i=9)"
[1] "seed 76155 for j=224 out of 250 (i.e. j=2224 in [2001;2250], as job id is i=9)"
[1] "seed 37907 for j=225 out of 250 (i.e. j=2225 in [2001;2250], as job id is i=9)"
[1] "seed 74529 for j=226 out of 250 (i.e. j=2226 in [2001;2250], as job id is i=9)"
[1] "seed 26316 for j=227 out of 250 (i.e. j=2227 in [2001;2250], as job id is i=9)"
[1] "seed 70816 for j=228 out of 250 (i.e. j=2228 in [2001;2250], as job id is i=9)"
[1] "seed 89279 for j=229 out of 250 (i.e. j=2229 in [2001;2250], as job id is i=9)"
[1] "seed 31212 for j=230 out of 250 (i.e. j=2230 in [2001;2250], as job id is i=9)"
[1] "seed 74646 for j=231 out of 250 (i.e. j=2231 in [2001;2250], as job id is i=9)"
[1] "seed 34725 for j=232 out of 250 (i.e. j=2232 in [2001;2250], as job id is i=9)"
[1] "seed 37951 for j=233 out of 250 (i.e. j=2233 in [2001;2250], as job id is i=9)"
[1] "seed 47714 for j=234 out of 250 (i.e. j=2234 in [2001;2250], as job id is i=9)"
[1] "seed 59098 for j=235 out of 250 (i.e. j=2235 in [2001;2250], as job id is i=9)"
[1] "seed 99288 for j=236 out of 250 (i.e. j=2236 in [2001;2250], as job id is i=9)"
[1] "seed 30782 for j=237 out of 250 (i.e. j=2237 in [2001;2250], as job id is i=9)"
[1] "seed 91796 for j=238 out of 250 (i.e. j=2238 in [2001;2250], as job id is i=9)"
[1] "seed 73674 for j=239 out of 250 (i.e. j=2239 in [2001;2250], as job id is i=9)"
[1] "seed 99589 for j=240 out of 250 (i.e. j=2240 in [2001;2250], as job id is i=9)"
[1] "seed 54436 for j=241 out of 250 (i.e. j=2241 in [2001;2250], as job id is i=9)"
[1] "seed 89607 for j=242 out of 250 (i.e. j=2242 in [2001;2250], as job id is i=9)"
[1] "seed 57908 for j=243 out of 250 (i.e. j=2243 in [2001;2250], as job id is i=9)"
[1] "seed 94022 for j=244 out of 250 (i.e. j=2244 in [2001;2250], as job id is i=9)"
[1] "seed 26382 for j=245 out of 250 (i.e. j=2245 in [2001;2250], as job id is i=9)"
[1] "seed 14384 for j=246 out of 250 (i.e. j=2246 in [2001;2250], as job id is i=9)"
[1] "seed 41989 for j=247 out of 250 (i.e. j=2247 in [2001;2250], as job id is i=9)"
[1] "seed 12258 for j=248 out of 250 (i.e. j=2248 in [2001;2250], as job id is i=9)"
[1] "seed 58332 for j=249 out of 250 (i.e. j=2249 in [2001;2250], as job id is i=9)"
[1] "seed 89319 for j=250 out of 250 (i.e. j=2250 in [2001;2250], as job id is i=9)"
There were 20 warnings (use warnings() to see them)
> rownames(RES) <- NULL
> save(RES,file=paste0(path.res,name,"-",iter_sim,".rda"))
> 
> ## * Summary results
> sessionInfo()
R version 4.1.2 (2021-11-01)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Red Hat Enterprise Linux 8.5 (Ootpa)

Matrix products: default
BLAS:   /opt/software/R/4.1.2/lib64/R/lib/libRblas.so
LAPACK: /opt/software/R/4.1.2/lib64/R/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] mvtnorm_1.1-3    DelayedGSD_0.0.3

loaded via a namespace (and not attached):
 [1] BB_2019.10-1     magrittr_2.0.3   tidyselect_1.1.2 munsell_0.5.0   
 [5] lattice_0.20-45  colorspace_2.0-3 xtable_1.8-4     R6_2.5.1        
 [9] quadprog_1.5-8   rlang_1.0.3      fansi_1.0.3      dplyr_1.0.9     
[13] grid_4.1.2       nlme_3.1-153     gtable_0.3.0     gsDesign_3.3.0  
[17] utf8_1.2.2       cli_3.3.0        ellipsis_0.3.2   tibble_3.1.7    
[21] lifecycle_1.0.1  crayon_1.5.1     purrr_0.3.4      ggplot2_3.3.6   
[25] tidyr_1.2.0      vctrs_0.4.1      glue_1.6.2       compiler_4.1.2  
[29] pillar_1.7.0     generics_0.1.3   scales_1.2.0     pkgconfig_2.0.3 
> summary(RES)
     method        stage           type             statistic     
 Min.   :1.0   Min.   :1.000   Length:1500        Min.   :0.0127  
 1st Qu.:1.0   1st Qu.:1.000   Class :character   1st Qu.:1.6357  
 Median :1.5   Median :1.000   Mode  :character   Median :2.4316  
 Mean   :1.5   Mean   :1.333                      Mean   :2.3736  
 3rd Qu.:2.0   3rd Qu.:2.000                      3rd Qu.:3.0692  
 Max.   :2.0   Max.   :2.000                      Max.   :5.4303  
                                                  NA's   :500     
  estimate_ML          se_ML             info           infoPC      
 Min.   :-0.4040   Min.   :0.3372   Min.   :4.445   Min.   :0.3473  
 1st Qu.: 0.5777   1st Qu.:0.3867   1st Qu.:5.729   1st Qu.:0.4477  
 Median : 0.8754   Median :0.4051   Median :6.186   Median :0.4834  
 Mean   : 0.8476   Mean   :0.4045   Mean   :6.262   Mean   :0.4893  
 3rd Qu.: 1.0969   3rd Qu.:0.4214   3rd Qu.:6.790   3rd Qu.:0.5306  
 Max.   : 2.2476   Max.   :0.4743   Max.   :8.797   Max.   :0.6874  
 NA's   :500       NA's   :1000     NA's   :182     NA's   :182     
   info.pred      infoPC.pred           uk              lk         
 Min.   :4.820   Min.   :0.3766   Min.   :2.263   Min.   :-0.2884  
 1st Qu.:5.982   1st Qu.:0.4674   1st Qu.:2.466   1st Qu.: 0.1329  
 Median :6.503   Median :0.5081   Median :2.532   Median : 0.2829  
 Mean   :6.559   Mean   :0.5125   Mean   :2.526   Mean   : 0.3035  
 3rd Qu.:7.109   3rd Qu.:0.5555   3rd Qu.:2.587   3rd Qu.: 0.4673  
 Max.   :9.298   Max.   :0.7266   Max.   :2.746   Max.   : 1.0595  
 NA's   :1000    NA's   :1000     NA's   :1000    NA's   :1000     
   decision            reason            p.value_ML        lower_ML      
 Length:1500        Length:1500        Min.   :0.0000   Min.   :-1.0922  
 Class :character   Class :character   1st Qu.:0.0010   1st Qu.:-0.0438  
 Mode  :character   Mode  :character   Median :0.0050   Median : 0.1792  
                                       Mean   :0.0705   Mean   : 0.1400  
                                       3rd Qu.:0.0361   3rd Qu.: 0.3527  
                                       Max.   :0.9531   Max.   : 1.1605  
                                       NA's   :1000     NA's   :1000     
    upper_ML       p.value_MUE       lower_MUE         upper_MUE     
 Min.   :0.7106   Min.   :0.0000   Min.   :-1.0874   Min.   :0.7057  
 1st Qu.:1.2492   1st Qu.:0.0020   1st Qu.:-0.0446   1st Qu.:1.2558  
 Median :1.5483   Median :0.0066   Median : 0.0914   Median :1.5177  
 Mean   :1.5941   Mean   :0.0421   Mean   : 0.1036   Mean   :1.6040  
 3rd Qu.:1.8872   3rd Qu.:0.0197   3rd Qu.: 0.2546   3rd Qu.:1.9297  
 Max.   :2.9426   Max.   :0.7368   Max.   : 1.8820   Max.   :3.1707  
 NA's   :1000     NA's   :1000     NA's   :1000      NA's   :1000    
  estimate_MUE           ck           time.interim        seed      
 Min.   :-0.1908   Min.   :-0.2342   Min.   :511.0   Min.   :  181  
 1st Qu.: 0.6223   1st Qu.: 1.3946   1st Qu.:582.0   1st Qu.:26383  
 Median : 0.8508   Median : 1.4494   Median :603.5   Median :47468  
 Mean   : 0.8660   Mean   : 1.4173   Mean   :601.1   Mean   :49613  
 3rd Qu.: 1.0891   3rd Qu.: 1.5063   3rd Qu.:618.0   3rd Qu.:74090  
 Max.   : 2.4342   Max.   : 1.7000   Max.   :676.0   Max.   :99589  
 NA's   :1000      NA's   :682                                      
  nX1.interim     nX2.interim     nX3.interim    computation.time
 Min.   :145.0   Min.   :130.0   Min.   :120.0   Min.   :0.697   
 1st Qu.:148.0   1st Qu.:135.0   1st Qu.:125.0   1st Qu.:0.937   
 Median :149.0   Median :136.0   Median :127.0   Median :1.024   
 Mean   :148.7   Mean   :136.5   Mean   :126.9   Mean   :1.045   
 3rd Qu.:150.0   3rd Qu.:138.0   3rd Qu.:129.0   3rd Qu.:1.136   
 Max.   :156.0   Max.   :146.0   Max.   :134.0   Max.   :3.615   
                                                                 
> 
> #----------------------------------------------------------------------
> ### BATCH_simuMain.R ends here
> 
> proc.time()
   user  system elapsed 
263.955   0.421 275.138 
