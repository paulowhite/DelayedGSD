
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### BATCH_simuMain.R --- 
> #----------------------------------------------------------------------
> ## Author: Paul Blanche
> ## Created: Mar  5 2021 (10:56) 
> ## Version: 
> ## Last-Updated: jul  7 2022 (13:56) 
> ##           By: Brice Ozenne
> ##     Update #: 518
> #----------------------------------------------------------------------
> ## 
> ### Commentary: 
> ## 
> ### Change Log:
> #----------------------------------------------------------------------
> ## 
> ### Code:
> 
> ## ** BATCH loop
> ## cd /projects/biostat01/people/hpl802/DelayedGSD/
> ## for ITER in `seq 1 10`;
> ## do
> ## eval 'R CMD BATCH --vanilla "--args iter_sim='$ITER' n.iter_sim=10" BATCH_simuMain.R output/R-simuMain-'$ITER'.Rout &'
> ## done
> 
> ## [1] 1186669
> ## [2] 1186670
> ## [3] 1186671
> ## [4] 1186672
> ## [5] 1186673
> ## [6] 1186674
> ## [7] 1186675
> ## [8] 1186676
> ## [9] 1186677
> ## [10] 1186678
> 
> rm(list=ls())
>                                    # {{{ parameters
> ## * parameters
> name <- "ScenarioName" # To save the results
> method <- 1:2 # methods used to compute the boundaries
>                                         #---
> myseed <- 140786598
>                                         #--- to plan the trial ----
> NMC <- 250 # number of sequential simulations to run in parallel. Eg. with 250, then we can run 40 scripts in paralell to get N=10,000 runs in total.
> kMax <- 2  #max number of analyses (including final)
> alpha <- 0.025  #type I error (one sided)
> beta <- 0.2  #type II error
> informationRates <- c(0.5,1)  #planned  information rates
> rho_alpha <- 2  # rho parameter for alpha error spending function
> rho_beta <- 2  # rho parameter for beta error spending function
> ## deltaPower <- 0.75 # just to try another value when Id > Imax
> Id <- 0.55  #(expected) information rate at each decision analysis
> binding <- TRUE
>                                         #
>                                         #---- to generate data -----------
>                                         #
> block <- c(1,1,0,0) 
> allsd <- c(2.5,2.1,2.4) # sd, first from baseline measurement, then the two changes from baseline
> mean0 <- c(10,0,0) # mean placebo group (again, first is absolute value, then change from baseline)
> delta <- c(0,0.6,0.8) # treatment effect
> ar <- (0.86*2)*2 # orginial accrual rate from data from Corine is 0.86 per week, hence we multiply by 2 for by 14 days. As to low, we further multiply by 2
> cor011 <- -0.15 # ~ from data from Corine
> corij1 <- 0.68  # ~ from data from Corine
> cor0j1 <- -0.27  # ~ from data from Corine
> Miss11 <- 5/104 # miss both V1 and V2
> Miss12 <- 1/104 # miss V1 and but not V2
> Miss21 <- 6/104 # do not miss V1 and but miss V2
> Miss22 <- 92/104 # miss none
> PropForInterim <- 0.5 # Decide to have interim analysiz when PropForInterim % of all subjects have had the chance to have one follow-up measuement recorded in the data to be available for analysis.
> theDelta.t <- 1.50001 # time lag to process the data and make them ready to analyze after collecting them (unit is time between two follow-up visits)
> TimeFactor <- 14 ## number of days between two visits
>                                         #
>                                         #--- actually for both planing the trial  and generating data-----
>                                         #
>                                         #
> deltaPower <- abs(delta[3]) # effect (NOT Z-scale/unit, but outcome scale/unit!) that the study is powered for: should we choose ourselves or compute from other numbers above ???
> n <- ceiling(2*2*((allsd[3]/deltaPower)^2)*(qnorm(1-beta)-qnorm(alpha))^2) #104 with Corine's data # should we choose ourselves or compute from the above numbers ???
>                                         # inflate SS as required for interim
> 
>                                         # {{{ Set seeds for parallel computing and reproducibility
> ## * Seed
> args <- commandArgs(TRUE) ## BATCH MODE
> if(length(args)>0){
+     for (arg in args){
+         eval(parse(text=arg))
+     }
+ }else{ ## SLUMR
+     iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_ID"))
+     n.iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_COUNT"))
+ } ## interactive
> if(is.na(iter_sim)){iter_sim <- 1}
> if(is.na(n.iter_sim)){n.iter_sim <- 40}
> 
> set.seed(140786598)
> allseeds <- sample.int(n = 10*n.iter_sim*NMC, size = n.iter_sim*NMC, replace=FALSE) #x=1:(.Machine$integer.max) seems to be maximal possible
> # }}}
> 
> # {{{ set path to load and save and othe machine specific variables
> ## * path
> path <- "."
> path.res <- file.path(path,"Results","simuMain")
> if(dir.exists(path.res)==FALSE){
+     if(dir.exists(file.path(path,"Results"))==FALSE){
+     dir.create(file.path(path,"Results"))
+     }
+     dir.create(path.res)
+ }
> path.output <- file.path(path,"output","simuMain")
> if(dir.exists(path.output)==FALSE){
+     if(dir.exists(file.path(path,"output"))==FALSE){
+     dir.create(file.path(path,"output"))
+     }
+     dir.create(path.output)
+ }
> # }}}
> 
> 
> ## * libraries and functions
> library(DelayedGSD)
DelayedGSD version 0.0.3
> ## sourceDir <- function(path, trace = TRUE, ...) {
> ##     for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
> ##         if(trace) cat(nm,":")
> ##         source(file.path(path, nm), ...)
> ##         if(trace) cat("\n")
> ##     }
> ## }
> ## sourceDir(pathToLoad)
>     
> 
> ## * Compute inflation factor and sample size
> plannedB <- vector(mode = "list", length = 3)
> for(iMeth in method){ ## iMeth <- 1
+     plannedB[[iMeth]] <- CalcBoundaries(kMax=kMax,  
+                                         alpha=alpha, 
+                                         beta=beta,  
+                                         InfoR.i=informationRates,  
+                                         InfoR.d=c(Id,1),  
+                                         rho_alpha=rho_alpha,  
+                                         rho_beta=rho_beta,  
+                                         method=iMeth,  
+                                         cNotBelowFixedc=FALSE,
+                                         bindingFutility=binding,
+                                         delta=tail(delta,1))
+     ## summary(plannedB[[1]])
+     ## coef(plannedB[[iMeth]], type = "information")
+ }
Loading required namespace: gsDesign
Loading required package: mvtnorm
Loading required namespace: BB
> inflationFactor <- unlist(lapply(plannedB,function(iP){iP$planned$InflationFactor}))
> nGSD <- ceiling(n*inflationFactor)
> ##  plot(plannedB[[1]])
> 
> #
> # --- just to check---
> ## n
> ## InfoFixed <- ((qnorm(1-beta)-qnorm(alpha))/(deltaPower))^2
> ## InfoFixed
> ## n/(4*(allsd[3])^2)
> #---
> # }}}
> 
> 
> 
> 
> # {{{ technical details to loop
> RES <- NULL # initialize results to save
> allj <- ((iter_sim-1)*NMC + 1):(iter_sim*NMC) # indices of all iterations (replicates) for this job, accountng for the other jobs running in parallel
> # }}}
> 
> ## * Loop
> for(j in allj){ ## j <- 51 ## 5
+     startComp <- Sys.time()
+     myseedi <- allseeds[j]
+     # {{{ TRACE info (e.g. to check the Rout)
+     print(paste0("seed ",myseedi," for ","j=",which(j==allj)," out of ",NMC, " (i.e. j=",j," in [",(iter_sim-1)*NMC + 1,";",iter_sim*NMC,"], as job id is i=",iter_sim,")"))
+     # }}}
+     # {{{ Missing probabilities
+     MyMissProb <- matrix(c(Miss11,Miss12,Miss21,Miss22),ncol=2,nrow=2,byrow=TRUE) # to additionnally remove 1 more because some FASFL=N
+     colnames(MyMissProb) <- c("V2 missing","V2 not missing")
+     rownames(MyMissProb) <- c("V1 missing","V1 not missing")
+     # }}}
+ 
+                                         # {{{ generate data
+     ## ** simulate
+     res <- GenData(n=n, 
+                    N.fw=2,
+                    rand.block=block,
+                    allsd=allsd,
+                    mean0=mean0,
+                    delta=delta,
+                    ar=ar,
+                    cor.01.1=cor011,
+                    cor.ij.1=corij1,
+                    cor.0j.1=cor0j1,
+                    seed=myseedi,
+                    MissProb=MyMissProb,
+                    DigitsOutcome=2,
+                    TimeFactor=TimeFactor,
+                    DigitsTime=0
+                    )
+     d <- res$d
+     ## head(d,n=20)
+                                         # }}}
+                                         # {{{ reformat data like those of Corine
+     ## Make data long format
+     ## dd <- FormatAsCase(d)
+     ## head(dd)
+     ## summary(dd)
+                                         # }}}
+    
+                                         # {{{ make data available at interim
+                                         # Here we stop inclusion data collection for the interim analysis as soon as
+                                         # half of the participants have completed (or had the opportunity to complete) the follow-up 
+     thet <- d$t3[ceiling(n*PropForInterim)]
+     di <- SelectData(d,t=thet)
+     ## ddi <- FormatAsCase(di) # needed ????
+     ## head(d[d$id==52,])
+                                         # }}}
+     ## {{{ analyze data at at interim
+     ## ** interim
+     lmmI <- analyzeData(di, ddf = "nlme", data.decision = sum(d$t1 <= thet + theDelta.t*TimeFactor), getinfo = TRUE, trace = TRUE)
+     ## lmmI <- analyzeData(di, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     currentGSD <- vector(mode = "list", length = 3)
+     out.interim <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+ 
+         currentGSD[[iMeth]] <- update(plannedB[[iMeth]], delta = lmmI, trace = FALSE)
+ 
+         iConfint.interim <- confint(currentGSD[[iMeth]])
+         iInfo.interim <- coef(currentGSD[[iMeth]], type = "information")
+         iBoundary.interim <- coef(currentGSD[[iMeth]], type = "boundary")
+         iDecision.interim <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+         out.interim[[iMeth]] <-  data.frame(statistic = iConfint.interim[1,"statistic"],
+                                             estimate_ML = iConfint.interim[1,"estimate"],
+                                             se_ML = iConfint.interim[1,"se"],
+                                             info = iInfo.interim[1,"Interim"],
+                                             infoPC = iInfo.interim[1,"Interim.pc"],
+                                             info.pred = iInfo.interim[1,"Decision"],
+                                             infoPC.pred = iInfo.interim[1,"Decision.pc"],
+                                             uk = iBoundary.interim[1,"Ebound"],
+                                             lk = iBoundary.interim[1,"Fbound"],
+                                             decision = iDecision.interim["decision","stage 1"],
+                                             reason = iDecision.interim["reason.interim","stage 1"])
+     }
+     ## currentGSD[[1]]
+     ## plot(currentGSD[[1]])
+ 
+     ## ** decision
+     dDecision <- d[which(d$t1 <= thet + theDelta.t*TimeFactor),]
+     lmmD <- analyzeData(dDecision, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+     
+     out.decision <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+           
+         if(out.interim[[iMeth]]$decision == "stop"){
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, trace = FALSE)
+             ## plot(currentGSD[[iMeth]])
+ 
+             iConfint.decision <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.decision  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = iConfint.decision[1,"statistic"],
+                                                 p.value_ML = iConfint.decision[iConfint.decision$method == "ML","p.value"],
+                                                 lower_ML = iConfint.decision[iConfint.decision$method == "ML","lower"],
+                                                 upper_ML = iConfint.decision[iConfint.decision$method == "ML","upper"],
+                                                 estimate_ML = iConfint.decision[iConfint.decision$method == "ML","estimate"],
+                                                 p.value_MUE = iConfint.decision[iConfint.decision$method == "MUE","p.value"],
+                                                 lower_MUE = iConfint.decision[iConfint.decision$method == "MUE","lower"],
+                                                 upper_MUE = iConfint.decision[iConfint.decision$method == "MUE","upper"],
+                                                 estimate_MUE = iConfint.decision[iConfint.decision$method == "MUE","estimate"],
+                                                 info = iInfo.decision[1,"Interim"],
+                                                 infoPC = iInfo.decision[1,"Interim.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = unname(iDecision.decision["decision","stage 2"])
+                                                 )
+ 
+         }else{
+             ## update information
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, k = 1, type.k = "decision", trace = FALSE)
+ 
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = NA,
+                                                 p.value_ML = NA,
+                                                 lower_ML = NA,
+                                                 upper_ML = NA,
+                                                 estimate_ML = NA,
+                                                 p.value_MUE = NA,
+                                                 lower_MUE = NA,
+                                                 upper_MUE = NA,
+                                                 estimate_MUE = NA,
+                                                 info = iInfo.decision[1,"Decision"],
+                                                 infoPC = iInfo.decision[1,"Decision.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = NA)
+         }
+     }
+                                         # }}}
+                                         # {{{ Analyze data at decision
+ 
+     ## ** finale
+     dFinal <- d
+     lmmF <- analyzeData(dFinal, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     out.final <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+         if(out.interim[[iMeth]]$decision == "stop"){
+             out.final[[iMeth]] <- data.frame(statistic = NA,
+                                              p.value_ML = NA,
+                                              lower_ML = NA,
+                                              upper_ML = NA,
+                                              estimate_ML = NA,
+                                              p.value_MUE = NA,
+                                              lower_MUE = NA,
+                                              upper_MUE = NA,
+                                              estimate_MUE = NA,
+                                              info = NA,
+                                              infoPC = NA,
+                                              ck = NA,
+                                              decision = NA)
+ 
+         }else{
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmF, trace = FALSE)
+ 
+             ## plot(test)
+             ## summary(test)
+             iConfint.final <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.final <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.final <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.final  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.final[[iMeth]] <- data.frame(statistic = iConfint.final[1,"statistic"],
+                                              p.value_ML = iConfint.final[iConfint.final$method == "ML","p.value"],
+                                              lower_ML = iConfint.final[iConfint.final$method == "ML","lower"],
+                                              upper_ML = iConfint.final[iConfint.final$method == "ML","upper"],
+                                              estimate_ML = iConfint.final[iConfint.final$method == "ML","estimate"],
+                                              p.value_MUE = iConfint.final[iConfint.final$method == "MUE","p.value"],
+                                              lower_MUE = iConfint.final[iConfint.final$method == "MUE","lower"],
+                                              upper_MUE = iConfint.final[iConfint.final$method == "MUE","upper"],
+                                              estimate_MUE = iConfint.final[iConfint.final$method == "MUE","estimate"],
+                                              info = iInfo.final[1,"Interim"],
+                                              infoPC = iInfo.final[1,"Interim.pc"],
+                                              ck = iBoundary.final[1,"Cbound"],
+                                              decision = unname(coef(currentGSD[[iMeth]], type = "decision")["decision","stage 2"])
+                                              )
+         }
+     }
+                                         # }}}
+ 
+     stopComp <- Sys.time()
+                                         # {{{ Save results
+ 
+     outMerge <- do.call(rbind,lapply(method, function(iMeth){
+         iNames <- unique(c(names(out.interim[[iMeth]]),names(out.decision[[iMeth]]),names(out.final[[iMeth]])))
+         iMerge <- data.frame(matrix(NA, ncol = length(iNames)+3, nrow = 3, dimnames = list(NULL, c("method", "stage", "type", iNames))))
+         iMerge[1,c("method","stage","type",names(out.interim[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "interim", out.interim[[iMeth]]) 
+         iMerge[2,c("method","stage","type",names(out.decision[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "decision", out.decision[[iMeth]]) 
+         iMerge[3,c("method","stage","type",names(out.final[[iMeth]]))] <- data.frame(method = iMeth, stage = 2, type = "final", out.final[[iMeth]])
+         return(iMerge)
+     }))
+ 
+     ## outMerge[outMerge$method==3,]
+ 
+     out <- cbind(
+         ## results
+         outMerge,
+         ## simulation details
+         time.interim = thet,
+         seed=myseedi,             
+         nX1.interim = sum(!is.na(di$X1)),
+         nX2.interim = sum(!is.na(di$X2)),
+         nX3.interim = sum(!is.na(di$X3)),
+         ## computation time
+         computation.time=as.double(round(difftime(stopComp,startComp,units="secs"),3))
+     )
+     ## names(out) <- myColNames
+     RES <- rbind(RES,out)
+     save(RES,file=paste0(path.res,name,"(tempo)-",iter_sim,".rda"))
+                                         # }}}
+ }
[1] "seed 79785 for j=1 out of 250 (i.e. j=8001 in [8001;8250], as job id is i=33)"
Loading required namespace: nlme
[1] "seed 13044 for j=2 out of 250 (i.e. j=8002 in [8001;8250], as job id is i=33)"
[1] "seed 77765 for j=3 out of 250 (i.e. j=8003 in [8001;8250], as job id is i=33)"
[1] "seed 37989 for j=4 out of 250 (i.e. j=8004 in [8001;8250], as job id is i=33)"
[1] "seed 40107 for j=5 out of 250 (i.e. j=8005 in [8001;8250], as job id is i=33)"
[1] "seed 99687 for j=6 out of 250 (i.e. j=8006 in [8001;8250], as job id is i=33)"
[1] "seed 15343 for j=7 out of 250 (i.e. j=8007 in [8001;8250], as job id is i=33)"
[1] "seed 50008 for j=8 out of 250 (i.e. j=8008 in [8001;8250], as job id is i=33)"
[1] "seed 75055 for j=9 out of 250 (i.e. j=8009 in [8001;8250], as job id is i=33)"
[1] "seed 18548 for j=10 out of 250 (i.e. j=8010 in [8001;8250], as job id is i=33)"
[1] "seed 48826 for j=11 out of 250 (i.e. j=8011 in [8001;8250], as job id is i=33)"
[1] "seed 12843 for j=12 out of 250 (i.e. j=8012 in [8001;8250], as job id is i=33)"
[1] "seed 11784 for j=13 out of 250 (i.e. j=8013 in [8001;8250], as job id is i=33)"
[1] "seed 36061 for j=14 out of 250 (i.e. j=8014 in [8001;8250], as job id is i=33)"
[1] "seed 88758 for j=15 out of 250 (i.e. j=8015 in [8001;8250], as job id is i=33)"
[1] "seed 44954 for j=16 out of 250 (i.e. j=8016 in [8001;8250], as job id is i=33)"
[1] "seed 19871 for j=17 out of 250 (i.e. j=8017 in [8001;8250], as job id is i=33)"
[1] "seed 49469 for j=18 out of 250 (i.e. j=8018 in [8001;8250], as job id is i=33)"
[1] "seed 76653 for j=19 out of 250 (i.e. j=8019 in [8001;8250], as job id is i=33)"
[1] "seed 18693 for j=20 out of 250 (i.e. j=8020 in [8001;8250], as job id is i=33)"
[1] "seed 25397 for j=21 out of 250 (i.e. j=8021 in [8001;8250], as job id is i=33)"
[1] "seed 67617 for j=22 out of 250 (i.e. j=8022 in [8001;8250], as job id is i=33)"
[1] "seed 99332 for j=23 out of 250 (i.e. j=8023 in [8001;8250], as job id is i=33)"
[1] "seed 51520 for j=24 out of 250 (i.e. j=8024 in [8001;8250], as job id is i=33)"
[1] "seed 53699 for j=25 out of 250 (i.e. j=8025 in [8001;8250], as job id is i=33)"
[1] "seed 61473 for j=26 out of 250 (i.e. j=8026 in [8001;8250], as job id is i=33)"
[1] "seed 93584 for j=27 out of 250 (i.e. j=8027 in [8001;8250], as job id is i=33)"
[1] "seed 84896 for j=28 out of 250 (i.e. j=8028 in [8001;8250], as job id is i=33)"
[1] "seed 42838 for j=29 out of 250 (i.e. j=8029 in [8001;8250], as job id is i=33)"
[1] "seed 86920 for j=30 out of 250 (i.e. j=8030 in [8001;8250], as job id is i=33)"
[1] "seed 82847 for j=31 out of 250 (i.e. j=8031 in [8001;8250], as job id is i=33)"
[1] "seed 58995 for j=32 out of 250 (i.e. j=8032 in [8001;8250], as job id is i=33)"
[1] "seed 38430 for j=33 out of 250 (i.e. j=8033 in [8001;8250], as job id is i=33)"
[1] "seed 60121 for j=34 out of 250 (i.e. j=8034 in [8001;8250], as job id is i=33)"
[1] "seed 34223 for j=35 out of 250 (i.e. j=8035 in [8001;8250], as job id is i=33)"
[1] "seed 58301 for j=36 out of 250 (i.e. j=8036 in [8001;8250], as job id is i=33)"
[1] "seed 304 for j=37 out of 250 (i.e. j=8037 in [8001;8250], as job id is i=33)"
[1] "seed 26694 for j=38 out of 250 (i.e. j=8038 in [8001;8250], as job id is i=33)"
[1] "seed 89317 for j=39 out of 250 (i.e. j=8039 in [8001;8250], as job id is i=33)"
[1] "seed 7802 for j=40 out of 250 (i.e. j=8040 in [8001;8250], as job id is i=33)"
[1] "seed 31102 for j=41 out of 250 (i.e. j=8041 in [8001;8250], as job id is i=33)"
[1] "seed 20706 for j=42 out of 250 (i.e. j=8042 in [8001;8250], as job id is i=33)"
[1] "seed 14356 for j=43 out of 250 (i.e. j=8043 in [8001;8250], as job id is i=33)"
[1] "seed 98991 for j=44 out of 250 (i.e. j=8044 in [8001;8250], as job id is i=33)"
[1] "seed 29526 for j=45 out of 250 (i.e. j=8045 in [8001;8250], as job id is i=33)"
[1] "seed 7245 for j=46 out of 250 (i.e. j=8046 in [8001;8250], as job id is i=33)"
[1] "seed 54747 for j=47 out of 250 (i.e. j=8047 in [8001;8250], as job id is i=33)"
[1] "seed 42895 for j=48 out of 250 (i.e. j=8048 in [8001;8250], as job id is i=33)"
[1] "seed 20543 for j=49 out of 250 (i.e. j=8049 in [8001;8250], as job id is i=33)"
[1] "seed 74799 for j=50 out of 250 (i.e. j=8050 in [8001;8250], as job id is i=33)"
[1] "seed 41949 for j=51 out of 250 (i.e. j=8051 in [8001;8250], as job id is i=33)"
[1] "seed 60703 for j=52 out of 250 (i.e. j=8052 in [8001;8250], as job id is i=33)"
[1] "seed 31349 for j=53 out of 250 (i.e. j=8053 in [8001;8250], as job id is i=33)"
[1] "seed 96590 for j=54 out of 250 (i.e. j=8054 in [8001;8250], as job id is i=33)"
[1] "seed 86374 for j=55 out of 250 (i.e. j=8055 in [8001;8250], as job id is i=33)"
[1] "seed 11649 for j=56 out of 250 (i.e. j=8056 in [8001;8250], as job id is i=33)"
[1] "seed 64324 for j=57 out of 250 (i.e. j=8057 in [8001;8250], as job id is i=33)"
[1] "seed 72630 for j=58 out of 250 (i.e. j=8058 in [8001;8250], as job id is i=33)"
[1] "seed 47783 for j=59 out of 250 (i.e. j=8059 in [8001;8250], as job id is i=33)"
[1] "seed 59569 for j=60 out of 250 (i.e. j=8060 in [8001;8250], as job id is i=33)"
[1] "seed 87280 for j=61 out of 250 (i.e. j=8061 in [8001;8250], as job id is i=33)"
[1] "seed 10371 for j=62 out of 250 (i.e. j=8062 in [8001;8250], as job id is i=33)"
[1] "seed 93819 for j=63 out of 250 (i.e. j=8063 in [8001;8250], as job id is i=33)"
[1] "seed 38196 for j=64 out of 250 (i.e. j=8064 in [8001;8250], as job id is i=33)"
[1] "seed 74245 for j=65 out of 250 (i.e. j=8065 in [8001;8250], as job id is i=33)"
[1] "seed 72528 for j=66 out of 250 (i.e. j=8066 in [8001;8250], as job id is i=33)"
[1] "seed 4738 for j=67 out of 250 (i.e. j=8067 in [8001;8250], as job id is i=33)"
[1] "seed 17045 for j=68 out of 250 (i.e. j=8068 in [8001;8250], as job id is i=33)"
[1] "seed 19292 for j=69 out of 250 (i.e. j=8069 in [8001;8250], as job id is i=33)"
[1] "seed 87103 for j=70 out of 250 (i.e. j=8070 in [8001;8250], as job id is i=33)"
[1] "seed 47045 for j=71 out of 250 (i.e. j=8071 in [8001;8250], as job id is i=33)"
[1] "seed 43431 for j=72 out of 250 (i.e. j=8072 in [8001;8250], as job id is i=33)"
[1] "seed 71092 for j=73 out of 250 (i.e. j=8073 in [8001;8250], as job id is i=33)"
[1] "seed 39572 for j=74 out of 250 (i.e. j=8074 in [8001;8250], as job id is i=33)"
[1] "seed 84288 for j=75 out of 250 (i.e. j=8075 in [8001;8250], as job id is i=33)"
[1] "seed 76341 for j=76 out of 250 (i.e. j=8076 in [8001;8250], as job id is i=33)"
[1] "seed 22759 for j=77 out of 250 (i.e. j=8077 in [8001;8250], as job id is i=33)"
[1] "seed 9156 for j=78 out of 250 (i.e. j=8078 in [8001;8250], as job id is i=33)"
[1] "seed 41719 for j=79 out of 250 (i.e. j=8079 in [8001;8250], as job id is i=33)"
[1] "seed 55089 for j=80 out of 250 (i.e. j=8080 in [8001;8250], as job id is i=33)"
[1] "seed 97138 for j=81 out of 250 (i.e. j=8081 in [8001;8250], as job id is i=33)"
[1] "seed 31510 for j=82 out of 250 (i.e. j=8082 in [8001;8250], as job id is i=33)"
[1] "seed 43824 for j=83 out of 250 (i.e. j=8083 in [8001;8250], as job id is i=33)"
[1] "seed 88688 for j=84 out of 250 (i.e. j=8084 in [8001;8250], as job id is i=33)"
[1] "seed 95195 for j=85 out of 250 (i.e. j=8085 in [8001;8250], as job id is i=33)"
[1] "seed 12463 for j=86 out of 250 (i.e. j=8086 in [8001;8250], as job id is i=33)"
[1] "seed 41095 for j=87 out of 250 (i.e. j=8087 in [8001;8250], as job id is i=33)"
[1] "seed 33109 for j=88 out of 250 (i.e. j=8088 in [8001;8250], as job id is i=33)"
[1] "seed 23412 for j=89 out of 250 (i.e. j=8089 in [8001;8250], as job id is i=33)"
[1] "seed 8858 for j=90 out of 250 (i.e. j=8090 in [8001;8250], as job id is i=33)"
[1] "seed 37372 for j=91 out of 250 (i.e. j=8091 in [8001;8250], as job id is i=33)"
[1] "seed 43279 for j=92 out of 250 (i.e. j=8092 in [8001;8250], as job id is i=33)"
[1] "seed 63482 for j=93 out of 250 (i.e. j=8093 in [8001;8250], as job id is i=33)"
[1] "seed 98827 for j=94 out of 250 (i.e. j=8094 in [8001;8250], as job id is i=33)"
[1] "seed 82154 for j=95 out of 250 (i.e. j=8095 in [8001;8250], as job id is i=33)"
[1] "seed 33680 for j=96 out of 250 (i.e. j=8096 in [8001;8250], as job id is i=33)"
[1] "seed 57845 for j=97 out of 250 (i.e. j=8097 in [8001;8250], as job id is i=33)"
[1] "seed 58173 for j=98 out of 250 (i.e. j=8098 in [8001;8250], as job id is i=33)"
[1] "seed 95903 for j=99 out of 250 (i.e. j=8099 in [8001;8250], as job id is i=33)"
[1] "seed 55899 for j=100 out of 250 (i.e. j=8100 in [8001;8250], as job id is i=33)"
[1] "seed 48059 for j=101 out of 250 (i.e. j=8101 in [8001;8250], as job id is i=33)"
[1] "seed 32317 for j=102 out of 250 (i.e. j=8102 in [8001;8250], as job id is i=33)"
[1] "seed 81649 for j=103 out of 250 (i.e. j=8103 in [8001;8250], as job id is i=33)"
[1] "seed 49269 for j=104 out of 250 (i.e. j=8104 in [8001;8250], as job id is i=33)"
[1] "seed 88771 for j=105 out of 250 (i.e. j=8105 in [8001;8250], as job id is i=33)"
[1] "seed 35680 for j=106 out of 250 (i.e. j=8106 in [8001;8250], as job id is i=33)"
[1] "seed 13705 for j=107 out of 250 (i.e. j=8107 in [8001;8250], as job id is i=33)"
[1] "seed 48258 for j=108 out of 250 (i.e. j=8108 in [8001;8250], as job id is i=33)"
[1] "seed 75326 for j=109 out of 250 (i.e. j=8109 in [8001;8250], as job id is i=33)"
[1] "seed 20506 for j=110 out of 250 (i.e. j=8110 in [8001;8250], as job id is i=33)"
[1] "seed 36497 for j=111 out of 250 (i.e. j=8111 in [8001;8250], as job id is i=33)"
[1] "seed 69278 for j=112 out of 250 (i.e. j=8112 in [8001;8250], as job id is i=33)"
[1] "seed 32075 for j=113 out of 250 (i.e. j=8113 in [8001;8250], as job id is i=33)"
[1] "seed 45073 for j=114 out of 250 (i.e. j=8114 in [8001;8250], as job id is i=33)"
[1] "seed 52765 for j=115 out of 250 (i.e. j=8115 in [8001;8250], as job id is i=33)"
[1] "seed 66391 for j=116 out of 250 (i.e. j=8116 in [8001;8250], as job id is i=33)"
[1] "seed 53494 for j=117 out of 250 (i.e. j=8117 in [8001;8250], as job id is i=33)"
[1] "seed 94709 for j=118 out of 250 (i.e. j=8118 in [8001;8250], as job id is i=33)"
[1] "seed 44671 for j=119 out of 250 (i.e. j=8119 in [8001;8250], as job id is i=33)"
[1] "seed 81785 for j=120 out of 250 (i.e. j=8120 in [8001;8250], as job id is i=33)"
[1] "seed 94565 for j=121 out of 250 (i.e. j=8121 in [8001;8250], as job id is i=33)"
[1] "seed 66442 for j=122 out of 250 (i.e. j=8122 in [8001;8250], as job id is i=33)"
[1] "seed 61611 for j=123 out of 250 (i.e. j=8123 in [8001;8250], as job id is i=33)"
[1] "seed 64341 for j=124 out of 250 (i.e. j=8124 in [8001;8250], as job id is i=33)"
[1] "seed 83336 for j=125 out of 250 (i.e. j=8125 in [8001;8250], as job id is i=33)"
[1] "seed 91587 for j=126 out of 250 (i.e. j=8126 in [8001;8250], as job id is i=33)"
[1] "seed 75505 for j=127 out of 250 (i.e. j=8127 in [8001;8250], as job id is i=33)"
[1] "seed 75906 for j=128 out of 250 (i.e. j=8128 in [8001;8250], as job id is i=33)"
[1] "seed 61254 for j=129 out of 250 (i.e. j=8129 in [8001;8250], as job id is i=33)"
[1] "seed 77661 for j=130 out of 250 (i.e. j=8130 in [8001;8250], as job id is i=33)"
[1] "seed 95853 for j=131 out of 250 (i.e. j=8131 in [8001;8250], as job id is i=33)"
[1] "seed 41619 for j=132 out of 250 (i.e. j=8132 in [8001;8250], as job id is i=33)"
[1] "seed 3335 for j=133 out of 250 (i.e. j=8133 in [8001;8250], as job id is i=33)"
[1] "seed 62341 for j=134 out of 250 (i.e. j=8134 in [8001;8250], as job id is i=33)"
[1] "seed 21815 for j=135 out of 250 (i.e. j=8135 in [8001;8250], as job id is i=33)"
[1] "seed 9013 for j=136 out of 250 (i.e. j=8136 in [8001;8250], as job id is i=33)"
[1] "seed 3645 for j=137 out of 250 (i.e. j=8137 in [8001;8250], as job id is i=33)"
[1] "seed 46544 for j=138 out of 250 (i.e. j=8138 in [8001;8250], as job id is i=33)"
[1] "seed 56301 for j=139 out of 250 (i.e. j=8139 in [8001;8250], as job id is i=33)"
[1] "seed 74739 for j=140 out of 250 (i.e. j=8140 in [8001;8250], as job id is i=33)"
[1] "seed 12873 for j=141 out of 250 (i.e. j=8141 in [8001;8250], as job id is i=33)"
[1] "seed 33764 for j=142 out of 250 (i.e. j=8142 in [8001;8250], as job id is i=33)"
[1] "seed 68407 for j=143 out of 250 (i.e. j=8143 in [8001;8250], as job id is i=33)"
[1] "seed 57595 for j=144 out of 250 (i.e. j=8144 in [8001;8250], as job id is i=33)"
[1] "seed 77425 for j=145 out of 250 (i.e. j=8145 in [8001;8250], as job id is i=33)"
[1] "seed 32829 for j=146 out of 250 (i.e. j=8146 in [8001;8250], as job id is i=33)"
[1] "seed 71856 for j=147 out of 250 (i.e. j=8147 in [8001;8250], as job id is i=33)"
[1] "seed 74107 for j=148 out of 250 (i.e. j=8148 in [8001;8250], as job id is i=33)"
[1] "seed 88712 for j=149 out of 250 (i.e. j=8149 in [8001;8250], as job id is i=33)"
[1] "seed 79093 for j=150 out of 250 (i.e. j=8150 in [8001;8250], as job id is i=33)"
[1] "seed 51077 for j=151 out of 250 (i.e. j=8151 in [8001;8250], as job id is i=33)"
[1] "seed 90524 for j=152 out of 250 (i.e. j=8152 in [8001;8250], as job id is i=33)"
[1] "seed 56101 for j=153 out of 250 (i.e. j=8153 in [8001;8250], as job id is i=33)"
[1] "seed 13588 for j=154 out of 250 (i.e. j=8154 in [8001;8250], as job id is i=33)"
[1] "seed 91223 for j=155 out of 250 (i.e. j=8155 in [8001;8250], as job id is i=33)"
[1] "seed 6141 for j=156 out of 250 (i.e. j=8156 in [8001;8250], as job id is i=33)"
[1] "seed 40103 for j=157 out of 250 (i.e. j=8157 in [8001;8250], as job id is i=33)"
[1] "seed 28788 for j=158 out of 250 (i.e. j=8158 in [8001;8250], as job id is i=33)"
[1] "seed 19393 for j=159 out of 250 (i.e. j=8159 in [8001;8250], as job id is i=33)"
[1] "seed 51010 for j=160 out of 250 (i.e. j=8160 in [8001;8250], as job id is i=33)"
[1] "seed 1021 for j=161 out of 250 (i.e. j=8161 in [8001;8250], as job id is i=33)"
[1] "seed 58372 for j=162 out of 250 (i.e. j=8162 in [8001;8250], as job id is i=33)"
[1] "seed 86118 for j=163 out of 250 (i.e. j=8163 in [8001;8250], as job id is i=33)"
[1] "seed 28933 for j=164 out of 250 (i.e. j=8164 in [8001;8250], as job id is i=33)"
[1] "seed 32789 for j=165 out of 250 (i.e. j=8165 in [8001;8250], as job id is i=33)"
[1] "seed 68701 for j=166 out of 250 (i.e. j=8166 in [8001;8250], as job id is i=33)"
[1] "seed 40280 for j=167 out of 250 (i.e. j=8167 in [8001;8250], as job id is i=33)"
[1] "seed 37145 for j=168 out of 250 (i.e. j=8168 in [8001;8250], as job id is i=33)"
[1] "seed 16101 for j=169 out of 250 (i.e. j=8169 in [8001;8250], as job id is i=33)"
[1] "seed 62463 for j=170 out of 250 (i.e. j=8170 in [8001;8250], as job id is i=33)"
[1] "seed 63150 for j=171 out of 250 (i.e. j=8171 in [8001;8250], as job id is i=33)"
[1] "seed 43898 for j=172 out of 250 (i.e. j=8172 in [8001;8250], as job id is i=33)"
[1] "seed 35900 for j=173 out of 250 (i.e. j=8173 in [8001;8250], as job id is i=33)"
[1] "seed 98195 for j=174 out of 250 (i.e. j=8174 in [8001;8250], as job id is i=33)"
[1] "seed 68319 for j=175 out of 250 (i.e. j=8175 in [8001;8250], as job id is i=33)"
[1] "seed 65180 for j=176 out of 250 (i.e. j=8176 in [8001;8250], as job id is i=33)"
[1] "seed 75482 for j=177 out of 250 (i.e. j=8177 in [8001;8250], as job id is i=33)"
[1] "seed 97890 for j=178 out of 250 (i.e. j=8178 in [8001;8250], as job id is i=33)"
[1] "seed 81220 for j=179 out of 250 (i.e. j=8179 in [8001;8250], as job id is i=33)"
[1] "seed 32632 for j=180 out of 250 (i.e. j=8180 in [8001;8250], as job id is i=33)"
[1] "seed 29084 for j=181 out of 250 (i.e. j=8181 in [8001;8250], as job id is i=33)"
[1] "seed 2826 for j=182 out of 250 (i.e. j=8182 in [8001;8250], as job id is i=33)"
[1] "seed 18246 for j=183 out of 250 (i.e. j=8183 in [8001;8250], as job id is i=33)"
[1] "seed 65622 for j=184 out of 250 (i.e. j=8184 in [8001;8250], as job id is i=33)"
[1] "seed 12124 for j=185 out of 250 (i.e. j=8185 in [8001;8250], as job id is i=33)"
[1] "seed 59789 for j=186 out of 250 (i.e. j=8186 in [8001;8250], as job id is i=33)"
[1] "seed 83140 for j=187 out of 250 (i.e. j=8187 in [8001;8250], as job id is i=33)"
[1] "seed 89578 for j=188 out of 250 (i.e. j=8188 in [8001;8250], as job id is i=33)"
[1] "seed 35891 for j=189 out of 250 (i.e. j=8189 in [8001;8250], as job id is i=33)"
[1] "seed 62701 for j=190 out of 250 (i.e. j=8190 in [8001;8250], as job id is i=33)"
[1] "seed 91911 for j=191 out of 250 (i.e. j=8191 in [8001;8250], as job id is i=33)"
[1] "seed 56469 for j=192 out of 250 (i.e. j=8192 in [8001;8250], as job id is i=33)"
[1] "seed 64279 for j=193 out of 250 (i.e. j=8193 in [8001;8250], as job id is i=33)"
[1] "seed 63663 for j=194 out of 250 (i.e. j=8194 in [8001;8250], as job id is i=33)"
[1] "seed 68726 for j=195 out of 250 (i.e. j=8195 in [8001;8250], as job id is i=33)"
[1] "seed 19906 for j=196 out of 250 (i.e. j=8196 in [8001;8250], as job id is i=33)"
[1] "seed 98717 for j=197 out of 250 (i.e. j=8197 in [8001;8250], as job id is i=33)"
[1] "seed 40912 for j=198 out of 250 (i.e. j=8198 in [8001;8250], as job id is i=33)"
[1] "seed 25321 for j=199 out of 250 (i.e. j=8199 in [8001;8250], as job id is i=33)"
[1] "seed 19650 for j=200 out of 250 (i.e. j=8200 in [8001;8250], as job id is i=33)"
[1] "seed 63176 for j=201 out of 250 (i.e. j=8201 in [8001;8250], as job id is i=33)"
[1] "seed 20850 for j=202 out of 250 (i.e. j=8202 in [8001;8250], as job id is i=33)"
[1] "seed 38173 for j=203 out of 250 (i.e. j=8203 in [8001;8250], as job id is i=33)"
[1] "seed 78954 for j=204 out of 250 (i.e. j=8204 in [8001;8250], as job id is i=33)"
[1] "seed 73316 for j=205 out of 250 (i.e. j=8205 in [8001;8250], as job id is i=33)"
[1] "seed 16194 for j=206 out of 250 (i.e. j=8206 in [8001;8250], as job id is i=33)"
[1] "seed 84338 for j=207 out of 250 (i.e. j=8207 in [8001;8250], as job id is i=33)"
[1] "seed 48681 for j=208 out of 250 (i.e. j=8208 in [8001;8250], as job id is i=33)"
[1] "seed 58345 for j=209 out of 250 (i.e. j=8209 in [8001;8250], as job id is i=33)"
[1] "seed 84018 for j=210 out of 250 (i.e. j=8210 in [8001;8250], as job id is i=33)"
[1] "seed 69463 for j=211 out of 250 (i.e. j=8211 in [8001;8250], as job id is i=33)"
[1] "seed 89389 for j=212 out of 250 (i.e. j=8212 in [8001;8250], as job id is i=33)"
[1] "seed 51901 for j=213 out of 250 (i.e. j=8213 in [8001;8250], as job id is i=33)"
[1] "seed 85082 for j=214 out of 250 (i.e. j=8214 in [8001;8250], as job id is i=33)"
[1] "seed 66015 for j=215 out of 250 (i.e. j=8215 in [8001;8250], as job id is i=33)"
[1] "seed 67861 for j=216 out of 250 (i.e. j=8216 in [8001;8250], as job id is i=33)"
[1] "seed 30994 for j=217 out of 250 (i.e. j=8217 in [8001;8250], as job id is i=33)"
[1] "seed 36449 for j=218 out of 250 (i.e. j=8218 in [8001;8250], as job id is i=33)"
[1] "seed 21632 for j=219 out of 250 (i.e. j=8219 in [8001;8250], as job id is i=33)"
[1] "seed 58897 for j=220 out of 250 (i.e. j=8220 in [8001;8250], as job id is i=33)"
[1] "seed 5854 for j=221 out of 250 (i.e. j=8221 in [8001;8250], as job id is i=33)"
[1] "seed 75536 for j=222 out of 250 (i.e. j=8222 in [8001;8250], as job id is i=33)"
[1] "seed 60953 for j=223 out of 250 (i.e. j=8223 in [8001;8250], as job id is i=33)"
[1] "seed 30587 for j=224 out of 250 (i.e. j=8224 in [8001;8250], as job id is i=33)"
[1] "seed 30073 for j=225 out of 250 (i.e. j=8225 in [8001;8250], as job id is i=33)"
[1] "seed 79665 for j=226 out of 250 (i.e. j=8226 in [8001;8250], as job id is i=33)"
[1] "seed 20851 for j=227 out of 250 (i.e. j=8227 in [8001;8250], as job id is i=33)"
[1] "seed 78921 for j=228 out of 250 (i.e. j=8228 in [8001;8250], as job id is i=33)"
[1] "seed 46934 for j=229 out of 250 (i.e. j=8229 in [8001;8250], as job id is i=33)"
[1] "seed 57625 for j=230 out of 250 (i.e. j=8230 in [8001;8250], as job id is i=33)"
[1] "seed 40501 for j=231 out of 250 (i.e. j=8231 in [8001;8250], as job id is i=33)"
[1] "seed 87622 for j=232 out of 250 (i.e. j=8232 in [8001;8250], as job id is i=33)"
[1] "seed 92006 for j=233 out of 250 (i.e. j=8233 in [8001;8250], as job id is i=33)"
[1] "seed 9184 for j=234 out of 250 (i.e. j=8234 in [8001;8250], as job id is i=33)"
[1] "seed 14987 for j=235 out of 250 (i.e. j=8235 in [8001;8250], as job id is i=33)"
[1] "seed 5782 for j=236 out of 250 (i.e. j=8236 in [8001;8250], as job id is i=33)"
[1] "seed 87380 for j=237 out of 250 (i.e. j=8237 in [8001;8250], as job id is i=33)"
[1] "seed 54683 for j=238 out of 250 (i.e. j=8238 in [8001;8250], as job id is i=33)"
[1] "seed 60286 for j=239 out of 250 (i.e. j=8239 in [8001;8250], as job id is i=33)"
[1] "seed 36269 for j=240 out of 250 (i.e. j=8240 in [8001;8250], as job id is i=33)"
[1] "seed 14021 for j=241 out of 250 (i.e. j=8241 in [8001;8250], as job id is i=33)"
[1] "seed 857 for j=242 out of 250 (i.e. j=8242 in [8001;8250], as job id is i=33)"
[1] "seed 42784 for j=243 out of 250 (i.e. j=8243 in [8001;8250], as job id is i=33)"
[1] "seed 10242 for j=244 out of 250 (i.e. j=8244 in [8001;8250], as job id is i=33)"
[1] "seed 20178 for j=245 out of 250 (i.e. j=8245 in [8001;8250], as job id is i=33)"
[1] "seed 73708 for j=246 out of 250 (i.e. j=8246 in [8001;8250], as job id is i=33)"
[1] "seed 43227 for j=247 out of 250 (i.e. j=8247 in [8001;8250], as job id is i=33)"
[1] "seed 99564 for j=248 out of 250 (i.e. j=8248 in [8001;8250], as job id is i=33)"
[1] "seed 12306 for j=249 out of 250 (i.e. j=8249 in [8001;8250], as job id is i=33)"
[1] "seed 60321 for j=250 out of 250 (i.e. j=8250 in [8001;8250], as job id is i=33)"
There were 14 warnings (use warnings() to see them)
> rownames(RES) <- NULL
> save(RES,file=paste0(path.res,name,"-",iter_sim,".rda"))
> 
> ## * Summary results
> sessionInfo()
R version 4.1.2 (2021-11-01)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Red Hat Enterprise Linux 8.5 (Ootpa)

Matrix products: default
BLAS:   /opt/software/R/4.1.2/lib64/R/lib/libRblas.so
LAPACK: /opt/software/R/4.1.2/lib64/R/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] mvtnorm_1.1-3    DelayedGSD_0.0.3

loaded via a namespace (and not attached):
 [1] BB_2019.10-1     magrittr_2.0.3   tidyselect_1.1.2 munsell_0.5.0   
 [5] lattice_0.20-45  colorspace_2.0-3 xtable_1.8-4     R6_2.5.1        
 [9] quadprog_1.5-8   rlang_1.0.3      fansi_1.0.3      dplyr_1.0.9     
[13] grid_4.1.2       nlme_3.1-153     gtable_0.3.0     gsDesign_3.3.0  
[17] utf8_1.2.2       cli_3.3.0        ellipsis_0.3.2   tibble_3.1.7    
[21] lifecycle_1.0.1  crayon_1.5.1     purrr_0.3.4      ggplot2_3.3.6   
[25] tidyr_1.2.0      vctrs_0.4.1      glue_1.6.2       compiler_4.1.2  
[29] pillar_1.7.0     generics_0.1.3   scales_1.2.0     pkgconfig_2.0.3 
> summary(RES)
     method        stage           type             statistic     
 Min.   :1.0   Min.   :1.000   Length:1500        Min.   :0.0135  
 1st Qu.:1.0   1st Qu.:1.000   Class :character   1st Qu.:1.5817  
 Median :1.5   Median :1.000   Mode  :character   Median :2.2730  
 Mean   :1.5   Mean   :1.333                      Mean   :2.2249  
 3rd Qu.:2.0   3rd Qu.:2.000                      3rd Qu.:2.9256  
 Max.   :2.0   Max.   :2.000                      Max.   :4.9862  
                                                  NA's   :500     
  estimate_ML          se_ML             info           infoPC      
 Min.   :-0.2278   Min.   :0.3386   Min.   :4.145   Min.   :0.3239  
 1st Qu.: 0.5506   1st Qu.:0.3884   1st Qu.:5.704   1st Qu.:0.4457  
 Median : 0.7755   Median :0.4019   Median :6.255   Median :0.4888  
 Mean   : 0.7764   Mean   :0.4041   Mean   :6.294   Mean   :0.4918  
 3rd Qu.: 1.0200   3rd Qu.:0.4221   3rd Qu.:6.828   3rd Qu.:0.5336  
 Max.   : 1.8197   Max.   :0.4912   Max.   :9.593   Max.   :0.7496  
 NA's   :500       NA's   :1000     NA's   :142     NA's   :142     
   info.pred      infoPC.pred           uk              lk         
 Min.   :4.361   Min.   :0.3407   Min.   :2.270   Min.   :-0.4050  
 1st Qu.:5.921   1st Qu.:0.4627   1st Qu.:2.473   1st Qu.: 0.1264  
 Median :6.549   Median :0.5117   Median :2.521   Median : 0.3143  
 Mean   :6.589   Mean   :0.5148   Mean   :2.525   Mean   : 0.3078  
 3rd Qu.:7.106   3rd Qu.:0.5553   3rd Qu.:2.589   3rd Qu.: 0.4496  
 Max.   :9.291   Max.   :0.7260   Max.   :2.792   Max.   : 1.0399  
 NA's   :1000    NA's   :1000     NA's   :1000    NA's   :1000     
   decision            reason            p.value_ML        lower_ML      
 Length:1500        Length:1500        Min.   :0.0000   Min.   :-1.0324  
 Class :character   Class :character   1st Qu.:0.0016   1st Qu.:-0.0462  
 Mode  :character   Mode  :character   Median :0.0074   Median : 0.1401  
                                       Mean   :0.0680   Mean   : 0.1058  
                                       3rd Qu.:0.0368   3rd Qu.: 0.2848  
                                       Max.   :0.9893   Max.   : 0.9973  
                                       NA's   :1000     NA's   :1000     
    upper_ML       p.value_MUE       lower_MUE         upper_MUE     
 Min.   :0.6496   Min.   :0.0000   Min.   :-1.0278   Min.   :0.6465  
 1st Qu.:1.2566   1st Qu.:0.0045   1st Qu.:-0.0573   1st Qu.:1.2465  
 Median :1.4586   Median :0.0078   Median : 0.0597   Median :1.4330  
 Mean   :1.5178   Mean   :0.0364   Mean   : 0.0521   Mean   :1.5124  
 3rd Qu.:1.7482   3rd Qu.:0.0198   3rd Qu.: 0.1517   3rd Qu.:1.7117  
 Max.   :2.6420   Max.   :0.6951   Max.   : 1.1119   Max.   :2.6377  
 NA's   :1000     NA's   :1000     NA's   :1000      NA's   :1000    
  estimate_MUE           ck          time.interim        seed      
 Min.   :-0.1907   Min.   :0.0092   Min.   :506.0   Min.   :  304  
 1st Qu.: 0.6083   1st Qu.:1.3965   1st Qu.:583.0   1st Qu.:30994  
 Median : 0.7767   Median :1.4490   Median :602.0   Median :53130  
 Mean   : 0.8018   Mean   :1.4302   Mean   :601.8   Mean   :51943  
 3rd Qu.: 0.9841   3rd Qu.:1.5087   3rd Qu.:621.0   3rd Qu.:75326  
 Max.   : 1.8197   Max.   :1.7145   Max.   :672.0   Max.   :99687  
 NA's   :1000      NA's   :642                                     
  nX1.interim     nX2.interim     nX3.interim    computation.time
 Min.   :145.0   Min.   :131.0   Min.   :120.0   Min.   :0.730   
 1st Qu.:148.0   1st Qu.:135.0   1st Qu.:125.0   1st Qu.:0.923   
 Median :148.5   Median :136.0   Median :127.0   Median :1.006   
 Mean   :148.7   Mean   :136.5   Mean   :126.8   Mean   :1.032   
 3rd Qu.:150.0   3rd Qu.:138.0   3rd Qu.:128.0   3rd Qu.:1.125   
 Max.   :155.0   Max.   :142.0   Max.   :137.0   Max.   :3.644   
                                                                 
> 
> #----------------------------------------------------------------------
> ### BATCH_simuMain.R ends here
> 
> proc.time()
   user  system elapsed 
260.755   0.410 271.738 
