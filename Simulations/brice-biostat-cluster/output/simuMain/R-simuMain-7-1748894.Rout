
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### BATCH_simuMain.R --- 
> #----------------------------------------------------------------------
> ## Author: Paul Blanche
> ## Created: Mar  5 2021 (10:56) 
> ## Version: 
> ## Last-Updated: jul  7 2022 (13:56) 
> ##           By: Brice Ozenne
> ##     Update #: 518
> #----------------------------------------------------------------------
> ## 
> ### Commentary: 
> ## 
> ### Change Log:
> #----------------------------------------------------------------------
> ## 
> ### Code:
> 
> ## ** BATCH loop
> ## cd /projects/biostat01/people/hpl802/DelayedGSD/
> ## for ITER in `seq 1 10`;
> ## do
> ## eval 'R CMD BATCH --vanilla "--args iter_sim='$ITER' n.iter_sim=10" BATCH_simuMain.R output/R-simuMain-'$ITER'.Rout &'
> ## done
> 
> ## [1] 1186669
> ## [2] 1186670
> ## [3] 1186671
> ## [4] 1186672
> ## [5] 1186673
> ## [6] 1186674
> ## [7] 1186675
> ## [8] 1186676
> ## [9] 1186677
> ## [10] 1186678
> 
> rm(list=ls())
>                                    # {{{ parameters
> ## * parameters
> name <- "ScenarioName" # To save the results
> method <- 1:2 # methods used to compute the boundaries
>                                         #---
> myseed <- 140786598
>                                         #--- to plan the trial ----
> NMC <- 250 # number of sequential simulations to run in parallel. Eg. with 250, then we can run 40 scripts in paralell to get N=10,000 runs in total.
> kMax <- 2  #max number of analyses (including final)
> alpha <- 0.025  #type I error (one sided)
> beta <- 0.2  #type II error
> informationRates <- c(0.5,1)  #planned  information rates
> rho_alpha <- 2  # rho parameter for alpha error spending function
> rho_beta <- 2  # rho parameter for beta error spending function
> ## deltaPower <- 0.75 # just to try another value when Id > Imax
> Id <- 0.55  #(expected) information rate at each decision analysis
> binding <- TRUE
>                                         #
>                                         #---- to generate data -----------
>                                         #
> block <- c(1,1,0,0) 
> allsd <- c(2.5,2.1,2.4) # sd, first from baseline measurement, then the two changes from baseline
> mean0 <- c(10,0,0) # mean placebo group (again, first is absolute value, then change from baseline)
> delta <- c(0,0.6,0.8) # treatment effect
> ar <- (0.86*2)*2 # orginial accrual rate from data from Corine is 0.86 per week, hence we multiply by 2 for by 14 days. As to low, we further multiply by 2
> cor011 <- -0.15 # ~ from data from Corine
> corij1 <- 0.68  # ~ from data from Corine
> cor0j1 <- -0.27  # ~ from data from Corine
> Miss11 <- 5/104 # miss both V1 and V2
> Miss12 <- 1/104 # miss V1 and but not V2
> Miss21 <- 6/104 # do not miss V1 and but miss V2
> Miss22 <- 92/104 # miss none
> PropForInterim <- 0.5 # Decide to have interim analysiz when PropForInterim % of all subjects have had the chance to have one follow-up measuement recorded in the data to be available for analysis.
> theDelta.t <- 1.50001 # time lag to process the data and make them ready to analyze after collecting them (unit is time between two follow-up visits)
> TimeFactor <- 14 ## number of days between two visits
>                                         #
>                                         #--- actually for both planing the trial  and generating data-----
>                                         #
>                                         #
> deltaPower <- abs(delta[3]) # effect (NOT Z-scale/unit, but outcome scale/unit!) that the study is powered for: should we choose ourselves or compute from other numbers above ???
> n <- ceiling(2*2*((allsd[3]/deltaPower)^2)*(qnorm(1-beta)-qnorm(alpha))^2) #104 with Corine's data # should we choose ourselves or compute from the above numbers ???
>                                         # inflate SS as required for interim
> 
>                                         # {{{ Set seeds for parallel computing and reproducibility
> ## * Seed
> args <- commandArgs(TRUE) ## BATCH MODE
> if(length(args)>0){
+     for (arg in args){
+         eval(parse(text=arg))
+     }
+ }else{ ## SLUMR
+     iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_ID"))
+     n.iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_COUNT"))
+ } ## interactive
> if(is.na(iter_sim)){iter_sim <- 1}
> if(is.na(n.iter_sim)){n.iter_sim <- 40}
> 
> set.seed(140786598)
> allseeds <- sample.int(n = 10*n.iter_sim*NMC, size = n.iter_sim*NMC, replace=FALSE) #x=1:(.Machine$integer.max) seems to be maximal possible
> # }}}
> 
> # {{{ set path to load and save and othe machine specific variables
> ## * path
> path <- "."
> path.res <- file.path(path,"Results","simuMain")
> if(dir.exists(path.res)==FALSE){
+     if(dir.exists(file.path(path,"Results"))==FALSE){
+     dir.create(file.path(path,"Results"))
+     }
+     dir.create(path.res)
+ }
> path.output <- file.path(path,"output","simuMain")
> if(dir.exists(path.output)==FALSE){
+     if(dir.exists(file.path(path,"output"))==FALSE){
+     dir.create(file.path(path,"output"))
+     }
+     dir.create(path.output)
+ }
> # }}}
> 
> 
> ## * libraries and functions
> library(DelayedGSD)
DelayedGSD version 0.0.3
> ## sourceDir <- function(path, trace = TRUE, ...) {
> ##     for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
> ##         if(trace) cat(nm,":")
> ##         source(file.path(path, nm), ...)
> ##         if(trace) cat("\n")
> ##     }
> ## }
> ## sourceDir(pathToLoad)
>     
> 
> ## * Compute inflation factor and sample size
> plannedB <- vector(mode = "list", length = 3)
> for(iMeth in method){ ## iMeth <- 1
+     plannedB[[iMeth]] <- CalcBoundaries(kMax=kMax,  
+                                         alpha=alpha, 
+                                         beta=beta,  
+                                         InfoR.i=informationRates,  
+                                         InfoR.d=c(Id,1),  
+                                         rho_alpha=rho_alpha,  
+                                         rho_beta=rho_beta,  
+                                         method=iMeth,  
+                                         cNotBelowFixedc=FALSE,
+                                         bindingFutility=binding,
+                                         delta=tail(delta,1))
+     ## summary(plannedB[[1]])
+     ## coef(plannedB[[iMeth]], type = "information")
+ }
Loading required namespace: gsDesign
Loading required package: mvtnorm
Loading required namespace: BB
> inflationFactor <- unlist(lapply(plannedB,function(iP){iP$planned$InflationFactor}))
> nGSD <- ceiling(n*inflationFactor)
> ##  plot(plannedB[[1]])
> 
> #
> # --- just to check---
> ## n
> ## InfoFixed <- ((qnorm(1-beta)-qnorm(alpha))/(deltaPower))^2
> ## InfoFixed
> ## n/(4*(allsd[3])^2)
> #---
> # }}}
> 
> 
> 
> 
> # {{{ technical details to loop
> RES <- NULL # initialize results to save
> allj <- ((iter_sim-1)*NMC + 1):(iter_sim*NMC) # indices of all iterations (replicates) for this job, accountng for the other jobs running in parallel
> # }}}
> 
> ## * Loop
> for(j in allj){ ## j <- 51 ## 5
+     startComp <- Sys.time()
+     myseedi <- allseeds[j]
+     # {{{ TRACE info (e.g. to check the Rout)
+     print(paste0("seed ",myseedi," for ","j=",which(j==allj)," out of ",NMC, " (i.e. j=",j," in [",(iter_sim-1)*NMC + 1,";",iter_sim*NMC,"], as job id is i=",iter_sim,")"))
+     # }}}
+     # {{{ Missing probabilities
+     MyMissProb <- matrix(c(Miss11,Miss12,Miss21,Miss22),ncol=2,nrow=2,byrow=TRUE) # to additionnally remove 1 more because some FASFL=N
+     colnames(MyMissProb) <- c("V2 missing","V2 not missing")
+     rownames(MyMissProb) <- c("V1 missing","V1 not missing")
+     # }}}
+ 
+                                         # {{{ generate data
+     ## ** simulate
+     res <- GenData(n=n, 
+                    N.fw=2,
+                    rand.block=block,
+                    allsd=allsd,
+                    mean0=mean0,
+                    delta=delta,
+                    ar=ar,
+                    cor.01.1=cor011,
+                    cor.ij.1=corij1,
+                    cor.0j.1=cor0j1,
+                    seed=myseedi,
+                    MissProb=MyMissProb,
+                    DigitsOutcome=2,
+                    TimeFactor=TimeFactor,
+                    DigitsTime=0
+                    )
+     d <- res$d
+     ## head(d,n=20)
+                                         # }}}
+                                         # {{{ reformat data like those of Corine
+     ## Make data long format
+     ## dd <- FormatAsCase(d)
+     ## head(dd)
+     ## summary(dd)
+                                         # }}}
+    
+                                         # {{{ make data available at interim
+                                         # Here we stop inclusion data collection for the interim analysis as soon as
+                                         # half of the participants have completed (or had the opportunity to complete) the follow-up 
+     thet <- d$t3[ceiling(n*PropForInterim)]
+     di <- SelectData(d,t=thet)
+     ## ddi <- FormatAsCase(di) # needed ????
+     ## head(d[d$id==52,])
+                                         # }}}
+     ## {{{ analyze data at at interim
+     ## ** interim
+     lmmI <- analyzeData(di, ddf = "nlme", data.decision = sum(d$t1 <= thet + theDelta.t*TimeFactor), getinfo = TRUE, trace = TRUE)
+     ## lmmI <- analyzeData(di, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     currentGSD <- vector(mode = "list", length = 3)
+     out.interim <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+ 
+         currentGSD[[iMeth]] <- update(plannedB[[iMeth]], delta = lmmI, trace = FALSE)
+ 
+         iConfint.interim <- confint(currentGSD[[iMeth]])
+         iInfo.interim <- coef(currentGSD[[iMeth]], type = "information")
+         iBoundary.interim <- coef(currentGSD[[iMeth]], type = "boundary")
+         iDecision.interim <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+         out.interim[[iMeth]] <-  data.frame(statistic = iConfint.interim[1,"statistic"],
+                                             estimate_ML = iConfint.interim[1,"estimate"],
+                                             se_ML = iConfint.interim[1,"se"],
+                                             info = iInfo.interim[1,"Interim"],
+                                             infoPC = iInfo.interim[1,"Interim.pc"],
+                                             info.pred = iInfo.interim[1,"Decision"],
+                                             infoPC.pred = iInfo.interim[1,"Decision.pc"],
+                                             uk = iBoundary.interim[1,"Ebound"],
+                                             lk = iBoundary.interim[1,"Fbound"],
+                                             decision = iDecision.interim["decision","stage 1"],
+                                             reason = iDecision.interim["reason.interim","stage 1"])
+     }
+     ## currentGSD[[1]]
+     ## plot(currentGSD[[1]])
+ 
+     ## ** decision
+     dDecision <- d[which(d$t1 <= thet + theDelta.t*TimeFactor),]
+     lmmD <- analyzeData(dDecision, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+     
+     out.decision <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+           
+         if(out.interim[[iMeth]]$decision == "stop"){
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, trace = FALSE)
+             ## plot(currentGSD[[iMeth]])
+ 
+             iConfint.decision <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.decision  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = iConfint.decision[1,"statistic"],
+                                                 p.value_ML = iConfint.decision[iConfint.decision$method == "ML","p.value"],
+                                                 lower_ML = iConfint.decision[iConfint.decision$method == "ML","lower"],
+                                                 upper_ML = iConfint.decision[iConfint.decision$method == "ML","upper"],
+                                                 estimate_ML = iConfint.decision[iConfint.decision$method == "ML","estimate"],
+                                                 p.value_MUE = iConfint.decision[iConfint.decision$method == "MUE","p.value"],
+                                                 lower_MUE = iConfint.decision[iConfint.decision$method == "MUE","lower"],
+                                                 upper_MUE = iConfint.decision[iConfint.decision$method == "MUE","upper"],
+                                                 estimate_MUE = iConfint.decision[iConfint.decision$method == "MUE","estimate"],
+                                                 info = iInfo.decision[1,"Interim"],
+                                                 infoPC = iInfo.decision[1,"Interim.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = unname(iDecision.decision["decision","stage 2"])
+                                                 )
+ 
+         }else{
+             ## update information
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, k = 1, type.k = "decision", trace = FALSE)
+ 
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = NA,
+                                                 p.value_ML = NA,
+                                                 lower_ML = NA,
+                                                 upper_ML = NA,
+                                                 estimate_ML = NA,
+                                                 p.value_MUE = NA,
+                                                 lower_MUE = NA,
+                                                 upper_MUE = NA,
+                                                 estimate_MUE = NA,
+                                                 info = iInfo.decision[1,"Decision"],
+                                                 infoPC = iInfo.decision[1,"Decision.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = NA)
+         }
+     }
+                                         # }}}
+                                         # {{{ Analyze data at decision
+ 
+     ## ** finale
+     dFinal <- d
+     lmmF <- analyzeData(dFinal, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     out.final <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+         if(out.interim[[iMeth]]$decision == "stop"){
+             out.final[[iMeth]] <- data.frame(statistic = NA,
+                                              p.value_ML = NA,
+                                              lower_ML = NA,
+                                              upper_ML = NA,
+                                              estimate_ML = NA,
+                                              p.value_MUE = NA,
+                                              lower_MUE = NA,
+                                              upper_MUE = NA,
+                                              estimate_MUE = NA,
+                                              info = NA,
+                                              infoPC = NA,
+                                              ck = NA,
+                                              decision = NA)
+ 
+         }else{
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmF, trace = FALSE)
+ 
+             ## plot(test)
+             ## summary(test)
+             iConfint.final <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.final <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.final <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.final  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.final[[iMeth]] <- data.frame(statistic = iConfint.final[1,"statistic"],
+                                              p.value_ML = iConfint.final[iConfint.final$method == "ML","p.value"],
+                                              lower_ML = iConfint.final[iConfint.final$method == "ML","lower"],
+                                              upper_ML = iConfint.final[iConfint.final$method == "ML","upper"],
+                                              estimate_ML = iConfint.final[iConfint.final$method == "ML","estimate"],
+                                              p.value_MUE = iConfint.final[iConfint.final$method == "MUE","p.value"],
+                                              lower_MUE = iConfint.final[iConfint.final$method == "MUE","lower"],
+                                              upper_MUE = iConfint.final[iConfint.final$method == "MUE","upper"],
+                                              estimate_MUE = iConfint.final[iConfint.final$method == "MUE","estimate"],
+                                              info = iInfo.final[1,"Interim"],
+                                              infoPC = iInfo.final[1,"Interim.pc"],
+                                              ck = iBoundary.final[1,"Cbound"],
+                                              decision = unname(coef(currentGSD[[iMeth]], type = "decision")["decision","stage 2"])
+                                              )
+         }
+     }
+                                         # }}}
+ 
+     stopComp <- Sys.time()
+                                         # {{{ Save results
+ 
+     outMerge <- do.call(rbind,lapply(method, function(iMeth){
+         iNames <- unique(c(names(out.interim[[iMeth]]),names(out.decision[[iMeth]]),names(out.final[[iMeth]])))
+         iMerge <- data.frame(matrix(NA, ncol = length(iNames)+3, nrow = 3, dimnames = list(NULL, c("method", "stage", "type", iNames))))
+         iMerge[1,c("method","stage","type",names(out.interim[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "interim", out.interim[[iMeth]]) 
+         iMerge[2,c("method","stage","type",names(out.decision[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "decision", out.decision[[iMeth]]) 
+         iMerge[3,c("method","stage","type",names(out.final[[iMeth]]))] <- data.frame(method = iMeth, stage = 2, type = "final", out.final[[iMeth]])
+         return(iMerge)
+     }))
+ 
+     ## outMerge[outMerge$method==3,]
+ 
+     out <- cbind(
+         ## results
+         outMerge,
+         ## simulation details
+         time.interim = thet,
+         seed=myseedi,             
+         nX1.interim = sum(!is.na(di$X1)),
+         nX2.interim = sum(!is.na(di$X2)),
+         nX3.interim = sum(!is.na(di$X3)),
+         ## computation time
+         computation.time=as.double(round(difftime(stopComp,startComp,units="secs"),3))
+     )
+     ## names(out) <- myColNames
+     RES <- rbind(RES,out)
+     save(RES,file=paste0(path.res,name,"(tempo)-",iter_sim,".rda"))
+                                         # }}}
+ }
[1] "seed 47622 for j=1 out of 250 (i.e. j=1501 in [1501;1750], as job id is i=7)"
Loading required namespace: nlme
[1] "seed 6753 for j=2 out of 250 (i.e. j=1502 in [1501;1750], as job id is i=7)"
[1] "seed 68820 for j=3 out of 250 (i.e. j=1503 in [1501;1750], as job id is i=7)"
[1] "seed 61329 for j=4 out of 250 (i.e. j=1504 in [1501;1750], as job id is i=7)"
[1] "seed 28499 for j=5 out of 250 (i.e. j=1505 in [1501;1750], as job id is i=7)"
[1] "seed 71093 for j=6 out of 250 (i.e. j=1506 in [1501;1750], as job id is i=7)"
[1] "seed 87024 for j=7 out of 250 (i.e. j=1507 in [1501;1750], as job id is i=7)"
[1] "seed 4392 for j=8 out of 250 (i.e. j=1508 in [1501;1750], as job id is i=7)"
[1] "seed 18140 for j=9 out of 250 (i.e. j=1509 in [1501;1750], as job id is i=7)"
[1] "seed 58889 for j=10 out of 250 (i.e. j=1510 in [1501;1750], as job id is i=7)"
[1] "seed 96984 for j=11 out of 250 (i.e. j=1511 in [1501;1750], as job id is i=7)"
[1] "seed 69168 for j=12 out of 250 (i.e. j=1512 in [1501;1750], as job id is i=7)"
[1] "seed 49068 for j=13 out of 250 (i.e. j=1513 in [1501;1750], as job id is i=7)"
[1] "seed 28923 for j=14 out of 250 (i.e. j=1514 in [1501;1750], as job id is i=7)"
[1] "seed 24576 for j=15 out of 250 (i.e. j=1515 in [1501;1750], as job id is i=7)"
[1] "seed 22648 for j=16 out of 250 (i.e. j=1516 in [1501;1750], as job id is i=7)"
[1] "seed 87217 for j=17 out of 250 (i.e. j=1517 in [1501;1750], as job id is i=7)"
[1] "seed 98020 for j=18 out of 250 (i.e. j=1518 in [1501;1750], as job id is i=7)"
[1] "seed 23003 for j=19 out of 250 (i.e. j=1519 in [1501;1750], as job id is i=7)"
[1] "seed 63460 for j=20 out of 250 (i.e. j=1520 in [1501;1750], as job id is i=7)"
[1] "seed 35901 for j=21 out of 250 (i.e. j=1521 in [1501;1750], as job id is i=7)"
[1] "seed 8586 for j=22 out of 250 (i.e. j=1522 in [1501;1750], as job id is i=7)"
[1] "seed 50206 for j=23 out of 250 (i.e. j=1523 in [1501;1750], as job id is i=7)"
[1] "seed 86641 for j=24 out of 250 (i.e. j=1524 in [1501;1750], as job id is i=7)"
[1] "seed 82789 for j=25 out of 250 (i.e. j=1525 in [1501;1750], as job id is i=7)"
[1] "seed 9634 for j=26 out of 250 (i.e. j=1526 in [1501;1750], as job id is i=7)"
[1] "seed 79567 for j=27 out of 250 (i.e. j=1527 in [1501;1750], as job id is i=7)"
[1] "seed 60468 for j=28 out of 250 (i.e. j=1528 in [1501;1750], as job id is i=7)"
[1] "seed 20828 for j=29 out of 250 (i.e. j=1529 in [1501;1750], as job id is i=7)"
[1] "seed 91971 for j=30 out of 250 (i.e. j=1530 in [1501;1750], as job id is i=7)"
[1] "seed 96942 for j=31 out of 250 (i.e. j=1531 in [1501;1750], as job id is i=7)"
[1] "seed 5123 for j=32 out of 250 (i.e. j=1532 in [1501;1750], as job id is i=7)"
[1] "seed 72471 for j=33 out of 250 (i.e. j=1533 in [1501;1750], as job id is i=7)"
[1] "seed 94512 for j=34 out of 250 (i.e. j=1534 in [1501;1750], as job id is i=7)"
[1] "seed 20480 for j=35 out of 250 (i.e. j=1535 in [1501;1750], as job id is i=7)"
[1] "seed 25784 for j=36 out of 250 (i.e. j=1536 in [1501;1750], as job id is i=7)"
[1] "seed 72297 for j=37 out of 250 (i.e. j=1537 in [1501;1750], as job id is i=7)"
[1] "seed 21239 for j=38 out of 250 (i.e. j=1538 in [1501;1750], as job id is i=7)"
[1] "seed 47225 for j=39 out of 250 (i.e. j=1539 in [1501;1750], as job id is i=7)"
[1] "seed 96691 for j=40 out of 250 (i.e. j=1540 in [1501;1750], as job id is i=7)"
[1] "seed 93223 for j=41 out of 250 (i.e. j=1541 in [1501;1750], as job id is i=7)"
[1] "seed 8639 for j=42 out of 250 (i.e. j=1542 in [1501;1750], as job id is i=7)"
[1] "seed 36347 for j=43 out of 250 (i.e. j=1543 in [1501;1750], as job id is i=7)"
[1] "seed 49839 for j=44 out of 250 (i.e. j=1544 in [1501;1750], as job id is i=7)"
[1] "seed 24267 for j=45 out of 250 (i.e. j=1545 in [1501;1750], as job id is i=7)"
[1] "seed 40859 for j=46 out of 250 (i.e. j=1546 in [1501;1750], as job id is i=7)"
[1] "seed 87126 for j=47 out of 250 (i.e. j=1547 in [1501;1750], as job id is i=7)"
[1] "seed 54676 for j=48 out of 250 (i.e. j=1548 in [1501;1750], as job id is i=7)"
[1] "seed 53633 for j=49 out of 250 (i.e. j=1549 in [1501;1750], as job id is i=7)"
[1] "seed 48448 for j=50 out of 250 (i.e. j=1550 in [1501;1750], as job id is i=7)"
[1] "seed 72857 for j=51 out of 250 (i.e. j=1551 in [1501;1750], as job id is i=7)"
[1] "seed 62542 for j=52 out of 250 (i.e. j=1552 in [1501;1750], as job id is i=7)"
[1] "seed 87090 for j=53 out of 250 (i.e. j=1553 in [1501;1750], as job id is i=7)"
[1] "seed 44943 for j=54 out of 250 (i.e. j=1554 in [1501;1750], as job id is i=7)"
[1] "seed 2543 for j=55 out of 250 (i.e. j=1555 in [1501;1750], as job id is i=7)"
[1] "seed 97548 for j=56 out of 250 (i.e. j=1556 in [1501;1750], as job id is i=7)"
[1] "seed 2757 for j=57 out of 250 (i.e. j=1557 in [1501;1750], as job id is i=7)"
[1] "seed 22664 for j=58 out of 250 (i.e. j=1558 in [1501;1750], as job id is i=7)"
[1] "seed 58824 for j=59 out of 250 (i.e. j=1559 in [1501;1750], as job id is i=7)"
[1] "seed 62455 for j=60 out of 250 (i.e. j=1560 in [1501;1750], as job id is i=7)"
[1] "seed 44763 for j=61 out of 250 (i.e. j=1561 in [1501;1750], as job id is i=7)"
[1] "seed 62902 for j=62 out of 250 (i.e. j=1562 in [1501;1750], as job id is i=7)"
[1] "seed 45041 for j=63 out of 250 (i.e. j=1563 in [1501;1750], as job id is i=7)"
[1] "seed 97874 for j=64 out of 250 (i.e. j=1564 in [1501;1750], as job id is i=7)"
[1] "seed 50653 for j=65 out of 250 (i.e. j=1565 in [1501;1750], as job id is i=7)"
[1] "seed 78051 for j=66 out of 250 (i.e. j=1566 in [1501;1750], as job id is i=7)"
[1] "seed 93082 for j=67 out of 250 (i.e. j=1567 in [1501;1750], as job id is i=7)"
[1] "seed 13945 for j=68 out of 250 (i.e. j=1568 in [1501;1750], as job id is i=7)"
[1] "seed 44332 for j=69 out of 250 (i.e. j=1569 in [1501;1750], as job id is i=7)"
[1] "seed 75896 for j=70 out of 250 (i.e. j=1570 in [1501;1750], as job id is i=7)"
[1] "seed 70271 for j=71 out of 250 (i.e. j=1571 in [1501;1750], as job id is i=7)"
[1] "seed 83742 for j=72 out of 250 (i.e. j=1572 in [1501;1750], as job id is i=7)"
[1] "seed 59213 for j=73 out of 250 (i.e. j=1573 in [1501;1750], as job id is i=7)"
[1] "seed 64991 for j=74 out of 250 (i.e. j=1574 in [1501;1750], as job id is i=7)"
[1] "seed 61633 for j=75 out of 250 (i.e. j=1575 in [1501;1750], as job id is i=7)"
[1] "seed 83352 for j=76 out of 250 (i.e. j=1576 in [1501;1750], as job id is i=7)"
[1] "seed 83021 for j=77 out of 250 (i.e. j=1577 in [1501;1750], as job id is i=7)"
[1] "seed 78419 for j=78 out of 250 (i.e. j=1578 in [1501;1750], as job id is i=7)"
[1] "seed 70419 for j=79 out of 250 (i.e. j=1579 in [1501;1750], as job id is i=7)"
[1] "seed 60912 for j=80 out of 250 (i.e. j=1580 in [1501;1750], as job id is i=7)"
[1] "seed 99194 for j=81 out of 250 (i.e. j=1581 in [1501;1750], as job id is i=7)"
[1] "seed 49394 for j=82 out of 250 (i.e. j=1582 in [1501;1750], as job id is i=7)"
[1] "seed 13400 for j=83 out of 250 (i.e. j=1583 in [1501;1750], as job id is i=7)"
[1] "seed 99045 for j=84 out of 250 (i.e. j=1584 in [1501;1750], as job id is i=7)"
[1] "seed 66435 for j=85 out of 250 (i.e. j=1585 in [1501;1750], as job id is i=7)"
[1] "seed 5758 for j=86 out of 250 (i.e. j=1586 in [1501;1750], as job id is i=7)"
[1] "seed 58247 for j=87 out of 250 (i.e. j=1587 in [1501;1750], as job id is i=7)"
[1] "seed 58144 for j=88 out of 250 (i.e. j=1588 in [1501;1750], as job id is i=7)"
[1] "seed 9505 for j=89 out of 250 (i.e. j=1589 in [1501;1750], as job id is i=7)"
[1] "seed 19285 for j=90 out of 250 (i.e. j=1590 in [1501;1750], as job id is i=7)"
[1] "seed 46093 for j=91 out of 250 (i.e. j=1591 in [1501;1750], as job id is i=7)"
[1] "seed 15828 for j=92 out of 250 (i.e. j=1592 in [1501;1750], as job id is i=7)"
[1] "seed 40451 for j=93 out of 250 (i.e. j=1593 in [1501;1750], as job id is i=7)"
[1] "seed 23264 for j=94 out of 250 (i.e. j=1594 in [1501;1750], as job id is i=7)"
[1] "seed 3693 for j=95 out of 250 (i.e. j=1595 in [1501;1750], as job id is i=7)"
[1] "seed 94624 for j=96 out of 250 (i.e. j=1596 in [1501;1750], as job id is i=7)"
[1] "seed 45820 for j=97 out of 250 (i.e. j=1597 in [1501;1750], as job id is i=7)"
[1] "seed 27319 for j=98 out of 250 (i.e. j=1598 in [1501;1750], as job id is i=7)"
[1] "seed 68281 for j=99 out of 250 (i.e. j=1599 in [1501;1750], as job id is i=7)"
[1] "seed 4163 for j=100 out of 250 (i.e. j=1600 in [1501;1750], as job id is i=7)"
[1] "seed 35117 for j=101 out of 250 (i.e. j=1601 in [1501;1750], as job id is i=7)"
[1] "seed 16775 for j=102 out of 250 (i.e. j=1602 in [1501;1750], as job id is i=7)"
[1] "seed 34849 for j=103 out of 250 (i.e. j=1603 in [1501;1750], as job id is i=7)"
[1] "seed 53514 for j=104 out of 250 (i.e. j=1604 in [1501;1750], as job id is i=7)"
[1] "seed 44542 for j=105 out of 250 (i.e. j=1605 in [1501;1750], as job id is i=7)"
[1] "seed 13233 for j=106 out of 250 (i.e. j=1606 in [1501;1750], as job id is i=7)"
[1] "seed 25388 for j=107 out of 250 (i.e. j=1607 in [1501;1750], as job id is i=7)"
[1] "seed 50172 for j=108 out of 250 (i.e. j=1608 in [1501;1750], as job id is i=7)"
[1] "seed 40053 for j=109 out of 250 (i.e. j=1609 in [1501;1750], as job id is i=7)"
[1] "seed 82681 for j=110 out of 250 (i.e. j=1610 in [1501;1750], as job id is i=7)"
[1] "seed 55524 for j=111 out of 250 (i.e. j=1611 in [1501;1750], as job id is i=7)"
[1] "seed 13682 for j=112 out of 250 (i.e. j=1612 in [1501;1750], as job id is i=7)"
[1] "seed 72269 for j=113 out of 250 (i.e. j=1613 in [1501;1750], as job id is i=7)"
[1] "seed 61591 for j=114 out of 250 (i.e. j=1614 in [1501;1750], as job id is i=7)"
[1] "seed 17601 for j=115 out of 250 (i.e. j=1615 in [1501;1750], as job id is i=7)"
[1] "seed 78016 for j=116 out of 250 (i.e. j=1616 in [1501;1750], as job id is i=7)"
[1] "seed 61010 for j=117 out of 250 (i.e. j=1617 in [1501;1750], as job id is i=7)"
[1] "seed 37728 for j=118 out of 250 (i.e. j=1618 in [1501;1750], as job id is i=7)"
[1] "seed 64900 for j=119 out of 250 (i.e. j=1619 in [1501;1750], as job id is i=7)"
[1] "seed 13733 for j=120 out of 250 (i.e. j=1620 in [1501;1750], as job id is i=7)"
[1] "seed 10037 for j=121 out of 250 (i.e. j=1621 in [1501;1750], as job id is i=7)"
[1] "seed 39090 for j=122 out of 250 (i.e. j=1622 in [1501;1750], as job id is i=7)"
[1] "seed 18710 for j=123 out of 250 (i.e. j=1623 in [1501;1750], as job id is i=7)"
[1] "seed 41671 for j=124 out of 250 (i.e. j=1624 in [1501;1750], as job id is i=7)"
[1] "seed 361 for j=125 out of 250 (i.e. j=1625 in [1501;1750], as job id is i=7)"
[1] "seed 26411 for j=126 out of 250 (i.e. j=1626 in [1501;1750], as job id is i=7)"
[1] "seed 37507 for j=127 out of 250 (i.e. j=1627 in [1501;1750], as job id is i=7)"
[1] "seed 45458 for j=128 out of 250 (i.e. j=1628 in [1501;1750], as job id is i=7)"
[1] "seed 45103 for j=129 out of 250 (i.e. j=1629 in [1501;1750], as job id is i=7)"
[1] "seed 75039 for j=130 out of 250 (i.e. j=1630 in [1501;1750], as job id is i=7)"
[1] "seed 79632 for j=131 out of 250 (i.e. j=1631 in [1501;1750], as job id is i=7)"
[1] "seed 79119 for j=132 out of 250 (i.e. j=1632 in [1501;1750], as job id is i=7)"
[1] "seed 62372 for j=133 out of 250 (i.e. j=1633 in [1501;1750], as job id is i=7)"
[1] "seed 37964 for j=134 out of 250 (i.e. j=1634 in [1501;1750], as job id is i=7)"
[1] "seed 31519 for j=135 out of 250 (i.e. j=1635 in [1501;1750], as job id is i=7)"
[1] "seed 5383 for j=136 out of 250 (i.e. j=1636 in [1501;1750], as job id is i=7)"
[1] "seed 43211 for j=137 out of 250 (i.e. j=1637 in [1501;1750], as job id is i=7)"
[1] "seed 65340 for j=138 out of 250 (i.e. j=1638 in [1501;1750], as job id is i=7)"
[1] "seed 94293 for j=139 out of 250 (i.e. j=1639 in [1501;1750], as job id is i=7)"
[1] "seed 78567 for j=140 out of 250 (i.e. j=1640 in [1501;1750], as job id is i=7)"
[1] "seed 58290 for j=141 out of 250 (i.e. j=1641 in [1501;1750], as job id is i=7)"
[1] "seed 84925 for j=142 out of 250 (i.e. j=1642 in [1501;1750], as job id is i=7)"
[1] "seed 39563 for j=143 out of 250 (i.e. j=1643 in [1501;1750], as job id is i=7)"
[1] "seed 26180 for j=144 out of 250 (i.e. j=1644 in [1501;1750], as job id is i=7)"
[1] "seed 61888 for j=145 out of 250 (i.e. j=1645 in [1501;1750], as job id is i=7)"
[1] "seed 95390 for j=146 out of 250 (i.e. j=1646 in [1501;1750], as job id is i=7)"
[1] "seed 24970 for j=147 out of 250 (i.e. j=1647 in [1501;1750], as job id is i=7)"
[1] "seed 1453 for j=148 out of 250 (i.e. j=1648 in [1501;1750], as job id is i=7)"
[1] "seed 80851 for j=149 out of 250 (i.e. j=1649 in [1501;1750], as job id is i=7)"
[1] "seed 85 for j=150 out of 250 (i.e. j=1650 in [1501;1750], as job id is i=7)"
[1] "seed 21264 for j=151 out of 250 (i.e. j=1651 in [1501;1750], as job id is i=7)"
[1] "seed 1363 for j=152 out of 250 (i.e. j=1652 in [1501;1750], as job id is i=7)"
[1] "seed 97745 for j=153 out of 250 (i.e. j=1653 in [1501;1750], as job id is i=7)"
[1] "seed 47243 for j=154 out of 250 (i.e. j=1654 in [1501;1750], as job id is i=7)"
[1] "seed 36640 for j=155 out of 250 (i.e. j=1655 in [1501;1750], as job id is i=7)"
[1] "seed 74053 for j=156 out of 250 (i.e. j=1656 in [1501;1750], as job id is i=7)"
[1] "seed 13059 for j=157 out of 250 (i.e. j=1657 in [1501;1750], as job id is i=7)"
[1] "seed 66290 for j=158 out of 250 (i.e. j=1658 in [1501;1750], as job id is i=7)"
[1] "seed 82786 for j=159 out of 250 (i.e. j=1659 in [1501;1750], as job id is i=7)"
[1] "seed 114 for j=160 out of 250 (i.e. j=1660 in [1501;1750], as job id is i=7)"
[1] "seed 85597 for j=161 out of 250 (i.e. j=1661 in [1501;1750], as job id is i=7)"
[1] "seed 58881 for j=162 out of 250 (i.e. j=1662 in [1501;1750], as job id is i=7)"
[1] "seed 33737 for j=163 out of 250 (i.e. j=1663 in [1501;1750], as job id is i=7)"
[1] "seed 85526 for j=164 out of 250 (i.e. j=1664 in [1501;1750], as job id is i=7)"
[1] "seed 42944 for j=165 out of 250 (i.e. j=1665 in [1501;1750], as job id is i=7)"
[1] "seed 2666 for j=166 out of 250 (i.e. j=1666 in [1501;1750], as job id is i=7)"
[1] "seed 29109 for j=167 out of 250 (i.e. j=1667 in [1501;1750], as job id is i=7)"
[1] "seed 70448 for j=168 out of 250 (i.e. j=1668 in [1501;1750], as job id is i=7)"
[1] "seed 20946 for j=169 out of 250 (i.e. j=1669 in [1501;1750], as job id is i=7)"
[1] "seed 54695 for j=170 out of 250 (i.e. j=1670 in [1501;1750], as job id is i=7)"
[1] "seed 92776 for j=171 out of 250 (i.e. j=1671 in [1501;1750], as job id is i=7)"
[1] "seed 45322 for j=172 out of 250 (i.e. j=1672 in [1501;1750], as job id is i=7)"
[1] "seed 36078 for j=173 out of 250 (i.e. j=1673 in [1501;1750], as job id is i=7)"
[1] "seed 15454 for j=174 out of 250 (i.e. j=1674 in [1501;1750], as job id is i=7)"
[1] "seed 3569 for j=175 out of 250 (i.e. j=1675 in [1501;1750], as job id is i=7)"
[1] "seed 93964 for j=176 out of 250 (i.e. j=1676 in [1501;1750], as job id is i=7)"
[1] "seed 11806 for j=177 out of 250 (i.e. j=1677 in [1501;1750], as job id is i=7)"
[1] "seed 24295 for j=178 out of 250 (i.e. j=1678 in [1501;1750], as job id is i=7)"
[1] "seed 98838 for j=179 out of 250 (i.e. j=1679 in [1501;1750], as job id is i=7)"
[1] "seed 54825 for j=180 out of 250 (i.e. j=1680 in [1501;1750], as job id is i=7)"
[1] "seed 60370 for j=181 out of 250 (i.e. j=1681 in [1501;1750], as job id is i=7)"
[1] "seed 75492 for j=182 out of 250 (i.e. j=1682 in [1501;1750], as job id is i=7)"
[1] "seed 80515 for j=183 out of 250 (i.e. j=1683 in [1501;1750], as job id is i=7)"
[1] "seed 23566 for j=184 out of 250 (i.e. j=1684 in [1501;1750], as job id is i=7)"
[1] "seed 79754 for j=185 out of 250 (i.e. j=1685 in [1501;1750], as job id is i=7)"
[1] "seed 19683 for j=186 out of 250 (i.e. j=1686 in [1501;1750], as job id is i=7)"
[1] "seed 39565 for j=187 out of 250 (i.e. j=1687 in [1501;1750], as job id is i=7)"
[1] "seed 81999 for j=188 out of 250 (i.e. j=1688 in [1501;1750], as job id is i=7)"
[1] "seed 27933 for j=189 out of 250 (i.e. j=1689 in [1501;1750], as job id is i=7)"
[1] "seed 36738 for j=190 out of 250 (i.e. j=1690 in [1501;1750], as job id is i=7)"
[1] "seed 59587 for j=191 out of 250 (i.e. j=1691 in [1501;1750], as job id is i=7)"
[1] "seed 62215 for j=192 out of 250 (i.e. j=1692 in [1501;1750], as job id is i=7)"
[1] "seed 17282 for j=193 out of 250 (i.e. j=1693 in [1501;1750], as job id is i=7)"
[1] "seed 43138 for j=194 out of 250 (i.e. j=1694 in [1501;1750], as job id is i=7)"
[1] "seed 52566 for j=195 out of 250 (i.e. j=1695 in [1501;1750], as job id is i=7)"
[1] "seed 19971 for j=196 out of 250 (i.e. j=1696 in [1501;1750], as job id is i=7)"
[1] "seed 82135 for j=197 out of 250 (i.e. j=1697 in [1501;1750], as job id is i=7)"
[1] "seed 11333 for j=198 out of 250 (i.e. j=1698 in [1501;1750], as job id is i=7)"
[1] "seed 38838 for j=199 out of 250 (i.e. j=1699 in [1501;1750], as job id is i=7)"
[1] "seed 23734 for j=200 out of 250 (i.e. j=1700 in [1501;1750], as job id is i=7)"
[1] "seed 54001 for j=201 out of 250 (i.e. j=1701 in [1501;1750], as job id is i=7)"
[1] "seed 8671 for j=202 out of 250 (i.e. j=1702 in [1501;1750], as job id is i=7)"
[1] "seed 91116 for j=203 out of 250 (i.e. j=1703 in [1501;1750], as job id is i=7)"
[1] "seed 81618 for j=204 out of 250 (i.e. j=1704 in [1501;1750], as job id is i=7)"
[1] "seed 94410 for j=205 out of 250 (i.e. j=1705 in [1501;1750], as job id is i=7)"
[1] "seed 29512 for j=206 out of 250 (i.e. j=1706 in [1501;1750], as job id is i=7)"
[1] "seed 78026 for j=207 out of 250 (i.e. j=1707 in [1501;1750], as job id is i=7)"
[1] "seed 47008 for j=208 out of 250 (i.e. j=1708 in [1501;1750], as job id is i=7)"
[1] "seed 83443 for j=209 out of 250 (i.e. j=1709 in [1501;1750], as job id is i=7)"
[1] "seed 19315 for j=210 out of 250 (i.e. j=1710 in [1501;1750], as job id is i=7)"
[1] "seed 1882 for j=211 out of 250 (i.e. j=1711 in [1501;1750], as job id is i=7)"
[1] "seed 55569 for j=212 out of 250 (i.e. j=1712 in [1501;1750], as job id is i=7)"
[1] "seed 31333 for j=213 out of 250 (i.e. j=1713 in [1501;1750], as job id is i=7)"
[1] "seed 82902 for j=214 out of 250 (i.e. j=1714 in [1501;1750], as job id is i=7)"
[1] "seed 20202 for j=215 out of 250 (i.e. j=1715 in [1501;1750], as job id is i=7)"
[1] "seed 60443 for j=216 out of 250 (i.e. j=1716 in [1501;1750], as job id is i=7)"
[1] "seed 92654 for j=217 out of 250 (i.e. j=1717 in [1501;1750], as job id is i=7)"
[1] "seed 77539 for j=218 out of 250 (i.e. j=1718 in [1501;1750], as job id is i=7)"
[1] "seed 84980 for j=219 out of 250 (i.e. j=1719 in [1501;1750], as job id is i=7)"
[1] "seed 31004 for j=220 out of 250 (i.e. j=1720 in [1501;1750], as job id is i=7)"
[1] "seed 13419 for j=221 out of 250 (i.e. j=1721 in [1501;1750], as job id is i=7)"
[1] "seed 42786 for j=222 out of 250 (i.e. j=1722 in [1501;1750], as job id is i=7)"
[1] "seed 65171 for j=223 out of 250 (i.e. j=1723 in [1501;1750], as job id is i=7)"
[1] "seed 85988 for j=224 out of 250 (i.e. j=1724 in [1501;1750], as job id is i=7)"
[1] "seed 38857 for j=225 out of 250 (i.e. j=1725 in [1501;1750], as job id is i=7)"
[1] "seed 5457 for j=226 out of 250 (i.e. j=1726 in [1501;1750], as job id is i=7)"
[1] "seed 2566 for j=227 out of 250 (i.e. j=1727 in [1501;1750], as job id is i=7)"
[1] "seed 72596 for j=228 out of 250 (i.e. j=1728 in [1501;1750], as job id is i=7)"
[1] "seed 48905 for j=229 out of 250 (i.e. j=1729 in [1501;1750], as job id is i=7)"
[1] "seed 34374 for j=230 out of 250 (i.e. j=1730 in [1501;1750], as job id is i=7)"
[1] "seed 32068 for j=231 out of 250 (i.e. j=1731 in [1501;1750], as job id is i=7)"
[1] "seed 11000 for j=232 out of 250 (i.e. j=1732 in [1501;1750], as job id is i=7)"
[1] "seed 22898 for j=233 out of 250 (i.e. j=1733 in [1501;1750], as job id is i=7)"
[1] "seed 3578 for j=234 out of 250 (i.e. j=1734 in [1501;1750], as job id is i=7)"
[1] "seed 23559 for j=235 out of 250 (i.e. j=1735 in [1501;1750], as job id is i=7)"
[1] "seed 77972 for j=236 out of 250 (i.e. j=1736 in [1501;1750], as job id is i=7)"
[1] "seed 43391 for j=237 out of 250 (i.e. j=1737 in [1501;1750], as job id is i=7)"
[1] "seed 16224 for j=238 out of 250 (i.e. j=1738 in [1501;1750], as job id is i=7)"
[1] "seed 8558 for j=239 out of 250 (i.e. j=1739 in [1501;1750], as job id is i=7)"
[1] "seed 8214 for j=240 out of 250 (i.e. j=1740 in [1501;1750], as job id is i=7)"
[1] "seed 12748 for j=241 out of 250 (i.e. j=1741 in [1501;1750], as job id is i=7)"
[1] "seed 51153 for j=242 out of 250 (i.e. j=1742 in [1501;1750], as job id is i=7)"
[1] "seed 70911 for j=243 out of 250 (i.e. j=1743 in [1501;1750], as job id is i=7)"
[1] "seed 9554 for j=244 out of 250 (i.e. j=1744 in [1501;1750], as job id is i=7)"
[1] "seed 98288 for j=245 out of 250 (i.e. j=1745 in [1501;1750], as job id is i=7)"
[1] "seed 26182 for j=246 out of 250 (i.e. j=1746 in [1501;1750], as job id is i=7)"
[1] "seed 76276 for j=247 out of 250 (i.e. j=1747 in [1501;1750], as job id is i=7)"
[1] "seed 6722 for j=248 out of 250 (i.e. j=1748 in [1501;1750], as job id is i=7)"
[1] "seed 77892 for j=249 out of 250 (i.e. j=1749 in [1501;1750], as job id is i=7)"
[1] "seed 16499 for j=250 out of 250 (i.e. j=1750 in [1501;1750], as job id is i=7)"
There were 28 warnings (use warnings() to see them)
> rownames(RES) <- NULL
> save(RES,file=paste0(path.res,name,"-",iter_sim,".rda"))
> 
> ## * Summary results
> sessionInfo()
R version 4.1.2 (2021-11-01)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Red Hat Enterprise Linux 8.5 (Ootpa)

Matrix products: default
BLAS:   /opt/software/R/4.1.2/lib64/R/lib/libRblas.so
LAPACK: /opt/software/R/4.1.2/lib64/R/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] mvtnorm_1.1-3    DelayedGSD_0.0.3

loaded via a namespace (and not attached):
 [1] BB_2019.10-1     magrittr_2.0.3   tidyselect_1.1.2 munsell_0.5.0   
 [5] lattice_0.20-45  colorspace_2.0-3 xtable_1.8-4     R6_2.5.1        
 [9] quadprog_1.5-8   rlang_1.0.3      fansi_1.0.3      dplyr_1.0.9     
[13] grid_4.1.2       nlme_3.1-153     gtable_0.3.0     gsDesign_3.3.0  
[17] utf8_1.2.2       cli_3.3.0        ellipsis_0.3.2   tibble_3.1.7    
[21] lifecycle_1.0.1  crayon_1.5.1     purrr_0.3.4      ggplot2_3.3.6   
[25] tidyr_1.2.0      vctrs_0.4.1      glue_1.6.2       compiler_4.1.2  
[29] pillar_1.7.0     generics_0.1.3   scales_1.2.0     pkgconfig_2.0.3 
> summary(RES)
     method        stage           type             statistic     
 Min.   :1.0   Min.   :1.000   Length:1500        Min.   :0.0073  
 1st Qu.:1.0   1st Qu.:1.000   Class :character   1st Qu.:1.7207  
 Median :1.5   Median :1.000   Mode  :character   Median :2.3901  
 Mean   :1.5   Mean   :1.333                      Mean   :2.3227  
 3rd Qu.:2.0   3rd Qu.:2.000                      3rd Qu.:2.9152  
 Max.   :2.0   Max.   :2.000                      Max.   :5.3300  
                                                  NA's   :500     
  estimate_ML          se_ML             info           infoPC      
 Min.   :-0.3177   Min.   :0.3294   Min.   :4.224   Min.   :0.3300  
 1st Qu.: 0.6008   1st Qu.:0.3891   1st Qu.:5.619   1st Qu.:0.4391  
 Median : 0.7976   Median :0.4048   Median :6.159   Median :0.4812  
 Mean   : 0.8291   Mean   :0.4072   Mean   :6.188   Mean   :0.4835  
 3rd Qu.: 1.0346   3rd Qu.:0.4265   3rd Qu.:6.677   3rd Qu.:0.5218  
 Max.   : 1.9654   Max.   :0.4866   Max.   :9.599   Max.   :0.7501  
 NA's   :500       NA's   :1000     NA's   :152     NA's   :152     
   info.pred      infoPC.pred           uk              lk         
 Min.   :4.436   Min.   :0.3466   Min.   :2.227   Min.   :-0.3741  
 1st Qu.:5.829   1st Qu.:0.4555   1st Qu.:2.475   1st Qu.: 0.0884  
 Median :6.506   Median :0.5084   Median :2.531   Median : 0.2859  
 Mean   :6.499   Mean   :0.5079   Mean   :2.535   Mean   : 0.2786  
 3rd Qu.:7.022   3rd Qu.:0.5487   3rd Qu.:2.603   3rd Qu.: 0.4421  
 Max.   :9.817   Max.   :0.7671   Max.   :2.779   Max.   : 1.1695  
 NA's   :1000    NA's   :1000     NA's   :1000    NA's   :1000     
   decision            reason            p.value_ML        lower_ML      
 Length:1500        Length:1500        Min.   :0.0000   Min.   :-0.8021  
 Class :character   Class :character   1st Qu.:0.0020   1st Qu.:-0.0230  
 Mode  :character   Mode  :character   Median :0.0077   Median : 0.1308  
                                       Mean   :0.0483   Mean   : 0.1321  
                                       3rd Qu.:0.0307   3rd Qu.: 0.2825  
                                       Max.   :0.9942   Max.   : 1.0040  
                                       NA's   :1000     NA's   :1000     
    upper_ML       p.value_MUE       lower_MUE         upper_MUE     
 Min.   :0.6582   Min.   :0.0000   Min.   :-0.8205   Min.   :0.8046  
 1st Qu.:1.2732   1st Qu.:0.0031   1st Qu.:-0.0431   1st Qu.:1.2526  
 Median :1.4622   Median :0.0073   Median : 0.0711   Median :1.4337  
 Mean   :1.5625   Mean   :0.0268   Mean   : 0.1125   Mean   :1.5668  
 3rd Qu.:1.8256   3rd Qu.:0.0191   3rd Qu.: 0.1904   3rd Qu.:1.8776  
 Max.   :2.6145   Max.   :0.8182   Max.   : 1.6068   Max.   :3.0647  
 NA's   :1000     NA's   :1000     NA's   :1000      NA's   :1000    
  estimate_MUE          ck          time.interim        seed      
 Min.   :0.0035   Min.   :0.1207   Min.   :512.0   Min.   :   85  
 1st Qu.:0.6091   1st Qu.:1.3817   1st Qu.:583.0   1st Qu.:22898  
 Median :0.7887   Median :1.4395   Median :600.5   Median :47234  
 Mean   :0.8585   Mean   :1.3902   Mean   :600.7   Mean   :48429  
 3rd Qu.:1.0508   3rd Qu.:1.4853   3rd Qu.:620.0   3rd Qu.:74053  
 Max.   :2.2315   Max.   :1.7267   Max.   :667.0   Max.   :99194  
 NA's   :1000     NA's   :652                                     
  nX1.interim     nX2.interim     nX3.interim  computation.time
 Min.   :146.0   Min.   :130.0   Min.   :121   Min.   :0.685   
 1st Qu.:148.0   1st Qu.:135.0   1st Qu.:125   1st Qu.:0.933   
 Median :149.0   Median :136.0   Median :127   Median :1.011   
 Mean   :148.7   Mean   :136.5   Mean   :127   Mean   :1.045   
 3rd Qu.:150.0   3rd Qu.:138.0   3rd Qu.:129   3rd Qu.:1.140   
 Max.   :154.0   Max.   :142.0   Max.   :135   Max.   :3.664   
                                                               
> 
> #----------------------------------------------------------------------
> ### BATCH_simuMain.R ends here
> 
> proc.time()
   user  system elapsed 
264.195   0.462 275.734 
