
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### BATCH_simuMain.R --- 
> #----------------------------------------------------------------------
> ## Author: Paul Blanche
> ## Created: Mar  5 2021 (10:56) 
> ## Version: 
> ## Last-Updated: jul  7 2022 (13:56) 
> ##           By: Brice Ozenne
> ##     Update #: 518
> #----------------------------------------------------------------------
> ## 
> ### Commentary: 
> ## 
> ### Change Log:
> #----------------------------------------------------------------------
> ## 
> ### Code:
> 
> ## ** BATCH loop
> ## cd /projects/biostat01/people/hpl802/DelayedGSD/
> ## for ITER in `seq 1 10`;
> ## do
> ## eval 'R CMD BATCH --vanilla "--args iter_sim='$ITER' n.iter_sim=10" BATCH_simuMain.R output/R-simuMain-'$ITER'.Rout &'
> ## done
> 
> ## [1] 1186669
> ## [2] 1186670
> ## [3] 1186671
> ## [4] 1186672
> ## [5] 1186673
> ## [6] 1186674
> ## [7] 1186675
> ## [8] 1186676
> ## [9] 1186677
> ## [10] 1186678
> 
> rm(list=ls())
>                                    # {{{ parameters
> ## * parameters
> name <- "ScenarioName" # To save the results
> method <- 1:2 # methods used to compute the boundaries
>                                         #---
> myseed <- 140786598
>                                         #--- to plan the trial ----
> NMC <- 250 # number of sequential simulations to run in parallel. Eg. with 250, then we can run 40 scripts in paralell to get N=10,000 runs in total.
> kMax <- 2  #max number of analyses (including final)
> alpha <- 0.025  #type I error (one sided)
> beta <- 0.2  #type II error
> informationRates <- c(0.5,1)  #planned  information rates
> rho_alpha <- 2  # rho parameter for alpha error spending function
> rho_beta <- 2  # rho parameter for beta error spending function
> ## deltaPower <- 0.75 # just to try another value when Id > Imax
> Id <- 0.55  #(expected) information rate at each decision analysis
> binding <- TRUE
>                                         #
>                                         #---- to generate data -----------
>                                         #
> block <- c(1,1,0,0) 
> allsd <- c(2.5,2.1,2.4) # sd, first from baseline measurement, then the two changes from baseline
> mean0 <- c(10,0,0) # mean placebo group (again, first is absolute value, then change from baseline)
> delta <- c(0,0.6,0.8) # treatment effect
> ar <- (0.86*2)*2 # orginial accrual rate from data from Corine is 0.86 per week, hence we multiply by 2 for by 14 days. As to low, we further multiply by 2
> cor011 <- -0.15 # ~ from data from Corine
> corij1 <- 0.68  # ~ from data from Corine
> cor0j1 <- -0.27  # ~ from data from Corine
> Miss11 <- 5/104 # miss both V1 and V2
> Miss12 <- 1/104 # miss V1 and but not V2
> Miss21 <- 6/104 # do not miss V1 and but miss V2
> Miss22 <- 92/104 # miss none
> PropForInterim <- 0.5 # Decide to have interim analysiz when PropForInterim % of all subjects have had the chance to have one follow-up measuement recorded in the data to be available for analysis.
> theDelta.t <- 1.50001 # time lag to process the data and make them ready to analyze after collecting them (unit is time between two follow-up visits)
> TimeFactor <- 14 ## number of days between two visits
>                                         #
>                                         #--- actually for both planing the trial  and generating data-----
>                                         #
>                                         #
> deltaPower <- abs(delta[3]) # effect (NOT Z-scale/unit, but outcome scale/unit!) that the study is powered for: should we choose ourselves or compute from other numbers above ???
> n <- ceiling(2*2*((allsd[3]/deltaPower)^2)*(qnorm(1-beta)-qnorm(alpha))^2) #104 with Corine's data # should we choose ourselves or compute from the above numbers ???
>                                         # inflate SS as required for interim
> 
>                                         # {{{ Set seeds for parallel computing and reproducibility
> ## * Seed
> args <- commandArgs(TRUE) ## BATCH MODE
> if(length(args)>0){
+     for (arg in args){
+         eval(parse(text=arg))
+     }
+ }else{ ## SLUMR
+     iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_ID"))
+     n.iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_COUNT"))
+ } ## interactive
> if(is.na(iter_sim)){iter_sim <- 1}
> if(is.na(n.iter_sim)){n.iter_sim <- 40}
> 
> set.seed(140786598)
> allseeds <- sample.int(n = 10*n.iter_sim*NMC, size = n.iter_sim*NMC, replace=FALSE) #x=1:(.Machine$integer.max) seems to be maximal possible
> # }}}
> 
> # {{{ set path to load and save and othe machine specific variables
> ## * path
> path <- "."
> path.res <- file.path(path,"Results","simuMain")
> if(dir.exists(path.res)==FALSE){
+     if(dir.exists(file.path(path,"Results"))==FALSE){
+     dir.create(file.path(path,"Results"))
+     }
+     dir.create(path.res)
+ }
> path.output <- file.path(path,"output","simuMain")
> if(dir.exists(path.output)==FALSE){
+     if(dir.exists(file.path(path,"output"))==FALSE){
+     dir.create(file.path(path,"output"))
+     }
+     dir.create(path.output)
+ }
> # }}}
> 
> 
> ## * libraries and functions
> library(DelayedGSD)
DelayedGSD version 0.0.3
> ## sourceDir <- function(path, trace = TRUE, ...) {
> ##     for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
> ##         if(trace) cat(nm,":")
> ##         source(file.path(path, nm), ...)
> ##         if(trace) cat("\n")
> ##     }
> ## }
> ## sourceDir(pathToLoad)
>     
> 
> ## * Compute inflation factor and sample size
> plannedB <- vector(mode = "list", length = 3)
> for(iMeth in method){ ## iMeth <- 1
+     plannedB[[iMeth]] <- CalcBoundaries(kMax=kMax,  
+                                         alpha=alpha, 
+                                         beta=beta,  
+                                         InfoR.i=informationRates,  
+                                         InfoR.d=c(Id,1),  
+                                         rho_alpha=rho_alpha,  
+                                         rho_beta=rho_beta,  
+                                         method=iMeth,  
+                                         cNotBelowFixedc=FALSE,
+                                         bindingFutility=binding,
+                                         delta=tail(delta,1))
+     ## summary(plannedB[[1]])
+     ## coef(plannedB[[iMeth]], type = "information")
+ }
Loading required namespace: gsDesign
Loading required package: mvtnorm
Loading required namespace: BB
> inflationFactor <- unlist(lapply(plannedB,function(iP){iP$planned$InflationFactor}))
> nGSD <- ceiling(n*inflationFactor)
> ##  plot(plannedB[[1]])
> 
> #
> # --- just to check---
> ## n
> ## InfoFixed <- ((qnorm(1-beta)-qnorm(alpha))/(deltaPower))^2
> ## InfoFixed
> ## n/(4*(allsd[3])^2)
> #---
> # }}}
> 
> 
> 
> 
> # {{{ technical details to loop
> RES <- NULL # initialize results to save
> allj <- ((iter_sim-1)*NMC + 1):(iter_sim*NMC) # indices of all iterations (replicates) for this job, accountng for the other jobs running in parallel
> # }}}
> 
> ## * Loop
> for(j in allj){ ## j <- 51 ## 5
+     startComp <- Sys.time()
+     myseedi <- allseeds[j]
+     # {{{ TRACE info (e.g. to check the Rout)
+     print(paste0("seed ",myseedi," for ","j=",which(j==allj)," out of ",NMC, " (i.e. j=",j," in [",(iter_sim-1)*NMC + 1,";",iter_sim*NMC,"], as job id is i=",iter_sim,")"))
+     # }}}
+     # {{{ Missing probabilities
+     MyMissProb <- matrix(c(Miss11,Miss12,Miss21,Miss22),ncol=2,nrow=2,byrow=TRUE) # to additionnally remove 1 more because some FASFL=N
+     colnames(MyMissProb) <- c("V2 missing","V2 not missing")
+     rownames(MyMissProb) <- c("V1 missing","V1 not missing")
+     # }}}
+ 
+                                         # {{{ generate data
+     ## ** simulate
+     res <- GenData(n=n, 
+                    N.fw=2,
+                    rand.block=block,
+                    allsd=allsd,
+                    mean0=mean0,
+                    delta=delta,
+                    ar=ar,
+                    cor.01.1=cor011,
+                    cor.ij.1=corij1,
+                    cor.0j.1=cor0j1,
+                    seed=myseedi,
+                    MissProb=MyMissProb,
+                    DigitsOutcome=2,
+                    TimeFactor=TimeFactor,
+                    DigitsTime=0
+                    )
+     d <- res$d
+     ## head(d,n=20)
+                                         # }}}
+                                         # {{{ reformat data like those of Corine
+     ## Make data long format
+     ## dd <- FormatAsCase(d)
+     ## head(dd)
+     ## summary(dd)
+                                         # }}}
+    
+                                         # {{{ make data available at interim
+                                         # Here we stop inclusion data collection for the interim analysis as soon as
+                                         # half of the participants have completed (or had the opportunity to complete) the follow-up 
+     thet <- d$t3[ceiling(n*PropForInterim)]
+     di <- SelectData(d,t=thet)
+     ## ddi <- FormatAsCase(di) # needed ????
+     ## head(d[d$id==52,])
+                                         # }}}
+     ## {{{ analyze data at at interim
+     ## ** interim
+     lmmI <- analyzeData(di, ddf = "nlme", data.decision = sum(d$t1 <= thet + theDelta.t*TimeFactor), getinfo = TRUE, trace = TRUE)
+     ## lmmI <- analyzeData(di, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     currentGSD <- vector(mode = "list", length = 3)
+     out.interim <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+ 
+         currentGSD[[iMeth]] <- update(plannedB[[iMeth]], delta = lmmI, trace = FALSE)
+ 
+         iConfint.interim <- confint(currentGSD[[iMeth]])
+         iInfo.interim <- coef(currentGSD[[iMeth]], type = "information")
+         iBoundary.interim <- coef(currentGSD[[iMeth]], type = "boundary")
+         iDecision.interim <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+         out.interim[[iMeth]] <-  data.frame(statistic = iConfint.interim[1,"statistic"],
+                                             estimate_ML = iConfint.interim[1,"estimate"],
+                                             se_ML = iConfint.interim[1,"se"],
+                                             info = iInfo.interim[1,"Interim"],
+                                             infoPC = iInfo.interim[1,"Interim.pc"],
+                                             info.pred = iInfo.interim[1,"Decision"],
+                                             infoPC.pred = iInfo.interim[1,"Decision.pc"],
+                                             uk = iBoundary.interim[1,"Ebound"],
+                                             lk = iBoundary.interim[1,"Fbound"],
+                                             decision = iDecision.interim["decision","stage 1"],
+                                             reason = iDecision.interim["reason.interim","stage 1"])
+     }
+     ## currentGSD[[1]]
+     ## plot(currentGSD[[1]])
+ 
+     ## ** decision
+     dDecision <- d[which(d$t1 <= thet + theDelta.t*TimeFactor),]
+     lmmD <- analyzeData(dDecision, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+     
+     out.decision <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+           
+         if(out.interim[[iMeth]]$decision == "stop"){
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, trace = FALSE)
+             ## plot(currentGSD[[iMeth]])
+ 
+             iConfint.decision <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.decision  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = iConfint.decision[1,"statistic"],
+                                                 p.value_ML = iConfint.decision[iConfint.decision$method == "ML","p.value"],
+                                                 lower_ML = iConfint.decision[iConfint.decision$method == "ML","lower"],
+                                                 upper_ML = iConfint.decision[iConfint.decision$method == "ML","upper"],
+                                                 estimate_ML = iConfint.decision[iConfint.decision$method == "ML","estimate"],
+                                                 p.value_MUE = iConfint.decision[iConfint.decision$method == "MUE","p.value"],
+                                                 lower_MUE = iConfint.decision[iConfint.decision$method == "MUE","lower"],
+                                                 upper_MUE = iConfint.decision[iConfint.decision$method == "MUE","upper"],
+                                                 estimate_MUE = iConfint.decision[iConfint.decision$method == "MUE","estimate"],
+                                                 info = iInfo.decision[1,"Interim"],
+                                                 infoPC = iInfo.decision[1,"Interim.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = unname(iDecision.decision["decision","stage 2"])
+                                                 )
+ 
+         }else{
+             ## update information
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, k = 1, type.k = "decision", trace = FALSE)
+ 
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = NA,
+                                                 p.value_ML = NA,
+                                                 lower_ML = NA,
+                                                 upper_ML = NA,
+                                                 estimate_ML = NA,
+                                                 p.value_MUE = NA,
+                                                 lower_MUE = NA,
+                                                 upper_MUE = NA,
+                                                 estimate_MUE = NA,
+                                                 info = iInfo.decision[1,"Decision"],
+                                                 infoPC = iInfo.decision[1,"Decision.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = NA)
+         }
+     }
+                                         # }}}
+                                         # {{{ Analyze data at decision
+ 
+     ## ** finale
+     dFinal <- d
+     lmmF <- analyzeData(dFinal, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     out.final <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+         if(out.interim[[iMeth]]$decision == "stop"){
+             out.final[[iMeth]] <- data.frame(statistic = NA,
+                                              p.value_ML = NA,
+                                              lower_ML = NA,
+                                              upper_ML = NA,
+                                              estimate_ML = NA,
+                                              p.value_MUE = NA,
+                                              lower_MUE = NA,
+                                              upper_MUE = NA,
+                                              estimate_MUE = NA,
+                                              info = NA,
+                                              infoPC = NA,
+                                              ck = NA,
+                                              decision = NA)
+ 
+         }else{
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmF, trace = FALSE)
+ 
+             ## plot(test)
+             ## summary(test)
+             iConfint.final <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.final <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.final <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.final  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.final[[iMeth]] <- data.frame(statistic = iConfint.final[1,"statistic"],
+                                              p.value_ML = iConfint.final[iConfint.final$method == "ML","p.value"],
+                                              lower_ML = iConfint.final[iConfint.final$method == "ML","lower"],
+                                              upper_ML = iConfint.final[iConfint.final$method == "ML","upper"],
+                                              estimate_ML = iConfint.final[iConfint.final$method == "ML","estimate"],
+                                              p.value_MUE = iConfint.final[iConfint.final$method == "MUE","p.value"],
+                                              lower_MUE = iConfint.final[iConfint.final$method == "MUE","lower"],
+                                              upper_MUE = iConfint.final[iConfint.final$method == "MUE","upper"],
+                                              estimate_MUE = iConfint.final[iConfint.final$method == "MUE","estimate"],
+                                              info = iInfo.final[1,"Interim"],
+                                              infoPC = iInfo.final[1,"Interim.pc"],
+                                              ck = iBoundary.final[1,"Cbound"],
+                                              decision = unname(coef(currentGSD[[iMeth]], type = "decision")["decision","stage 2"])
+                                              )
+         }
+     }
+                                         # }}}
+ 
+     stopComp <- Sys.time()
+                                         # {{{ Save results
+ 
+     outMerge <- do.call(rbind,lapply(method, function(iMeth){
+         iNames <- unique(c(names(out.interim[[iMeth]]),names(out.decision[[iMeth]]),names(out.final[[iMeth]])))
+         iMerge <- data.frame(matrix(NA, ncol = length(iNames)+3, nrow = 3, dimnames = list(NULL, c("method", "stage", "type", iNames))))
+         iMerge[1,c("method","stage","type",names(out.interim[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "interim", out.interim[[iMeth]]) 
+         iMerge[2,c("method","stage","type",names(out.decision[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "decision", out.decision[[iMeth]]) 
+         iMerge[3,c("method","stage","type",names(out.final[[iMeth]]))] <- data.frame(method = iMeth, stage = 2, type = "final", out.final[[iMeth]])
+         return(iMerge)
+     }))
+ 
+     ## outMerge[outMerge$method==3,]
+ 
+     out <- cbind(
+         ## results
+         outMerge,
+         ## simulation details
+         time.interim = thet,
+         seed=myseedi,             
+         nX1.interim = sum(!is.na(di$X1)),
+         nX2.interim = sum(!is.na(di$X2)),
+         nX3.interim = sum(!is.na(di$X3)),
+         ## computation time
+         computation.time=as.double(round(difftime(stopComp,startComp,units="secs"),3))
+     )
+     ## names(out) <- myColNames
+     RES <- rbind(RES,out)
+     save(RES,file=paste0(path.res,name,"(tempo)-",iter_sim,".rda"))
+                                         # }}}
+ }
[1] "seed 69079 for j=1 out of 250 (i.e. j=4001 in [4001;4250], as job id is i=17)"
Loading required namespace: nlme
[1] "seed 78283 for j=2 out of 250 (i.e. j=4002 in [4001;4250], as job id is i=17)"
[1] "seed 34882 for j=3 out of 250 (i.e. j=4003 in [4001;4250], as job id is i=17)"
[1] "seed 85811 for j=4 out of 250 (i.e. j=4004 in [4001;4250], as job id is i=17)"
[1] "seed 7276 for j=5 out of 250 (i.e. j=4005 in [4001;4250], as job id is i=17)"
[1] "seed 16129 for j=6 out of 250 (i.e. j=4006 in [4001;4250], as job id is i=17)"
[1] "seed 34310 for j=7 out of 250 (i.e. j=4007 in [4001;4250], as job id is i=17)"
[1] "seed 863 for j=8 out of 250 (i.e. j=4008 in [4001;4250], as job id is i=17)"
[1] "seed 21300 for j=9 out of 250 (i.e. j=4009 in [4001;4250], as job id is i=17)"
[1] "seed 92210 for j=10 out of 250 (i.e. j=4010 in [4001;4250], as job id is i=17)"
[1] "seed 35030 for j=11 out of 250 (i.e. j=4011 in [4001;4250], as job id is i=17)"
[1] "seed 18922 for j=12 out of 250 (i.e. j=4012 in [4001;4250], as job id is i=17)"
[1] "seed 85414 for j=13 out of 250 (i.e. j=4013 in [4001;4250], as job id is i=17)"
[1] "seed 38007 for j=14 out of 250 (i.e. j=4014 in [4001;4250], as job id is i=17)"
[1] "seed 83024 for j=15 out of 250 (i.e. j=4015 in [4001;4250], as job id is i=17)"
[1] "seed 53117 for j=16 out of 250 (i.e. j=4016 in [4001;4250], as job id is i=17)"
[1] "seed 51384 for j=17 out of 250 (i.e. j=4017 in [4001;4250], as job id is i=17)"
[1] "seed 56188 for j=18 out of 250 (i.e. j=4018 in [4001;4250], as job id is i=17)"
[1] "seed 10270 for j=19 out of 250 (i.e. j=4019 in [4001;4250], as job id is i=17)"
[1] "seed 21526 for j=20 out of 250 (i.e. j=4020 in [4001;4250], as job id is i=17)"
[1] "seed 46697 for j=21 out of 250 (i.e. j=4021 in [4001;4250], as job id is i=17)"
[1] "seed 61069 for j=22 out of 250 (i.e. j=4022 in [4001;4250], as job id is i=17)"
[1] "seed 21167 for j=23 out of 250 (i.e. j=4023 in [4001;4250], as job id is i=17)"
[1] "seed 98137 for j=24 out of 250 (i.e. j=4024 in [4001;4250], as job id is i=17)"
[1] "seed 72317 for j=25 out of 250 (i.e. j=4025 in [4001;4250], as job id is i=17)"
[1] "seed 89174 for j=26 out of 250 (i.e. j=4026 in [4001;4250], as job id is i=17)"
[1] "seed 75275 for j=27 out of 250 (i.e. j=4027 in [4001;4250], as job id is i=17)"
[1] "seed 54179 for j=28 out of 250 (i.e. j=4028 in [4001;4250], as job id is i=17)"
[1] "seed 17292 for j=29 out of 250 (i.e. j=4029 in [4001;4250], as job id is i=17)"
[1] "seed 93745 for j=30 out of 250 (i.e. j=4030 in [4001;4250], as job id is i=17)"
[1] "seed 52064 for j=31 out of 250 (i.e. j=4031 in [4001;4250], as job id is i=17)"
[1] "seed 96009 for j=32 out of 250 (i.e. j=4032 in [4001;4250], as job id is i=17)"
[1] "seed 79488 for j=33 out of 250 (i.e. j=4033 in [4001;4250], as job id is i=17)"
[1] "seed 99060 for j=34 out of 250 (i.e. j=4034 in [4001;4250], as job id is i=17)"
[1] "seed 68155 for j=35 out of 250 (i.e. j=4035 in [4001;4250], as job id is i=17)"
[1] "seed 18449 for j=36 out of 250 (i.e. j=4036 in [4001;4250], as job id is i=17)"
[1] "seed 50159 for j=37 out of 250 (i.e. j=4037 in [4001;4250], as job id is i=17)"
[1] "seed 87197 for j=38 out of 250 (i.e. j=4038 in [4001;4250], as job id is i=17)"
[1] "seed 45467 for j=39 out of 250 (i.e. j=4039 in [4001;4250], as job id is i=17)"
[1] "seed 9018 for j=40 out of 250 (i.e. j=4040 in [4001;4250], as job id is i=17)"
[1] "seed 84648 for j=41 out of 250 (i.e. j=4041 in [4001;4250], as job id is i=17)"
[1] "seed 22545 for j=42 out of 250 (i.e. j=4042 in [4001;4250], as job id is i=17)"
[1] "seed 85093 for j=43 out of 250 (i.e. j=4043 in [4001;4250], as job id is i=17)"
[1] "seed 64963 for j=44 out of 250 (i.e. j=4044 in [4001;4250], as job id is i=17)"
[1] "seed 15667 for j=45 out of 250 (i.e. j=4045 in [4001;4250], as job id is i=17)"
[1] "seed 58299 for j=46 out of 250 (i.e. j=4046 in [4001;4250], as job id is i=17)"
[1] "seed 76146 for j=47 out of 250 (i.e. j=4047 in [4001;4250], as job id is i=17)"
[1] "seed 6399 for j=48 out of 250 (i.e. j=4048 in [4001;4250], as job id is i=17)"
[1] "seed 38273 for j=49 out of 250 (i.e. j=4049 in [4001;4250], as job id is i=17)"
[1] "seed 25325 for j=50 out of 250 (i.e. j=4050 in [4001;4250], as job id is i=17)"
[1] "seed 78025 for j=51 out of 250 (i.e. j=4051 in [4001;4250], as job id is i=17)"
[1] "seed 29591 for j=52 out of 250 (i.e. j=4052 in [4001;4250], as job id is i=17)"
[1] "seed 78814 for j=53 out of 250 (i.e. j=4053 in [4001;4250], as job id is i=17)"
[1] "seed 37677 for j=54 out of 250 (i.e. j=4054 in [4001;4250], as job id is i=17)"
[1] "seed 57661 for j=55 out of 250 (i.e. j=4055 in [4001;4250], as job id is i=17)"
[1] "seed 84599 for j=56 out of 250 (i.e. j=4056 in [4001;4250], as job id is i=17)"
[1] "seed 62873 for j=57 out of 250 (i.e. j=4057 in [4001;4250], as job id is i=17)"
[1] "seed 44434 for j=58 out of 250 (i.e. j=4058 in [4001;4250], as job id is i=17)"
[1] "seed 76782 for j=59 out of 250 (i.e. j=4059 in [4001;4250], as job id is i=17)"
[1] "seed 30945 for j=60 out of 250 (i.e. j=4060 in [4001;4250], as job id is i=17)"
[1] "seed 96529 for j=61 out of 250 (i.e. j=4061 in [4001;4250], as job id is i=17)"
[1] "seed 71529 for j=62 out of 250 (i.e. j=4062 in [4001;4250], as job id is i=17)"
[1] "seed 874 for j=63 out of 250 (i.e. j=4063 in [4001;4250], as job id is i=17)"
[1] "seed 95164 for j=64 out of 250 (i.e. j=4064 in [4001;4250], as job id is i=17)"
[1] "seed 45124 for j=65 out of 250 (i.e. j=4065 in [4001;4250], as job id is i=17)"
[1] "seed 59591 for j=66 out of 250 (i.e. j=4066 in [4001;4250], as job id is i=17)"
[1] "seed 49633 for j=67 out of 250 (i.e. j=4067 in [4001;4250], as job id is i=17)"
[1] "seed 42524 for j=68 out of 250 (i.e. j=4068 in [4001;4250], as job id is i=17)"
[1] "seed 87346 for j=69 out of 250 (i.e. j=4069 in [4001;4250], as job id is i=17)"
[1] "seed 42116 for j=70 out of 250 (i.e. j=4070 in [4001;4250], as job id is i=17)"
[1] "seed 13725 for j=71 out of 250 (i.e. j=4071 in [4001;4250], as job id is i=17)"
[1] "seed 93917 for j=72 out of 250 (i.e. j=4072 in [4001;4250], as job id is i=17)"
[1] "seed 94066 for j=73 out of 250 (i.e. j=4073 in [4001;4250], as job id is i=17)"
[1] "seed 39760 for j=74 out of 250 (i.e. j=4074 in [4001;4250], as job id is i=17)"
[1] "seed 84401 for j=75 out of 250 (i.e. j=4075 in [4001;4250], as job id is i=17)"
[1] "seed 69709 for j=76 out of 250 (i.e. j=4076 in [4001;4250], as job id is i=17)"
[1] "seed 54242 for j=77 out of 250 (i.e. j=4077 in [4001;4250], as job id is i=17)"
[1] "seed 62016 for j=78 out of 250 (i.e. j=4078 in [4001;4250], as job id is i=17)"
[1] "seed 79774 for j=79 out of 250 (i.e. j=4079 in [4001;4250], as job id is i=17)"
[1] "seed 17725 for j=80 out of 250 (i.e. j=4080 in [4001;4250], as job id is i=17)"
[1] "seed 1413 for j=81 out of 250 (i.e. j=4081 in [4001;4250], as job id is i=17)"
[1] "seed 24475 for j=82 out of 250 (i.e. j=4082 in [4001;4250], as job id is i=17)"
[1] "seed 68203 for j=83 out of 250 (i.e. j=4083 in [4001;4250], as job id is i=17)"
[1] "seed 62200 for j=84 out of 250 (i.e. j=4084 in [4001;4250], as job id is i=17)"
[1] "seed 76974 for j=85 out of 250 (i.e. j=4085 in [4001;4250], as job id is i=17)"
[1] "seed 67327 for j=86 out of 250 (i.e. j=4086 in [4001;4250], as job id is i=17)"
[1] "seed 2544 for j=87 out of 250 (i.e. j=4087 in [4001;4250], as job id is i=17)"
[1] "seed 48405 for j=88 out of 250 (i.e. j=4088 in [4001;4250], as job id is i=17)"
[1] "seed 3048 for j=89 out of 250 (i.e. j=4089 in [4001;4250], as job id is i=17)"
[1] "seed 65640 for j=90 out of 250 (i.e. j=4090 in [4001;4250], as job id is i=17)"
[1] "seed 95188 for j=91 out of 250 (i.e. j=4091 in [4001;4250], as job id is i=17)"
[1] "seed 63484 for j=92 out of 250 (i.e. j=4092 in [4001;4250], as job id is i=17)"
[1] "seed 4630 for j=93 out of 250 (i.e. j=4093 in [4001;4250], as job id is i=17)"
[1] "seed 72542 for j=94 out of 250 (i.e. j=4094 in [4001;4250], as job id is i=17)"
[1] "seed 17553 for j=95 out of 250 (i.e. j=4095 in [4001;4250], as job id is i=17)"
[1] "seed 32287 for j=96 out of 250 (i.e. j=4096 in [4001;4250], as job id is i=17)"
[1] "seed 19016 for j=97 out of 250 (i.e. j=4097 in [4001;4250], as job id is i=17)"
[1] "seed 71788 for j=98 out of 250 (i.e. j=4098 in [4001;4250], as job id is i=17)"
[1] "seed 63 for j=99 out of 250 (i.e. j=4099 in [4001;4250], as job id is i=17)"
[1] "seed 78334 for j=100 out of 250 (i.e. j=4100 in [4001;4250], as job id is i=17)"
[1] "seed 86417 for j=101 out of 250 (i.e. j=4101 in [4001;4250], as job id is i=17)"
[1] "seed 81529 for j=102 out of 250 (i.e. j=4102 in [4001;4250], as job id is i=17)"
[1] "seed 34807 for j=103 out of 250 (i.e. j=4103 in [4001;4250], as job id is i=17)"
[1] "seed 67132 for j=104 out of 250 (i.e. j=4104 in [4001;4250], as job id is i=17)"
[1] "seed 28220 for j=105 out of 250 (i.e. j=4105 in [4001;4250], as job id is i=17)"
[1] "seed 68508 for j=106 out of 250 (i.e. j=4106 in [4001;4250], as job id is i=17)"
[1] "seed 94002 for j=107 out of 250 (i.e. j=4107 in [4001;4250], as job id is i=17)"
[1] "seed 34336 for j=108 out of 250 (i.e. j=4108 in [4001;4250], as job id is i=17)"
[1] "seed 80007 for j=109 out of 250 (i.e. j=4109 in [4001;4250], as job id is i=17)"
[1] "seed 66736 for j=110 out of 250 (i.e. j=4110 in [4001;4250], as job id is i=17)"
[1] "seed 63600 for j=111 out of 250 (i.e. j=4111 in [4001;4250], as job id is i=17)"
[1] "seed 71395 for j=112 out of 250 (i.e. j=4112 in [4001;4250], as job id is i=17)"
[1] "seed 4527 for j=113 out of 250 (i.e. j=4113 in [4001;4250], as job id is i=17)"
[1] "seed 36659 for j=114 out of 250 (i.e. j=4114 in [4001;4250], as job id is i=17)"
[1] "seed 84365 for j=115 out of 250 (i.e. j=4115 in [4001;4250], as job id is i=17)"
[1] "seed 27556 for j=116 out of 250 (i.e. j=4116 in [4001;4250], as job id is i=17)"
[1] "seed 37474 for j=117 out of 250 (i.e. j=4117 in [4001;4250], as job id is i=17)"
[1] "seed 25710 for j=118 out of 250 (i.e. j=4118 in [4001;4250], as job id is i=17)"
[1] "seed 21867 for j=119 out of 250 (i.e. j=4119 in [4001;4250], as job id is i=17)"
[1] "seed 59075 for j=120 out of 250 (i.e. j=4120 in [4001;4250], as job id is i=17)"
[1] "seed 93170 for j=121 out of 250 (i.e. j=4121 in [4001;4250], as job id is i=17)"
[1] "seed 67649 for j=122 out of 250 (i.e. j=4122 in [4001;4250], as job id is i=17)"
[1] "seed 75378 for j=123 out of 250 (i.e. j=4123 in [4001;4250], as job id is i=17)"
[1] "seed 66708 for j=124 out of 250 (i.e. j=4124 in [4001;4250], as job id is i=17)"
[1] "seed 79648 for j=125 out of 250 (i.e. j=4125 in [4001;4250], as job id is i=17)"
[1] "seed 58025 for j=126 out of 250 (i.e. j=4126 in [4001;4250], as job id is i=17)"
[1] "seed 60545 for j=127 out of 250 (i.e. j=4127 in [4001;4250], as job id is i=17)"
[1] "seed 84478 for j=128 out of 250 (i.e. j=4128 in [4001;4250], as job id is i=17)"
[1] "seed 48955 for j=129 out of 250 (i.e. j=4129 in [4001;4250], as job id is i=17)"
[1] "seed 64530 for j=130 out of 250 (i.e. j=4130 in [4001;4250], as job id is i=17)"
[1] "seed 74943 for j=131 out of 250 (i.e. j=4131 in [4001;4250], as job id is i=17)"
[1] "seed 74807 for j=132 out of 250 (i.e. j=4132 in [4001;4250], as job id is i=17)"
[1] "seed 54510 for j=133 out of 250 (i.e. j=4133 in [4001;4250], as job id is i=17)"
[1] "seed 38867 for j=134 out of 250 (i.e. j=4134 in [4001;4250], as job id is i=17)"
[1] "seed 39940 for j=135 out of 250 (i.e. j=4135 in [4001;4250], as job id is i=17)"
[1] "seed 72417 for j=136 out of 250 (i.e. j=4136 in [4001;4250], as job id is i=17)"
[1] "seed 99975 for j=137 out of 250 (i.e. j=4137 in [4001;4250], as job id is i=17)"
[1] "seed 25693 for j=138 out of 250 (i.e. j=4138 in [4001;4250], as job id is i=17)"
[1] "seed 53171 for j=139 out of 250 (i.e. j=4139 in [4001;4250], as job id is i=17)"
[1] "seed 83923 for j=140 out of 250 (i.e. j=4140 in [4001;4250], as job id is i=17)"
[1] "seed 58656 for j=141 out of 250 (i.e. j=4141 in [4001;4250], as job id is i=17)"
[1] "seed 11542 for j=142 out of 250 (i.e. j=4142 in [4001;4250], as job id is i=17)"
[1] "seed 57723 for j=143 out of 250 (i.e. j=4143 in [4001;4250], as job id is i=17)"
[1] "seed 44232 for j=144 out of 250 (i.e. j=4144 in [4001;4250], as job id is i=17)"
[1] "seed 99698 for j=145 out of 250 (i.e. j=4145 in [4001;4250], as job id is i=17)"
[1] "seed 51236 for j=146 out of 250 (i.e. j=4146 in [4001;4250], as job id is i=17)"
[1] "seed 88992 for j=147 out of 250 (i.e. j=4147 in [4001;4250], as job id is i=17)"
[1] "seed 63676 for j=148 out of 250 (i.e. j=4148 in [4001;4250], as job id is i=17)"
[1] "seed 38536 for j=149 out of 250 (i.e. j=4149 in [4001;4250], as job id is i=17)"
[1] "seed 61225 for j=150 out of 250 (i.e. j=4150 in [4001;4250], as job id is i=17)"
[1] "seed 30634 for j=151 out of 250 (i.e. j=4151 in [4001;4250], as job id is i=17)"
[1] "seed 86922 for j=152 out of 250 (i.e. j=4152 in [4001;4250], as job id is i=17)"
[1] "seed 51154 for j=153 out of 250 (i.e. j=4153 in [4001;4250], as job id is i=17)"
[1] "seed 96449 for j=154 out of 250 (i.e. j=4154 in [4001;4250], as job id is i=17)"
[1] "seed 4321 for j=155 out of 250 (i.e. j=4155 in [4001;4250], as job id is i=17)"
[1] "seed 11447 for j=156 out of 250 (i.e. j=4156 in [4001;4250], as job id is i=17)"
[1] "seed 588 for j=157 out of 250 (i.e. j=4157 in [4001;4250], as job id is i=17)"
[1] "seed 83285 for j=158 out of 250 (i.e. j=4158 in [4001;4250], as job id is i=17)"
[1] "seed 75320 for j=159 out of 250 (i.e. j=4159 in [4001;4250], as job id is i=17)"
[1] "seed 52721 for j=160 out of 250 (i.e. j=4160 in [4001;4250], as job id is i=17)"
[1] "seed 21503 for j=161 out of 250 (i.e. j=4161 in [4001;4250], as job id is i=17)"
[1] "seed 48264 for j=162 out of 250 (i.e. j=4162 in [4001;4250], as job id is i=17)"
[1] "seed 26285 for j=163 out of 250 (i.e. j=4163 in [4001;4250], as job id is i=17)"
[1] "seed 46378 for j=164 out of 250 (i.e. j=4164 in [4001;4250], as job id is i=17)"
[1] "seed 87460 for j=165 out of 250 (i.e. j=4165 in [4001;4250], as job id is i=17)"
[1] "seed 3068 for j=166 out of 250 (i.e. j=4166 in [4001;4250], as job id is i=17)"
[1] "seed 97307 for j=167 out of 250 (i.e. j=4167 in [4001;4250], as job id is i=17)"
[1] "seed 88952 for j=168 out of 250 (i.e. j=4168 in [4001;4250], as job id is i=17)"
[1] "seed 73563 for j=169 out of 250 (i.e. j=4169 in [4001;4250], as job id is i=17)"
[1] "seed 17645 for j=170 out of 250 (i.e. j=4170 in [4001;4250], as job id is i=17)"
[1] "seed 5952 for j=171 out of 250 (i.e. j=4171 in [4001;4250], as job id is i=17)"
[1] "seed 77557 for j=172 out of 250 (i.e. j=4172 in [4001;4250], as job id is i=17)"
[1] "seed 23072 for j=173 out of 250 (i.e. j=4173 in [4001;4250], as job id is i=17)"
[1] "seed 70301 for j=174 out of 250 (i.e. j=4174 in [4001;4250], as job id is i=17)"
[1] "seed 84031 for j=175 out of 250 (i.e. j=4175 in [4001;4250], as job id is i=17)"
[1] "seed 9651 for j=176 out of 250 (i.e. j=4176 in [4001;4250], as job id is i=17)"
[1] "seed 41817 for j=177 out of 250 (i.e. j=4177 in [4001;4250], as job id is i=17)"
[1] "seed 12917 for j=178 out of 250 (i.e. j=4178 in [4001;4250], as job id is i=17)"
[1] "seed 93273 for j=179 out of 250 (i.e. j=4179 in [4001;4250], as job id is i=17)"
[1] "seed 4926 for j=180 out of 250 (i.e. j=4180 in [4001;4250], as job id is i=17)"
[1] "seed 32964 for j=181 out of 250 (i.e. j=4181 in [4001;4250], as job id is i=17)"
[1] "seed 26252 for j=182 out of 250 (i.e. j=4182 in [4001;4250], as job id is i=17)"
[1] "seed 74500 for j=183 out of 250 (i.e. j=4183 in [4001;4250], as job id is i=17)"
[1] "seed 56844 for j=184 out of 250 (i.e. j=4184 in [4001;4250], as job id is i=17)"
[1] "seed 60931 for j=185 out of 250 (i.e. j=4185 in [4001;4250], as job id is i=17)"
[1] "seed 37178 for j=186 out of 250 (i.e. j=4186 in [4001;4250], as job id is i=17)"
[1] "seed 1987 for j=187 out of 250 (i.e. j=4187 in [4001;4250], as job id is i=17)"
[1] "seed 50320 for j=188 out of 250 (i.e. j=4188 in [4001;4250], as job id is i=17)"
[1] "seed 28852 for j=189 out of 250 (i.e. j=4189 in [4001;4250], as job id is i=17)"
[1] "seed 93095 for j=190 out of 250 (i.e. j=4190 in [4001;4250], as job id is i=17)"
[1] "seed 1928 for j=191 out of 250 (i.e. j=4191 in [4001;4250], as job id is i=17)"
[1] "seed 24178 for j=192 out of 250 (i.e. j=4192 in [4001;4250], as job id is i=17)"
[1] "seed 24976 for j=193 out of 250 (i.e. j=4193 in [4001;4250], as job id is i=17)"
[1] "seed 49515 for j=194 out of 250 (i.e. j=4194 in [4001;4250], as job id is i=17)"
[1] "seed 67093 for j=195 out of 250 (i.e. j=4195 in [4001;4250], as job id is i=17)"
[1] "seed 59985 for j=196 out of 250 (i.e. j=4196 in [4001;4250], as job id is i=17)"
[1] "seed 83104 for j=197 out of 250 (i.e. j=4197 in [4001;4250], as job id is i=17)"
[1] "seed 14751 for j=198 out of 250 (i.e. j=4198 in [4001;4250], as job id is i=17)"
[1] "seed 60233 for j=199 out of 250 (i.e. j=4199 in [4001;4250], as job id is i=17)"
[1] "seed 45281 for j=200 out of 250 (i.e. j=4200 in [4001;4250], as job id is i=17)"
[1] "seed 31179 for j=201 out of 250 (i.e. j=4201 in [4001;4250], as job id is i=17)"
[1] "seed 41261 for j=202 out of 250 (i.e. j=4202 in [4001;4250], as job id is i=17)"
[1] "seed 54833 for j=203 out of 250 (i.e. j=4203 in [4001;4250], as job id is i=17)"
[1] "seed 65100 for j=204 out of 250 (i.e. j=4204 in [4001;4250], as job id is i=17)"
[1] "seed 98403 for j=205 out of 250 (i.e. j=4205 in [4001;4250], as job id is i=17)"
[1] "seed 30959 for j=206 out of 250 (i.e. j=4206 in [4001;4250], as job id is i=17)"
[1] "seed 81535 for j=207 out of 250 (i.e. j=4207 in [4001;4250], as job id is i=17)"
[1] "seed 25615 for j=208 out of 250 (i.e. j=4208 in [4001;4250], as job id is i=17)"
[1] "seed 63212 for j=209 out of 250 (i.e. j=4209 in [4001;4250], as job id is i=17)"
[1] "seed 34067 for j=210 out of 250 (i.e. j=4210 in [4001;4250], as job id is i=17)"
[1] "seed 66496 for j=211 out of 250 (i.e. j=4211 in [4001;4250], as job id is i=17)"
[1] "seed 29940 for j=212 out of 250 (i.e. j=4212 in [4001;4250], as job id is i=17)"
[1] "seed 61436 for j=213 out of 250 (i.e. j=4213 in [4001;4250], as job id is i=17)"
[1] "seed 76369 for j=214 out of 250 (i.e. j=4214 in [4001;4250], as job id is i=17)"
[1] "seed 19386 for j=215 out of 250 (i.e. j=4215 in [4001;4250], as job id is i=17)"
[1] "seed 41717 for j=216 out of 250 (i.e. j=4216 in [4001;4250], as job id is i=17)"
[1] "seed 82938 for j=217 out of 250 (i.e. j=4217 in [4001;4250], as job id is i=17)"
[1] "seed 26666 for j=218 out of 250 (i.e. j=4218 in [4001;4250], as job id is i=17)"
[1] "seed 96341 for j=219 out of 250 (i.e. j=4219 in [4001;4250], as job id is i=17)"
[1] "seed 66661 for j=220 out of 250 (i.e. j=4220 in [4001;4250], as job id is i=17)"
[1] "seed 19727 for j=221 out of 250 (i.e. j=4221 in [4001;4250], as job id is i=17)"
[1] "seed 7316 for j=222 out of 250 (i.e. j=4222 in [4001;4250], as job id is i=17)"
[1] "seed 18535 for j=223 out of 250 (i.e. j=4223 in [4001;4250], as job id is i=17)"
[1] "seed 53400 for j=224 out of 250 (i.e. j=4224 in [4001;4250], as job id is i=17)"
[1] "seed 96829 for j=225 out of 250 (i.e. j=4225 in [4001;4250], as job id is i=17)"
[1] "seed 92642 for j=226 out of 250 (i.e. j=4226 in [4001;4250], as job id is i=17)"
[1] "seed 45589 for j=227 out of 250 (i.e. j=4227 in [4001;4250], as job id is i=17)"
[1] "seed 79266 for j=228 out of 250 (i.e. j=4228 in [4001;4250], as job id is i=17)"
[1] "seed 88007 for j=229 out of 250 (i.e. j=4229 in [4001;4250], as job id is i=17)"
[1] "seed 61432 for j=230 out of 250 (i.e. j=4230 in [4001;4250], as job id is i=17)"
[1] "seed 33905 for j=231 out of 250 (i.e. j=4231 in [4001;4250], as job id is i=17)"
[1] "seed 95074 for j=232 out of 250 (i.e. j=4232 in [4001;4250], as job id is i=17)"
[1] "seed 88216 for j=233 out of 250 (i.e. j=4233 in [4001;4250], as job id is i=17)"
[1] "seed 72109 for j=234 out of 250 (i.e. j=4234 in [4001;4250], as job id is i=17)"
[1] "seed 958 for j=235 out of 250 (i.e. j=4235 in [4001;4250], as job id is i=17)"
[1] "seed 91184 for j=236 out of 250 (i.e. j=4236 in [4001;4250], as job id is i=17)"
[1] "seed 32244 for j=237 out of 250 (i.e. j=4237 in [4001;4250], as job id is i=17)"
[1] "seed 50769 for j=238 out of 250 (i.e. j=4238 in [4001;4250], as job id is i=17)"
[1] "seed 7149 for j=239 out of 250 (i.e. j=4239 in [4001;4250], as job id is i=17)"
[1] "seed 38323 for j=240 out of 250 (i.e. j=4240 in [4001;4250], as job id is i=17)"
[1] "seed 97636 for j=241 out of 250 (i.e. j=4241 in [4001;4250], as job id is i=17)"
[1] "seed 13962 for j=242 out of 250 (i.e. j=4242 in [4001;4250], as job id is i=17)"
[1] "seed 83150 for j=243 out of 250 (i.e. j=4243 in [4001;4250], as job id is i=17)"
[1] "seed 54058 for j=244 out of 250 (i.e. j=4244 in [4001;4250], as job id is i=17)"
[1] "seed 99716 for j=245 out of 250 (i.e. j=4245 in [4001;4250], as job id is i=17)"
[1] "seed 15593 for j=246 out of 250 (i.e. j=4246 in [4001;4250], as job id is i=17)"
[1] "seed 77540 for j=247 out of 250 (i.e. j=4247 in [4001;4250], as job id is i=17)"
[1] "seed 74854 for j=248 out of 250 (i.e. j=4248 in [4001;4250], as job id is i=17)"
[1] "seed 7528 for j=249 out of 250 (i.e. j=4249 in [4001;4250], as job id is i=17)"
[1] "seed 56961 for j=250 out of 250 (i.e. j=4250 in [4001;4250], as job id is i=17)"
There were 14 warnings (use warnings() to see them)
> rownames(RES) <- NULL
> save(RES,file=paste0(path.res,name,"-",iter_sim,".rda"))
> 
> ## * Summary results
> sessionInfo()
R version 4.1.2 (2021-11-01)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Red Hat Enterprise Linux 8.5 (Ootpa)

Matrix products: default
BLAS:   /opt/software/R/4.1.2/lib64/R/lib/libRblas.so
LAPACK: /opt/software/R/4.1.2/lib64/R/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] mvtnorm_1.1-3    DelayedGSD_0.0.3

loaded via a namespace (and not attached):
 [1] BB_2019.10-1     magrittr_2.0.3   tidyselect_1.1.2 munsell_0.5.0   
 [5] lattice_0.20-45  colorspace_2.0-3 xtable_1.8-4     R6_2.5.1        
 [9] quadprog_1.5-8   rlang_1.0.3      fansi_1.0.3      dplyr_1.0.9     
[13] grid_4.1.2       nlme_3.1-153     gtable_0.3.0     gsDesign_3.3.0  
[17] utf8_1.2.2       cli_3.3.0        ellipsis_0.3.2   tibble_3.1.7    
[21] lifecycle_1.0.1  crayon_1.5.1     purrr_0.3.4      ggplot2_3.3.6   
[25] tidyr_1.2.0      vctrs_0.4.1      glue_1.6.2       compiler_4.1.2  
[29] pillar_1.7.0     generics_0.1.3   scales_1.2.0     pkgconfig_2.0.3 
> summary(RES)
     method        stage           type             statistic     
 Min.   :1.0   Min.   :1.000   Length:1500        Min.   :0.0111  
 1st Qu.:1.0   1st Qu.:1.000   Class :character   1st Qu.:1.4628  
 Median :1.5   Median :1.000   Mode  :character   Median :2.2428  
 Mean   :1.5   Mean   :1.333                      Mean   :2.1776  
 3rd Qu.:2.0   3rd Qu.:2.000                      3rd Qu.:2.9201  
 Max.   :2.0   Max.   :2.000                      Max.   :4.5958  
                                                  NA's   :500     
  estimate_ML          se_ML             info           infoPC      
 Min.   :-0.7408   Min.   :0.3463   Min.   :4.084   Min.   :0.3192  
 1st Qu.: 0.5272   1st Qu.:0.3886   1st Qu.:5.717   1st Qu.:0.4467  
 Median : 0.7563   Median :0.4056   Median :6.227   Median :0.4866  
 Mean   : 0.7644   Mean   :0.4055   Mean   :6.253   Mean   :0.4886  
 3rd Qu.: 1.0198   3rd Qu.:0.4211   3rd Qu.:6.697   3rd Qu.:0.5233  
 Max.   : 1.8477   Max.   :0.4948   Max.   :8.808   Max.   :0.6883  
 NA's   :500       NA's   :1000     NA's   :142     NA's   :142     
   info.pred      infoPC.pred           uk              lk         
 Min.   :4.323   Min.   :0.3378   Min.   :2.304   Min.   :-0.4293  
 1st Qu.:6.001   1st Qu.:0.4689   1st Qu.:2.473   1st Qu.: 0.1356  
 Median :6.515   Median :0.5091   Median :2.534   Median : 0.2784  
 Mean   :6.541   Mean   :0.5111   Mean   :2.530   Mean   : 0.2923  
 3rd Qu.:7.027   3rd Qu.:0.5491   3rd Qu.:2.586   3rd Qu.: 0.4471  
 Max.   :8.784   Max.   :0.6864   Max.   :2.801   Max.   : 0.9379  
 NA's   :1000    NA's   :1000     NA's   :1000    NA's   :1000     
   decision            reason            p.value_ML        lower_ML      
 Length:1500        Length:1500        Min.   :0.0000   Min.   :-0.9940  
 Class :character   Class :character   1st Qu.:0.0022   1st Qu.:-0.0550  
 Mode  :character   Mode  :character   Median :0.0088   Median : 0.1097  
                                       Mean   :0.0707   Mean   : 0.0904  
                                       3rd Qu.:0.0392   3rd Qu.: 0.2671  
                                       Max.   :0.9645   Max.   : 0.9416  
                                       NA's   :1000     NA's   :1000     
    upper_ML       p.value_MUE       lower_MUE         upper_MUE     
 Min.   :0.6215   Min.   :0.0000   Min.   :-0.9891   Min.   :0.7123  
 1st Qu.:1.2358   1st Qu.:0.0046   1st Qu.:-0.0661   1st Qu.:1.2360  
 Median :1.4278   Median :0.0088   Median : 0.0452   Median :1.4097  
 Mean   :1.5165   Mean   :0.0391   Mean   : 0.0492   Mean   :1.5150  
 3rd Qu.:1.7502   3rd Qu.:0.0218   3rd Qu.: 0.1450   3rd Qu.:1.7150  
 Max.   :2.7537   Max.   :0.6118   Max.   : 1.8799   Max.   :3.3175  
 NA's   :1000     NA's   :1000     NA's   :1000      NA's   :1000    
  estimate_MUE           ck           time.interim        seed      
 Min.   :-0.1033   Min.   :-0.0278   Min.   :541.0   Min.   :   63  
 1st Qu.: 0.5930   1st Qu.: 1.4032   1st Qu.:584.0   1st Qu.:28852  
 Median : 0.7571   Median : 1.4495   Median :602.0   Median :56516  
 Mean   : 0.7996   Mean   : 1.4255   Mean   :602.8   Mean   :53184  
 3rd Qu.: 0.9814   3rd Qu.: 1.4953   3rd Qu.:621.0   3rd Qu.:77557  
 Max.   : 2.4959   Max.   : 1.6608   Max.   :673.0   Max.   :99975  
 NA's   :1000      NA's   :642                                      
  nX1.interim     nX2.interim     nX3.interim  computation.time
 Min.   :145.0   Min.   :129.0   Min.   :119   Min.   :0.710   
 1st Qu.:148.0   1st Qu.:135.0   1st Qu.:125   1st Qu.:0.937   
 Median :149.0   Median :136.0   Median :127   Median :1.011   
 Mean   :148.8   Mean   :136.4   Mean   :127   Mean   :1.037   
 3rd Qu.:150.0   3rd Qu.:138.0   3rd Qu.:129   3rd Qu.:1.146   
 Max.   :157.0   Max.   :146.0   Max.   :135   Max.   :3.797   
                                                               
> 
> #----------------------------------------------------------------------
> ### BATCH_simuMain.R ends here
> 
> proc.time()
   user  system elapsed 
262.571   0.420 273.753 
