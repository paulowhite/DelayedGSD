
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### BATCH_simuMain.R --- 
> #----------------------------------------------------------------------
> ## Author: Paul Blanche
> ## Created: Mar  5 2021 (10:56) 
> ## Version: 
> ## Last-Updated: jul  7 2022 (13:56) 
> ##           By: Brice Ozenne
> ##     Update #: 518
> #----------------------------------------------------------------------
> ## 
> ### Commentary: 
> ## 
> ### Change Log:
> #----------------------------------------------------------------------
> ## 
> ### Code:
> 
> ## ** BATCH loop
> ## cd /projects/biostat01/people/hpl802/DelayedGSD/
> ## for ITER in `seq 1 10`;
> ## do
> ## eval 'R CMD BATCH --vanilla "--args iter_sim='$ITER' n.iter_sim=10" BATCH_simuMain.R output/R-simuMain-'$ITER'.Rout &'
> ## done
> 
> ## [1] 1186669
> ## [2] 1186670
> ## [3] 1186671
> ## [4] 1186672
> ## [5] 1186673
> ## [6] 1186674
> ## [7] 1186675
> ## [8] 1186676
> ## [9] 1186677
> ## [10] 1186678
> 
> rm(list=ls())
>                                    # {{{ parameters
> ## * parameters
> name <- "ScenarioName" # To save the results
> method <- 1:2 # methods used to compute the boundaries
>                                         #---
> myseed <- 140786598
>                                         #--- to plan the trial ----
> NMC <- 250 # number of sequential simulations to run in parallel. Eg. with 250, then we can run 40 scripts in paralell to get N=10,000 runs in total.
> kMax <- 2  #max number of analyses (including final)
> alpha <- 0.025  #type I error (one sided)
> beta <- 0.2  #type II error
> informationRates <- c(0.5,1)  #planned  information rates
> rho_alpha <- 2  # rho parameter for alpha error spending function
> rho_beta <- 2  # rho parameter for beta error spending function
> ## deltaPower <- 0.75 # just to try another value when Id > Imax
> Id <- 0.55  #(expected) information rate at each decision analysis
> binding <- TRUE
>                                         #
>                                         #---- to generate data -----------
>                                         #
> block <- c(1,1,0,0) 
> allsd <- c(2.5,2.1,2.4) # sd, first from baseline measurement, then the two changes from baseline
> mean0 <- c(10,0,0) # mean placebo group (again, first is absolute value, then change from baseline)
> delta <- c(0,0.6,0.8) # treatment effect
> ar <- (0.86*2)*2 # orginial accrual rate from data from Corine is 0.86 per week, hence we multiply by 2 for by 14 days. As to low, we further multiply by 2
> cor011 <- -0.15 # ~ from data from Corine
> corij1 <- 0.68  # ~ from data from Corine
> cor0j1 <- -0.27  # ~ from data from Corine
> Miss11 <- 5/104 # miss both V1 and V2
> Miss12 <- 1/104 # miss V1 and but not V2
> Miss21 <- 6/104 # do not miss V1 and but miss V2
> Miss22 <- 92/104 # miss none
> PropForInterim <- 0.5 # Decide to have interim analysiz when PropForInterim % of all subjects have had the chance to have one follow-up measuement recorded in the data to be available for analysis.
> theDelta.t <- 1.50001 # time lag to process the data and make them ready to analyze after collecting them (unit is time between two follow-up visits)
> TimeFactor <- 14 ## number of days between two visits
>                                         #
>                                         #--- actually for both planing the trial  and generating data-----
>                                         #
>                                         #
> deltaPower <- abs(delta[3]) # effect (NOT Z-scale/unit, but outcome scale/unit!) that the study is powered for: should we choose ourselves or compute from other numbers above ???
> n <- ceiling(2*2*((allsd[3]/deltaPower)^2)*(qnorm(1-beta)-qnorm(alpha))^2) #104 with Corine's data # should we choose ourselves or compute from the above numbers ???
>                                         # inflate SS as required for interim
> 
>                                         # {{{ Set seeds for parallel computing and reproducibility
> ## * Seed
> args <- commandArgs(TRUE) ## BATCH MODE
> if(length(args)>0){
+     for (arg in args){
+         eval(parse(text=arg))
+     }
+ }else{ ## SLUMR
+     iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_ID"))
+     n.iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_COUNT"))
+ } ## interactive
> if(is.na(iter_sim)){iter_sim <- 1}
> if(is.na(n.iter_sim)){n.iter_sim <- 40}
> 
> set.seed(140786598)
> allseeds <- sample.int(n = 10*n.iter_sim*NMC, size = n.iter_sim*NMC, replace=FALSE) #x=1:(.Machine$integer.max) seems to be maximal possible
> # }}}
> 
> # {{{ set path to load and save and othe machine specific variables
> ## * path
> path <- "."
> path.res <- file.path(path,"Results","simuMain")
> if(dir.exists(path.res)==FALSE){
+     if(dir.exists(file.path(path,"Results"))==FALSE){
+     dir.create(file.path(path,"Results"))
+     }
+     dir.create(path.res)
+ }
> path.output <- file.path(path,"output","simuMain")
> if(dir.exists(path.output)==FALSE){
+     if(dir.exists(file.path(path,"output"))==FALSE){
+     dir.create(file.path(path,"output"))
+     }
+     dir.create(path.output)
+ }
> # }}}
> 
> 
> ## * libraries and functions
> library(DelayedGSD)
DelayedGSD version 0.0.3
> ## sourceDir <- function(path, trace = TRUE, ...) {
> ##     for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
> ##         if(trace) cat(nm,":")
> ##         source(file.path(path, nm), ...)
> ##         if(trace) cat("\n")
> ##     }
> ## }
> ## sourceDir(pathToLoad)
>     
> 
> ## * Compute inflation factor and sample size
> plannedB <- vector(mode = "list", length = 3)
> for(iMeth in method){ ## iMeth <- 1
+     plannedB[[iMeth]] <- CalcBoundaries(kMax=kMax,  
+                                         alpha=alpha, 
+                                         beta=beta,  
+                                         InfoR.i=informationRates,  
+                                         InfoR.d=c(Id,1),  
+                                         rho_alpha=rho_alpha,  
+                                         rho_beta=rho_beta,  
+                                         method=iMeth,  
+                                         cNotBelowFixedc=FALSE,
+                                         bindingFutility=binding,
+                                         delta=tail(delta,1))
+     ## summary(plannedB[[1]])
+     ## coef(plannedB[[iMeth]], type = "information")
+ }
Loading required namespace: gsDesign
Loading required package: mvtnorm
Loading required namespace: BB
> inflationFactor <- unlist(lapply(plannedB,function(iP){iP$planned$InflationFactor}))
> nGSD <- ceiling(n*inflationFactor)
> ##  plot(plannedB[[1]])
> 
> #
> # --- just to check---
> ## n
> ## InfoFixed <- ((qnorm(1-beta)-qnorm(alpha))/(deltaPower))^2
> ## InfoFixed
> ## n/(4*(allsd[3])^2)
> #---
> # }}}
> 
> 
> 
> 
> # {{{ technical details to loop
> RES <- NULL # initialize results to save
> allj <- ((iter_sim-1)*NMC + 1):(iter_sim*NMC) # indices of all iterations (replicates) for this job, accountng for the other jobs running in parallel
> # }}}
> 
> ## * Loop
> for(j in allj){ ## j <- 51 ## 5
+     startComp <- Sys.time()
+     myseedi <- allseeds[j]
+     # {{{ TRACE info (e.g. to check the Rout)
+     print(paste0("seed ",myseedi," for ","j=",which(j==allj)," out of ",NMC, " (i.e. j=",j," in [",(iter_sim-1)*NMC + 1,";",iter_sim*NMC,"], as job id is i=",iter_sim,")"))
+     # }}}
+     # {{{ Missing probabilities
+     MyMissProb <- matrix(c(Miss11,Miss12,Miss21,Miss22),ncol=2,nrow=2,byrow=TRUE) # to additionnally remove 1 more because some FASFL=N
+     colnames(MyMissProb) <- c("V2 missing","V2 not missing")
+     rownames(MyMissProb) <- c("V1 missing","V1 not missing")
+     # }}}
+ 
+                                         # {{{ generate data
+     ## ** simulate
+     res <- GenData(n=n, 
+                    N.fw=2,
+                    rand.block=block,
+                    allsd=allsd,
+                    mean0=mean0,
+                    delta=delta,
+                    ar=ar,
+                    cor.01.1=cor011,
+                    cor.ij.1=corij1,
+                    cor.0j.1=cor0j1,
+                    seed=myseedi,
+                    MissProb=MyMissProb,
+                    DigitsOutcome=2,
+                    TimeFactor=TimeFactor,
+                    DigitsTime=0
+                    )
+     d <- res$d
+     ## head(d,n=20)
+                                         # }}}
+                                         # {{{ reformat data like those of Corine
+     ## Make data long format
+     ## dd <- FormatAsCase(d)
+     ## head(dd)
+     ## summary(dd)
+                                         # }}}
+    
+                                         # {{{ make data available at interim
+                                         # Here we stop inclusion data collection for the interim analysis as soon as
+                                         # half of the participants have completed (or had the opportunity to complete) the follow-up 
+     thet <- d$t3[ceiling(n*PropForInterim)]
+     di <- SelectData(d,t=thet)
+     ## ddi <- FormatAsCase(di) # needed ????
+     ## head(d[d$id==52,])
+                                         # }}}
+     ## {{{ analyze data at at interim
+     ## ** interim
+     lmmI <- analyzeData(di, ddf = "nlme", data.decision = sum(d$t1 <= thet + theDelta.t*TimeFactor), getinfo = TRUE, trace = TRUE)
+     ## lmmI <- analyzeData(di, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     currentGSD <- vector(mode = "list", length = 3)
+     out.interim <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+ 
+         currentGSD[[iMeth]] <- update(plannedB[[iMeth]], delta = lmmI, trace = FALSE)
+ 
+         iConfint.interim <- confint(currentGSD[[iMeth]])
+         iInfo.interim <- coef(currentGSD[[iMeth]], type = "information")
+         iBoundary.interim <- coef(currentGSD[[iMeth]], type = "boundary")
+         iDecision.interim <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+         out.interim[[iMeth]] <-  data.frame(statistic = iConfint.interim[1,"statistic"],
+                                             estimate_ML = iConfint.interim[1,"estimate"],
+                                             se_ML = iConfint.interim[1,"se"],
+                                             info = iInfo.interim[1,"Interim"],
+                                             infoPC = iInfo.interim[1,"Interim.pc"],
+                                             info.pred = iInfo.interim[1,"Decision"],
+                                             infoPC.pred = iInfo.interim[1,"Decision.pc"],
+                                             uk = iBoundary.interim[1,"Ebound"],
+                                             lk = iBoundary.interim[1,"Fbound"],
+                                             decision = iDecision.interim["decision","stage 1"],
+                                             reason = iDecision.interim["reason.interim","stage 1"])
+     }
+     ## currentGSD[[1]]
+     ## plot(currentGSD[[1]])
+ 
+     ## ** decision
+     dDecision <- d[which(d$t1 <= thet + theDelta.t*TimeFactor),]
+     lmmD <- analyzeData(dDecision, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+     
+     out.decision <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+           
+         if(out.interim[[iMeth]]$decision == "stop"){
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, trace = FALSE)
+             ## plot(currentGSD[[iMeth]])
+ 
+             iConfint.decision <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.decision  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = iConfint.decision[1,"statistic"],
+                                                 p.value_ML = iConfint.decision[iConfint.decision$method == "ML","p.value"],
+                                                 lower_ML = iConfint.decision[iConfint.decision$method == "ML","lower"],
+                                                 upper_ML = iConfint.decision[iConfint.decision$method == "ML","upper"],
+                                                 estimate_ML = iConfint.decision[iConfint.decision$method == "ML","estimate"],
+                                                 p.value_MUE = iConfint.decision[iConfint.decision$method == "MUE","p.value"],
+                                                 lower_MUE = iConfint.decision[iConfint.decision$method == "MUE","lower"],
+                                                 upper_MUE = iConfint.decision[iConfint.decision$method == "MUE","upper"],
+                                                 estimate_MUE = iConfint.decision[iConfint.decision$method == "MUE","estimate"],
+                                                 info = iInfo.decision[1,"Interim"],
+                                                 infoPC = iInfo.decision[1,"Interim.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = unname(iDecision.decision["decision","stage 2"])
+                                                 )
+ 
+         }else{
+             ## update information
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, k = 1, type.k = "decision", trace = FALSE)
+ 
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = NA,
+                                                 p.value_ML = NA,
+                                                 lower_ML = NA,
+                                                 upper_ML = NA,
+                                                 estimate_ML = NA,
+                                                 p.value_MUE = NA,
+                                                 lower_MUE = NA,
+                                                 upper_MUE = NA,
+                                                 estimate_MUE = NA,
+                                                 info = iInfo.decision[1,"Decision"],
+                                                 infoPC = iInfo.decision[1,"Decision.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = NA)
+         }
+     }
+                                         # }}}
+                                         # {{{ Analyze data at decision
+ 
+     ## ** finale
+     dFinal <- d
+     lmmF <- analyzeData(dFinal, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     out.final <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+         if(out.interim[[iMeth]]$decision == "stop"){
+             out.final[[iMeth]] <- data.frame(statistic = NA,
+                                              p.value_ML = NA,
+                                              lower_ML = NA,
+                                              upper_ML = NA,
+                                              estimate_ML = NA,
+                                              p.value_MUE = NA,
+                                              lower_MUE = NA,
+                                              upper_MUE = NA,
+                                              estimate_MUE = NA,
+                                              info = NA,
+                                              infoPC = NA,
+                                              ck = NA,
+                                              decision = NA)
+ 
+         }else{
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmF, trace = FALSE)
+ 
+             ## plot(test)
+             ## summary(test)
+             iConfint.final <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.final <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.final <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.final  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.final[[iMeth]] <- data.frame(statistic = iConfint.final[1,"statistic"],
+                                              p.value_ML = iConfint.final[iConfint.final$method == "ML","p.value"],
+                                              lower_ML = iConfint.final[iConfint.final$method == "ML","lower"],
+                                              upper_ML = iConfint.final[iConfint.final$method == "ML","upper"],
+                                              estimate_ML = iConfint.final[iConfint.final$method == "ML","estimate"],
+                                              p.value_MUE = iConfint.final[iConfint.final$method == "MUE","p.value"],
+                                              lower_MUE = iConfint.final[iConfint.final$method == "MUE","lower"],
+                                              upper_MUE = iConfint.final[iConfint.final$method == "MUE","upper"],
+                                              estimate_MUE = iConfint.final[iConfint.final$method == "MUE","estimate"],
+                                              info = iInfo.final[1,"Interim"],
+                                              infoPC = iInfo.final[1,"Interim.pc"],
+                                              ck = iBoundary.final[1,"Cbound"],
+                                              decision = unname(coef(currentGSD[[iMeth]], type = "decision")["decision","stage 2"])
+                                              )
+         }
+     }
+                                         # }}}
+ 
+     stopComp <- Sys.time()
+                                         # {{{ Save results
+ 
+     outMerge <- do.call(rbind,lapply(method, function(iMeth){
+         iNames <- unique(c(names(out.interim[[iMeth]]),names(out.decision[[iMeth]]),names(out.final[[iMeth]])))
+         iMerge <- data.frame(matrix(NA, ncol = length(iNames)+3, nrow = 3, dimnames = list(NULL, c("method", "stage", "type", iNames))))
+         iMerge[1,c("method","stage","type",names(out.interim[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "interim", out.interim[[iMeth]]) 
+         iMerge[2,c("method","stage","type",names(out.decision[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "decision", out.decision[[iMeth]]) 
+         iMerge[3,c("method","stage","type",names(out.final[[iMeth]]))] <- data.frame(method = iMeth, stage = 2, type = "final", out.final[[iMeth]])
+         return(iMerge)
+     }))
+ 
+     ## outMerge[outMerge$method==3,]
+ 
+     out <- cbind(
+         ## results
+         outMerge,
+         ## simulation details
+         time.interim = thet,
+         seed=myseedi,             
+         nX1.interim = sum(!is.na(di$X1)),
+         nX2.interim = sum(!is.na(di$X2)),
+         nX3.interim = sum(!is.na(di$X3)),
+         ## computation time
+         computation.time=as.double(round(difftime(stopComp,startComp,units="secs"),3))
+     )
+     ## names(out) <- myColNames
+     RES <- rbind(RES,out)
+     save(RES,file=paste0(path.res,name,"(tempo)-",iter_sim,".rda"))
+                                         # }}}
+ }
[1] "seed 80886 for j=1 out of 250 (i.e. j=5001 in [5001;5250], as job id is i=21)"
Loading required namespace: nlme
[1] "seed 95588 for j=2 out of 250 (i.e. j=5002 in [5001;5250], as job id is i=21)"
[1] "seed 50677 for j=3 out of 250 (i.e. j=5003 in [5001;5250], as job id is i=21)"
[1] "seed 75179 for j=4 out of 250 (i.e. j=5004 in [5001;5250], as job id is i=21)"
[1] "seed 79222 for j=5 out of 250 (i.e. j=5005 in [5001;5250], as job id is i=21)"
[1] "seed 26923 for j=6 out of 250 (i.e. j=5006 in [5001;5250], as job id is i=21)"
[1] "seed 70149 for j=7 out of 250 (i.e. j=5007 in [5001;5250], as job id is i=21)"
[1] "seed 135 for j=8 out of 250 (i.e. j=5008 in [5001;5250], as job id is i=21)"
[1] "seed 37254 for j=9 out of 250 (i.e. j=5009 in [5001;5250], as job id is i=21)"
[1] "seed 46991 for j=10 out of 250 (i.e. j=5010 in [5001;5250], as job id is i=21)"
[1] "seed 90700 for j=11 out of 250 (i.e. j=5011 in [5001;5250], as job id is i=21)"
[1] "seed 56660 for j=12 out of 250 (i.e. j=5012 in [5001;5250], as job id is i=21)"
[1] "seed 58075 for j=13 out of 250 (i.e. j=5013 in [5001;5250], as job id is i=21)"
[1] "seed 87497 for j=14 out of 250 (i.e. j=5014 in [5001;5250], as job id is i=21)"
[1] "seed 14403 for j=15 out of 250 (i.e. j=5015 in [5001;5250], as job id is i=21)"
[1] "seed 77232 for j=16 out of 250 (i.e. j=5016 in [5001;5250], as job id is i=21)"
[1] "seed 74400 for j=17 out of 250 (i.e. j=5017 in [5001;5250], as job id is i=21)"
[1] "seed 53561 for j=18 out of 250 (i.e. j=5018 in [5001;5250], as job id is i=21)"
[1] "seed 77404 for j=19 out of 250 (i.e. j=5019 in [5001;5250], as job id is i=21)"
[1] "seed 41681 for j=20 out of 250 (i.e. j=5020 in [5001;5250], as job id is i=21)"
[1] "seed 88627 for j=21 out of 250 (i.e. j=5021 in [5001;5250], as job id is i=21)"
[1] "seed 71068 for j=22 out of 250 (i.e. j=5022 in [5001;5250], as job id is i=21)"
[1] "seed 87728 for j=23 out of 250 (i.e. j=5023 in [5001;5250], as job id is i=21)"
[1] "seed 52688 for j=24 out of 250 (i.e. j=5024 in [5001;5250], as job id is i=21)"
[1] "seed 74910 for j=25 out of 250 (i.e. j=5025 in [5001;5250], as job id is i=21)"
[1] "seed 41674 for j=26 out of 250 (i.e. j=5026 in [5001;5250], as job id is i=21)"
[1] "seed 51115 for j=27 out of 250 (i.e. j=5027 in [5001;5250], as job id is i=21)"
[1] "seed 86115 for j=28 out of 250 (i.e. j=5028 in [5001;5250], as job id is i=21)"
[1] "seed 82632 for j=29 out of 250 (i.e. j=5029 in [5001;5250], as job id is i=21)"
[1] "seed 96289 for j=30 out of 250 (i.e. j=5030 in [5001;5250], as job id is i=21)"
[1] "seed 42802 for j=31 out of 250 (i.e. j=5031 in [5001;5250], as job id is i=21)"
[1] "seed 55802 for j=32 out of 250 (i.e. j=5032 in [5001;5250], as job id is i=21)"
[1] "seed 58315 for j=33 out of 250 (i.e. j=5033 in [5001;5250], as job id is i=21)"
[1] "seed 92467 for j=34 out of 250 (i.e. j=5034 in [5001;5250], as job id is i=21)"
[1] "seed 59154 for j=35 out of 250 (i.e. j=5035 in [5001;5250], as job id is i=21)"
[1] "seed 10589 for j=36 out of 250 (i.e. j=5036 in [5001;5250], as job id is i=21)"
[1] "seed 72843 for j=37 out of 250 (i.e. j=5037 in [5001;5250], as job id is i=21)"
[1] "seed 68008 for j=38 out of 250 (i.e. j=5038 in [5001;5250], as job id is i=21)"
[1] "seed 6710 for j=39 out of 250 (i.e. j=5039 in [5001;5250], as job id is i=21)"
[1] "seed 76795 for j=40 out of 250 (i.e. j=5040 in [5001;5250], as job id is i=21)"
[1] "seed 74842 for j=41 out of 250 (i.e. j=5041 in [5001;5250], as job id is i=21)"
[1] "seed 12434 for j=42 out of 250 (i.e. j=5042 in [5001;5250], as job id is i=21)"
[1] "seed 71461 for j=43 out of 250 (i.e. j=5043 in [5001;5250], as job id is i=21)"
[1] "seed 34249 for j=44 out of 250 (i.e. j=5044 in [5001;5250], as job id is i=21)"
[1] "seed 54240 for j=45 out of 250 (i.e. j=5045 in [5001;5250], as job id is i=21)"
[1] "seed 78074 for j=46 out of 250 (i.e. j=5046 in [5001;5250], as job id is i=21)"
[1] "seed 84597 for j=47 out of 250 (i.e. j=5047 in [5001;5250], as job id is i=21)"
[1] "seed 76730 for j=48 out of 250 (i.e. j=5048 in [5001;5250], as job id is i=21)"
[1] "seed 76022 for j=49 out of 250 (i.e. j=5049 in [5001;5250], as job id is i=21)"
[1] "seed 47867 for j=50 out of 250 (i.e. j=5050 in [5001;5250], as job id is i=21)"
[1] "seed 59861 for j=51 out of 250 (i.e. j=5051 in [5001;5250], as job id is i=21)"
[1] "seed 16285 for j=52 out of 250 (i.e. j=5052 in [5001;5250], as job id is i=21)"
[1] "seed 79695 for j=53 out of 250 (i.e. j=5053 in [5001;5250], as job id is i=21)"
[1] "seed 77461 for j=54 out of 250 (i.e. j=5054 in [5001;5250], as job id is i=21)"
[1] "seed 29379 for j=55 out of 250 (i.e. j=5055 in [5001;5250], as job id is i=21)"
[1] "seed 91426 for j=56 out of 250 (i.e. j=5056 in [5001;5250], as job id is i=21)"
[1] "seed 64704 for j=57 out of 250 (i.e. j=5057 in [5001;5250], as job id is i=21)"
[1] "seed 7141 for j=58 out of 250 (i.e. j=5058 in [5001;5250], as job id is i=21)"
[1] "seed 4142 for j=59 out of 250 (i.e. j=5059 in [5001;5250], as job id is i=21)"
[1] "seed 15932 for j=60 out of 250 (i.e. j=5060 in [5001;5250], as job id is i=21)"
[1] "seed 92871 for j=61 out of 250 (i.e. j=5061 in [5001;5250], as job id is i=21)"
[1] "seed 99443 for j=62 out of 250 (i.e. j=5062 in [5001;5250], as job id is i=21)"
[1] "seed 12763 for j=63 out of 250 (i.e. j=5063 in [5001;5250], as job id is i=21)"
[1] "seed 68717 for j=64 out of 250 (i.e. j=5064 in [5001;5250], as job id is i=21)"
[1] "seed 93269 for j=65 out of 250 (i.e. j=5065 in [5001;5250], as job id is i=21)"
[1] "seed 92586 for j=66 out of 250 (i.e. j=5066 in [5001;5250], as job id is i=21)"
[1] "seed 22521 for j=67 out of 250 (i.e. j=5067 in [5001;5250], as job id is i=21)"
[1] "seed 1836 for j=68 out of 250 (i.e. j=5068 in [5001;5250], as job id is i=21)"
[1] "seed 1700 for j=69 out of 250 (i.e. j=5069 in [5001;5250], as job id is i=21)"
[1] "seed 56307 for j=70 out of 250 (i.e. j=5070 in [5001;5250], as job id is i=21)"
[1] "seed 11426 for j=71 out of 250 (i.e. j=5071 in [5001;5250], as job id is i=21)"
[1] "seed 29566 for j=72 out of 250 (i.e. j=5072 in [5001;5250], as job id is i=21)"
[1] "seed 56607 for j=73 out of 250 (i.e. j=5073 in [5001;5250], as job id is i=21)"
[1] "seed 66714 for j=74 out of 250 (i.e. j=5074 in [5001;5250], as job id is i=21)"
[1] "seed 79036 for j=75 out of 250 (i.e. j=5075 in [5001;5250], as job id is i=21)"
[1] "seed 7218 for j=76 out of 250 (i.e. j=5076 in [5001;5250], as job id is i=21)"
[1] "seed 13457 for j=77 out of 250 (i.e. j=5077 in [5001;5250], as job id is i=21)"
[1] "seed 65762 for j=78 out of 250 (i.e. j=5078 in [5001;5250], as job id is i=21)"
[1] "seed 43312 for j=79 out of 250 (i.e. j=5079 in [5001;5250], as job id is i=21)"
[1] "seed 58641 for j=80 out of 250 (i.e. j=5080 in [5001;5250], as job id is i=21)"
[1] "seed 5629 for j=81 out of 250 (i.e. j=5081 in [5001;5250], as job id is i=21)"
[1] "seed 4863 for j=82 out of 250 (i.e. j=5082 in [5001;5250], as job id is i=21)"
[1] "seed 17935 for j=83 out of 250 (i.e. j=5083 in [5001;5250], as job id is i=21)"
[1] "seed 81730 for j=84 out of 250 (i.e. j=5084 in [5001;5250], as job id is i=21)"
[1] "seed 40025 for j=85 out of 250 (i.e. j=5085 in [5001;5250], as job id is i=21)"
[1] "seed 65627 for j=86 out of 250 (i.e. j=5086 in [5001;5250], as job id is i=21)"
[1] "seed 86587 for j=87 out of 250 (i.e. j=5087 in [5001;5250], as job id is i=21)"
[1] "seed 42315 for j=88 out of 250 (i.e. j=5088 in [5001;5250], as job id is i=21)"
[1] "seed 30823 for j=89 out of 250 (i.e. j=5089 in [5001;5250], as job id is i=21)"
[1] "seed 74591 for j=90 out of 250 (i.e. j=5090 in [5001;5250], as job id is i=21)"
[1] "seed 50441 for j=91 out of 250 (i.e. j=5091 in [5001;5250], as job id is i=21)"
[1] "seed 85731 for j=92 out of 250 (i.e. j=5092 in [5001;5250], as job id is i=21)"
[1] "seed 90327 for j=93 out of 250 (i.e. j=5093 in [5001;5250], as job id is i=21)"
[1] "seed 7672 for j=94 out of 250 (i.e. j=5094 in [5001;5250], as job id is i=21)"
[1] "seed 79591 for j=95 out of 250 (i.e. j=5095 in [5001;5250], as job id is i=21)"
[1] "seed 69916 for j=96 out of 250 (i.e. j=5096 in [5001;5250], as job id is i=21)"
[1] "seed 54465 for j=97 out of 250 (i.e. j=5097 in [5001;5250], as job id is i=21)"
[1] "seed 44303 for j=98 out of 250 (i.e. j=5098 in [5001;5250], as job id is i=21)"
[1] "seed 98055 for j=99 out of 250 (i.e. j=5099 in [5001;5250], as job id is i=21)"
[1] "seed 30345 for j=100 out of 250 (i.e. j=5100 in [5001;5250], as job id is i=21)"
[1] "seed 77520 for j=101 out of 250 (i.e. j=5101 in [5001;5250], as job id is i=21)"
[1] "seed 62189 for j=102 out of 250 (i.e. j=5102 in [5001;5250], as job id is i=21)"
[1] "seed 34410 for j=103 out of 250 (i.e. j=5103 in [5001;5250], as job id is i=21)"
[1] "seed 34192 for j=104 out of 250 (i.e. j=5104 in [5001;5250], as job id is i=21)"
[1] "seed 37969 for j=105 out of 250 (i.e. j=5105 in [5001;5250], as job id is i=21)"
[1] "seed 62228 for j=106 out of 250 (i.e. j=5106 in [5001;5250], as job id is i=21)"
[1] "seed 27992 for j=107 out of 250 (i.e. j=5107 in [5001;5250], as job id is i=21)"
[1] "seed 93101 for j=108 out of 250 (i.e. j=5108 in [5001;5250], as job id is i=21)"
[1] "seed 8271 for j=109 out of 250 (i.e. j=5109 in [5001;5250], as job id is i=21)"
[1] "seed 82381 for j=110 out of 250 (i.e. j=5110 in [5001;5250], as job id is i=21)"
[1] "seed 68178 for j=111 out of 250 (i.e. j=5111 in [5001;5250], as job id is i=21)"
[1] "seed 58707 for j=112 out of 250 (i.e. j=5112 in [5001;5250], as job id is i=21)"
[1] "seed 79906 for j=113 out of 250 (i.e. j=5113 in [5001;5250], as job id is i=21)"
[1] "seed 43144 for j=114 out of 250 (i.e. j=5114 in [5001;5250], as job id is i=21)"
[1] "seed 88239 for j=115 out of 250 (i.e. j=5115 in [5001;5250], as job id is i=21)"
[1] "seed 98896 for j=116 out of 250 (i.e. j=5116 in [5001;5250], as job id is i=21)"
[1] "seed 52791 for j=117 out of 250 (i.e. j=5117 in [5001;5250], as job id is i=21)"
[1] "seed 12563 for j=118 out of 250 (i.e. j=5118 in [5001;5250], as job id is i=21)"
[1] "seed 62619 for j=119 out of 250 (i.e. j=5119 in [5001;5250], as job id is i=21)"
[1] "seed 60075 for j=120 out of 250 (i.e. j=5120 in [5001;5250], as job id is i=21)"
[1] "seed 27048 for j=121 out of 250 (i.e. j=5121 in [5001;5250], as job id is i=21)"
[1] "seed 79673 for j=122 out of 250 (i.e. j=5122 in [5001;5250], as job id is i=21)"
[1] "seed 18058 for j=123 out of 250 (i.e. j=5123 in [5001;5250], as job id is i=21)"
[1] "seed 9935 for j=124 out of 250 (i.e. j=5124 in [5001;5250], as job id is i=21)"
[1] "seed 99034 for j=125 out of 250 (i.e. j=5125 in [5001;5250], as job id is i=21)"
[1] "seed 70595 for j=126 out of 250 (i.e. j=5126 in [5001;5250], as job id is i=21)"
[1] "seed 62211 for j=127 out of 250 (i.e. j=5127 in [5001;5250], as job id is i=21)"
[1] "seed 72982 for j=128 out of 250 (i.e. j=5128 in [5001;5250], as job id is i=21)"
[1] "seed 40477 for j=129 out of 250 (i.e. j=5129 in [5001;5250], as job id is i=21)"
[1] "seed 89035 for j=130 out of 250 (i.e. j=5130 in [5001;5250], as job id is i=21)"
[1] "seed 9092 for j=131 out of 250 (i.e. j=5131 in [5001;5250], as job id is i=21)"
[1] "seed 95052 for j=132 out of 250 (i.e. j=5132 in [5001;5250], as job id is i=21)"
[1] "seed 52652 for j=133 out of 250 (i.e. j=5133 in [5001;5250], as job id is i=21)"
[1] "seed 30114 for j=134 out of 250 (i.e. j=5134 in [5001;5250], as job id is i=21)"
[1] "seed 68543 for j=135 out of 250 (i.e. j=5135 in [5001;5250], as job id is i=21)"
[1] "seed 84955 for j=136 out of 250 (i.e. j=5136 in [5001;5250], as job id is i=21)"
[1] "seed 49233 for j=137 out of 250 (i.e. j=5137 in [5001;5250], as job id is i=21)"
[1] "seed 22056 for j=138 out of 250 (i.e. j=5138 in [5001;5250], as job id is i=21)"
[1] "seed 3938 for j=139 out of 250 (i.e. j=5139 in [5001;5250], as job id is i=21)"
[1] "seed 69970 for j=140 out of 250 (i.e. j=5140 in [5001;5250], as job id is i=21)"
[1] "seed 99946 for j=141 out of 250 (i.e. j=5141 in [5001;5250], as job id is i=21)"
[1] "seed 94795 for j=142 out of 250 (i.e. j=5142 in [5001;5250], as job id is i=21)"
[1] "seed 4240 for j=143 out of 250 (i.e. j=5143 in [5001;5250], as job id is i=21)"
[1] "seed 57933 for j=144 out of 250 (i.e. j=5144 in [5001;5250], as job id is i=21)"
[1] "seed 22557 for j=145 out of 250 (i.e. j=5145 in [5001;5250], as job id is i=21)"
[1] "seed 92376 for j=146 out of 250 (i.e. j=5146 in [5001;5250], as job id is i=21)"
[1] "seed 76872 for j=147 out of 250 (i.e. j=5147 in [5001;5250], as job id is i=21)"
[1] "seed 37973 for j=148 out of 250 (i.e. j=5148 in [5001;5250], as job id is i=21)"
[1] "seed 41340 for j=149 out of 250 (i.e. j=5149 in [5001;5250], as job id is i=21)"
[1] "seed 9057 for j=150 out of 250 (i.e. j=5150 in [5001;5250], as job id is i=21)"
[1] "seed 22775 for j=151 out of 250 (i.e. j=5151 in [5001;5250], as job id is i=21)"
[1] "seed 22248 for j=152 out of 250 (i.e. j=5152 in [5001;5250], as job id is i=21)"
[1] "seed 79730 for j=153 out of 250 (i.e. j=5153 in [5001;5250], as job id is i=21)"
[1] "seed 18579 for j=154 out of 250 (i.e. j=5154 in [5001;5250], as job id is i=21)"
[1] "seed 34940 for j=155 out of 250 (i.e. j=5155 in [5001;5250], as job id is i=21)"
[1] "seed 49350 for j=156 out of 250 (i.e. j=5156 in [5001;5250], as job id is i=21)"
[1] "seed 87391 for j=157 out of 250 (i.e. j=5157 in [5001;5250], as job id is i=21)"
[1] "seed 63623 for j=158 out of 250 (i.e. j=5158 in [5001;5250], as job id is i=21)"
[1] "seed 19544 for j=159 out of 250 (i.e. j=5159 in [5001;5250], as job id is i=21)"
[1] "seed 68816 for j=160 out of 250 (i.e. j=5160 in [5001;5250], as job id is i=21)"
[1] "seed 63287 for j=161 out of 250 (i.e. j=5161 in [5001;5250], as job id is i=21)"
[1] "seed 82020 for j=162 out of 250 (i.e. j=5162 in [5001;5250], as job id is i=21)"
[1] "seed 6026 for j=163 out of 250 (i.e. j=5163 in [5001;5250], as job id is i=21)"
[1] "seed 46136 for j=164 out of 250 (i.e. j=5164 in [5001;5250], as job id is i=21)"
[1] "seed 13278 for j=165 out of 250 (i.e. j=5165 in [5001;5250], as job id is i=21)"
[1] "seed 62564 for j=166 out of 250 (i.e. j=5166 in [5001;5250], as job id is i=21)"
[1] "seed 54898 for j=167 out of 250 (i.e. j=5167 in [5001;5250], as job id is i=21)"
[1] "seed 48254 for j=168 out of 250 (i.e. j=5168 in [5001;5250], as job id is i=21)"
[1] "seed 64473 for j=169 out of 250 (i.e. j=5169 in [5001;5250], as job id is i=21)"
[1] "seed 53948 for j=170 out of 250 (i.e. j=5170 in [5001;5250], as job id is i=21)"
[1] "seed 14794 for j=171 out of 250 (i.e. j=5171 in [5001;5250], as job id is i=21)"
[1] "seed 59995 for j=172 out of 250 (i.e. j=5172 in [5001;5250], as job id is i=21)"
[1] "seed 30857 for j=173 out of 250 (i.e. j=5173 in [5001;5250], as job id is i=21)"
[1] "seed 72976 for j=174 out of 250 (i.e. j=5174 in [5001;5250], as job id is i=21)"
[1] "seed 83968 for j=175 out of 250 (i.e. j=5175 in [5001;5250], as job id is i=21)"
[1] "seed 3666 for j=176 out of 250 (i.e. j=5176 in [5001;5250], as job id is i=21)"
[1] "seed 20185 for j=177 out of 250 (i.e. j=5177 in [5001;5250], as job id is i=21)"
[1] "seed 34157 for j=178 out of 250 (i.e. j=5178 in [5001;5250], as job id is i=21)"
[1] "seed 62110 for j=179 out of 250 (i.e. j=5179 in [5001;5250], as job id is i=21)"
[1] "seed 95794 for j=180 out of 250 (i.e. j=5180 in [5001;5250], as job id is i=21)"
[1] "seed 74389 for j=181 out of 250 (i.e. j=5181 in [5001;5250], as job id is i=21)"
[1] "seed 65245 for j=182 out of 250 (i.e. j=5182 in [5001;5250], as job id is i=21)"
[1] "seed 44482 for j=183 out of 250 (i.e. j=5183 in [5001;5250], as job id is i=21)"
[1] "seed 27546 for j=184 out of 250 (i.e. j=5184 in [5001;5250], as job id is i=21)"
[1] "seed 29376 for j=185 out of 250 (i.e. j=5185 in [5001;5250], as job id is i=21)"
[1] "seed 84246 for j=186 out of 250 (i.e. j=5186 in [5001;5250], as job id is i=21)"
[1] "seed 70695 for j=187 out of 250 (i.e. j=5187 in [5001;5250], as job id is i=21)"
[1] "seed 55854 for j=188 out of 250 (i.e. j=5188 in [5001;5250], as job id is i=21)"
[1] "seed 18904 for j=189 out of 250 (i.e. j=5189 in [5001;5250], as job id is i=21)"
[1] "seed 42517 for j=190 out of 250 (i.e. j=5190 in [5001;5250], as job id is i=21)"
[1] "seed 99153 for j=191 out of 250 (i.e. j=5191 in [5001;5250], as job id is i=21)"
[1] "seed 14735 for j=192 out of 250 (i.e. j=5192 in [5001;5250], as job id is i=21)"
[1] "seed 92417 for j=193 out of 250 (i.e. j=5193 in [5001;5250], as job id is i=21)"
[1] "seed 81433 for j=194 out of 250 (i.e. j=5194 in [5001;5250], as job id is i=21)"
[1] "seed 61976 for j=195 out of 250 (i.e. j=5195 in [5001;5250], as job id is i=21)"
[1] "seed 6414 for j=196 out of 250 (i.e. j=5196 in [5001;5250], as job id is i=21)"
[1] "seed 58856 for j=197 out of 250 (i.e. j=5197 in [5001;5250], as job id is i=21)"
[1] "seed 16940 for j=198 out of 250 (i.e. j=5198 in [5001;5250], as job id is i=21)"
[1] "seed 40774 for j=199 out of 250 (i.e. j=5199 in [5001;5250], as job id is i=21)"
[1] "seed 83854 for j=200 out of 250 (i.e. j=5200 in [5001;5250], as job id is i=21)"
[1] "seed 74598 for j=201 out of 250 (i.e. j=5201 in [5001;5250], as job id is i=21)"
[1] "seed 99736 for j=202 out of 250 (i.e. j=5202 in [5001;5250], as job id is i=21)"
[1] "seed 52767 for j=203 out of 250 (i.e. j=5203 in [5001;5250], as job id is i=21)"
[1] "seed 9024 for j=204 out of 250 (i.e. j=5204 in [5001;5250], as job id is i=21)"
[1] "seed 90993 for j=205 out of 250 (i.e. j=5205 in [5001;5250], as job id is i=21)"
[1] "seed 12501 for j=206 out of 250 (i.e. j=5206 in [5001;5250], as job id is i=21)"
[1] "seed 27219 for j=207 out of 250 (i.e. j=5207 in [5001;5250], as job id is i=21)"
[1] "seed 32996 for j=208 out of 250 (i.e. j=5208 in [5001;5250], as job id is i=21)"
[1] "seed 88254 for j=209 out of 250 (i.e. j=5209 in [5001;5250], as job id is i=21)"
[1] "seed 57876 for j=210 out of 250 (i.e. j=5210 in [5001;5250], as job id is i=21)"
[1] "seed 22104 for j=211 out of 250 (i.e. j=5211 in [5001;5250], as job id is i=21)"
[1] "seed 62942 for j=212 out of 250 (i.e. j=5212 in [5001;5250], as job id is i=21)"
[1] "seed 34571 for j=213 out of 250 (i.e. j=5213 in [5001;5250], as job id is i=21)"
[1] "seed 62218 for j=214 out of 250 (i.e. j=5214 in [5001;5250], as job id is i=21)"
[1] "seed 29825 for j=215 out of 250 (i.e. j=5215 in [5001;5250], as job id is i=21)"
[1] "seed 82199 for j=216 out of 250 (i.e. j=5216 in [5001;5250], as job id is i=21)"
[1] "seed 35995 for j=217 out of 250 (i.e. j=5217 in [5001;5250], as job id is i=21)"
[1] "seed 17364 for j=218 out of 250 (i.e. j=5218 in [5001;5250], as job id is i=21)"
[1] "seed 13863 for j=219 out of 250 (i.e. j=5219 in [5001;5250], as job id is i=21)"
[1] "seed 53456 for j=220 out of 250 (i.e. j=5220 in [5001;5250], as job id is i=21)"
[1] "seed 54897 for j=221 out of 250 (i.e. j=5221 in [5001;5250], as job id is i=21)"
[1] "seed 5197 for j=222 out of 250 (i.e. j=5222 in [5001;5250], as job id is i=21)"
[1] "seed 92462 for j=223 out of 250 (i.e. j=5223 in [5001;5250], as job id is i=21)"
[1] "seed 85672 for j=224 out of 250 (i.e. j=5224 in [5001;5250], as job id is i=21)"
[1] "seed 31078 for j=225 out of 250 (i.e. j=5225 in [5001;5250], as job id is i=21)"
[1] "seed 79959 for j=226 out of 250 (i.e. j=5226 in [5001;5250], as job id is i=21)"
[1] "seed 97360 for j=227 out of 250 (i.e. j=5227 in [5001;5250], as job id is i=21)"
[1] "seed 41754 for j=228 out of 250 (i.e. j=5228 in [5001;5250], as job id is i=21)"
[1] "seed 27031 for j=229 out of 250 (i.e. j=5229 in [5001;5250], as job id is i=21)"
[1] "seed 29673 for j=230 out of 250 (i.e. j=5230 in [5001;5250], as job id is i=21)"
[1] "seed 55639 for j=231 out of 250 (i.e. j=5231 in [5001;5250], as job id is i=21)"
[1] "seed 59363 for j=232 out of 250 (i.e. j=5232 in [5001;5250], as job id is i=21)"
[1] "seed 24531 for j=233 out of 250 (i.e. j=5233 in [5001;5250], as job id is i=21)"
[1] "seed 11906 for j=234 out of 250 (i.e. j=5234 in [5001;5250], as job id is i=21)"
[1] "seed 41477 for j=235 out of 250 (i.e. j=5235 in [5001;5250], as job id is i=21)"
[1] "seed 99711 for j=236 out of 250 (i.e. j=5236 in [5001;5250], as job id is i=21)"
[1] "seed 33058 for j=237 out of 250 (i.e. j=5237 in [5001;5250], as job id is i=21)"
[1] "seed 61872 for j=238 out of 250 (i.e. j=5238 in [5001;5250], as job id is i=21)"
[1] "seed 74432 for j=239 out of 250 (i.e. j=5239 in [5001;5250], as job id is i=21)"
[1] "seed 27407 for j=240 out of 250 (i.e. j=5240 in [5001;5250], as job id is i=21)"
[1] "seed 90006 for j=241 out of 250 (i.e. j=5241 in [5001;5250], as job id is i=21)"
[1] "seed 80945 for j=242 out of 250 (i.e. j=5242 in [5001;5250], as job id is i=21)"
[1] "seed 7682 for j=243 out of 250 (i.e. j=5243 in [5001;5250], as job id is i=21)"
[1] "seed 69663 for j=244 out of 250 (i.e. j=5244 in [5001;5250], as job id is i=21)"
[1] "seed 60693 for j=245 out of 250 (i.e. j=5245 in [5001;5250], as job id is i=21)"
[1] "seed 71849 for j=246 out of 250 (i.e. j=5246 in [5001;5250], as job id is i=21)"
[1] "seed 89703 for j=247 out of 250 (i.e. j=5247 in [5001;5250], as job id is i=21)"
[1] "seed 35783 for j=248 out of 250 (i.e. j=5248 in [5001;5250], as job id is i=21)"
[1] "seed 65183 for j=249 out of 250 (i.e. j=5249 in [5001;5250], as job id is i=21)"
[1] "seed 35821 for j=250 out of 250 (i.e. j=5250 in [5001;5250], as job id is i=21)"
There were 20 warnings (use warnings() to see them)
> rownames(RES) <- NULL
> save(RES,file=paste0(path.res,name,"-",iter_sim,".rda"))
> 
> ## * Summary results
> sessionInfo()
R version 4.1.2 (2021-11-01)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Red Hat Enterprise Linux 8.5 (Ootpa)

Matrix products: default
BLAS:   /opt/software/R/4.1.2/lib64/R/lib/libRblas.so
LAPACK: /opt/software/R/4.1.2/lib64/R/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] mvtnorm_1.1-3    DelayedGSD_0.0.3

loaded via a namespace (and not attached):
 [1] BB_2019.10-1     magrittr_2.0.3   tidyselect_1.1.2 munsell_0.5.0   
 [5] lattice_0.20-45  colorspace_2.0-3 xtable_1.8-4     R6_2.5.1        
 [9] quadprog_1.5-8   rlang_1.0.3      fansi_1.0.3      dplyr_1.0.9     
[13] grid_4.1.2       nlme_3.1-153     gtable_0.3.0     gsDesign_3.3.0  
[17] utf8_1.2.2       cli_3.3.0        ellipsis_0.3.2   tibble_3.1.7    
[21] lifecycle_1.0.1  crayon_1.5.1     purrr_0.3.4      ggplot2_3.3.6   
[25] tidyr_1.2.0      vctrs_0.4.1      glue_1.6.2       compiler_4.1.2  
[29] pillar_1.7.0     generics_0.1.3   scales_1.2.0     pkgconfig_2.0.3 
> summary(RES)
     method        stage           type             statistic     
 Min.   :1.0   Min.   :1.000   Length:1500        Min.   :0.0156  
 1st Qu.:1.0   1st Qu.:1.000   Class :character   1st Qu.:1.5748  
 Median :1.5   Median :1.000   Mode  :character   Median :2.3685  
 Mean   :1.5   Mean   :1.333                      Mean   :2.2877  
 3rd Qu.:2.0   3rd Qu.:2.000                      3rd Qu.:3.0396  
 Max.   :2.0   Max.   :2.000                      Max.   :5.0884  
                                                  NA's   :500     
  estimate_ML          se_ML             info           infoPC      
 Min.   :-0.1773   Min.   :0.3355   Min.   :4.607   Min.   :0.3600  
 1st Qu.: 0.5571   1st Qu.:0.3874   1st Qu.:5.846   1st Qu.:0.4568  
 Median : 0.8007   Median :0.4026   Median :6.283   Median :0.4910  
 Mean   : 0.8059   Mean   :0.4020   Mean   :6.346   Mean   :0.4959  
 3rd Qu.: 1.0527   3rd Qu.:0.4160   3rd Qu.:6.785   3rd Qu.:0.5302  
 Max.   : 1.9571   Max.   :0.4659   Max.   :9.565   Max.   :0.7474  
 NA's   :500       NA's   :1000     NA's   :154     NA's   :154     
   info.pred      infoPC.pred           uk              lk         
 Min.   :4.910   Min.   :0.3837   Min.   :2.256   Min.   :-0.2275  
 1st Qu.:6.131   1st Qu.:0.4791   1st Qu.:2.469   1st Qu.: 0.1811  
 Median :6.588   Median :0.5148   Median :2.523   Median : 0.3072  
 Mean   :6.652   Mean   :0.5198   Mean   :2.517   Mean   : 0.3274  
 3rd Qu.:7.136   3rd Qu.:0.5577   3rd Qu.:2.569   3rd Qu.: 0.4597  
 Max.   :9.476   Max.   :0.7405   Max.   :2.723   Max.   : 1.0828  
 NA's   :1000    NA's   :1000     NA's   :1000    NA's   :1000     
   decision            reason            p.value_ML        lower_ML      
 Length:1500        Length:1500        Min.   :0.0000   Min.   :-0.9449  
 Class :character   Class :character   1st Qu.:0.0011   1st Qu.:-0.0529  
 Mode  :character   Mode  :character   Median :0.0066   Median : 0.1488  
                                       Mean   :0.0724   Mean   : 0.1260  
                                       3rd Qu.:0.0406   3rd Qu.: 0.3404  
                                       Max.   :0.9875   Max.   : 1.0168  
                                       NA's   :1000     NA's   :1000     
    upper_ML       p.value_MUE       lower_MUE         upper_MUE     
 Min.   :0.6363   Min.   :0.0000   Min.   :-0.9404   Min.   :0.6321  
 1st Qu.:1.2497   1st Qu.:0.0035   1st Qu.:-0.0605   1st Qu.:1.2419  
 Median :1.4693   Median :0.0074   Median : 0.0746   Median :1.4368  
 Mean   :1.5480   Mean   :0.0444   Mean   : 0.0810   Mean   :1.5434  
 3rd Qu.:1.8083   3rd Qu.:0.0226   3rd Qu.: 0.1912   3rd Qu.:1.7813  
 Max.   :2.8695   Max.   :0.7018   Max.   : 1.5947   Max.   :2.9964  
 NA's   :1000     NA's   :1000     NA's   :1000      NA's   :1000    
  estimate_MUE           ck          time.interim        seed      
 Min.   :-0.1511   Min.   :0.1396   Min.   :528.0   Min.   :  135  
 1st Qu.: 0.5991   1st Qu.:1.4059   1st Qu.:585.0   1st Qu.:29673  
 Median : 0.7879   Median :1.4626   Median :606.0   Median :57904  
 Mean   : 0.8277   Mean   :1.4172   Mean   :605.3   Mean   :53647  
 3rd Qu.: 1.0211   3rd Qu.:1.5082   3rd Qu.:625.0   3rd Qu.:77461  
 Max.   : 2.1953   Max.   :1.7171   Max.   :674.0   Max.   :99946  
 NA's   :1000      NA's   :654                                     
  nX1.interim     nX2.interim     nX3.interim    computation.time
 Min.   :146.0   Min.   :130.0   Min.   :121.0   Min.   :0.6700  
 1st Qu.:147.0   1st Qu.:135.0   1st Qu.:125.0   1st Qu.:0.8930  
 Median :148.0   Median :136.0   Median :127.0   Median :0.9765  
 Mean   :148.6   Mean   :136.4   Mean   :127.1   Mean   :1.0061  
 3rd Qu.:150.0   3rd Qu.:138.0   3rd Qu.:129.0   3rd Qu.:1.1070  
 Max.   :155.0   Max.   :145.0   Max.   :134.0   Max.   :3.7790  
                                                                 
> 
> #----------------------------------------------------------------------
> ### BATCH_simuMain.R ends here
> 
> proc.time()
   user  system elapsed 
254.373   0.394 265.696 
