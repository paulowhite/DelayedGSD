
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### BATCH_simuMain.R --- 
> #----------------------------------------------------------------------
> ## Author: Paul Blanche
> ## Created: Mar  5 2021 (10:56) 
> ## Version: 
> ## Last-Updated: jul  7 2022 (13:56) 
> ##           By: Brice Ozenne
> ##     Update #: 518
> #----------------------------------------------------------------------
> ## 
> ### Commentary: 
> ## 
> ### Change Log:
> #----------------------------------------------------------------------
> ## 
> ### Code:
> 
> ## ** BATCH loop
> ## cd /projects/biostat01/people/hpl802/DelayedGSD/
> ## for ITER in `seq 1 10`;
> ## do
> ## eval 'R CMD BATCH --vanilla "--args iter_sim='$ITER' n.iter_sim=10" BATCH_simuMain.R output/R-simuMain-'$ITER'.Rout &'
> ## done
> 
> ## [1] 1186669
> ## [2] 1186670
> ## [3] 1186671
> ## [4] 1186672
> ## [5] 1186673
> ## [6] 1186674
> ## [7] 1186675
> ## [8] 1186676
> ## [9] 1186677
> ## [10] 1186678
> 
> rm(list=ls())
>                                    # {{{ parameters
> ## * parameters
> name <- "ScenarioName" # To save the results
> method <- 1:2 # methods used to compute the boundaries
>                                         #---
> myseed <- 140786598
>                                         #--- to plan the trial ----
> NMC <- 250 # number of sequential simulations to run in parallel. Eg. with 250, then we can run 40 scripts in paralell to get N=10,000 runs in total.
> kMax <- 2  #max number of analyses (including final)
> alpha <- 0.025  #type I error (one sided)
> beta <- 0.2  #type II error
> informationRates <- c(0.5,1)  #planned  information rates
> rho_alpha <- 2  # rho parameter for alpha error spending function
> rho_beta <- 2  # rho parameter for beta error spending function
> ## deltaPower <- 0.75 # just to try another value when Id > Imax
> Id <- 0.55  #(expected) information rate at each decision analysis
> binding <- TRUE
>                                         #
>                                         #---- to generate data -----------
>                                         #
> block <- c(1,1,0,0) 
> allsd <- c(2.5,2.1,2.4) # sd, first from baseline measurement, then the two changes from baseline
> mean0 <- c(10,0,0) # mean placebo group (again, first is absolute value, then change from baseline)
> delta <- c(0,0.6,0.8) # treatment effect
> ar <- (0.86*2)*2 # orginial accrual rate from data from Corine is 0.86 per week, hence we multiply by 2 for by 14 days. As to low, we further multiply by 2
> cor011 <- -0.15 # ~ from data from Corine
> corij1 <- 0.68  # ~ from data from Corine
> cor0j1 <- -0.27  # ~ from data from Corine
> Miss11 <- 5/104 # miss both V1 and V2
> Miss12 <- 1/104 # miss V1 and but not V2
> Miss21 <- 6/104 # do not miss V1 and but miss V2
> Miss22 <- 92/104 # miss none
> PropForInterim <- 0.5 # Decide to have interim analysiz when PropForInterim % of all subjects have had the chance to have one follow-up measuement recorded in the data to be available for analysis.
> theDelta.t <- 1.50001 # time lag to process the data and make them ready to analyze after collecting them (unit is time between two follow-up visits)
> TimeFactor <- 14 ## number of days between two visits
>                                         #
>                                         #--- actually for both planing the trial  and generating data-----
>                                         #
>                                         #
> deltaPower <- abs(delta[3]) # effect (NOT Z-scale/unit, but outcome scale/unit!) that the study is powered for: should we choose ourselves or compute from other numbers above ???
> n <- ceiling(2*2*((allsd[3]/deltaPower)^2)*(qnorm(1-beta)-qnorm(alpha))^2) #104 with Corine's data # should we choose ourselves or compute from the above numbers ???
>                                         # inflate SS as required for interim
> 
>                                         # {{{ Set seeds for parallel computing and reproducibility
> ## * Seed
> args <- commandArgs(TRUE) ## BATCH MODE
> if(length(args)>0){
+     for (arg in args){
+         eval(parse(text=arg))
+     }
+ }else{ ## SLUMR
+     iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_ID"))
+     n.iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_COUNT"))
+ } ## interactive
> if(is.na(iter_sim)){iter_sim <- 1}
> if(is.na(n.iter_sim)){n.iter_sim <- 40}
> 
> set.seed(140786598)
> allseeds <- sample.int(n = 10*n.iter_sim*NMC, size = n.iter_sim*NMC, replace=FALSE) #x=1:(.Machine$integer.max) seems to be maximal possible
> # }}}
> 
> # {{{ set path to load and save and othe machine specific variables
> ## * path
> path <- "."
> path.res <- file.path(path,"Results","simuMain")
> if(dir.exists(path.res)==FALSE){
+     if(dir.exists(file.path(path,"Results"))==FALSE){
+     dir.create(file.path(path,"Results"))
+     }
+     dir.create(path.res)
+ }
> path.output <- file.path(path,"output","simuMain")
> if(dir.exists(path.output)==FALSE){
+     if(dir.exists(file.path(path,"output"))==FALSE){
+     dir.create(file.path(path,"output"))
+     }
+     dir.create(path.output)
+ }
> # }}}
> 
> 
> ## * libraries and functions
> library(DelayedGSD)
DelayedGSD version 0.0.3
> ## sourceDir <- function(path, trace = TRUE, ...) {
> ##     for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
> ##         if(trace) cat(nm,":")
> ##         source(file.path(path, nm), ...)
> ##         if(trace) cat("\n")
> ##     }
> ## }
> ## sourceDir(pathToLoad)
>     
> 
> ## * Compute inflation factor and sample size
> plannedB <- vector(mode = "list", length = 3)
> for(iMeth in method){ ## iMeth <- 1
+     plannedB[[iMeth]] <- CalcBoundaries(kMax=kMax,  
+                                         alpha=alpha, 
+                                         beta=beta,  
+                                         InfoR.i=informationRates,  
+                                         InfoR.d=c(Id,1),  
+                                         rho_alpha=rho_alpha,  
+                                         rho_beta=rho_beta,  
+                                         method=iMeth,  
+                                         cNotBelowFixedc=FALSE,
+                                         bindingFutility=binding,
+                                         delta=tail(delta,1))
+     ## summary(plannedB[[1]])
+     ## coef(plannedB[[iMeth]], type = "information")
+ }
Loading required namespace: gsDesign
Loading required package: mvtnorm
Loading required namespace: BB
> inflationFactor <- unlist(lapply(plannedB,function(iP){iP$planned$InflationFactor}))
> nGSD <- ceiling(n*inflationFactor)
> ##  plot(plannedB[[1]])
> 
> #
> # --- just to check---
> ## n
> ## InfoFixed <- ((qnorm(1-beta)-qnorm(alpha))/(deltaPower))^2
> ## InfoFixed
> ## n/(4*(allsd[3])^2)
> #---
> # }}}
> 
> 
> 
> 
> # {{{ technical details to loop
> RES <- NULL # initialize results to save
> allj <- ((iter_sim-1)*NMC + 1):(iter_sim*NMC) # indices of all iterations (replicates) for this job, accountng for the other jobs running in parallel
> # }}}
> 
> ## * Loop
> for(j in allj){ ## j <- 51 ## 5
+     startComp <- Sys.time()
+     myseedi <- allseeds[j]
+     # {{{ TRACE info (e.g. to check the Rout)
+     print(paste0("seed ",myseedi," for ","j=",which(j==allj)," out of ",NMC, " (i.e. j=",j," in [",(iter_sim-1)*NMC + 1,";",iter_sim*NMC,"], as job id is i=",iter_sim,")"))
+     # }}}
+     # {{{ Missing probabilities
+     MyMissProb <- matrix(c(Miss11,Miss12,Miss21,Miss22),ncol=2,nrow=2,byrow=TRUE) # to additionnally remove 1 more because some FASFL=N
+     colnames(MyMissProb) <- c("V2 missing","V2 not missing")
+     rownames(MyMissProb) <- c("V1 missing","V1 not missing")
+     # }}}
+ 
+                                         # {{{ generate data
+     ## ** simulate
+     res <- GenData(n=n, 
+                    N.fw=2,
+                    rand.block=block,
+                    allsd=allsd,
+                    mean0=mean0,
+                    delta=delta,
+                    ar=ar,
+                    cor.01.1=cor011,
+                    cor.ij.1=corij1,
+                    cor.0j.1=cor0j1,
+                    seed=myseedi,
+                    MissProb=MyMissProb,
+                    DigitsOutcome=2,
+                    TimeFactor=TimeFactor,
+                    DigitsTime=0
+                    )
+     d <- res$d
+     ## head(d,n=20)
+                                         # }}}
+                                         # {{{ reformat data like those of Corine
+     ## Make data long format
+     ## dd <- FormatAsCase(d)
+     ## head(dd)
+     ## summary(dd)
+                                         # }}}
+    
+                                         # {{{ make data available at interim
+                                         # Here we stop inclusion data collection for the interim analysis as soon as
+                                         # half of the participants have completed (or had the opportunity to complete) the follow-up 
+     thet <- d$t3[ceiling(n*PropForInterim)]
+     di <- SelectData(d,t=thet)
+     ## ddi <- FormatAsCase(di) # needed ????
+     ## head(d[d$id==52,])
+                                         # }}}
+     ## {{{ analyze data at at interim
+     ## ** interim
+     lmmI <- analyzeData(di, ddf = "nlme", data.decision = sum(d$t1 <= thet + theDelta.t*TimeFactor), getinfo = TRUE, trace = TRUE)
+     ## lmmI <- analyzeData(di, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     currentGSD <- vector(mode = "list", length = 3)
+     out.interim <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+ 
+         currentGSD[[iMeth]] <- update(plannedB[[iMeth]], delta = lmmI, trace = FALSE)
+ 
+         iConfint.interim <- confint(currentGSD[[iMeth]])
+         iInfo.interim <- coef(currentGSD[[iMeth]], type = "information")
+         iBoundary.interim <- coef(currentGSD[[iMeth]], type = "boundary")
+         iDecision.interim <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+         out.interim[[iMeth]] <-  data.frame(statistic = iConfint.interim[1,"statistic"],
+                                             estimate_ML = iConfint.interim[1,"estimate"],
+                                             se_ML = iConfint.interim[1,"se"],
+                                             info = iInfo.interim[1,"Interim"],
+                                             infoPC = iInfo.interim[1,"Interim.pc"],
+                                             info.pred = iInfo.interim[1,"Decision"],
+                                             infoPC.pred = iInfo.interim[1,"Decision.pc"],
+                                             uk = iBoundary.interim[1,"Ebound"],
+                                             lk = iBoundary.interim[1,"Fbound"],
+                                             decision = iDecision.interim["decision","stage 1"],
+                                             reason = iDecision.interim["reason.interim","stage 1"])
+     }
+     ## currentGSD[[1]]
+     ## plot(currentGSD[[1]])
+ 
+     ## ** decision
+     dDecision <- d[which(d$t1 <= thet + theDelta.t*TimeFactor),]
+     lmmD <- analyzeData(dDecision, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+     
+     out.decision <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+           
+         if(out.interim[[iMeth]]$decision == "stop"){
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, trace = FALSE)
+             ## plot(currentGSD[[iMeth]])
+ 
+             iConfint.decision <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.decision  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = iConfint.decision[1,"statistic"],
+                                                 p.value_ML = iConfint.decision[iConfint.decision$method == "ML","p.value"],
+                                                 lower_ML = iConfint.decision[iConfint.decision$method == "ML","lower"],
+                                                 upper_ML = iConfint.decision[iConfint.decision$method == "ML","upper"],
+                                                 estimate_ML = iConfint.decision[iConfint.decision$method == "ML","estimate"],
+                                                 p.value_MUE = iConfint.decision[iConfint.decision$method == "MUE","p.value"],
+                                                 lower_MUE = iConfint.decision[iConfint.decision$method == "MUE","lower"],
+                                                 upper_MUE = iConfint.decision[iConfint.decision$method == "MUE","upper"],
+                                                 estimate_MUE = iConfint.decision[iConfint.decision$method == "MUE","estimate"],
+                                                 info = iInfo.decision[1,"Interim"],
+                                                 infoPC = iInfo.decision[1,"Interim.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = unname(iDecision.decision["decision","stage 2"])
+                                                 )
+ 
+         }else{
+             ## update information
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, k = 1, type.k = "decision", trace = FALSE)
+ 
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = NA,
+                                                 p.value_ML = NA,
+                                                 lower_ML = NA,
+                                                 upper_ML = NA,
+                                                 estimate_ML = NA,
+                                                 p.value_MUE = NA,
+                                                 lower_MUE = NA,
+                                                 upper_MUE = NA,
+                                                 estimate_MUE = NA,
+                                                 info = iInfo.decision[1,"Decision"],
+                                                 infoPC = iInfo.decision[1,"Decision.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = NA)
+         }
+     }
+                                         # }}}
+                                         # {{{ Analyze data at decision
+ 
+     ## ** finale
+     dFinal <- d
+     lmmF <- analyzeData(dFinal, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     out.final <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+         if(out.interim[[iMeth]]$decision == "stop"){
+             out.final[[iMeth]] <- data.frame(statistic = NA,
+                                              p.value_ML = NA,
+                                              lower_ML = NA,
+                                              upper_ML = NA,
+                                              estimate_ML = NA,
+                                              p.value_MUE = NA,
+                                              lower_MUE = NA,
+                                              upper_MUE = NA,
+                                              estimate_MUE = NA,
+                                              info = NA,
+                                              infoPC = NA,
+                                              ck = NA,
+                                              decision = NA)
+ 
+         }else{
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmF, trace = FALSE)
+ 
+             ## plot(test)
+             ## summary(test)
+             iConfint.final <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.final <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.final <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.final  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.final[[iMeth]] <- data.frame(statistic = iConfint.final[1,"statistic"],
+                                              p.value_ML = iConfint.final[iConfint.final$method == "ML","p.value"],
+                                              lower_ML = iConfint.final[iConfint.final$method == "ML","lower"],
+                                              upper_ML = iConfint.final[iConfint.final$method == "ML","upper"],
+                                              estimate_ML = iConfint.final[iConfint.final$method == "ML","estimate"],
+                                              p.value_MUE = iConfint.final[iConfint.final$method == "MUE","p.value"],
+                                              lower_MUE = iConfint.final[iConfint.final$method == "MUE","lower"],
+                                              upper_MUE = iConfint.final[iConfint.final$method == "MUE","upper"],
+                                              estimate_MUE = iConfint.final[iConfint.final$method == "MUE","estimate"],
+                                              info = iInfo.final[1,"Interim"],
+                                              infoPC = iInfo.final[1,"Interim.pc"],
+                                              ck = iBoundary.final[1,"Cbound"],
+                                              decision = unname(coef(currentGSD[[iMeth]], type = "decision")["decision","stage 2"])
+                                              )
+         }
+     }
+                                         # }}}
+ 
+     stopComp <- Sys.time()
+                                         # {{{ Save results
+ 
+     outMerge <- do.call(rbind,lapply(method, function(iMeth){
+         iNames <- unique(c(names(out.interim[[iMeth]]),names(out.decision[[iMeth]]),names(out.final[[iMeth]])))
+         iMerge <- data.frame(matrix(NA, ncol = length(iNames)+3, nrow = 3, dimnames = list(NULL, c("method", "stage", "type", iNames))))
+         iMerge[1,c("method","stage","type",names(out.interim[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "interim", out.interim[[iMeth]]) 
+         iMerge[2,c("method","stage","type",names(out.decision[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "decision", out.decision[[iMeth]]) 
+         iMerge[3,c("method","stage","type",names(out.final[[iMeth]]))] <- data.frame(method = iMeth, stage = 2, type = "final", out.final[[iMeth]])
+         return(iMerge)
+     }))
+ 
+     ## outMerge[outMerge$method==3,]
+ 
+     out <- cbind(
+         ## results
+         outMerge,
+         ## simulation details
+         time.interim = thet,
+         seed=myseedi,             
+         nX1.interim = sum(!is.na(di$X1)),
+         nX2.interim = sum(!is.na(di$X2)),
+         nX3.interim = sum(!is.na(di$X3)),
+         ## computation time
+         computation.time=as.double(round(difftime(stopComp,startComp,units="secs"),3))
+     )
+     ## names(out) <- myColNames
+     RES <- rbind(RES,out)
+     save(RES,file=paste0(path.res,name,"(tempo)-",iter_sim,".rda"))
+                                         # }}}
+ }
[1] "seed 60957 for j=1 out of 250 (i.e. j=8251 in [8251;8500], as job id is i=34)"
Loading required namespace: nlme
[1] "seed 94439 for j=2 out of 250 (i.e. j=8252 in [8251;8500], as job id is i=34)"
[1] "seed 5622 for j=3 out of 250 (i.e. j=8253 in [8251;8500], as job id is i=34)"
[1] "seed 73383 for j=4 out of 250 (i.e. j=8254 in [8251;8500], as job id is i=34)"
[1] "seed 40866 for j=5 out of 250 (i.e. j=8255 in [8251;8500], as job id is i=34)"
[1] "seed 27478 for j=6 out of 250 (i.e. j=8256 in [8251;8500], as job id is i=34)"
[1] "seed 98479 for j=7 out of 250 (i.e. j=8257 in [8251;8500], as job id is i=34)"
[1] "seed 48923 for j=8 out of 250 (i.e. j=8258 in [8251;8500], as job id is i=34)"
[1] "seed 94457 for j=9 out of 250 (i.e. j=8259 in [8251;8500], as job id is i=34)"
[1] "seed 79002 for j=10 out of 250 (i.e. j=8260 in [8251;8500], as job id is i=34)"
[1] "seed 45027 for j=11 out of 250 (i.e. j=8261 in [8251;8500], as job id is i=34)"
[1] "seed 3164 for j=12 out of 250 (i.e. j=8262 in [8251;8500], as job id is i=34)"
[1] "seed 56422 for j=13 out of 250 (i.e. j=8263 in [8251;8500], as job id is i=34)"
[1] "seed 96760 for j=14 out of 250 (i.e. j=8264 in [8251;8500], as job id is i=34)"
[1] "seed 50984 for j=15 out of 250 (i.e. j=8265 in [8251;8500], as job id is i=34)"
[1] "seed 65784 for j=16 out of 250 (i.e. j=8266 in [8251;8500], as job id is i=34)"
[1] "seed 51328 for j=17 out of 250 (i.e. j=8267 in [8251;8500], as job id is i=34)"
[1] "seed 90135 for j=18 out of 250 (i.e. j=8268 in [8251;8500], as job id is i=34)"
[1] "seed 73946 for j=19 out of 250 (i.e. j=8269 in [8251;8500], as job id is i=34)"
[1] "seed 67356 for j=20 out of 250 (i.e. j=8270 in [8251;8500], as job id is i=34)"
[1] "seed 15237 for j=21 out of 250 (i.e. j=8271 in [8251;8500], as job id is i=34)"
[1] "seed 14128 for j=22 out of 250 (i.e. j=8272 in [8251;8500], as job id is i=34)"
[1] "seed 86650 for j=23 out of 250 (i.e. j=8273 in [8251;8500], as job id is i=34)"
[1] "seed 31203 for j=24 out of 250 (i.e. j=8274 in [8251;8500], as job id is i=34)"
[1] "seed 30712 for j=25 out of 250 (i.e. j=8275 in [8251;8500], as job id is i=34)"
[1] "seed 42083 for j=26 out of 250 (i.e. j=8276 in [8251;8500], as job id is i=34)"
[1] "seed 15450 for j=27 out of 250 (i.e. j=8277 in [8251;8500], as job id is i=34)"
[1] "seed 96202 for j=28 out of 250 (i.e. j=8278 in [8251;8500], as job id is i=34)"
[1] "seed 61900 for j=29 out of 250 (i.e. j=8279 in [8251;8500], as job id is i=34)"
[1] "seed 50562 for j=30 out of 250 (i.e. j=8280 in [8251;8500], as job id is i=34)"
[1] "seed 86145 for j=31 out of 250 (i.e. j=8281 in [8251;8500], as job id is i=34)"
[1] "seed 57899 for j=32 out of 250 (i.e. j=8282 in [8251;8500], as job id is i=34)"
[1] "seed 52106 for j=33 out of 250 (i.e. j=8283 in [8251;8500], as job id is i=34)"
[1] "seed 29198 for j=34 out of 250 (i.e. j=8284 in [8251;8500], as job id is i=34)"
[1] "seed 73176 for j=35 out of 250 (i.e. j=8285 in [8251;8500], as job id is i=34)"
[1] "seed 46440 for j=36 out of 250 (i.e. j=8286 in [8251;8500], as job id is i=34)"
[1] "seed 20297 for j=37 out of 250 (i.e. j=8287 in [8251;8500], as job id is i=34)"
[1] "seed 14005 for j=38 out of 250 (i.e. j=8288 in [8251;8500], as job id is i=34)"
[1] "seed 75155 for j=39 out of 250 (i.e. j=8289 in [8251;8500], as job id is i=34)"
[1] "seed 331 for j=40 out of 250 (i.e. j=8290 in [8251;8500], as job id is i=34)"
[1] "seed 71642 for j=41 out of 250 (i.e. j=8291 in [8251;8500], as job id is i=34)"
[1] "seed 69312 for j=42 out of 250 (i.e. j=8292 in [8251;8500], as job id is i=34)"
[1] "seed 53939 for j=43 out of 250 (i.e. j=8293 in [8251;8500], as job id is i=34)"
[1] "seed 59671 for j=44 out of 250 (i.e. j=8294 in [8251;8500], as job id is i=34)"
[1] "seed 52015 for j=45 out of 250 (i.e. j=8295 in [8251;8500], as job id is i=34)"
[1] "seed 44125 for j=46 out of 250 (i.e. j=8296 in [8251;8500], as job id is i=34)"
[1] "seed 29807 for j=47 out of 250 (i.e. j=8297 in [8251;8500], as job id is i=34)"
[1] "seed 61479 for j=48 out of 250 (i.e. j=8298 in [8251;8500], as job id is i=34)"
[1] "seed 86988 for j=49 out of 250 (i.e. j=8299 in [8251;8500], as job id is i=34)"
[1] "seed 24918 for j=50 out of 250 (i.e. j=8300 in [8251;8500], as job id is i=34)"
[1] "seed 57027 for j=51 out of 250 (i.e. j=8301 in [8251;8500], as job id is i=34)"
[1] "seed 1596 for j=52 out of 250 (i.e. j=8302 in [8251;8500], as job id is i=34)"
[1] "seed 39070 for j=53 out of 250 (i.e. j=8303 in [8251;8500], as job id is i=34)"
[1] "seed 54104 for j=54 out of 250 (i.e. j=8304 in [8251;8500], as job id is i=34)"
[1] "seed 62792 for j=55 out of 250 (i.e. j=8305 in [8251;8500], as job id is i=34)"
[1] "seed 88215 for j=56 out of 250 (i.e. j=8306 in [8251;8500], as job id is i=34)"
[1] "seed 82950 for j=57 out of 250 (i.e. j=8307 in [8251;8500], as job id is i=34)"
[1] "seed 25168 for j=58 out of 250 (i.e. j=8308 in [8251;8500], as job id is i=34)"
[1] "seed 65139 for j=59 out of 250 (i.e. j=8309 in [8251;8500], as job id is i=34)"
[1] "seed 52886 for j=60 out of 250 (i.e. j=8310 in [8251;8500], as job id is i=34)"
[1] "seed 80329 for j=61 out of 250 (i.e. j=8311 in [8251;8500], as job id is i=34)"
[1] "seed 54060 for j=62 out of 250 (i.e. j=8312 in [8251;8500], as job id is i=34)"
[1] "seed 14998 for j=63 out of 250 (i.e. j=8313 in [8251;8500], as job id is i=34)"
[1] "seed 44533 for j=64 out of 250 (i.e. j=8314 in [8251;8500], as job id is i=34)"
[1] "seed 36689 for j=65 out of 250 (i.e. j=8315 in [8251;8500], as job id is i=34)"
[1] "seed 11677 for j=66 out of 250 (i.e. j=8316 in [8251;8500], as job id is i=34)"
[1] "seed 40802 for j=67 out of 250 (i.e. j=8317 in [8251;8500], as job id is i=34)"
[1] "seed 11974 for j=68 out of 250 (i.e. j=8318 in [8251;8500], as job id is i=34)"
[1] "seed 67171 for j=69 out of 250 (i.e. j=8319 in [8251;8500], as job id is i=34)"
[1] "seed 697 for j=70 out of 250 (i.e. j=8320 in [8251;8500], as job id is i=34)"
[1] "seed 34311 for j=71 out of 250 (i.e. j=8321 in [8251;8500], as job id is i=34)"
[1] "seed 42691 for j=72 out of 250 (i.e. j=8322 in [8251;8500], as job id is i=34)"
[1] "seed 97412 for j=73 out of 250 (i.e. j=8323 in [8251;8500], as job id is i=34)"
[1] "seed 44077 for j=74 out of 250 (i.e. j=8324 in [8251;8500], as job id is i=34)"
[1] "seed 83327 for j=75 out of 250 (i.e. j=8325 in [8251;8500], as job id is i=34)"
[1] "seed 4389 for j=76 out of 250 (i.e. j=8326 in [8251;8500], as job id is i=34)"
[1] "seed 18485 for j=77 out of 250 (i.e. j=8327 in [8251;8500], as job id is i=34)"
[1] "seed 23388 for j=78 out of 250 (i.e. j=8328 in [8251;8500], as job id is i=34)"
[1] "seed 75408 for j=79 out of 250 (i.e. j=8329 in [8251;8500], as job id is i=34)"
[1] "seed 89591 for j=80 out of 250 (i.e. j=8330 in [8251;8500], as job id is i=34)"
[1] "seed 60823 for j=81 out of 250 (i.e. j=8331 in [8251;8500], as job id is i=34)"
[1] "seed 36296 for j=82 out of 250 (i.e. j=8332 in [8251;8500], as job id is i=34)"
[1] "seed 57519 for j=83 out of 250 (i.e. j=8333 in [8251;8500], as job id is i=34)"
[1] "seed 24422 for j=84 out of 250 (i.e. j=8334 in [8251;8500], as job id is i=34)"
[1] "seed 49681 for j=85 out of 250 (i.e. j=8335 in [8251;8500], as job id is i=34)"
[1] "seed 99489 for j=86 out of 250 (i.e. j=8336 in [8251;8500], as job id is i=34)"
[1] "seed 63730 for j=87 out of 250 (i.e. j=8337 in [8251;8500], as job id is i=34)"
[1] "seed 25898 for j=88 out of 250 (i.e. j=8338 in [8251;8500], as job id is i=34)"
[1] "seed 34792 for j=89 out of 250 (i.e. j=8339 in [8251;8500], as job id is i=34)"
[1] "seed 10619 for j=90 out of 250 (i.e. j=8340 in [8251;8500], as job id is i=34)"
[1] "seed 38584 for j=91 out of 250 (i.e. j=8341 in [8251;8500], as job id is i=34)"
[1] "seed 70236 for j=92 out of 250 (i.e. j=8342 in [8251;8500], as job id is i=34)"
[1] "seed 36671 for j=93 out of 250 (i.e. j=8343 in [8251;8500], as job id is i=34)"
[1] "seed 37111 for j=94 out of 250 (i.e. j=8344 in [8251;8500], as job id is i=34)"
[1] "seed 33866 for j=95 out of 250 (i.e. j=8345 in [8251;8500], as job id is i=34)"
[1] "seed 35379 for j=96 out of 250 (i.e. j=8346 in [8251;8500], as job id is i=34)"
[1] "seed 12252 for j=97 out of 250 (i.e. j=8347 in [8251;8500], as job id is i=34)"
[1] "seed 45226 for j=98 out of 250 (i.e. j=8348 in [8251;8500], as job id is i=34)"
[1] "seed 37990 for j=99 out of 250 (i.e. j=8349 in [8251;8500], as job id is i=34)"
[1] "seed 35400 for j=100 out of 250 (i.e. j=8350 in [8251;8500], as job id is i=34)"
[1] "seed 65677 for j=101 out of 250 (i.e. j=8351 in [8251;8500], as job id is i=34)"
[1] "seed 98193 for j=102 out of 250 (i.e. j=8352 in [8251;8500], as job id is i=34)"
[1] "seed 34505 for j=103 out of 250 (i.e. j=8353 in [8251;8500], as job id is i=34)"
[1] "seed 65432 for j=104 out of 250 (i.e. j=8354 in [8251;8500], as job id is i=34)"
[1] "seed 30172 for j=105 out of 250 (i.e. j=8355 in [8251;8500], as job id is i=34)"
[1] "seed 74662 for j=106 out of 250 (i.e. j=8356 in [8251;8500], as job id is i=34)"
[1] "seed 7470 for j=107 out of 250 (i.e. j=8357 in [8251;8500], as job id is i=34)"
[1] "seed 37568 for j=108 out of 250 (i.e. j=8358 in [8251;8500], as job id is i=34)"
[1] "seed 91739 for j=109 out of 250 (i.e. j=8359 in [8251;8500], as job id is i=34)"
[1] "seed 77130 for j=110 out of 250 (i.e. j=8360 in [8251;8500], as job id is i=34)"
[1] "seed 50103 for j=111 out of 250 (i.e. j=8361 in [8251;8500], as job id is i=34)"
[1] "seed 26594 for j=112 out of 250 (i.e. j=8362 in [8251;8500], as job id is i=34)"
[1] "seed 38267 for j=113 out of 250 (i.e. j=8363 in [8251;8500], as job id is i=34)"
[1] "seed 35983 for j=114 out of 250 (i.e. j=8364 in [8251;8500], as job id is i=34)"
[1] "seed 68690 for j=115 out of 250 (i.e. j=8365 in [8251;8500], as job id is i=34)"
[1] "seed 75669 for j=116 out of 250 (i.e. j=8366 in [8251;8500], as job id is i=34)"
[1] "seed 1939 for j=117 out of 250 (i.e. j=8367 in [8251;8500], as job id is i=34)"
[1] "seed 97450 for j=118 out of 250 (i.e. j=8368 in [8251;8500], as job id is i=34)"
[1] "seed 25417 for j=119 out of 250 (i.e. j=8369 in [8251;8500], as job id is i=34)"
[1] "seed 81414 for j=120 out of 250 (i.e. j=8370 in [8251;8500], as job id is i=34)"
[1] "seed 77852 for j=121 out of 250 (i.e. j=8371 in [8251;8500], as job id is i=34)"
[1] "seed 36101 for j=122 out of 250 (i.e. j=8372 in [8251;8500], as job id is i=34)"
[1] "seed 38042 for j=123 out of 250 (i.e. j=8373 in [8251;8500], as job id is i=34)"
[1] "seed 42759 for j=124 out of 250 (i.e. j=8374 in [8251;8500], as job id is i=34)"
[1] "seed 99455 for j=125 out of 250 (i.e. j=8375 in [8251;8500], as job id is i=34)"
[1] "seed 89251 for j=126 out of 250 (i.e. j=8376 in [8251;8500], as job id is i=34)"
[1] "seed 13553 for j=127 out of 250 (i.e. j=8377 in [8251;8500], as job id is i=34)"
[1] "seed 90947 for j=128 out of 250 (i.e. j=8378 in [8251;8500], as job id is i=34)"
[1] "seed 6681 for j=129 out of 250 (i.e. j=8379 in [8251;8500], as job id is i=34)"
[1] "seed 15274 for j=130 out of 250 (i.e. j=8380 in [8251;8500], as job id is i=34)"
[1] "seed 74966 for j=131 out of 250 (i.e. j=8381 in [8251;8500], as job id is i=34)"
[1] "seed 43009 for j=132 out of 250 (i.e. j=8382 in [8251;8500], as job id is i=34)"
[1] "seed 3257 for j=133 out of 250 (i.e. j=8383 in [8251;8500], as job id is i=34)"
[1] "seed 88700 for j=134 out of 250 (i.e. j=8384 in [8251;8500], as job id is i=34)"
[1] "seed 14612 for j=135 out of 250 (i.e. j=8385 in [8251;8500], as job id is i=34)"
[1] "seed 41607 for j=136 out of 250 (i.e. j=8386 in [8251;8500], as job id is i=34)"
[1] "seed 15491 for j=137 out of 250 (i.e. j=8387 in [8251;8500], as job id is i=34)"
[1] "seed 66129 for j=138 out of 250 (i.e. j=8388 in [8251;8500], as job id is i=34)"
[1] "seed 35127 for j=139 out of 250 (i.e. j=8389 in [8251;8500], as job id is i=34)"
[1] "seed 64304 for j=140 out of 250 (i.e. j=8390 in [8251;8500], as job id is i=34)"
[1] "seed 56902 for j=141 out of 250 (i.e. j=8391 in [8251;8500], as job id is i=34)"
[1] "seed 51937 for j=142 out of 250 (i.e. j=8392 in [8251;8500], as job id is i=34)"
[1] "seed 8765 for j=143 out of 250 (i.e. j=8393 in [8251;8500], as job id is i=34)"
[1] "seed 35541 for j=144 out of 250 (i.e. j=8394 in [8251;8500], as job id is i=34)"
[1] "seed 93490 for j=145 out of 250 (i.e. j=8395 in [8251;8500], as job id is i=34)"
[1] "seed 44488 for j=146 out of 250 (i.e. j=8396 in [8251;8500], as job id is i=34)"
[1] "seed 42152 for j=147 out of 250 (i.e. j=8397 in [8251;8500], as job id is i=34)"
[1] "seed 38441 for j=148 out of 250 (i.e. j=8398 in [8251;8500], as job id is i=34)"
[1] "seed 21314 for j=149 out of 250 (i.e. j=8399 in [8251;8500], as job id is i=34)"
[1] "seed 13640 for j=150 out of 250 (i.e. j=8400 in [8251;8500], as job id is i=34)"
[1] "seed 99097 for j=151 out of 250 (i.e. j=8401 in [8251;8500], as job id is i=34)"
[1] "seed 68539 for j=152 out of 250 (i.e. j=8402 in [8251;8500], as job id is i=34)"
[1] "seed 75417 for j=153 out of 250 (i.e. j=8403 in [8251;8500], as job id is i=34)"
[1] "seed 25165 for j=154 out of 250 (i.e. j=8404 in [8251;8500], as job id is i=34)"
[1] "seed 32204 for j=155 out of 250 (i.e. j=8405 in [8251;8500], as job id is i=34)"
[1] "seed 41588 for j=156 out of 250 (i.e. j=8406 in [8251;8500], as job id is i=34)"
[1] "seed 53421 for j=157 out of 250 (i.e. j=8407 in [8251;8500], as job id is i=34)"
[1] "seed 56253 for j=158 out of 250 (i.e. j=8408 in [8251;8500], as job id is i=34)"
[1] "seed 20783 for j=159 out of 250 (i.e. j=8409 in [8251;8500], as job id is i=34)"
[1] "seed 48947 for j=160 out of 250 (i.e. j=8410 in [8251;8500], as job id is i=34)"
[1] "seed 27366 for j=161 out of 250 (i.e. j=8411 in [8251;8500], as job id is i=34)"
[1] "seed 32059 for j=162 out of 250 (i.e. j=8412 in [8251;8500], as job id is i=34)"
[1] "seed 86210 for j=163 out of 250 (i.e. j=8413 in [8251;8500], as job id is i=34)"
[1] "seed 73138 for j=164 out of 250 (i.e. j=8414 in [8251;8500], as job id is i=34)"
[1] "seed 90932 for j=165 out of 250 (i.e. j=8415 in [8251;8500], as job id is i=34)"
[1] "seed 18854 for j=166 out of 250 (i.e. j=8416 in [8251;8500], as job id is i=34)"
[1] "seed 68721 for j=167 out of 250 (i.e. j=8417 in [8251;8500], as job id is i=34)"
[1] "seed 73015 for j=168 out of 250 (i.e. j=8418 in [8251;8500], as job id is i=34)"
[1] "seed 14516 for j=169 out of 250 (i.e. j=8419 in [8251;8500], as job id is i=34)"
[1] "seed 50108 for j=170 out of 250 (i.e. j=8420 in [8251;8500], as job id is i=34)"
[1] "seed 65965 for j=171 out of 250 (i.e. j=8421 in [8251;8500], as job id is i=34)"
[1] "seed 85773 for j=172 out of 250 (i.e. j=8422 in [8251;8500], as job id is i=34)"
[1] "seed 48402 for j=173 out of 250 (i.e. j=8423 in [8251;8500], as job id is i=34)"
[1] "seed 33256 for j=174 out of 250 (i.e. j=8424 in [8251;8500], as job id is i=34)"
[1] "seed 4017 for j=175 out of 250 (i.e. j=8425 in [8251;8500], as job id is i=34)"
[1] "seed 16286 for j=176 out of 250 (i.e. j=8426 in [8251;8500], as job id is i=34)"
[1] "seed 72811 for j=177 out of 250 (i.e. j=8427 in [8251;8500], as job id is i=34)"
[1] "seed 84095 for j=178 out of 250 (i.e. j=8428 in [8251;8500], as job id is i=34)"
[1] "seed 86612 for j=179 out of 250 (i.e. j=8429 in [8251;8500], as job id is i=34)"
[1] "seed 48709 for j=180 out of 250 (i.e. j=8430 in [8251;8500], as job id is i=34)"
[1] "seed 10203 for j=181 out of 250 (i.e. j=8431 in [8251;8500], as job id is i=34)"
[1] "seed 58057 for j=182 out of 250 (i.e. j=8432 in [8251;8500], as job id is i=34)"
[1] "seed 52964 for j=183 out of 250 (i.e. j=8433 in [8251;8500], as job id is i=34)"
[1] "seed 61353 for j=184 out of 250 (i.e. j=8434 in [8251;8500], as job id is i=34)"
[1] "seed 97341 for j=185 out of 250 (i.e. j=8435 in [8251;8500], as job id is i=34)"
[1] "seed 37128 for j=186 out of 250 (i.e. j=8436 in [8251;8500], as job id is i=34)"
[1] "seed 32468 for j=187 out of 250 (i.e. j=8437 in [8251;8500], as job id is i=34)"
[1] "seed 59598 for j=188 out of 250 (i.e. j=8438 in [8251;8500], as job id is i=34)"
[1] "seed 93424 for j=189 out of 250 (i.e. j=8439 in [8251;8500], as job id is i=34)"
[1] "seed 16953 for j=190 out of 250 (i.e. j=8440 in [8251;8500], as job id is i=34)"
[1] "seed 57988 for j=191 out of 250 (i.e. j=8441 in [8251;8500], as job id is i=34)"
[1] "seed 17574 for j=192 out of 250 (i.e. j=8442 in [8251;8500], as job id is i=34)"
[1] "seed 25761 for j=193 out of 250 (i.e. j=8443 in [8251;8500], as job id is i=34)"
[1] "seed 34783 for j=194 out of 250 (i.e. j=8444 in [8251;8500], as job id is i=34)"
[1] "seed 96292 for j=195 out of 250 (i.e. j=8445 in [8251;8500], as job id is i=34)"
[1] "seed 6596 for j=196 out of 250 (i.e. j=8446 in [8251;8500], as job id is i=34)"
[1] "seed 66314 for j=197 out of 250 (i.e. j=8447 in [8251;8500], as job id is i=34)"
[1] "seed 52599 for j=198 out of 250 (i.e. j=8448 in [8251;8500], as job id is i=34)"
[1] "seed 28961 for j=199 out of 250 (i.e. j=8449 in [8251;8500], as job id is i=34)"
[1] "seed 54559 for j=200 out of 250 (i.e. j=8450 in [8251;8500], as job id is i=34)"
[1] "seed 37820 for j=201 out of 250 (i.e. j=8451 in [8251;8500], as job id is i=34)"
[1] "seed 86955 for j=202 out of 250 (i.e. j=8452 in [8251;8500], as job id is i=34)"
[1] "seed 85545 for j=203 out of 250 (i.e. j=8453 in [8251;8500], as job id is i=34)"
[1] "seed 48610 for j=204 out of 250 (i.e. j=8454 in [8251;8500], as job id is i=34)"
[1] "seed 94655 for j=205 out of 250 (i.e. j=8455 in [8251;8500], as job id is i=34)"
[1] "seed 23595 for j=206 out of 250 (i.e. j=8456 in [8251;8500], as job id is i=34)"
[1] "seed 96797 for j=207 out of 250 (i.e. j=8457 in [8251;8500], as job id is i=34)"
[1] "seed 88370 for j=208 out of 250 (i.e. j=8458 in [8251;8500], as job id is i=34)"
[1] "seed 15227 for j=209 out of 250 (i.e. j=8459 in [8251;8500], as job id is i=34)"
[1] "seed 4000 for j=210 out of 250 (i.e. j=8460 in [8251;8500], as job id is i=34)"
[1] "seed 72451 for j=211 out of 250 (i.e. j=8461 in [8251;8500], as job id is i=34)"
[1] "seed 23972 for j=212 out of 250 (i.e. j=8462 in [8251;8500], as job id is i=34)"
[1] "seed 18380 for j=213 out of 250 (i.e. j=8463 in [8251;8500], as job id is i=34)"
[1] "seed 42765 for j=214 out of 250 (i.e. j=8464 in [8251;8500], as job id is i=34)"
[1] "seed 70462 for j=215 out of 250 (i.e. j=8465 in [8251;8500], as job id is i=34)"
[1] "seed 8482 for j=216 out of 250 (i.e. j=8466 in [8251;8500], as job id is i=34)"
[1] "seed 18550 for j=217 out of 250 (i.e. j=8467 in [8251;8500], as job id is i=34)"
[1] "seed 80190 for j=218 out of 250 (i.e. j=8468 in [8251;8500], as job id is i=34)"
[1] "seed 58815 for j=219 out of 250 (i.e. j=8469 in [8251;8500], as job id is i=34)"
[1] "seed 45505 for j=220 out of 250 (i.e. j=8470 in [8251;8500], as job id is i=34)"
[1] "seed 6100 for j=221 out of 250 (i.e. j=8471 in [8251;8500], as job id is i=34)"
[1] "seed 86892 for j=222 out of 250 (i.e. j=8472 in [8251;8500], as job id is i=34)"
[1] "seed 37726 for j=223 out of 250 (i.e. j=8473 in [8251;8500], as job id is i=34)"
[1] "seed 73724 for j=224 out of 250 (i.e. j=8474 in [8251;8500], as job id is i=34)"
[1] "seed 49766 for j=225 out of 250 (i.e. j=8475 in [8251;8500], as job id is i=34)"
[1] "seed 96424 for j=226 out of 250 (i.e. j=8476 in [8251;8500], as job id is i=34)"
[1] "seed 97664 for j=227 out of 250 (i.e. j=8477 in [8251;8500], as job id is i=34)"
[1] "seed 42796 for j=228 out of 250 (i.e. j=8478 in [8251;8500], as job id is i=34)"
[1] "seed 68284 for j=229 out of 250 (i.e. j=8479 in [8251;8500], as job id is i=34)"
[1] "seed 69674 for j=230 out of 250 (i.e. j=8480 in [8251;8500], as job id is i=34)"
[1] "seed 57839 for j=231 out of 250 (i.e. j=8481 in [8251;8500], as job id is i=34)"
[1] "seed 27906 for j=232 out of 250 (i.e. j=8482 in [8251;8500], as job id is i=34)"
[1] "seed 37484 for j=233 out of 250 (i.e. j=8483 in [8251;8500], as job id is i=34)"
[1] "seed 22765 for j=234 out of 250 (i.e. j=8484 in [8251;8500], as job id is i=34)"
[1] "seed 33707 for j=235 out of 250 (i.e. j=8485 in [8251;8500], as job id is i=34)"
[1] "seed 35406 for j=236 out of 250 (i.e. j=8486 in [8251;8500], as job id is i=34)"
[1] "seed 69883 for j=237 out of 250 (i.e. j=8487 in [8251;8500], as job id is i=34)"
[1] "seed 16939 for j=238 out of 250 (i.e. j=8488 in [8251;8500], as job id is i=34)"
[1] "seed 30171 for j=239 out of 250 (i.e. j=8489 in [8251;8500], as job id is i=34)"
[1] "seed 69323 for j=240 out of 250 (i.e. j=8490 in [8251;8500], as job id is i=34)"
[1] "seed 55897 for j=241 out of 250 (i.e. j=8491 in [8251;8500], as job id is i=34)"
[1] "seed 66628 for j=242 out of 250 (i.e. j=8492 in [8251;8500], as job id is i=34)"
[1] "seed 85652 for j=243 out of 250 (i.e. j=8493 in [8251;8500], as job id is i=34)"
[1] "seed 46263 for j=244 out of 250 (i.e. j=8494 in [8251;8500], as job id is i=34)"
[1] "seed 45608 for j=245 out of 250 (i.e. j=8495 in [8251;8500], as job id is i=34)"
[1] "seed 87096 for j=246 out of 250 (i.e. j=8496 in [8251;8500], as job id is i=34)"
[1] "seed 3328 for j=247 out of 250 (i.e. j=8497 in [8251;8500], as job id is i=34)"
[1] "seed 3624 for j=248 out of 250 (i.e. j=8498 in [8251;8500], as job id is i=34)"
[1] "seed 49228 for j=249 out of 250 (i.e. j=8499 in [8251;8500], as job id is i=34)"
[1] "seed 31371 for j=250 out of 250 (i.e. j=8500 in [8251;8500], as job id is i=34)"
There were 20 warnings (use warnings() to see them)
> rownames(RES) <- NULL
> save(RES,file=paste0(path.res,name,"-",iter_sim,".rda"))
> 
> ## * Summary results
> sessionInfo()
R version 4.1.2 (2021-11-01)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Red Hat Enterprise Linux 8.5 (Ootpa)

Matrix products: default
BLAS:   /opt/software/R/4.1.2/lib64/R/lib/libRblas.so
LAPACK: /opt/software/R/4.1.2/lib64/R/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] mvtnorm_1.1-3    DelayedGSD_0.0.3

loaded via a namespace (and not attached):
 [1] BB_2019.10-1     magrittr_2.0.3   tidyselect_1.1.2 munsell_0.5.0   
 [5] lattice_0.20-45  colorspace_2.0-3 xtable_1.8-4     R6_2.5.1        
 [9] quadprog_1.5-8   rlang_1.0.3      fansi_1.0.3      dplyr_1.0.9     
[13] grid_4.1.2       nlme_3.1-153     gtable_0.3.0     gsDesign_3.3.0  
[17] utf8_1.2.2       cli_3.3.0        ellipsis_0.3.2   tibble_3.1.7    
[21] lifecycle_1.0.1  crayon_1.5.1     purrr_0.3.4      ggplot2_3.3.6   
[25] tidyr_1.2.0      vctrs_0.4.1      glue_1.6.2       compiler_4.1.2  
[29] pillar_1.7.0     generics_0.1.3   scales_1.2.0     pkgconfig_2.0.3 
> summary(RES)
     method        stage           type             statistic     
 Min.   :1.0   Min.   :1.000   Length:1500        Min.   :0.0288  
 1st Qu.:1.0   1st Qu.:1.000   Class :character   1st Qu.:1.5734  
 Median :1.5   Median :1.000   Mode  :character   Median :2.3555  
 Mean   :1.5   Mean   :1.333                      Mean   :2.3116  
 3rd Qu.:2.0   3rd Qu.:2.000                      3rd Qu.:3.0623  
 Max.   :2.0   Max.   :2.000                      Max.   :5.2597  
                                                  NA's   :500     
  estimate_ML          se_ML             info           infoPC      
 Min.   :-0.2922   Min.   :0.3439   Min.   :4.446   Min.   :0.3474  
 1st Qu.: 0.5409   1st Qu.:0.3901   1st Qu.:5.741   1st Qu.:0.4486  
 Median : 0.8385   Median :0.4041   Median :6.170   Median :0.4821  
 Mean   : 0.8245   Mean   :0.4048   Mean   :6.242   Mean   :0.4878  
 3rd Qu.: 1.0820   3rd Qu.:0.4204   3rd Qu.:6.624   3rd Qu.:0.5176  
 Max.   : 1.9170   Max.   :0.4743   Max.   :8.546   Max.   :0.6678  
 NA's   :500       NA's   :1000     NA's   :164     NA's   :164     
   info.pred      infoPC.pred           uk              lk         
 Min.   :4.799   Min.   :0.3750   Min.   :2.293   Min.   :-0.2881  
 1st Qu.:6.010   1st Qu.:0.4696   1st Qu.:2.479   1st Qu.: 0.1417  
 Median :6.495   Median :0.5075   Median :2.529   Median : 0.2928  
 Mean   :6.561   Mean   :0.5127   Mean   :2.527   Mean   : 0.3000  
 3rd Qu.:6.959   3rd Qu.:0.5438   3rd Qu.:2.584   3rd Qu.: 0.4319  
 Max.   :8.857   Max.   :0.6921   Max.   :2.746   Max.   : 0.9692  
 NA's   :1000    NA's   :1000     NA's   :1000    NA's   :1000     
   decision            reason            p.value_ML        lower_ML      
 Length:1500        Length:1500        Min.   :0.0000   Min.   :-0.8998  
 Class :character   Class :character   1st Qu.:0.0013   1st Qu.:-0.0688  
 Mode  :character   Mode  :character   Median :0.0051   Median : 0.1708  
                                       Mean   :0.0632   Mean   : 0.1302  
                                       3rd Qu.:0.0458   3rd Qu.: 0.3389  
                                       Max.   :0.9770   Max.   : 0.9242  
                                       NA's   :1000     NA's   :1000     
    upper_ML       p.value_MUE       lower_MUE         upper_MUE     
 Min.   :0.4467   Min.   :0.0000   Min.   :-0.9100   Min.   :0.7921  
 1st Qu.:1.2148   1st Qu.:0.0030   1st Qu.:-0.0716   1st Qu.:1.2145  
 Median :1.5138   Median :0.0065   Median : 0.0909   Median :1.4916  
 Mean   :1.5716   Mean   :0.0392   Mean   : 0.0980   Mean   :1.5814  
 3rd Qu.:1.8795   3rd Qu.:0.0253   3rd Qu.: 0.2177   3rd Qu.:1.8969  
 Max.   :2.6473   Max.   :0.7596   Max.   : 1.6685   Max.   :3.1101  
 NA's   :1000     NA's   :1000     NA's   :1000      NA's   :1000    
  estimate_MUE           ck          time.interim        seed      
 Min.   :-0.0226   Min.   :0.2539   Min.   :516.0   Min.   :  331  
 1st Qu.: 0.5705   1st Qu.:1.3894   1st Qu.:583.0   1st Qu.:29198  
 Median : 0.8259   Median :1.4403   Median :602.0   Median :48816  
 Mean   : 0.8492   Mean   :1.4157   Mean   :601.5   Mean   :49862  
 3rd Qu.: 1.0807   3rd Qu.:1.4882   3rd Qu.:622.0   3rd Qu.:71642  
 Max.   : 2.2863   Max.   :1.6448   Max.   :654.0   Max.   :99489  
 NA's   :1000      NA's   :664                                     
  nX1.interim     nX2.interim     nX3.interim  computation.time
 Min.   :146.0   Min.   :130.0   Min.   :120   Min.   :0.709   
 1st Qu.:148.0   1st Qu.:135.0   1st Qu.:125   1st Qu.:0.921   
 Median :149.0   Median :137.0   Median :127   Median :0.985   
 Mean   :148.7   Mean   :136.6   Mean   :127   Mean   :1.014   
 3rd Qu.:150.0   3rd Qu.:138.0   3rd Qu.:129   3rd Qu.:1.108   
 Max.   :153.0   Max.   :144.0   Max.   :133   Max.   :3.583   
                                                               
> 
> #----------------------------------------------------------------------
> ### BATCH_simuMain.R ends here
> 
> proc.time()
   user  system elapsed 
256.288   0.419 266.983 
