
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### BATCH_simuMain.R --- 
> #----------------------------------------------------------------------
> ## Author: Paul Blanche
> ## Created: Mar  5 2021 (10:56) 
> ## Version: 
> ## Last-Updated: jul  7 2022 (13:56) 
> ##           By: Brice Ozenne
> ##     Update #: 518
> #----------------------------------------------------------------------
> ## 
> ### Commentary: 
> ## 
> ### Change Log:
> #----------------------------------------------------------------------
> ## 
> ### Code:
> 
> ## ** BATCH loop
> ## cd /projects/biostat01/people/hpl802/DelayedGSD/
> ## for ITER in `seq 1 10`;
> ## do
> ## eval 'R CMD BATCH --vanilla "--args iter_sim='$ITER' n.iter_sim=10" BATCH_simuMain.R output/R-simuMain-'$ITER'.Rout &'
> ## done
> 
> ## [1] 1186669
> ## [2] 1186670
> ## [3] 1186671
> ## [4] 1186672
> ## [5] 1186673
> ## [6] 1186674
> ## [7] 1186675
> ## [8] 1186676
> ## [9] 1186677
> ## [10] 1186678
> 
> rm(list=ls())
>                                    # {{{ parameters
> ## * parameters
> name <- "ScenarioName" # To save the results
> method <- 1:2 # methods used to compute the boundaries
>                                         #---
> myseed <- 140786598
>                                         #--- to plan the trial ----
> NMC <- 250 # number of sequential simulations to run in parallel. Eg. with 250, then we can run 40 scripts in paralell to get N=10,000 runs in total.
> kMax <- 2  #max number of analyses (including final)
> alpha <- 0.025  #type I error (one sided)
> beta <- 0.2  #type II error
> informationRates <- c(0.5,1)  #planned  information rates
> rho_alpha <- 2  # rho parameter for alpha error spending function
> rho_beta <- 2  # rho parameter for beta error spending function
> ## deltaPower <- 0.75 # just to try another value when Id > Imax
> Id <- 0.55  #(expected) information rate at each decision analysis
> binding <- TRUE
>                                         #
>                                         #---- to generate data -----------
>                                         #
> block <- c(1,1,0,0) 
> allsd <- c(2.5,2.1,2.4) # sd, first from baseline measurement, then the two changes from baseline
> mean0 <- c(10,0,0) # mean placebo group (again, first is absolute value, then change from baseline)
> delta <- c(0,0.6,0.8) # treatment effect
> ar <- (0.86*2)*2 # orginial accrual rate from data from Corine is 0.86 per week, hence we multiply by 2 for by 14 days. As to low, we further multiply by 2
> cor011 <- -0.15 # ~ from data from Corine
> corij1 <- 0.68  # ~ from data from Corine
> cor0j1 <- -0.27  # ~ from data from Corine
> Miss11 <- 5/104 # miss both V1 and V2
> Miss12 <- 1/104 # miss V1 and but not V2
> Miss21 <- 6/104 # do not miss V1 and but miss V2
> Miss22 <- 92/104 # miss none
> PropForInterim <- 0.5 # Decide to have interim analysiz when PropForInterim % of all subjects have had the chance to have one follow-up measuement recorded in the data to be available for analysis.
> theDelta.t <- 1.50001 # time lag to process the data and make them ready to analyze after collecting them (unit is time between two follow-up visits)
> TimeFactor <- 14 ## number of days between two visits
>                                         #
>                                         #--- actually for both planing the trial  and generating data-----
>                                         #
>                                         #
> deltaPower <- abs(delta[3]) # effect (NOT Z-scale/unit, but outcome scale/unit!) that the study is powered for: should we choose ourselves or compute from other numbers above ???
> n <- ceiling(2*2*((allsd[3]/deltaPower)^2)*(qnorm(1-beta)-qnorm(alpha))^2) #104 with Corine's data # should we choose ourselves or compute from the above numbers ???
>                                         # inflate SS as required for interim
> 
>                                         # {{{ Set seeds for parallel computing and reproducibility
> ## * Seed
> args <- commandArgs(TRUE) ## BATCH MODE
> if(length(args)>0){
+     for (arg in args){
+         eval(parse(text=arg))
+     }
+ }else{ ## SLUMR
+     iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_ID"))
+     n.iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_COUNT"))
+ } ## interactive
> if(is.na(iter_sim)){iter_sim <- 1}
> if(is.na(n.iter_sim)){n.iter_sim <- 40}
> 
> set.seed(140786598)
> allseeds <- sample.int(n = 10*n.iter_sim*NMC, size = n.iter_sim*NMC, replace=FALSE) #x=1:(.Machine$integer.max) seems to be maximal possible
> # }}}
> 
> # {{{ set path to load and save and othe machine specific variables
> ## * path
> path <- "."
> path.res <- file.path(path,"Results","simuMain")
> if(dir.exists(path.res)==FALSE){
+     if(dir.exists(file.path(path,"Results"))==FALSE){
+     dir.create(file.path(path,"Results"))
+     }
+     dir.create(path.res)
+ }
> path.output <- file.path(path,"output","simuMain")
> if(dir.exists(path.output)==FALSE){
+     if(dir.exists(file.path(path,"output"))==FALSE){
+     dir.create(file.path(path,"output"))
+     }
+     dir.create(path.output)
+ }
> # }}}
> 
> 
> ## * libraries and functions
> library(DelayedGSD)
DelayedGSD version 0.0.3
> ## sourceDir <- function(path, trace = TRUE, ...) {
> ##     for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
> ##         if(trace) cat(nm,":")
> ##         source(file.path(path, nm), ...)
> ##         if(trace) cat("\n")
> ##     }
> ## }
> ## sourceDir(pathToLoad)
>     
> 
> ## * Compute inflation factor and sample size
> plannedB <- vector(mode = "list", length = 3)
> for(iMeth in method){ ## iMeth <- 1
+     plannedB[[iMeth]] <- CalcBoundaries(kMax=kMax,  
+                                         alpha=alpha, 
+                                         beta=beta,  
+                                         InfoR.i=informationRates,  
+                                         InfoR.d=c(Id,1),  
+                                         rho_alpha=rho_alpha,  
+                                         rho_beta=rho_beta,  
+                                         method=iMeth,  
+                                         cNotBelowFixedc=FALSE,
+                                         bindingFutility=binding,
+                                         delta=tail(delta,1))
+     ## summary(plannedB[[1]])
+     ## coef(plannedB[[iMeth]], type = "information")
+ }
Loading required namespace: gsDesign
Loading required package: mvtnorm
Loading required namespace: BB
> inflationFactor <- unlist(lapply(plannedB,function(iP){iP$planned$InflationFactor}))
> nGSD <- ceiling(n*inflationFactor)
> ##  plot(plannedB[[1]])
> 
> #
> # --- just to check---
> ## n
> ## InfoFixed <- ((qnorm(1-beta)-qnorm(alpha))/(deltaPower))^2
> ## InfoFixed
> ## n/(4*(allsd[3])^2)
> #---
> # }}}
> 
> 
> 
> 
> # {{{ technical details to loop
> RES <- NULL # initialize results to save
> allj <- ((iter_sim-1)*NMC + 1):(iter_sim*NMC) # indices of all iterations (replicates) for this job, accountng for the other jobs running in parallel
> # }}}
> 
> ## * Loop
> for(j in allj){ ## j <- 51 ## 5
+     startComp <- Sys.time()
+     myseedi <- allseeds[j]
+     # {{{ TRACE info (e.g. to check the Rout)
+     print(paste0("seed ",myseedi," for ","j=",which(j==allj)," out of ",NMC, " (i.e. j=",j," in [",(iter_sim-1)*NMC + 1,";",iter_sim*NMC,"], as job id is i=",iter_sim,")"))
+     # }}}
+     # {{{ Missing probabilities
+     MyMissProb <- matrix(c(Miss11,Miss12,Miss21,Miss22),ncol=2,nrow=2,byrow=TRUE) # to additionnally remove 1 more because some FASFL=N
+     colnames(MyMissProb) <- c("V2 missing","V2 not missing")
+     rownames(MyMissProb) <- c("V1 missing","V1 not missing")
+     # }}}
+ 
+                                         # {{{ generate data
+     ## ** simulate
+     res <- GenData(n=n, 
+                    N.fw=2,
+                    rand.block=block,
+                    allsd=allsd,
+                    mean0=mean0,
+                    delta=delta,
+                    ar=ar,
+                    cor.01.1=cor011,
+                    cor.ij.1=corij1,
+                    cor.0j.1=cor0j1,
+                    seed=myseedi,
+                    MissProb=MyMissProb,
+                    DigitsOutcome=2,
+                    TimeFactor=TimeFactor,
+                    DigitsTime=0
+                    )
+     d <- res$d
+     ## head(d,n=20)
+                                         # }}}
+                                         # {{{ reformat data like those of Corine
+     ## Make data long format
+     ## dd <- FormatAsCase(d)
+     ## head(dd)
+     ## summary(dd)
+                                         # }}}
+    
+                                         # {{{ make data available at interim
+                                         # Here we stop inclusion data collection for the interim analysis as soon as
+                                         # half of the participants have completed (or had the opportunity to complete) the follow-up 
+     thet <- d$t3[ceiling(n*PropForInterim)]
+     di <- SelectData(d,t=thet)
+     ## ddi <- FormatAsCase(di) # needed ????
+     ## head(d[d$id==52,])
+                                         # }}}
+     ## {{{ analyze data at at interim
+     ## ** interim
+     lmmI <- analyzeData(di, ddf = "nlme", data.decision = sum(d$t1 <= thet + theDelta.t*TimeFactor), getinfo = TRUE, trace = TRUE)
+     ## lmmI <- analyzeData(di, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     currentGSD <- vector(mode = "list", length = 3)
+     out.interim <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+ 
+         currentGSD[[iMeth]] <- update(plannedB[[iMeth]], delta = lmmI, trace = FALSE)
+ 
+         iConfint.interim <- confint(currentGSD[[iMeth]])
+         iInfo.interim <- coef(currentGSD[[iMeth]], type = "information")
+         iBoundary.interim <- coef(currentGSD[[iMeth]], type = "boundary")
+         iDecision.interim <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+         out.interim[[iMeth]] <-  data.frame(statistic = iConfint.interim[1,"statistic"],
+                                             estimate_ML = iConfint.interim[1,"estimate"],
+                                             se_ML = iConfint.interim[1,"se"],
+                                             info = iInfo.interim[1,"Interim"],
+                                             infoPC = iInfo.interim[1,"Interim.pc"],
+                                             info.pred = iInfo.interim[1,"Decision"],
+                                             infoPC.pred = iInfo.interim[1,"Decision.pc"],
+                                             uk = iBoundary.interim[1,"Ebound"],
+                                             lk = iBoundary.interim[1,"Fbound"],
+                                             decision = iDecision.interim["decision","stage 1"],
+                                             reason = iDecision.interim["reason.interim","stage 1"])
+     }
+     ## currentGSD[[1]]
+     ## plot(currentGSD[[1]])
+ 
+     ## ** decision
+     dDecision <- d[which(d$t1 <= thet + theDelta.t*TimeFactor),]
+     lmmD <- analyzeData(dDecision, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+     
+     out.decision <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+           
+         if(out.interim[[iMeth]]$decision == "stop"){
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, trace = FALSE)
+             ## plot(currentGSD[[iMeth]])
+ 
+             iConfint.decision <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.decision  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = iConfint.decision[1,"statistic"],
+                                                 p.value_ML = iConfint.decision[iConfint.decision$method == "ML","p.value"],
+                                                 lower_ML = iConfint.decision[iConfint.decision$method == "ML","lower"],
+                                                 upper_ML = iConfint.decision[iConfint.decision$method == "ML","upper"],
+                                                 estimate_ML = iConfint.decision[iConfint.decision$method == "ML","estimate"],
+                                                 p.value_MUE = iConfint.decision[iConfint.decision$method == "MUE","p.value"],
+                                                 lower_MUE = iConfint.decision[iConfint.decision$method == "MUE","lower"],
+                                                 upper_MUE = iConfint.decision[iConfint.decision$method == "MUE","upper"],
+                                                 estimate_MUE = iConfint.decision[iConfint.decision$method == "MUE","estimate"],
+                                                 info = iInfo.decision[1,"Interim"],
+                                                 infoPC = iInfo.decision[1,"Interim.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = unname(iDecision.decision["decision","stage 2"])
+                                                 )
+ 
+         }else{
+             ## update information
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, k = 1, type.k = "decision", trace = FALSE)
+ 
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = NA,
+                                                 p.value_ML = NA,
+                                                 lower_ML = NA,
+                                                 upper_ML = NA,
+                                                 estimate_ML = NA,
+                                                 p.value_MUE = NA,
+                                                 lower_MUE = NA,
+                                                 upper_MUE = NA,
+                                                 estimate_MUE = NA,
+                                                 info = iInfo.decision[1,"Decision"],
+                                                 infoPC = iInfo.decision[1,"Decision.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = NA)
+         }
+     }
+                                         # }}}
+                                         # {{{ Analyze data at decision
+ 
+     ## ** finale
+     dFinal <- d
+     lmmF <- analyzeData(dFinal, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     out.final <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+         if(out.interim[[iMeth]]$decision == "stop"){
+             out.final[[iMeth]] <- data.frame(statistic = NA,
+                                              p.value_ML = NA,
+                                              lower_ML = NA,
+                                              upper_ML = NA,
+                                              estimate_ML = NA,
+                                              p.value_MUE = NA,
+                                              lower_MUE = NA,
+                                              upper_MUE = NA,
+                                              estimate_MUE = NA,
+                                              info = NA,
+                                              infoPC = NA,
+                                              ck = NA,
+                                              decision = NA)
+ 
+         }else{
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmF, trace = FALSE)
+ 
+             ## plot(test)
+             ## summary(test)
+             iConfint.final <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.final <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.final <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.final  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.final[[iMeth]] <- data.frame(statistic = iConfint.final[1,"statistic"],
+                                              p.value_ML = iConfint.final[iConfint.final$method == "ML","p.value"],
+                                              lower_ML = iConfint.final[iConfint.final$method == "ML","lower"],
+                                              upper_ML = iConfint.final[iConfint.final$method == "ML","upper"],
+                                              estimate_ML = iConfint.final[iConfint.final$method == "ML","estimate"],
+                                              p.value_MUE = iConfint.final[iConfint.final$method == "MUE","p.value"],
+                                              lower_MUE = iConfint.final[iConfint.final$method == "MUE","lower"],
+                                              upper_MUE = iConfint.final[iConfint.final$method == "MUE","upper"],
+                                              estimate_MUE = iConfint.final[iConfint.final$method == "MUE","estimate"],
+                                              info = iInfo.final[1,"Interim"],
+                                              infoPC = iInfo.final[1,"Interim.pc"],
+                                              ck = iBoundary.final[1,"Cbound"],
+                                              decision = unname(coef(currentGSD[[iMeth]], type = "decision")["decision","stage 2"])
+                                              )
+         }
+     }
+                                         # }}}
+ 
+     stopComp <- Sys.time()
+                                         # {{{ Save results
+ 
+     outMerge <- do.call(rbind,lapply(method, function(iMeth){
+         iNames <- unique(c(names(out.interim[[iMeth]]),names(out.decision[[iMeth]]),names(out.final[[iMeth]])))
+         iMerge <- data.frame(matrix(NA, ncol = length(iNames)+3, nrow = 3, dimnames = list(NULL, c("method", "stage", "type", iNames))))
+         iMerge[1,c("method","stage","type",names(out.interim[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "interim", out.interim[[iMeth]]) 
+         iMerge[2,c("method","stage","type",names(out.decision[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "decision", out.decision[[iMeth]]) 
+         iMerge[3,c("method","stage","type",names(out.final[[iMeth]]))] <- data.frame(method = iMeth, stage = 2, type = "final", out.final[[iMeth]])
+         return(iMerge)
+     }))
+ 
+     ## outMerge[outMerge$method==3,]
+ 
+     out <- cbind(
+         ## results
+         outMerge,
+         ## simulation details
+         time.interim = thet,
+         seed=myseedi,             
+         nX1.interim = sum(!is.na(di$X1)),
+         nX2.interim = sum(!is.na(di$X2)),
+         nX3.interim = sum(!is.na(di$X3)),
+         ## computation time
+         computation.time=as.double(round(difftime(stopComp,startComp,units="secs"),3))
+     )
+     ## names(out) <- myColNames
+     RES <- rbind(RES,out)
+     save(RES,file=paste0(path.res,name,"(tempo)-",iter_sim,".rda"))
+                                         # }}}
+ }
[1] "seed 22466 for j=1 out of 250 (i.e. j=3751 in [3751;4000], as job id is i=16)"
Loading required namespace: nlme
[1] "seed 76314 for j=2 out of 250 (i.e. j=3752 in [3751;4000], as job id is i=16)"
[1] "seed 93944 for j=3 out of 250 (i.e. j=3753 in [3751;4000], as job id is i=16)"
[1] "seed 13798 for j=4 out of 250 (i.e. j=3754 in [3751;4000], as job id is i=16)"
[1] "seed 61055 for j=5 out of 250 (i.e. j=3755 in [3751;4000], as job id is i=16)"
[1] "seed 60515 for j=6 out of 250 (i.e. j=3756 in [3751;4000], as job id is i=16)"
[1] "seed 45971 for j=7 out of 250 (i.e. j=3757 in [3751;4000], as job id is i=16)"
[1] "seed 4152 for j=8 out of 250 (i.e. j=3758 in [3751;4000], as job id is i=16)"
[1] "seed 38822 for j=9 out of 250 (i.e. j=3759 in [3751;4000], as job id is i=16)"
[1] "seed 32046 for j=10 out of 250 (i.e. j=3760 in [3751;4000], as job id is i=16)"
[1] "seed 13062 for j=11 out of 250 (i.e. j=3761 in [3751;4000], as job id is i=16)"
[1] "seed 36025 for j=12 out of 250 (i.e. j=3762 in [3751;4000], as job id is i=16)"
[1] "seed 9350 for j=13 out of 250 (i.e. j=3763 in [3751;4000], as job id is i=16)"
[1] "seed 93912 for j=14 out of 250 (i.e. j=3764 in [3751;4000], as job id is i=16)"
[1] "seed 43734 for j=15 out of 250 (i.e. j=3765 in [3751;4000], as job id is i=16)"
[1] "seed 46501 for j=16 out of 250 (i.e. j=3766 in [3751;4000], as job id is i=16)"
[1] "seed 18203 for j=17 out of 250 (i.e. j=3767 in [3751;4000], as job id is i=16)"
[1] "seed 83944 for j=18 out of 250 (i.e. j=3768 in [3751;4000], as job id is i=16)"
[1] "seed 88520 for j=19 out of 250 (i.e. j=3769 in [3751;4000], as job id is i=16)"
[1] "seed 97484 for j=20 out of 250 (i.e. j=3770 in [3751;4000], as job id is i=16)"
[1] "seed 71208 for j=21 out of 250 (i.e. j=3771 in [3751;4000], as job id is i=16)"
[1] "seed 28674 for j=22 out of 250 (i.e. j=3772 in [3751;4000], as job id is i=16)"
[1] "seed 93544 for j=23 out of 250 (i.e. j=3773 in [3751;4000], as job id is i=16)"
[1] "seed 78265 for j=24 out of 250 (i.e. j=3774 in [3751;4000], as job id is i=16)"
[1] "seed 4679 for j=25 out of 250 (i.e. j=3775 in [3751;4000], as job id is i=16)"
[1] "seed 78887 for j=26 out of 250 (i.e. j=3776 in [3751;4000], as job id is i=16)"
[1] "seed 13529 for j=27 out of 250 (i.e. j=3777 in [3751;4000], as job id is i=16)"
[1] "seed 97126 for j=28 out of 250 (i.e. j=3778 in [3751;4000], as job id is i=16)"
[1] "seed 560 for j=29 out of 250 (i.e. j=3779 in [3751;4000], as job id is i=16)"
[1] "seed 6421 for j=30 out of 250 (i.e. j=3780 in [3751;4000], as job id is i=16)"
[1] "seed 82875 for j=31 out of 250 (i.e. j=3781 in [3751;4000], as job id is i=16)"
[1] "seed 81453 for j=32 out of 250 (i.e. j=3782 in [3751;4000], as job id is i=16)"
[1] "seed 37514 for j=33 out of 250 (i.e. j=3783 in [3751;4000], as job id is i=16)"
[1] "seed 90224 for j=34 out of 250 (i.e. j=3784 in [3751;4000], as job id is i=16)"
[1] "seed 74536 for j=35 out of 250 (i.e. j=3785 in [3751;4000], as job id is i=16)"
[1] "seed 16250 for j=36 out of 250 (i.e. j=3786 in [3751;4000], as job id is i=16)"
[1] "seed 72765 for j=37 out of 250 (i.e. j=3787 in [3751;4000], as job id is i=16)"
[1] "seed 31814 for j=38 out of 250 (i.e. j=3788 in [3751;4000], as job id is i=16)"
[1] "seed 31453 for j=39 out of 250 (i.e. j=3789 in [3751;4000], as job id is i=16)"
[1] "seed 59561 for j=40 out of 250 (i.e. j=3790 in [3751;4000], as job id is i=16)"
[1] "seed 39438 for j=41 out of 250 (i.e. j=3791 in [3751;4000], as job id is i=16)"
[1] "seed 57530 for j=42 out of 250 (i.e. j=3792 in [3751;4000], as job id is i=16)"
[1] "seed 17583 for j=43 out of 250 (i.e. j=3793 in [3751;4000], as job id is i=16)"
[1] "seed 30853 for j=44 out of 250 (i.e. j=3794 in [3751;4000], as job id is i=16)"
[1] "seed 2991 for j=45 out of 250 (i.e. j=3795 in [3751;4000], as job id is i=16)"
[1] "seed 33567 for j=46 out of 250 (i.e. j=3796 in [3751;4000], as job id is i=16)"
[1] "seed 21997 for j=47 out of 250 (i.e. j=3797 in [3751;4000], as job id is i=16)"
[1] "seed 17537 for j=48 out of 250 (i.e. j=3798 in [3751;4000], as job id is i=16)"
[1] "seed 49640 for j=49 out of 250 (i.e. j=3799 in [3751;4000], as job id is i=16)"
[1] "seed 8252 for j=50 out of 250 (i.e. j=3800 in [3751;4000], as job id is i=16)"
[1] "seed 33787 for j=51 out of 250 (i.e. j=3801 in [3751;4000], as job id is i=16)"
[1] "seed 10942 for j=52 out of 250 (i.e. j=3802 in [3751;4000], as job id is i=16)"
[1] "seed 57597 for j=53 out of 250 (i.e. j=3803 in [3751;4000], as job id is i=16)"
[1] "seed 11167 for j=54 out of 250 (i.e. j=3804 in [3751;4000], as job id is i=16)"
[1] "seed 99240 for j=55 out of 250 (i.e. j=3805 in [3751;4000], as job id is i=16)"
[1] "seed 29058 for j=56 out of 250 (i.e. j=3806 in [3751;4000], as job id is i=16)"
[1] "seed 69231 for j=57 out of 250 (i.e. j=3807 in [3751;4000], as job id is i=16)"
[1] "seed 15960 for j=58 out of 250 (i.e. j=3808 in [3751;4000], as job id is i=16)"
[1] "seed 77316 for j=59 out of 250 (i.e. j=3809 in [3751;4000], as job id is i=16)"
[1] "seed 46139 for j=60 out of 250 (i.e. j=3810 in [3751;4000], as job id is i=16)"
[1] "seed 37251 for j=61 out of 250 (i.e. j=3811 in [3751;4000], as job id is i=16)"
[1] "seed 59849 for j=62 out of 250 (i.e. j=3812 in [3751;4000], as job id is i=16)"
[1] "seed 46588 for j=63 out of 250 (i.e. j=3813 in [3751;4000], as job id is i=16)"
[1] "seed 87675 for j=64 out of 250 (i.e. j=3814 in [3751;4000], as job id is i=16)"
[1] "seed 33997 for j=65 out of 250 (i.e. j=3815 in [3751;4000], as job id is i=16)"
[1] "seed 87518 for j=66 out of 250 (i.e. j=3816 in [3751;4000], as job id is i=16)"
[1] "seed 25559 for j=67 out of 250 (i.e. j=3817 in [3751;4000], as job id is i=16)"
[1] "seed 47723 for j=68 out of 250 (i.e. j=3818 in [3751;4000], as job id is i=16)"
[1] "seed 44514 for j=69 out of 250 (i.e. j=3819 in [3751;4000], as job id is i=16)"
[1] "seed 91214 for j=70 out of 250 (i.e. j=3820 in [3751;4000], as job id is i=16)"
[1] "seed 51863 for j=71 out of 250 (i.e. j=3821 in [3751;4000], as job id is i=16)"
[1] "seed 14354 for j=72 out of 250 (i.e. j=3822 in [3751;4000], as job id is i=16)"
[1] "seed 57808 for j=73 out of 250 (i.e. j=3823 in [3751;4000], as job id is i=16)"
[1] "seed 8207 for j=74 out of 250 (i.e. j=3824 in [3751;4000], as job id is i=16)"
[1] "seed 30697 for j=75 out of 250 (i.e. j=3825 in [3751;4000], as job id is i=16)"
[1] "seed 52503 for j=76 out of 250 (i.e. j=3826 in [3751;4000], as job id is i=16)"
[1] "seed 22608 for j=77 out of 250 (i.e. j=3827 in [3751;4000], as job id is i=16)"
[1] "seed 23262 for j=78 out of 250 (i.e. j=3828 in [3751;4000], as job id is i=16)"
[1] "seed 45545 for j=79 out of 250 (i.e. j=3829 in [3751;4000], as job id is i=16)"
[1] "seed 29614 for j=80 out of 250 (i.e. j=3830 in [3751;4000], as job id is i=16)"
[1] "seed 18918 for j=81 out of 250 (i.e. j=3831 in [3751;4000], as job id is i=16)"
[1] "seed 28114 for j=82 out of 250 (i.e. j=3832 in [3751;4000], as job id is i=16)"
[1] "seed 11599 for j=83 out of 250 (i.e. j=3833 in [3751;4000], as job id is i=16)"
[1] "seed 72708 for j=84 out of 250 (i.e. j=3834 in [3751;4000], as job id is i=16)"
[1] "seed 54340 for j=85 out of 250 (i.e. j=3835 in [3751;4000], as job id is i=16)"
[1] "seed 18019 for j=86 out of 250 (i.e. j=3836 in [3751;4000], as job id is i=16)"
[1] "seed 87954 for j=87 out of 250 (i.e. j=3837 in [3751;4000], as job id is i=16)"
[1] "seed 73127 for j=88 out of 250 (i.e. j=3838 in [3751;4000], as job id is i=16)"
[1] "seed 34062 for j=89 out of 250 (i.e. j=3839 in [3751;4000], as job id is i=16)"
[1] "seed 75386 for j=90 out of 250 (i.e. j=3840 in [3751;4000], as job id is i=16)"
[1] "seed 27044 for j=91 out of 250 (i.e. j=3841 in [3751;4000], as job id is i=16)"
[1] "seed 93386 for j=92 out of 250 (i.e. j=3842 in [3751;4000], as job id is i=16)"
[1] "seed 79786 for j=93 out of 250 (i.e. j=3843 in [3751;4000], as job id is i=16)"
[1] "seed 57741 for j=94 out of 250 (i.e. j=3844 in [3751;4000], as job id is i=16)"
[1] "seed 58541 for j=95 out of 250 (i.e. j=3845 in [3751;4000], as job id is i=16)"
[1] "seed 51515 for j=96 out of 250 (i.e. j=3846 in [3751;4000], as job id is i=16)"
[1] "seed 15342 for j=97 out of 250 (i.e. j=3847 in [3751;4000], as job id is i=16)"
[1] "seed 6856 for j=98 out of 250 (i.e. j=3848 in [3751;4000], as job id is i=16)"
[1] "seed 38988 for j=99 out of 250 (i.e. j=3849 in [3751;4000], as job id is i=16)"
[1] "seed 82589 for j=100 out of 250 (i.e. j=3850 in [3751;4000], as job id is i=16)"
[1] "seed 53461 for j=101 out of 250 (i.e. j=3851 in [3751;4000], as job id is i=16)"
[1] "seed 21726 for j=102 out of 250 (i.e. j=3852 in [3751;4000], as job id is i=16)"
[1] "seed 57572 for j=103 out of 250 (i.e. j=3853 in [3751;4000], as job id is i=16)"
[1] "seed 51011 for j=104 out of 250 (i.e. j=3854 in [3751;4000], as job id is i=16)"
[1] "seed 96124 for j=105 out of 250 (i.e. j=3855 in [3751;4000], as job id is i=16)"
[1] "seed 16008 for j=106 out of 250 (i.e. j=3856 in [3751;4000], as job id is i=16)"
[1] "seed 83887 for j=107 out of 250 (i.e. j=3857 in [3751;4000], as job id is i=16)"
[1] "seed 44783 for j=108 out of 250 (i.e. j=3858 in [3751;4000], as job id is i=16)"
[1] "seed 18667 for j=109 out of 250 (i.e. j=3859 in [3751;4000], as job id is i=16)"
[1] "seed 37028 for j=110 out of 250 (i.e. j=3860 in [3751;4000], as job id is i=16)"
[1] "seed 49704 for j=111 out of 250 (i.e. j=3861 in [3751;4000], as job id is i=16)"
[1] "seed 95385 for j=112 out of 250 (i.e. j=3862 in [3751;4000], as job id is i=16)"
[1] "seed 49655 for j=113 out of 250 (i.e. j=3863 in [3751;4000], as job id is i=16)"
[1] "seed 61746 for j=114 out of 250 (i.e. j=3864 in [3751;4000], as job id is i=16)"
[1] "seed 35184 for j=115 out of 250 (i.e. j=3865 in [3751;4000], as job id is i=16)"
[1] "seed 26052 for j=116 out of 250 (i.e. j=3866 in [3751;4000], as job id is i=16)"
[1] "seed 83284 for j=117 out of 250 (i.e. j=3867 in [3751;4000], as job id is i=16)"
[1] "seed 79684 for j=118 out of 250 (i.e. j=3868 in [3751;4000], as job id is i=16)"
[1] "seed 66516 for j=119 out of 250 (i.e. j=3869 in [3751;4000], as job id is i=16)"
[1] "seed 21443 for j=120 out of 250 (i.e. j=3870 in [3751;4000], as job id is i=16)"
[1] "seed 2033 for j=121 out of 250 (i.e. j=3871 in [3751;4000], as job id is i=16)"
[1] "seed 78610 for j=122 out of 250 (i.e. j=3872 in [3751;4000], as job id is i=16)"
[1] "seed 75354 for j=123 out of 250 (i.e. j=3873 in [3751;4000], as job id is i=16)"
[1] "seed 96550 for j=124 out of 250 (i.e. j=3874 in [3751;4000], as job id is i=16)"
[1] "seed 91590 for j=125 out of 250 (i.e. j=3875 in [3751;4000], as job id is i=16)"
[1] "seed 44862 for j=126 out of 250 (i.e. j=3876 in [3751;4000], as job id is i=16)"
[1] "seed 23590 for j=127 out of 250 (i.e. j=3877 in [3751;4000], as job id is i=16)"
[1] "seed 77984 for j=128 out of 250 (i.e. j=3878 in [3751;4000], as job id is i=16)"
[1] "seed 6732 for j=129 out of 250 (i.e. j=3879 in [3751;4000], as job id is i=16)"
[1] "seed 64695 for j=130 out of 250 (i.e. j=3880 in [3751;4000], as job id is i=16)"
[1] "seed 13566 for j=131 out of 250 (i.e. j=3881 in [3751;4000], as job id is i=16)"
[1] "seed 58638 for j=132 out of 250 (i.e. j=3882 in [3751;4000], as job id is i=16)"
[1] "seed 84349 for j=133 out of 250 (i.e. j=3883 in [3751;4000], as job id is i=16)"
[1] "seed 99719 for j=134 out of 250 (i.e. j=3884 in [3751;4000], as job id is i=16)"
[1] "seed 88039 for j=135 out of 250 (i.e. j=3885 in [3751;4000], as job id is i=16)"
[1] "seed 74336 for j=136 out of 250 (i.e. j=3886 in [3751;4000], as job id is i=16)"
[1] "seed 18512 for j=137 out of 250 (i.e. j=3887 in [3751;4000], as job id is i=16)"
[1] "seed 86180 for j=138 out of 250 (i.e. j=3888 in [3751;4000], as job id is i=16)"
[1] "seed 18036 for j=139 out of 250 (i.e. j=3889 in [3751;4000], as job id is i=16)"
[1] "seed 92810 for j=140 out of 250 (i.e. j=3890 in [3751;4000], as job id is i=16)"
[1] "seed 57836 for j=141 out of 250 (i.e. j=3891 in [3751;4000], as job id is i=16)"
[1] "seed 89738 for j=142 out of 250 (i.e. j=3892 in [3751;4000], as job id is i=16)"
[1] "seed 30636 for j=143 out of 250 (i.e. j=3893 in [3751;4000], as job id is i=16)"
[1] "seed 8466 for j=144 out of 250 (i.e. j=3894 in [3751;4000], as job id is i=16)"
[1] "seed 12488 for j=145 out of 250 (i.e. j=3895 in [3751;4000], as job id is i=16)"
[1] "seed 35058 for j=146 out of 250 (i.e. j=3896 in [3751;4000], as job id is i=16)"
[1] "seed 81951 for j=147 out of 250 (i.e. j=3897 in [3751;4000], as job id is i=16)"
[1] "seed 49941 for j=148 out of 250 (i.e. j=3898 in [3751;4000], as job id is i=16)"
[1] "seed 99543 for j=149 out of 250 (i.e. j=3899 in [3751;4000], as job id is i=16)"
[1] "seed 24244 for j=150 out of 250 (i.e. j=3900 in [3751;4000], as job id is i=16)"
[1] "seed 88334 for j=151 out of 250 (i.e. j=3901 in [3751;4000], as job id is i=16)"
[1] "seed 15847 for j=152 out of 250 (i.e. j=3902 in [3751;4000], as job id is i=16)"
[1] "seed 59577 for j=153 out of 250 (i.e. j=3903 in [3751;4000], as job id is i=16)"
[1] "seed 21434 for j=154 out of 250 (i.e. j=3904 in [3751;4000], as job id is i=16)"
[1] "seed 13681 for j=155 out of 250 (i.e. j=3905 in [3751;4000], as job id is i=16)"
[1] "seed 25583 for j=156 out of 250 (i.e. j=3906 in [3751;4000], as job id is i=16)"
[1] "seed 32936 for j=157 out of 250 (i.e. j=3907 in [3751;4000], as job id is i=16)"
[1] "seed 49775 for j=158 out of 250 (i.e. j=3908 in [3751;4000], as job id is i=16)"
[1] "seed 74957 for j=159 out of 250 (i.e. j=3909 in [3751;4000], as job id is i=16)"
[1] "seed 16945 for j=160 out of 250 (i.e. j=3910 in [3751;4000], as job id is i=16)"
[1] "seed 84695 for j=161 out of 250 (i.e. j=3911 in [3751;4000], as job id is i=16)"
[1] "seed 52186 for j=162 out of 250 (i.e. j=3912 in [3751;4000], as job id is i=16)"
[1] "seed 585 for j=163 out of 250 (i.e. j=3913 in [3751;4000], as job id is i=16)"
[1] "seed 5194 for j=164 out of 250 (i.e. j=3914 in [3751;4000], as job id is i=16)"
[1] "seed 43829 for j=165 out of 250 (i.e. j=3915 in [3751;4000], as job id is i=16)"
[1] "seed 3100 for j=166 out of 250 (i.e. j=3916 in [3751;4000], as job id is i=16)"
[1] "seed 19598 for j=167 out of 250 (i.e. j=3917 in [3751;4000], as job id is i=16)"
[1] "seed 10491 for j=168 out of 250 (i.e. j=3918 in [3751;4000], as job id is i=16)"
[1] "seed 90023 for j=169 out of 250 (i.e. j=3919 in [3751;4000], as job id is i=16)"
[1] "seed 34956 for j=170 out of 250 (i.e. j=3920 in [3751;4000], as job id is i=16)"
[1] "seed 2784 for j=171 out of 250 (i.e. j=3921 in [3751;4000], as job id is i=16)"
[1] "seed 8352 for j=172 out of 250 (i.e. j=3922 in [3751;4000], as job id is i=16)"
[1] "seed 82689 for j=173 out of 250 (i.e. j=3923 in [3751;4000], as job id is i=16)"
[1] "seed 81530 for j=174 out of 250 (i.e. j=3924 in [3751;4000], as job id is i=16)"
[1] "seed 71460 for j=175 out of 250 (i.e. j=3925 in [3751;4000], as job id is i=16)"
[1] "seed 39574 for j=176 out of 250 (i.e. j=3926 in [3751;4000], as job id is i=16)"
[1] "seed 21412 for j=177 out of 250 (i.e. j=3927 in [3751;4000], as job id is i=16)"
[1] "seed 78117 for j=178 out of 250 (i.e. j=3928 in [3751;4000], as job id is i=16)"
[1] "seed 1000 for j=179 out of 250 (i.e. j=3929 in [3751;4000], as job id is i=16)"
[1] "seed 27275 for j=180 out of 250 (i.e. j=3930 in [3751;4000], as job id is i=16)"
[1] "seed 66148 for j=181 out of 250 (i.e. j=3931 in [3751;4000], as job id is i=16)"
[1] "seed 3821 for j=182 out of 250 (i.e. j=3932 in [3751;4000], as job id is i=16)"
[1] "seed 27982 for j=183 out of 250 (i.e. j=3933 in [3751;4000], as job id is i=16)"
[1] "seed 83978 for j=184 out of 250 (i.e. j=3934 in [3751;4000], as job id is i=16)"
[1] "seed 91439 for j=185 out of 250 (i.e. j=3935 in [3751;4000], as job id is i=16)"
[1] "seed 59153 for j=186 out of 250 (i.e. j=3936 in [3751;4000], as job id is i=16)"
[1] "seed 96710 for j=187 out of 250 (i.e. j=3937 in [3751;4000], as job id is i=16)"
[1] "seed 65274 for j=188 out of 250 (i.e. j=3938 in [3751;4000], as job id is i=16)"
[1] "seed 48749 for j=189 out of 250 (i.e. j=3939 in [3751;4000], as job id is i=16)"
[1] "seed 39347 for j=190 out of 250 (i.e. j=3940 in [3751;4000], as job id is i=16)"
[1] "seed 59402 for j=191 out of 250 (i.e. j=3941 in [3751;4000], as job id is i=16)"
[1] "seed 68738 for j=192 out of 250 (i.e. j=3942 in [3751;4000], as job id is i=16)"
[1] "seed 49425 for j=193 out of 250 (i.e. j=3943 in [3751;4000], as job id is i=16)"
[1] "seed 38088 for j=194 out of 250 (i.e. j=3944 in [3751;4000], as job id is i=16)"
[1] "seed 22962 for j=195 out of 250 (i.e. j=3945 in [3751;4000], as job id is i=16)"
[1] "seed 29295 for j=196 out of 250 (i.e. j=3946 in [3751;4000], as job id is i=16)"
[1] "seed 2396 for j=197 out of 250 (i.e. j=3947 in [3751;4000], as job id is i=16)"
[1] "seed 21809 for j=198 out of 250 (i.e. j=3948 in [3751;4000], as job id is i=16)"
[1] "seed 48525 for j=199 out of 250 (i.e. j=3949 in [3751;4000], as job id is i=16)"
[1] "seed 98837 for j=200 out of 250 (i.e. j=3950 in [3751;4000], as job id is i=16)"
[1] "seed 82726 for j=201 out of 250 (i.e. j=3951 in [3751;4000], as job id is i=16)"
[1] "seed 79181 for j=202 out of 250 (i.e. j=3952 in [3751;4000], as job id is i=16)"
[1] "seed 94583 for j=203 out of 250 (i.e. j=3953 in [3751;4000], as job id is i=16)"
[1] "seed 74704 for j=204 out of 250 (i.e. j=3954 in [3751;4000], as job id is i=16)"
[1] "seed 54205 for j=205 out of 250 (i.e. j=3955 in [3751;4000], as job id is i=16)"
[1] "seed 74326 for j=206 out of 250 (i.e. j=3956 in [3751;4000], as job id is i=16)"
[1] "seed 7548 for j=207 out of 250 (i.e. j=3957 in [3751;4000], as job id is i=16)"
[1] "seed 50252 for j=208 out of 250 (i.e. j=3958 in [3751;4000], as job id is i=16)"
[1] "seed 18957 for j=209 out of 250 (i.e. j=3959 in [3751;4000], as job id is i=16)"
[1] "seed 38366 for j=210 out of 250 (i.e. j=3960 in [3751;4000], as job id is i=16)"
[1] "seed 34719 for j=211 out of 250 (i.e. j=3961 in [3751;4000], as job id is i=16)"
[1] "seed 25717 for j=212 out of 250 (i.e. j=3962 in [3751;4000], as job id is i=16)"
[1] "seed 2654 for j=213 out of 250 (i.e. j=3963 in [3751;4000], as job id is i=16)"
[1] "seed 21856 for j=214 out of 250 (i.e. j=3964 in [3751;4000], as job id is i=16)"
[1] "seed 1050 for j=215 out of 250 (i.e. j=3965 in [3751;4000], as job id is i=16)"
[1] "seed 92985 for j=216 out of 250 (i.e. j=3966 in [3751;4000], as job id is i=16)"
[1] "seed 43596 for j=217 out of 250 (i.e. j=3967 in [3751;4000], as job id is i=16)"
[1] "seed 63330 for j=218 out of 250 (i.e. j=3968 in [3751;4000], as job id is i=16)"
[1] "seed 7599 for j=219 out of 250 (i.e. j=3969 in [3751;4000], as job id is i=16)"
[1] "seed 13799 for j=220 out of 250 (i.e. j=3970 in [3751;4000], as job id is i=16)"
[1] "seed 31842 for j=221 out of 250 (i.e. j=3971 in [3751;4000], as job id is i=16)"
[1] "seed 71802 for j=222 out of 250 (i.e. j=3972 in [3751;4000], as job id is i=16)"
[1] "seed 23725 for j=223 out of 250 (i.e. j=3973 in [3751;4000], as job id is i=16)"
[1] "seed 56211 for j=224 out of 250 (i.e. j=3974 in [3751;4000], as job id is i=16)"
[1] "seed 84335 for j=225 out of 250 (i.e. j=3975 in [3751;4000], as job id is i=16)"
[1] "seed 29258 for j=226 out of 250 (i.e. j=3976 in [3751;4000], as job id is i=16)"
[1] "seed 58659 for j=227 out of 250 (i.e. j=3977 in [3751;4000], as job id is i=16)"
[1] "seed 13686 for j=228 out of 250 (i.e. j=3978 in [3751;4000], as job id is i=16)"
[1] "seed 72770 for j=229 out of 250 (i.e. j=3979 in [3751;4000], as job id is i=16)"
[1] "seed 6813 for j=230 out of 250 (i.e. j=3980 in [3751;4000], as job id is i=16)"
[1] "seed 69703 for j=231 out of 250 (i.e. j=3981 in [3751;4000], as job id is i=16)"
[1] "seed 86537 for j=232 out of 250 (i.e. j=3982 in [3751;4000], as job id is i=16)"
[1] "seed 18345 for j=233 out of 250 (i.e. j=3983 in [3751;4000], as job id is i=16)"
[1] "seed 27981 for j=234 out of 250 (i.e. j=3984 in [3751;4000], as job id is i=16)"
[1] "seed 31542 for j=235 out of 250 (i.e. j=3985 in [3751;4000], as job id is i=16)"
[1] "seed 43106 for j=236 out of 250 (i.e. j=3986 in [3751;4000], as job id is i=16)"
[1] "seed 70895 for j=237 out of 250 (i.e. j=3987 in [3751;4000], as job id is i=16)"
[1] "seed 83972 for j=238 out of 250 (i.e. j=3988 in [3751;4000], as job id is i=16)"
[1] "seed 61166 for j=239 out of 250 (i.e. j=3989 in [3751;4000], as job id is i=16)"
[1] "seed 24363 for j=240 out of 250 (i.e. j=3990 in [3751;4000], as job id is i=16)"
[1] "seed 86611 for j=241 out of 250 (i.e. j=3991 in [3751;4000], as job id is i=16)"
[1] "seed 77430 for j=242 out of 250 (i.e. j=3992 in [3751;4000], as job id is i=16)"
[1] "seed 28110 for j=243 out of 250 (i.e. j=3993 in [3751;4000], as job id is i=16)"
[1] "seed 39168 for j=244 out of 250 (i.e. j=3994 in [3751;4000], as job id is i=16)"
[1] "seed 58684 for j=245 out of 250 (i.e. j=3995 in [3751;4000], as job id is i=16)"
[1] "seed 73422 for j=246 out of 250 (i.e. j=3996 in [3751;4000], as job id is i=16)"
[1] "seed 41580 for j=247 out of 250 (i.e. j=3997 in [3751;4000], as job id is i=16)"
[1] "seed 71527 for j=248 out of 250 (i.e. j=3998 in [3751;4000], as job id is i=16)"
[1] "seed 12440 for j=249 out of 250 (i.e. j=3999 in [3751;4000], as job id is i=16)"
[1] "seed 75957 for j=250 out of 250 (i.e. j=4000 in [3751;4000], as job id is i=16)"
There were 32 warnings (use warnings() to see them)
> rownames(RES) <- NULL
> save(RES,file=paste0(path.res,name,"-",iter_sim,".rda"))
> 
> ## * Summary results
> sessionInfo()
R version 4.1.2 (2021-11-01)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Red Hat Enterprise Linux 8.5 (Ootpa)

Matrix products: default
BLAS:   /opt/software/R/4.1.2/lib64/R/lib/libRblas.so
LAPACK: /opt/software/R/4.1.2/lib64/R/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] mvtnorm_1.1-3    DelayedGSD_0.0.3

loaded via a namespace (and not attached):
 [1] BB_2019.10-1     magrittr_2.0.3   tidyselect_1.1.2 munsell_0.5.0   
 [5] lattice_0.20-45  colorspace_2.0-3 xtable_1.8-4     R6_2.5.1        
 [9] quadprog_1.5-8   rlang_1.0.3      fansi_1.0.3      dplyr_1.0.9     
[13] grid_4.1.2       nlme_3.1-153     gtable_0.3.0     gsDesign_3.3.0  
[17] utf8_1.2.2       cli_3.3.0        ellipsis_0.3.2   tibble_3.1.7    
[21] lifecycle_1.0.1  crayon_1.5.1     purrr_0.3.4      ggplot2_3.3.6   
[25] tidyr_1.2.0      vctrs_0.4.1      glue_1.6.2       compiler_4.1.2  
[29] pillar_1.7.0     generics_0.1.3   scales_1.2.0     pkgconfig_2.0.3 
> summary(RES)
     method        stage           type             statistic     
 Min.   :1.0   Min.   :1.000   Length:1500        Min.   :0.1349  
 1st Qu.:1.0   1st Qu.:1.000   Class :character   1st Qu.:1.5093  
 Median :1.5   Median :1.000   Mode  :character   Median :2.2815  
 Mean   :1.5   Mean   :1.333                      Mean   :2.2015  
 3rd Qu.:2.0   3rd Qu.:2.000                      3rd Qu.:2.8386  
 Max.   :2.0   Max.   :2.000                      Max.   :5.5112  
                                                  NA's   :500     
  estimate_ML          se_ML             info           infoPC      
 Min.   :-0.1894   Min.   :0.3391   Min.   :4.452   Min.   :0.3479  
 1st Qu.: 0.5380   1st Qu.:0.3881   1st Qu.:5.740   1st Qu.:0.4485  
 Median : 0.7590   Median :0.4048   Median :6.219   Median :0.4860  
 Mean   : 0.7788   Mean   :0.4048   Mean   :6.268   Mean   :0.4898  
 3rd Qu.: 0.9998   3rd Qu.:0.4211   3rd Qu.:6.722   3rd Qu.:0.5253  
 Max.   : 1.9989   Max.   :0.4739   Max.   :9.383   Max.   :0.7332  
 NA's   :500       NA's   :1000     NA's   :138     NA's   :138     
   info.pred      infoPC.pred           uk              lk         
 Min.   :4.775   Min.   :0.3731   Min.   :2.272   Min.   :-0.2856  
 1st Qu.:5.988   1st Qu.:0.4679   1st Qu.:2.472   1st Qu.: 0.1359  
 Median :6.466   Median :0.5053   Median :2.531   Median : 0.2856  
 Mean   :6.564   Mean   :0.5129   Mean   :2.527   Mean   : 0.2998  
 3rd Qu.:7.015   3rd Qu.:0.5481   3rd Qu.:2.586   3rd Qu.: 0.4521  
 Max.   :9.556   Max.   :0.7468   Max.   :2.745   Max.   : 1.0351  
 NA's   :1000    NA's   :1000     NA's   :1000    NA's   :1000     
   decision            reason            p.value_ML        lower_ML      
 Length:1500        Length:1500        Min.   :0.0000   Min.   :-0.7978  
 Class :character   Class :character   1st Qu.:0.0029   1st Qu.:-0.0325  
 Mode  :character   Mode  :character   Median :0.0091   Median : 0.1160  
                                       Mean   :0.0566   Mean   : 0.1018  
                                       3rd Qu.:0.0329   3rd Qu.: 0.2463  
                                       Max.   :0.8928   Max.   : 1.1814  
                                       NA's   :1000     NA's   :1000     
    upper_ML       p.value_MUE       lower_MUE         upper_MUE     
 Min.   :0.5903   Min.   :0.0000   Min.   :-0.8102   Min.   :0.8119  
 1st Qu.:1.2334   1st Qu.:0.0043   1st Qu.:-0.0349   1st Qu.:1.2223  
 Median :1.4331   Median :0.0076   Median : 0.0701   Median :1.4117  
 Mean   :1.5178   Mean   :0.0412   Mean   : 0.0872   Mean   :1.5243  
 3rd Qu.:1.7515   3rd Qu.:0.0189   3rd Qu.: 0.1641   3rd Qu.:1.7191  
 Max.   :2.8164   Max.   :0.8901   Max.   : 1.7568   Max.   :3.1973  
 NA's   :1000     NA's   :1000     NA's   :1000      NA's   :1000    
  estimate_MUE          ck           time.interim        seed      
 Min.   :0.0385   Min.   :-0.1041   Min.   :526.0   Min.   :  560  
 1st Qu.:0.6066   1st Qu.: 1.3882   1st Qu.:584.0   1st Qu.:21997  
 Median :0.7705   Median : 1.4428   Median :602.0   Median :46055  
 Mean   :0.8169   Mean   : 1.3948   Mean   :602.7   Mean   :47897  
 3rd Qu.:0.9794   3rd Qu.: 1.4924   3rd Qu.:625.0   3rd Qu.:74704  
 Max.   :2.3741   Max.   : 1.6929   Max.   :672.0   Max.   :99719  
 NA's   :1000     NA's   :638                                      
  nX1.interim     nX2.interim     nX3.interim  computation.time
 Min.   :145.0   Min.   :130.0   Min.   :121   Min.   :0.682   
 1st Qu.:148.0   1st Qu.:135.0   1st Qu.:125   1st Qu.:0.887   
 Median :149.0   Median :137.0   Median :127   Median :0.990   
 Mean   :148.8   Mean   :136.6   Mean   :127   Mean   :1.009   
 3rd Qu.:150.0   3rd Qu.:138.0   3rd Qu.:129   3rd Qu.:1.117   
 Max.   :154.0   Max.   :144.0   Max.   :134   Max.   :3.818   
                                                               
> 
> #----------------------------------------------------------------------
> ### BATCH_simuMain.R ends here
> 
> proc.time()
   user  system elapsed 
254.741   0.400 265.943 
