
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### BATCH_simuMain.R --- 
> #----------------------------------------------------------------------
> ## Author: Paul Blanche
> ## Created: Mar  5 2021 (10:56) 
> ## Version: 
> ## Last-Updated: jul  7 2022 (13:56) 
> ##           By: Brice Ozenne
> ##     Update #: 518
> #----------------------------------------------------------------------
> ## 
> ### Commentary: 
> ## 
> ### Change Log:
> #----------------------------------------------------------------------
> ## 
> ### Code:
> 
> ## ** BATCH loop
> ## cd /projects/biostat01/people/hpl802/DelayedGSD/
> ## for ITER in `seq 1 10`;
> ## do
> ## eval 'R CMD BATCH --vanilla "--args iter_sim='$ITER' n.iter_sim=10" BATCH_simuMain.R output/R-simuMain-'$ITER'.Rout &'
> ## done
> 
> ## [1] 1186669
> ## [2] 1186670
> ## [3] 1186671
> ## [4] 1186672
> ## [5] 1186673
> ## [6] 1186674
> ## [7] 1186675
> ## [8] 1186676
> ## [9] 1186677
> ## [10] 1186678
> 
> rm(list=ls())
>                                    # {{{ parameters
> ## * parameters
> name <- "ScenarioName" # To save the results
> method <- 1:2 # methods used to compute the boundaries
>                                         #---
> myseed <- 140786598
>                                         #--- to plan the trial ----
> NMC <- 250 # number of sequential simulations to run in parallel. Eg. with 250, then we can run 40 scripts in paralell to get N=10,000 runs in total.
> kMax <- 2  #max number of analyses (including final)
> alpha <- 0.025  #type I error (one sided)
> beta <- 0.2  #type II error
> informationRates <- c(0.5,1)  #planned  information rates
> rho_alpha <- 2  # rho parameter for alpha error spending function
> rho_beta <- 2  # rho parameter for beta error spending function
> ## deltaPower <- 0.75 # just to try another value when Id > Imax
> Id <- 0.55  #(expected) information rate at each decision analysis
> binding <- TRUE
>                                         #
>                                         #---- to generate data -----------
>                                         #
> block <- c(1,1,0,0) 
> allsd <- c(2.5,2.1,2.4) # sd, first from baseline measurement, then the two changes from baseline
> mean0 <- c(10,0,0) # mean placebo group (again, first is absolute value, then change from baseline)
> delta <- c(0,0.6,0.8) # treatment effect
> ar <- (0.86*2)*2 # orginial accrual rate from data from Corine is 0.86 per week, hence we multiply by 2 for by 14 days. As to low, we further multiply by 2
> cor011 <- -0.15 # ~ from data from Corine
> corij1 <- 0.68  # ~ from data from Corine
> cor0j1 <- -0.27  # ~ from data from Corine
> Miss11 <- 5/104 # miss both V1 and V2
> Miss12 <- 1/104 # miss V1 and but not V2
> Miss21 <- 6/104 # do not miss V1 and but miss V2
> Miss22 <- 92/104 # miss none
> PropForInterim <- 0.5 # Decide to have interim analysiz when PropForInterim % of all subjects have had the chance to have one follow-up measuement recorded in the data to be available for analysis.
> theDelta.t <- 1.50001 # time lag to process the data and make them ready to analyze after collecting them (unit is time between two follow-up visits)
> TimeFactor <- 14 ## number of days between two visits
>                                         #
>                                         #--- actually for both planing the trial  and generating data-----
>                                         #
>                                         #
> deltaPower <- abs(delta[3]) # effect (NOT Z-scale/unit, but outcome scale/unit!) that the study is powered for: should we choose ourselves or compute from other numbers above ???
> n <- ceiling(2*2*((allsd[3]/deltaPower)^2)*(qnorm(1-beta)-qnorm(alpha))^2) #104 with Corine's data # should we choose ourselves or compute from the above numbers ???
>                                         # inflate SS as required for interim
> 
>                                         # {{{ Set seeds for parallel computing and reproducibility
> ## * Seed
> args <- commandArgs(TRUE) ## BATCH MODE
> if(length(args)>0){
+     for (arg in args){
+         eval(parse(text=arg))
+     }
+ }else{ ## SLUMR
+     iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_ID"))
+     n.iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_COUNT"))
+ } ## interactive
> if(is.na(iter_sim)){iter_sim <- 1}
> if(is.na(n.iter_sim)){n.iter_sim <- 40}
> 
> set.seed(140786598)
> allseeds <- sample.int(n = 10*n.iter_sim*NMC, size = n.iter_sim*NMC, replace=FALSE) #x=1:(.Machine$integer.max) seems to be maximal possible
> # }}}
> 
> # {{{ set path to load and save and othe machine specific variables
> ## * path
> path <- "."
> path.res <- file.path(path,"Results","simuMain")
> if(dir.exists(path.res)==FALSE){
+     if(dir.exists(file.path(path,"Results"))==FALSE){
+     dir.create(file.path(path,"Results"))
+     }
+     dir.create(path.res)
+ }
> path.output <- file.path(path,"output","simuMain")
> if(dir.exists(path.output)==FALSE){
+     if(dir.exists(file.path(path,"output"))==FALSE){
+     dir.create(file.path(path,"output"))
+     }
+     dir.create(path.output)
+ }
> # }}}
> 
> 
> ## * libraries and functions
> library(DelayedGSD)
DelayedGSD version 0.0.3
> ## sourceDir <- function(path, trace = TRUE, ...) {
> ##     for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
> ##         if(trace) cat(nm,":")
> ##         source(file.path(path, nm), ...)
> ##         if(trace) cat("\n")
> ##     }
> ## }
> ## sourceDir(pathToLoad)
>     
> 
> ## * Compute inflation factor and sample size
> plannedB <- vector(mode = "list", length = 3)
> for(iMeth in method){ ## iMeth <- 1
+     plannedB[[iMeth]] <- CalcBoundaries(kMax=kMax,  
+                                         alpha=alpha, 
+                                         beta=beta,  
+                                         InfoR.i=informationRates,  
+                                         InfoR.d=c(Id,1),  
+                                         rho_alpha=rho_alpha,  
+                                         rho_beta=rho_beta,  
+                                         method=iMeth,  
+                                         cNotBelowFixedc=FALSE,
+                                         bindingFutility=binding,
+                                         delta=tail(delta,1))
+     ## summary(plannedB[[1]])
+     ## coef(plannedB[[iMeth]], type = "information")
+ }
Loading required namespace: gsDesign
Loading required package: mvtnorm
Loading required namespace: BB
> inflationFactor <- unlist(lapply(plannedB,function(iP){iP$planned$InflationFactor}))
> nGSD <- ceiling(n*inflationFactor)
> ##  plot(plannedB[[1]])
> 
> #
> # --- just to check---
> ## n
> ## InfoFixed <- ((qnorm(1-beta)-qnorm(alpha))/(deltaPower))^2
> ## InfoFixed
> ## n/(4*(allsd[3])^2)
> #---
> # }}}
> 
> 
> 
> 
> # {{{ technical details to loop
> RES <- NULL # initialize results to save
> allj <- ((iter_sim-1)*NMC + 1):(iter_sim*NMC) # indices of all iterations (replicates) for this job, accountng for the other jobs running in parallel
> # }}}
> 
> ## * Loop
> for(j in allj){ ## j <- 51 ## 5
+     startComp <- Sys.time()
+     myseedi <- allseeds[j]
+     # {{{ TRACE info (e.g. to check the Rout)
+     print(paste0("seed ",myseedi," for ","j=",which(j==allj)," out of ",NMC, " (i.e. j=",j," in [",(iter_sim-1)*NMC + 1,";",iter_sim*NMC,"], as job id is i=",iter_sim,")"))
+     # }}}
+     # {{{ Missing probabilities
+     MyMissProb <- matrix(c(Miss11,Miss12,Miss21,Miss22),ncol=2,nrow=2,byrow=TRUE) # to additionnally remove 1 more because some FASFL=N
+     colnames(MyMissProb) <- c("V2 missing","V2 not missing")
+     rownames(MyMissProb) <- c("V1 missing","V1 not missing")
+     # }}}
+ 
+                                         # {{{ generate data
+     ## ** simulate
+     res <- GenData(n=n, 
+                    N.fw=2,
+                    rand.block=block,
+                    allsd=allsd,
+                    mean0=mean0,
+                    delta=delta,
+                    ar=ar,
+                    cor.01.1=cor011,
+                    cor.ij.1=corij1,
+                    cor.0j.1=cor0j1,
+                    seed=myseedi,
+                    MissProb=MyMissProb,
+                    DigitsOutcome=2,
+                    TimeFactor=TimeFactor,
+                    DigitsTime=0
+                    )
+     d <- res$d
+     ## head(d,n=20)
+                                         # }}}
+                                         # {{{ reformat data like those of Corine
+     ## Make data long format
+     ## dd <- FormatAsCase(d)
+     ## head(dd)
+     ## summary(dd)
+                                         # }}}
+    
+                                         # {{{ make data available at interim
+                                         # Here we stop inclusion data collection for the interim analysis as soon as
+                                         # half of the participants have completed (or had the opportunity to complete) the follow-up 
+     thet <- d$t3[ceiling(n*PropForInterim)]
+     di <- SelectData(d,t=thet)
+     ## ddi <- FormatAsCase(di) # needed ????
+     ## head(d[d$id==52,])
+                                         # }}}
+     ## {{{ analyze data at at interim
+     ## ** interim
+     lmmI <- analyzeData(di, ddf = "nlme", data.decision = sum(d$t1 <= thet + theDelta.t*TimeFactor), getinfo = TRUE, trace = TRUE)
+     ## lmmI <- analyzeData(di, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     currentGSD <- vector(mode = "list", length = 3)
+     out.interim <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+ 
+         currentGSD[[iMeth]] <- update(plannedB[[iMeth]], delta = lmmI, trace = FALSE)
+ 
+         iConfint.interim <- confint(currentGSD[[iMeth]])
+         iInfo.interim <- coef(currentGSD[[iMeth]], type = "information")
+         iBoundary.interim <- coef(currentGSD[[iMeth]], type = "boundary")
+         iDecision.interim <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+         out.interim[[iMeth]] <-  data.frame(statistic = iConfint.interim[1,"statistic"],
+                                             estimate_ML = iConfint.interim[1,"estimate"],
+                                             se_ML = iConfint.interim[1,"se"],
+                                             info = iInfo.interim[1,"Interim"],
+                                             infoPC = iInfo.interim[1,"Interim.pc"],
+                                             info.pred = iInfo.interim[1,"Decision"],
+                                             infoPC.pred = iInfo.interim[1,"Decision.pc"],
+                                             uk = iBoundary.interim[1,"Ebound"],
+                                             lk = iBoundary.interim[1,"Fbound"],
+                                             decision = iDecision.interim["decision","stage 1"],
+                                             reason = iDecision.interim["reason.interim","stage 1"])
+     }
+     ## currentGSD[[1]]
+     ## plot(currentGSD[[1]])
+ 
+     ## ** decision
+     dDecision <- d[which(d$t1 <= thet + theDelta.t*TimeFactor),]
+     lmmD <- analyzeData(dDecision, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+     
+     out.decision <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+           
+         if(out.interim[[iMeth]]$decision == "stop"){
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, trace = FALSE)
+             ## plot(currentGSD[[iMeth]])
+ 
+             iConfint.decision <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.decision  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = iConfint.decision[1,"statistic"],
+                                                 p.value_ML = iConfint.decision[iConfint.decision$method == "ML","p.value"],
+                                                 lower_ML = iConfint.decision[iConfint.decision$method == "ML","lower"],
+                                                 upper_ML = iConfint.decision[iConfint.decision$method == "ML","upper"],
+                                                 estimate_ML = iConfint.decision[iConfint.decision$method == "ML","estimate"],
+                                                 p.value_MUE = iConfint.decision[iConfint.decision$method == "MUE","p.value"],
+                                                 lower_MUE = iConfint.decision[iConfint.decision$method == "MUE","lower"],
+                                                 upper_MUE = iConfint.decision[iConfint.decision$method == "MUE","upper"],
+                                                 estimate_MUE = iConfint.decision[iConfint.decision$method == "MUE","estimate"],
+                                                 info = iInfo.decision[1,"Interim"],
+                                                 infoPC = iInfo.decision[1,"Interim.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = unname(iDecision.decision["decision","stage 2"])
+                                                 )
+ 
+         }else{
+             ## update information
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, k = 1, type.k = "decision", trace = FALSE)
+ 
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = NA,
+                                                 p.value_ML = NA,
+                                                 lower_ML = NA,
+                                                 upper_ML = NA,
+                                                 estimate_ML = NA,
+                                                 p.value_MUE = NA,
+                                                 lower_MUE = NA,
+                                                 upper_MUE = NA,
+                                                 estimate_MUE = NA,
+                                                 info = iInfo.decision[1,"Decision"],
+                                                 infoPC = iInfo.decision[1,"Decision.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = NA)
+         }
+     }
+                                         # }}}
+                                         # {{{ Analyze data at decision
+ 
+     ## ** finale
+     dFinal <- d
+     lmmF <- analyzeData(dFinal, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     out.final <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+         if(out.interim[[iMeth]]$decision == "stop"){
+             out.final[[iMeth]] <- data.frame(statistic = NA,
+                                              p.value_ML = NA,
+                                              lower_ML = NA,
+                                              upper_ML = NA,
+                                              estimate_ML = NA,
+                                              p.value_MUE = NA,
+                                              lower_MUE = NA,
+                                              upper_MUE = NA,
+                                              estimate_MUE = NA,
+                                              info = NA,
+                                              infoPC = NA,
+                                              ck = NA,
+                                              decision = NA)
+ 
+         }else{
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmF, trace = FALSE)
+ 
+             ## plot(test)
+             ## summary(test)
+             iConfint.final <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.final <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.final <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.final  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.final[[iMeth]] <- data.frame(statistic = iConfint.final[1,"statistic"],
+                                              p.value_ML = iConfint.final[iConfint.final$method == "ML","p.value"],
+                                              lower_ML = iConfint.final[iConfint.final$method == "ML","lower"],
+                                              upper_ML = iConfint.final[iConfint.final$method == "ML","upper"],
+                                              estimate_ML = iConfint.final[iConfint.final$method == "ML","estimate"],
+                                              p.value_MUE = iConfint.final[iConfint.final$method == "MUE","p.value"],
+                                              lower_MUE = iConfint.final[iConfint.final$method == "MUE","lower"],
+                                              upper_MUE = iConfint.final[iConfint.final$method == "MUE","upper"],
+                                              estimate_MUE = iConfint.final[iConfint.final$method == "MUE","estimate"],
+                                              info = iInfo.final[1,"Interim"],
+                                              infoPC = iInfo.final[1,"Interim.pc"],
+                                              ck = iBoundary.final[1,"Cbound"],
+                                              decision = unname(coef(currentGSD[[iMeth]], type = "decision")["decision","stage 2"])
+                                              )
+         }
+     }
+                                         # }}}
+ 
+     stopComp <- Sys.time()
+                                         # {{{ Save results
+ 
+     outMerge <- do.call(rbind,lapply(method, function(iMeth){
+         iNames <- unique(c(names(out.interim[[iMeth]]),names(out.decision[[iMeth]]),names(out.final[[iMeth]])))
+         iMerge <- data.frame(matrix(NA, ncol = length(iNames)+3, nrow = 3, dimnames = list(NULL, c("method", "stage", "type", iNames))))
+         iMerge[1,c("method","stage","type",names(out.interim[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "interim", out.interim[[iMeth]]) 
+         iMerge[2,c("method","stage","type",names(out.decision[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "decision", out.decision[[iMeth]]) 
+         iMerge[3,c("method","stage","type",names(out.final[[iMeth]]))] <- data.frame(method = iMeth, stage = 2, type = "final", out.final[[iMeth]])
+         return(iMerge)
+     }))
+ 
+     ## outMerge[outMerge$method==3,]
+ 
+     out <- cbind(
+         ## results
+         outMerge,
+         ## simulation details
+         time.interim = thet,
+         seed=myseedi,             
+         nX1.interim = sum(!is.na(di$X1)),
+         nX2.interim = sum(!is.na(di$X2)),
+         nX3.interim = sum(!is.na(di$X3)),
+         ## computation time
+         computation.time=as.double(round(difftime(stopComp,startComp,units="secs"),3))
+     )
+     ## names(out) <- myColNames
+     RES <- rbind(RES,out)
+     save(RES,file=paste0(path.res,name,"(tempo)-",iter_sim,".rda"))
+                                         # }}}
+ }
[1] "seed 14854 for j=1 out of 250 (i.e. j=2251 in [2251;2500], as job id is i=10)"
Loading required namespace: nlme
[1] "seed 49790 for j=2 out of 250 (i.e. j=2252 in [2251;2500], as job id is i=10)"
[1] "seed 8889 for j=3 out of 250 (i.e. j=2253 in [2251;2500], as job id is i=10)"
[1] "seed 11969 for j=4 out of 250 (i.e. j=2254 in [2251;2500], as job id is i=10)"
[1] "seed 94291 for j=5 out of 250 (i.e. j=2255 in [2251;2500], as job id is i=10)"
[1] "seed 97881 for j=6 out of 250 (i.e. j=2256 in [2251;2500], as job id is i=10)"
[1] "seed 37241 for j=7 out of 250 (i.e. j=2257 in [2251;2500], as job id is i=10)"
[1] "seed 48252 for j=8 out of 250 (i.e. j=2258 in [2251;2500], as job id is i=10)"
[1] "seed 70753 for j=9 out of 250 (i.e. j=2259 in [2251;2500], as job id is i=10)"
[1] "seed 49620 for j=10 out of 250 (i.e. j=2260 in [2251;2500], as job id is i=10)"
[1] "seed 60473 for j=11 out of 250 (i.e. j=2261 in [2251;2500], as job id is i=10)"
[1] "seed 3729 for j=12 out of 250 (i.e. j=2262 in [2251;2500], as job id is i=10)"
[1] "seed 38622 for j=13 out of 250 (i.e. j=2263 in [2251;2500], as job id is i=10)"
[1] "seed 29095 for j=14 out of 250 (i.e. j=2264 in [2251;2500], as job id is i=10)"
[1] "seed 58289 for j=15 out of 250 (i.e. j=2265 in [2251;2500], as job id is i=10)"
[1] "seed 17445 for j=16 out of 250 (i.e. j=2266 in [2251;2500], as job id is i=10)"
[1] "seed 64694 for j=17 out of 250 (i.e. j=2267 in [2251;2500], as job id is i=10)"
[1] "seed 80999 for j=18 out of 250 (i.e. j=2268 in [2251;2500], as job id is i=10)"
[1] "seed 49044 for j=19 out of 250 (i.e. j=2269 in [2251;2500], as job id is i=10)"
[1] "seed 99836 for j=20 out of 250 (i.e. j=2270 in [2251;2500], as job id is i=10)"
[1] "seed 99038 for j=21 out of 250 (i.e. j=2271 in [2251;2500], as job id is i=10)"
[1] "seed 35165 for j=22 out of 250 (i.e. j=2272 in [2251;2500], as job id is i=10)"
[1] "seed 6574 for j=23 out of 250 (i.e. j=2273 in [2251;2500], as job id is i=10)"
[1] "seed 98273 for j=24 out of 250 (i.e. j=2274 in [2251;2500], as job id is i=10)"
[1] "seed 85170 for j=25 out of 250 (i.e. j=2275 in [2251;2500], as job id is i=10)"
[1] "seed 61303 for j=26 out of 250 (i.e. j=2276 in [2251;2500], as job id is i=10)"
[1] "seed 86162 for j=27 out of 250 (i.e. j=2277 in [2251;2500], as job id is i=10)"
[1] "seed 31682 for j=28 out of 250 (i.e. j=2278 in [2251;2500], as job id is i=10)"
[1] "seed 11484 for j=29 out of 250 (i.e. j=2279 in [2251;2500], as job id is i=10)"
[1] "seed 24091 for j=30 out of 250 (i.e. j=2280 in [2251;2500], as job id is i=10)"
[1] "seed 85542 for j=31 out of 250 (i.e. j=2281 in [2251;2500], as job id is i=10)"
[1] "seed 75520 for j=32 out of 250 (i.e. j=2282 in [2251;2500], as job id is i=10)"
[1] "seed 11179 for j=33 out of 250 (i.e. j=2283 in [2251;2500], as job id is i=10)"
[1] "seed 28568 for j=34 out of 250 (i.e. j=2284 in [2251;2500], as job id is i=10)"
[1] "seed 42036 for j=35 out of 250 (i.e. j=2285 in [2251;2500], as job id is i=10)"
[1] "seed 23729 for j=36 out of 250 (i.e. j=2286 in [2251;2500], as job id is i=10)"
[1] "seed 29757 for j=37 out of 250 (i.e. j=2287 in [2251;2500], as job id is i=10)"
[1] "seed 7920 for j=38 out of 250 (i.e. j=2288 in [2251;2500], as job id is i=10)"
[1] "seed 17667 for j=39 out of 250 (i.e. j=2289 in [2251;2500], as job id is i=10)"
[1] "seed 64362 for j=40 out of 250 (i.e. j=2290 in [2251;2500], as job id is i=10)"
[1] "seed 74677 for j=41 out of 250 (i.e. j=2291 in [2251;2500], as job id is i=10)"
[1] "seed 58187 for j=42 out of 250 (i.e. j=2292 in [2251;2500], as job id is i=10)"
[1] "seed 91211 for j=43 out of 250 (i.e. j=2293 in [2251;2500], as job id is i=10)"
[1] "seed 12857 for j=44 out of 250 (i.e. j=2294 in [2251;2500], as job id is i=10)"
[1] "seed 92503 for j=45 out of 250 (i.e. j=2295 in [2251;2500], as job id is i=10)"
[1] "seed 95244 for j=46 out of 250 (i.e. j=2296 in [2251;2500], as job id is i=10)"
[1] "seed 42535 for j=47 out of 250 (i.e. j=2297 in [2251;2500], as job id is i=10)"
[1] "seed 14876 for j=48 out of 250 (i.e. j=2298 in [2251;2500], as job id is i=10)"
[1] "seed 93118 for j=49 out of 250 (i.e. j=2299 in [2251;2500], as job id is i=10)"
[1] "seed 72242 for j=50 out of 250 (i.e. j=2300 in [2251;2500], as job id is i=10)"
[1] "seed 36333 for j=51 out of 250 (i.e. j=2301 in [2251;2500], as job id is i=10)"
[1] "seed 10906 for j=52 out of 250 (i.e. j=2302 in [2251;2500], as job id is i=10)"
[1] "seed 83420 for j=53 out of 250 (i.e. j=2303 in [2251;2500], as job id is i=10)"
[1] "seed 29690 for j=54 out of 250 (i.e. j=2304 in [2251;2500], as job id is i=10)"
[1] "seed 14162 for j=55 out of 250 (i.e. j=2305 in [2251;2500], as job id is i=10)"
[1] "seed 90690 for j=56 out of 250 (i.e. j=2306 in [2251;2500], as job id is i=10)"
[1] "seed 42058 for j=57 out of 250 (i.e. j=2307 in [2251;2500], as job id is i=10)"
[1] "seed 77902 for j=58 out of 250 (i.e. j=2308 in [2251;2500], as job id is i=10)"
[1] "seed 97974 for j=59 out of 250 (i.e. j=2309 in [2251;2500], as job id is i=10)"
[1] "seed 85573 for j=60 out of 250 (i.e. j=2310 in [2251;2500], as job id is i=10)"
[1] "seed 79418 for j=61 out of 250 (i.e. j=2311 in [2251;2500], as job id is i=10)"
[1] "seed 88036 for j=62 out of 250 (i.e. j=2312 in [2251;2500], as job id is i=10)"
[1] "seed 50101 for j=63 out of 250 (i.e. j=2313 in [2251;2500], as job id is i=10)"
[1] "seed 36892 for j=64 out of 250 (i.e. j=2314 in [2251;2500], as job id is i=10)"
[1] "seed 30110 for j=65 out of 250 (i.e. j=2315 in [2251;2500], as job id is i=10)"
[1] "seed 94331 for j=66 out of 250 (i.e. j=2316 in [2251;2500], as job id is i=10)"
[1] "seed 53593 for j=67 out of 250 (i.e. j=2317 in [2251;2500], as job id is i=10)"
[1] "seed 9203 for j=68 out of 250 (i.e. j=2318 in [2251;2500], as job id is i=10)"
[1] "seed 28361 for j=69 out of 250 (i.e. j=2319 in [2251;2500], as job id is i=10)"
[1] "seed 27201 for j=70 out of 250 (i.e. j=2320 in [2251;2500], as job id is i=10)"
[1] "seed 62024 for j=71 out of 250 (i.e. j=2321 in [2251;2500], as job id is i=10)"
[1] "seed 76373 for j=72 out of 250 (i.e. j=2322 in [2251;2500], as job id is i=10)"
[1] "seed 14458 for j=73 out of 250 (i.e. j=2323 in [2251;2500], as job id is i=10)"
[1] "seed 75688 for j=74 out of 250 (i.e. j=2324 in [2251;2500], as job id is i=10)"
[1] "seed 66863 for j=75 out of 250 (i.e. j=2325 in [2251;2500], as job id is i=10)"
[1] "seed 92913 for j=76 out of 250 (i.e. j=2326 in [2251;2500], as job id is i=10)"
[1] "seed 64536 for j=77 out of 250 (i.e. j=2327 in [2251;2500], as job id is i=10)"
[1] "seed 79209 for j=78 out of 250 (i.e. j=2328 in [2251;2500], as job id is i=10)"
[1] "seed 62135 for j=79 out of 250 (i.e. j=2329 in [2251;2500], as job id is i=10)"
[1] "seed 21249 for j=80 out of 250 (i.e. j=2330 in [2251;2500], as job id is i=10)"
[1] "seed 62266 for j=81 out of 250 (i.e. j=2331 in [2251;2500], as job id is i=10)"
[1] "seed 55404 for j=82 out of 250 (i.e. j=2332 in [2251;2500], as job id is i=10)"
[1] "seed 55573 for j=83 out of 250 (i.e. j=2333 in [2251;2500], as job id is i=10)"
[1] "seed 34604 for j=84 out of 250 (i.e. j=2334 in [2251;2500], as job id is i=10)"
[1] "seed 23376 for j=85 out of 250 (i.e. j=2335 in [2251;2500], as job id is i=10)"
[1] "seed 84754 for j=86 out of 250 (i.e. j=2336 in [2251;2500], as job id is i=10)"
[1] "seed 40286 for j=87 out of 250 (i.e. j=2337 in [2251;2500], as job id is i=10)"
[1] "seed 54515 for j=88 out of 250 (i.e. j=2338 in [2251;2500], as job id is i=10)"
[1] "seed 80783 for j=89 out of 250 (i.e. j=2339 in [2251;2500], as job id is i=10)"
[1] "seed 4016 for j=90 out of 250 (i.e. j=2340 in [2251;2500], as job id is i=10)"
[1] "seed 37986 for j=91 out of 250 (i.e. j=2341 in [2251;2500], as job id is i=10)"
[1] "seed 41339 for j=92 out of 250 (i.e. j=2342 in [2251;2500], as job id is i=10)"
[1] "seed 40449 for j=93 out of 250 (i.e. j=2343 in [2251;2500], as job id is i=10)"
[1] "seed 78459 for j=94 out of 250 (i.e. j=2344 in [2251;2500], as job id is i=10)"
[1] "seed 56990 for j=95 out of 250 (i.e. j=2345 in [2251;2500], as job id is i=10)"
[1] "seed 88073 for j=96 out of 250 (i.e. j=2346 in [2251;2500], as job id is i=10)"
[1] "seed 86269 for j=97 out of 250 (i.e. j=2347 in [2251;2500], as job id is i=10)"
[1] "seed 23197 for j=98 out of 250 (i.e. j=2348 in [2251;2500], as job id is i=10)"
[1] "seed 93717 for j=99 out of 250 (i.e. j=2349 in [2251;2500], as job id is i=10)"
[1] "seed 10445 for j=100 out of 250 (i.e. j=2350 in [2251;2500], as job id is i=10)"
[1] "seed 34050 for j=101 out of 250 (i.e. j=2351 in [2251;2500], as job id is i=10)"
[1] "seed 86835 for j=102 out of 250 (i.e. j=2352 in [2251;2500], as job id is i=10)"
[1] "seed 20910 for j=103 out of 250 (i.e. j=2353 in [2251;2500], as job id is i=10)"
[1] "seed 87826 for j=104 out of 250 (i.e. j=2354 in [2251;2500], as job id is i=10)"
[1] "seed 58135 for j=105 out of 250 (i.e. j=2355 in [2251;2500], as job id is i=10)"
[1] "seed 52925 for j=106 out of 250 (i.e. j=2356 in [2251;2500], as job id is i=10)"
[1] "seed 74703 for j=107 out of 250 (i.e. j=2357 in [2251;2500], as job id is i=10)"
[1] "seed 49679 for j=108 out of 250 (i.e. j=2358 in [2251;2500], as job id is i=10)"
[1] "seed 4135 for j=109 out of 250 (i.e. j=2359 in [2251;2500], as job id is i=10)"
[1] "seed 58737 for j=110 out of 250 (i.e. j=2360 in [2251;2500], as job id is i=10)"
[1] "seed 96482 for j=111 out of 250 (i.e. j=2361 in [2251;2500], as job id is i=10)"
[1] "seed 43039 for j=112 out of 250 (i.e. j=2362 in [2251;2500], as job id is i=10)"
[1] "seed 29246 for j=113 out of 250 (i.e. j=2363 in [2251;2500], as job id is i=10)"
[1] "seed 7815 for j=114 out of 250 (i.e. j=2364 in [2251;2500], as job id is i=10)"
[1] "seed 2737 for j=115 out of 250 (i.e. j=2365 in [2251;2500], as job id is i=10)"
[1] "seed 70077 for j=116 out of 250 (i.e. j=2366 in [2251;2500], as job id is i=10)"
[1] "seed 60079 for j=117 out of 250 (i.e. j=2367 in [2251;2500], as job id is i=10)"
[1] "seed 90590 for j=118 out of 250 (i.e. j=2368 in [2251;2500], as job id is i=10)"
[1] "seed 82550 for j=119 out of 250 (i.e. j=2369 in [2251;2500], as job id is i=10)"
[1] "seed 94428 for j=120 out of 250 (i.e. j=2370 in [2251;2500], as job id is i=10)"
[1] "seed 19846 for j=121 out of 250 (i.e. j=2371 in [2251;2500], as job id is i=10)"
[1] "seed 59060 for j=122 out of 250 (i.e. j=2372 in [2251;2500], as job id is i=10)"
[1] "seed 60629 for j=123 out of 250 (i.e. j=2373 in [2251;2500], as job id is i=10)"
[1] "seed 78147 for j=124 out of 250 (i.e. j=2374 in [2251;2500], as job id is i=10)"
[1] "seed 6169 for j=125 out of 250 (i.e. j=2375 in [2251;2500], as job id is i=10)"
[1] "seed 83653 for j=126 out of 250 (i.e. j=2376 in [2251;2500], as job id is i=10)"
[1] "seed 30066 for j=127 out of 250 (i.e. j=2377 in [2251;2500], as job id is i=10)"
[1] "seed 77396 for j=128 out of 250 (i.e. j=2378 in [2251;2500], as job id is i=10)"
[1] "seed 72168 for j=129 out of 250 (i.e. j=2379 in [2251;2500], as job id is i=10)"
[1] "seed 57677 for j=130 out of 250 (i.e. j=2380 in [2251;2500], as job id is i=10)"
[1] "seed 19390 for j=131 out of 250 (i.e. j=2381 in [2251;2500], as job id is i=10)"
[1] "seed 50975 for j=132 out of 250 (i.e. j=2382 in [2251;2500], as job id is i=10)"
[1] "seed 83712 for j=133 out of 250 (i.e. j=2383 in [2251;2500], as job id is i=10)"
[1] "seed 25936 for j=134 out of 250 (i.e. j=2384 in [2251;2500], as job id is i=10)"
[1] "seed 7636 for j=135 out of 250 (i.e. j=2385 in [2251;2500], as job id is i=10)"
[1] "seed 98380 for j=136 out of 250 (i.e. j=2386 in [2251;2500], as job id is i=10)"
[1] "seed 6138 for j=137 out of 250 (i.e. j=2387 in [2251;2500], as job id is i=10)"
[1] "seed 31094 for j=138 out of 250 (i.e. j=2388 in [2251;2500], as job id is i=10)"
[1] "seed 86923 for j=139 out of 250 (i.e. j=2389 in [2251;2500], as job id is i=10)"
[1] "seed 31337 for j=140 out of 250 (i.e. j=2390 in [2251;2500], as job id is i=10)"
[1] "seed 37617 for j=141 out of 250 (i.e. j=2391 in [2251;2500], as job id is i=10)"
[1] "seed 23086 for j=142 out of 250 (i.e. j=2392 in [2251;2500], as job id is i=10)"
[1] "seed 923 for j=143 out of 250 (i.e. j=2393 in [2251;2500], as job id is i=10)"
[1] "seed 96794 for j=144 out of 250 (i.e. j=2394 in [2251;2500], as job id is i=10)"
[1] "seed 71567 for j=145 out of 250 (i.e. j=2395 in [2251;2500], as job id is i=10)"
[1] "seed 98671 for j=146 out of 250 (i.e. j=2396 in [2251;2500], as job id is i=10)"
[1] "seed 24719 for j=147 out of 250 (i.e. j=2397 in [2251;2500], as job id is i=10)"
[1] "seed 23437 for j=148 out of 250 (i.e. j=2398 in [2251;2500], as job id is i=10)"
[1] "seed 34439 for j=149 out of 250 (i.e. j=2399 in [2251;2500], as job id is i=10)"
[1] "seed 5342 for j=150 out of 250 (i.e. j=2400 in [2251;2500], as job id is i=10)"
[1] "seed 41378 for j=151 out of 250 (i.e. j=2401 in [2251;2500], as job id is i=10)"
[1] "seed 16875 for j=152 out of 250 (i.e. j=2402 in [2251;2500], as job id is i=10)"
[1] "seed 90740 for j=153 out of 250 (i.e. j=2403 in [2251;2500], as job id is i=10)"
[1] "seed 63753 for j=154 out of 250 (i.e. j=2404 in [2251;2500], as job id is i=10)"
[1] "seed 8144 for j=155 out of 250 (i.e. j=2405 in [2251;2500], as job id is i=10)"
[1] "seed 78719 for j=156 out of 250 (i.e. j=2406 in [2251;2500], as job id is i=10)"
[1] "seed 66637 for j=157 out of 250 (i.e. j=2407 in [2251;2500], as job id is i=10)"
[1] "seed 16422 for j=158 out of 250 (i.e. j=2408 in [2251;2500], as job id is i=10)"
[1] "seed 38416 for j=159 out of 250 (i.e. j=2409 in [2251;2500], as job id is i=10)"
[1] "seed 47888 for j=160 out of 250 (i.e. j=2410 in [2251;2500], as job id is i=10)"
[1] "seed 20079 for j=161 out of 250 (i.e. j=2411 in [2251;2500], as job id is i=10)"
[1] "seed 11019 for j=162 out of 250 (i.e. j=2412 in [2251;2500], as job id is i=10)"
[1] "seed 91333 for j=163 out of 250 (i.e. j=2413 in [2251;2500], as job id is i=10)"
[1] "seed 88084 for j=164 out of 250 (i.e. j=2414 in [2251;2500], as job id is i=10)"
[1] "seed 21906 for j=165 out of 250 (i.e. j=2415 in [2251;2500], as job id is i=10)"
[1] "seed 45126 for j=166 out of 250 (i.e. j=2416 in [2251;2500], as job id is i=10)"
[1] "seed 73593 for j=167 out of 250 (i.e. j=2417 in [2251;2500], as job id is i=10)"
[1] "seed 87334 for j=168 out of 250 (i.e. j=2418 in [2251;2500], as job id is i=10)"
[1] "seed 7050 for j=169 out of 250 (i.e. j=2419 in [2251;2500], as job id is i=10)"
[1] "seed 59555 for j=170 out of 250 (i.e. j=2420 in [2251;2500], as job id is i=10)"
[1] "seed 71431 for j=171 out of 250 (i.e. j=2421 in [2251;2500], as job id is i=10)"
[1] "seed 24069 for j=172 out of 250 (i.e. j=2422 in [2251;2500], as job id is i=10)"
[1] "seed 3325 for j=173 out of 250 (i.e. j=2423 in [2251;2500], as job id is i=10)"
[1] "seed 76088 for j=174 out of 250 (i.e. j=2424 in [2251;2500], as job id is i=10)"
[1] "seed 36663 for j=175 out of 250 (i.e. j=2425 in [2251;2500], as job id is i=10)"
[1] "seed 38617 for j=176 out of 250 (i.e. j=2426 in [2251;2500], as job id is i=10)"
[1] "seed 239 for j=177 out of 250 (i.e. j=2427 in [2251;2500], as job id is i=10)"
[1] "seed 24728 for j=178 out of 250 (i.e. j=2428 in [2251;2500], as job id is i=10)"
[1] "seed 3583 for j=179 out of 250 (i.e. j=2429 in [2251;2500], as job id is i=10)"
[1] "seed 82618 for j=180 out of 250 (i.e. j=2430 in [2251;2500], as job id is i=10)"
[1] "seed 21039 for j=181 out of 250 (i.e. j=2431 in [2251;2500], as job id is i=10)"
[1] "seed 77509 for j=182 out of 250 (i.e. j=2432 in [2251;2500], as job id is i=10)"
[1] "seed 28282 for j=183 out of 250 (i.e. j=2433 in [2251;2500], as job id is i=10)"
[1] "seed 22172 for j=184 out of 250 (i.e. j=2434 in [2251;2500], as job id is i=10)"
[1] "seed 69181 for j=185 out of 250 (i.e. j=2435 in [2251;2500], as job id is i=10)"
[1] "seed 30016 for j=186 out of 250 (i.e. j=2436 in [2251;2500], as job id is i=10)"
[1] "seed 23707 for j=187 out of 250 (i.e. j=2437 in [2251;2500], as job id is i=10)"
[1] "seed 47494 for j=188 out of 250 (i.e. j=2438 in [2251;2500], as job id is i=10)"
[1] "seed 46799 for j=189 out of 250 (i.e. j=2439 in [2251;2500], as job id is i=10)"
[1] "seed 25888 for j=190 out of 250 (i.e. j=2440 in [2251;2500], as job id is i=10)"
[1] "seed 95569 for j=191 out of 250 (i.e. j=2441 in [2251;2500], as job id is i=10)"
[1] "seed 11027 for j=192 out of 250 (i.e. j=2442 in [2251;2500], as job id is i=10)"
[1] "seed 87018 for j=193 out of 250 (i.e. j=2443 in [2251;2500], as job id is i=10)"
[1] "seed 50431 for j=194 out of 250 (i.e. j=2444 in [2251;2500], as job id is i=10)"
[1] "seed 79084 for j=195 out of 250 (i.e. j=2445 in [2251;2500], as job id is i=10)"
[1] "seed 87754 for j=196 out of 250 (i.e. j=2446 in [2251;2500], as job id is i=10)"
[1] "seed 14716 for j=197 out of 250 (i.e. j=2447 in [2251;2500], as job id is i=10)"
[1] "seed 22105 for j=198 out of 250 (i.e. j=2448 in [2251;2500], as job id is i=10)"
[1] "seed 79792 for j=199 out of 250 (i.e. j=2449 in [2251;2500], as job id is i=10)"
[1] "seed 14084 for j=200 out of 250 (i.e. j=2450 in [2251;2500], as job id is i=10)"
[1] "seed 19035 for j=201 out of 250 (i.e. j=2451 in [2251;2500], as job id is i=10)"
[1] "seed 30379 for j=202 out of 250 (i.e. j=2452 in [2251;2500], as job id is i=10)"
[1] "seed 21281 for j=203 out of 250 (i.e. j=2453 in [2251;2500], as job id is i=10)"
[1] "seed 52862 for j=204 out of 250 (i.e. j=2454 in [2251;2500], as job id is i=10)"
[1] "seed 54723 for j=205 out of 250 (i.e. j=2455 in [2251;2500], as job id is i=10)"
[1] "seed 91033 for j=206 out of 250 (i.e. j=2456 in [2251;2500], as job id is i=10)"
[1] "seed 47216 for j=207 out of 250 (i.e. j=2457 in [2251;2500], as job id is i=10)"
[1] "seed 79393 for j=208 out of 250 (i.e. j=2458 in [2251;2500], as job id is i=10)"
[1] "seed 47007 for j=209 out of 250 (i.e. j=2459 in [2251;2500], as job id is i=10)"
[1] "seed 7022 for j=210 out of 250 (i.e. j=2460 in [2251;2500], as job id is i=10)"
[1] "seed 73509 for j=211 out of 250 (i.e. j=2461 in [2251;2500], as job id is i=10)"
[1] "seed 12482 for j=212 out of 250 (i.e. j=2462 in [2251;2500], as job id is i=10)"
[1] "seed 71333 for j=213 out of 250 (i.e. j=2463 in [2251;2500], as job id is i=10)"
[1] "seed 9582 for j=214 out of 250 (i.e. j=2464 in [2251;2500], as job id is i=10)"
[1] "seed 91621 for j=215 out of 250 (i.e. j=2465 in [2251;2500], as job id is i=10)"
[1] "seed 80642 for j=216 out of 250 (i.e. j=2466 in [2251;2500], as job id is i=10)"
[1] "seed 26965 for j=217 out of 250 (i.e. j=2467 in [2251;2500], as job id is i=10)"
[1] "seed 6051 for j=218 out of 250 (i.e. j=2468 in [2251;2500], as job id is i=10)"
[1] "seed 36291 for j=219 out of 250 (i.e. j=2469 in [2251;2500], as job id is i=10)"
[1] "seed 21881 for j=220 out of 250 (i.e. j=2470 in [2251;2500], as job id is i=10)"
[1] "seed 3039 for j=221 out of 250 (i.e. j=2471 in [2251;2500], as job id is i=10)"
[1] "seed 33486 for j=222 out of 250 (i.e. j=2472 in [2251;2500], as job id is i=10)"
[1] "seed 1720 for j=223 out of 250 (i.e. j=2473 in [2251;2500], as job id is i=10)"
[1] "seed 27026 for j=224 out of 250 (i.e. j=2474 in [2251;2500], as job id is i=10)"
[1] "seed 10585 for j=225 out of 250 (i.e. j=2475 in [2251;2500], as job id is i=10)"
[1] "seed 75159 for j=226 out of 250 (i.e. j=2476 in [2251;2500], as job id is i=10)"
[1] "seed 9478 for j=227 out of 250 (i.e. j=2477 in [2251;2500], as job id is i=10)"
[1] "seed 39993 for j=228 out of 250 (i.e. j=2478 in [2251;2500], as job id is i=10)"
[1] "seed 80133 for j=229 out of 250 (i.e. j=2479 in [2251;2500], as job id is i=10)"
[1] "seed 51647 for j=230 out of 250 (i.e. j=2480 in [2251;2500], as job id is i=10)"
[1] "seed 50261 for j=231 out of 250 (i.e. j=2481 in [2251;2500], as job id is i=10)"
[1] "seed 17530 for j=232 out of 250 (i.e. j=2482 in [2251;2500], as job id is i=10)"
[1] "seed 81354 for j=233 out of 250 (i.e. j=2483 in [2251;2500], as job id is i=10)"
[1] "seed 72961 for j=234 out of 250 (i.e. j=2484 in [2251;2500], as job id is i=10)"
[1] "seed 66384 for j=235 out of 250 (i.e. j=2485 in [2251;2500], as job id is i=10)"
[1] "seed 93277 for j=236 out of 250 (i.e. j=2486 in [2251;2500], as job id is i=10)"
[1] "seed 558 for j=237 out of 250 (i.e. j=2487 in [2251;2500], as job id is i=10)"
[1] "seed 94218 for j=238 out of 250 (i.e. j=2488 in [2251;2500], as job id is i=10)"
[1] "seed 59877 for j=239 out of 250 (i.e. j=2489 in [2251;2500], as job id is i=10)"
[1] "seed 79358 for j=240 out of 250 (i.e. j=2490 in [2251;2500], as job id is i=10)"
[1] "seed 42900 for j=241 out of 250 (i.e. j=2491 in [2251;2500], as job id is i=10)"
[1] "seed 24388 for j=242 out of 250 (i.e. j=2492 in [2251;2500], as job id is i=10)"
[1] "seed 38534 for j=243 out of 250 (i.e. j=2493 in [2251;2500], as job id is i=10)"
[1] "seed 55574 for j=244 out of 250 (i.e. j=2494 in [2251;2500], as job id is i=10)"
[1] "seed 59970 for j=245 out of 250 (i.e. j=2495 in [2251;2500], as job id is i=10)"
[1] "seed 22483 for j=246 out of 250 (i.e. j=2496 in [2251;2500], as job id is i=10)"
[1] "seed 46515 for j=247 out of 250 (i.e. j=2497 in [2251;2500], as job id is i=10)"
[1] "seed 36321 for j=248 out of 250 (i.e. j=2498 in [2251;2500], as job id is i=10)"
[1] "seed 99667 for j=249 out of 250 (i.e. j=2499 in [2251;2500], as job id is i=10)"
[1] "seed 74793 for j=250 out of 250 (i.e. j=2500 in [2251;2500], as job id is i=10)"
There were 14 warnings (use warnings() to see them)
> rownames(RES) <- NULL
> save(RES,file=paste0(path.res,name,"-",iter_sim,".rda"))
> 
> ## * Summary results
> sessionInfo()
R version 4.1.2 (2021-11-01)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Red Hat Enterprise Linux 8.5 (Ootpa)

Matrix products: default
BLAS:   /opt/software/R/4.1.2/lib64/R/lib/libRblas.so
LAPACK: /opt/software/R/4.1.2/lib64/R/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] mvtnorm_1.1-3    DelayedGSD_0.0.3

loaded via a namespace (and not attached):
 [1] BB_2019.10-1     magrittr_2.0.3   tidyselect_1.1.2 munsell_0.5.0   
 [5] lattice_0.20-45  colorspace_2.0-3 xtable_1.8-4     R6_2.5.1        
 [9] quadprog_1.5-8   rlang_1.0.3      fansi_1.0.3      dplyr_1.0.9     
[13] grid_4.1.2       nlme_3.1-153     gtable_0.3.0     gsDesign_3.3.0  
[17] utf8_1.2.2       cli_3.3.0        ellipsis_0.3.2   tibble_3.1.7    
[21] lifecycle_1.0.1  crayon_1.5.1     purrr_0.3.4      ggplot2_3.3.6   
[25] tidyr_1.2.0      vctrs_0.4.1      glue_1.6.2       compiler_4.1.2  
[29] pillar_1.7.0     generics_0.1.3   scales_1.2.0     pkgconfig_2.0.3 
> summary(RES)
     method        stage           type             statistic     
 Min.   :1.0   Min.   :1.000   Length:1500        Min.   :0.0328  
 1st Qu.:1.0   1st Qu.:1.000   Class :character   1st Qu.:1.4878  
 Median :1.5   Median :1.000   Mode  :character   Median :2.2540  
 Mean   :1.5   Mean   :1.333                      Mean   :2.2021  
 3rd Qu.:2.0   3rd Qu.:2.000                      3rd Qu.:2.9364  
 Max.   :2.0   Max.   :2.000                      Max.   :5.1917  
                                                  NA's   :500     
  estimate_ML          se_ML             info           infoPC      
 Min.   :-0.3372   Min.   :0.3386   Min.   :4.499   Min.   :0.3515  
 1st Qu.: 0.5192   1st Qu.:0.3877   1st Qu.:5.669   1st Qu.:0.4430  
 Median : 0.7830   Median :0.4046   Median :6.145   Median :0.4802  
 Mean   : 0.7734   Mean   :0.4054   Mean   :6.231   Mean   :0.4869  
 3rd Qu.: 1.0466   3rd Qu.:0.4241   3rd Qu.:6.731   3rd Qu.:0.5260  
 Max.   : 1.9512   Max.   :0.4715   Max.   :9.770   Max.   :0.7634  
 NA's   :500       NA's   :1000     NA's   :154     NA's   :154     
   info.pred      infoPC.pred           uk              lk         
 Min.   :4.765   Min.   :0.3724   Min.   :2.270   Min.   :-0.2681  
 1st Qu.:5.922   1st Qu.:0.4627   1st Qu.:2.470   1st Qu.: 0.1091  
 Median :6.482   Median :0.5065   Median :2.531   Median : 0.2875  
 Mean   :6.538   Mean   :0.5109   Mean   :2.529   Mean   : 0.2945  
 3rd Qu.:7.032   3rd Qu.:0.5495   3rd Qu.:2.596   3rd Qu.: 0.4566  
 Max.   :9.581   Max.   :0.7486   Max.   :2.738   Max.   : 1.0404  
 NA's   :1000    NA's   :1000     NA's   :1000    NA's   :1000     
   decision            reason            p.value_ML        lower_ML      
 Length:1500        Length:1500        Min.   :0.0000   Min.   :-0.9331  
 Class :character   Class :character   1st Qu.:0.0014   1st Qu.:-0.0882  
 Mode  :character   Mode  :character   Median :0.0089   Median : 0.1278  
                                       Mean   :0.0744   Mean   : 0.0933  
                                       3rd Qu.:0.0523   3rd Qu.: 0.3011  
                                       Max.   :0.9706   Max.   : 1.1044  
                                       NA's   :1000     NA's   :1000     
    upper_ML       p.value_MUE       lower_MUE         upper_MUE     
 Min.   :0.5257   Min.   :0.0000   Min.   :-0.9431   Min.   :0.7449  
 1st Qu.:1.2118   1st Qu.:0.0043   1st Qu.:-0.0793   1st Qu.:1.2224  
 Median :1.4723   Median :0.0074   Median : 0.0725   Median :1.4566  
 Mean   :1.5212   Mean   :0.0502   Mean   : 0.0559   Mean   :1.5268  
 3rd Qu.:1.8140   3rd Qu.:0.0274   3rd Qu.: 0.1581   3rd Qu.:1.7972  
 Max.   :2.7980   Max.   :1.0000   Max.   : 2.1391   Max.   :3.4545  
 NA's   :1000     NA's   :1000     NA's   :1000      NA's   :1000    
  estimate_MUE           ck          time.interim        seed      
 Min.   :-0.0601   Min.   :0.2643   Min.   :524.0   Min.   :  239  
 1st Qu.: 0.5762   1st Qu.:1.3921   1st Qu.:582.0   1st Qu.:23376  
 Median : 0.7777   Median :1.4416   Median :601.0   Median :48648  
 Mean   : 0.7972   Mean   :1.4228   Mean   :601.7   Mean   :49595  
 3rd Qu.: 1.0168   3rd Qu.:1.5063   3rd Qu.:623.0   3rd Qu.:77902  
 Max.   : 2.7028   Max.   :1.7243   Max.   :696.0   Max.   :99836  
 NA's   :1000      NA's   :654                                     
  nX1.interim     nX2.interim     nX3.interim  computation.time
 Min.   :146.0   Min.   :131.0   Min.   :120   Min.   :0.7130  
 1st Qu.:148.0   1st Qu.:135.0   1st Qu.:125   1st Qu.:0.9200  
 Median :149.0   Median :137.0   Median :127   Median :0.9995  
 Mean   :148.6   Mean   :136.4   Mean   :127   Mean   :1.0326  
 3rd Qu.:150.0   3rd Qu.:138.0   3rd Qu.:129   3rd Qu.:1.1330  
 Max.   :154.0   Max.   :143.0   Max.   :134   Max.   :3.7600  
                                                               
> 
> #----------------------------------------------------------------------
> ### BATCH_simuMain.R ends here
> 
> proc.time()
   user  system elapsed 
261.099   0.392 272.048 
