
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### BATCH_simuMain.R --- 
> #----------------------------------------------------------------------
> ## Author: Paul Blanche
> ## Created: Mar  5 2021 (10:56) 
> ## Version: 
> ## Last-Updated: jul  7 2022 (13:56) 
> ##           By: Brice Ozenne
> ##     Update #: 518
> #----------------------------------------------------------------------
> ## 
> ### Commentary: 
> ## 
> ### Change Log:
> #----------------------------------------------------------------------
> ## 
> ### Code:
> 
> ## ** BATCH loop
> ## cd /projects/biostat01/people/hpl802/DelayedGSD/
> ## for ITER in `seq 1 10`;
> ## do
> ## eval 'R CMD BATCH --vanilla "--args iter_sim='$ITER' n.iter_sim=10" BATCH_simuMain.R output/R-simuMain-'$ITER'.Rout &'
> ## done
> 
> ## [1] 1186669
> ## [2] 1186670
> ## [3] 1186671
> ## [4] 1186672
> ## [5] 1186673
> ## [6] 1186674
> ## [7] 1186675
> ## [8] 1186676
> ## [9] 1186677
> ## [10] 1186678
> 
> rm(list=ls())
>                                    # {{{ parameters
> ## * parameters
> name <- "ScenarioName" # To save the results
> method <- 1:2 # methods used to compute the boundaries
>                                         #---
> myseed <- 140786598
>                                         #--- to plan the trial ----
> NMC <- 250 # number of sequential simulations to run in parallel. Eg. with 250, then we can run 40 scripts in paralell to get N=10,000 runs in total.
> kMax <- 2  #max number of analyses (including final)
> alpha <- 0.025  #type I error (one sided)
> beta <- 0.2  #type II error
> informationRates <- c(0.5,1)  #planned  information rates
> rho_alpha <- 2  # rho parameter for alpha error spending function
> rho_beta <- 2  # rho parameter for beta error spending function
> ## deltaPower <- 0.75 # just to try another value when Id > Imax
> Id <- 0.55  #(expected) information rate at each decision analysis
> binding <- TRUE
>                                         #
>                                         #---- to generate data -----------
>                                         #
> block <- c(1,1,0,0) 
> allsd <- c(2.5,2.1,2.4) # sd, first from baseline measurement, then the two changes from baseline
> mean0 <- c(10,0,0) # mean placebo group (again, first is absolute value, then change from baseline)
> delta <- c(0,0.6,0.8) # treatment effect
> ar <- (0.86*2)*2 # orginial accrual rate from data from Corine is 0.86 per week, hence we multiply by 2 for by 14 days. As to low, we further multiply by 2
> cor011 <- -0.15 # ~ from data from Corine
> corij1 <- 0.68  # ~ from data from Corine
> cor0j1 <- -0.27  # ~ from data from Corine
> Miss11 <- 5/104 # miss both V1 and V2
> Miss12 <- 1/104 # miss V1 and but not V2
> Miss21 <- 6/104 # do not miss V1 and but miss V2
> Miss22 <- 92/104 # miss none
> PropForInterim <- 0.5 # Decide to have interim analysiz when PropForInterim % of all subjects have had the chance to have one follow-up measuement recorded in the data to be available for analysis.
> theDelta.t <- 1.50001 # time lag to process the data and make them ready to analyze after collecting them (unit is time between two follow-up visits)
> TimeFactor <- 14 ## number of days between two visits
>                                         #
>                                         #--- actually for both planing the trial  and generating data-----
>                                         #
>                                         #
> deltaPower <- abs(delta[3]) # effect (NOT Z-scale/unit, but outcome scale/unit!) that the study is powered for: should we choose ourselves or compute from other numbers above ???
> n <- ceiling(2*2*((allsd[3]/deltaPower)^2)*(qnorm(1-beta)-qnorm(alpha))^2) #104 with Corine's data # should we choose ourselves or compute from the above numbers ???
>                                         # inflate SS as required for interim
> 
>                                         # {{{ Set seeds for parallel computing and reproducibility
> ## * Seed
> args <- commandArgs(TRUE) ## BATCH MODE
> if(length(args)>0){
+     for (arg in args){
+         eval(parse(text=arg))
+     }
+ }else{ ## SLUMR
+     iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_ID"))
+     n.iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_COUNT"))
+ } ## interactive
> if(is.na(iter_sim)){iter_sim <- 1}
> if(is.na(n.iter_sim)){n.iter_sim <- 40}
> 
> set.seed(140786598)
> allseeds <- sample.int(n = 10*n.iter_sim*NMC, size = n.iter_sim*NMC, replace=FALSE) #x=1:(.Machine$integer.max) seems to be maximal possible
> # }}}
> 
> # {{{ set path to load and save and othe machine specific variables
> ## * path
> path <- "."
> path.res <- file.path(path,"Results","simuMain")
> if(dir.exists(path.res)==FALSE){
+     if(dir.exists(file.path(path,"Results"))==FALSE){
+     dir.create(file.path(path,"Results"))
+     }
+     dir.create(path.res)
+ }
> path.output <- file.path(path,"output","simuMain")
> if(dir.exists(path.output)==FALSE){
+     if(dir.exists(file.path(path,"output"))==FALSE){
+     dir.create(file.path(path,"output"))
+     }
+     dir.create(path.output)
+ }
> # }}}
> 
> 
> ## * libraries and functions
> library(DelayedGSD)
DelayedGSD version 0.0.3
> ## sourceDir <- function(path, trace = TRUE, ...) {
> ##     for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
> ##         if(trace) cat(nm,":")
> ##         source(file.path(path, nm), ...)
> ##         if(trace) cat("\n")
> ##     }
> ## }
> ## sourceDir(pathToLoad)
>     
> 
> ## * Compute inflation factor and sample size
> plannedB <- vector(mode = "list", length = 3)
> for(iMeth in method){ ## iMeth <- 1
+     plannedB[[iMeth]] <- CalcBoundaries(kMax=kMax,  
+                                         alpha=alpha, 
+                                         beta=beta,  
+                                         InfoR.i=informationRates,  
+                                         InfoR.d=c(Id,1),  
+                                         rho_alpha=rho_alpha,  
+                                         rho_beta=rho_beta,  
+                                         method=iMeth,  
+                                         cNotBelowFixedc=FALSE,
+                                         bindingFutility=binding,
+                                         delta=tail(delta,1))
+     ## summary(plannedB[[1]])
+     ## coef(plannedB[[iMeth]], type = "information")
+ }
Loading required namespace: gsDesign
Loading required package: mvtnorm
Loading required namespace: BB
> inflationFactor <- unlist(lapply(plannedB,function(iP){iP$planned$InflationFactor}))
> nGSD <- ceiling(n*inflationFactor)
> ##  plot(plannedB[[1]])
> 
> #
> # --- just to check---
> ## n
> ## InfoFixed <- ((qnorm(1-beta)-qnorm(alpha))/(deltaPower))^2
> ## InfoFixed
> ## n/(4*(allsd[3])^2)
> #---
> # }}}
> 
> 
> 
> 
> # {{{ technical details to loop
> RES <- NULL # initialize results to save
> allj <- ((iter_sim-1)*NMC + 1):(iter_sim*NMC) # indices of all iterations (replicates) for this job, accountng for the other jobs running in parallel
> # }}}
> 
> ## * Loop
> for(j in allj){ ## j <- 51 ## 5
+     startComp <- Sys.time()
+     myseedi <- allseeds[j]
+     # {{{ TRACE info (e.g. to check the Rout)
+     print(paste0("seed ",myseedi," for ","j=",which(j==allj)," out of ",NMC, " (i.e. j=",j," in [",(iter_sim-1)*NMC + 1,";",iter_sim*NMC,"], as job id is i=",iter_sim,")"))
+     # }}}
+     # {{{ Missing probabilities
+     MyMissProb <- matrix(c(Miss11,Miss12,Miss21,Miss22),ncol=2,nrow=2,byrow=TRUE) # to additionnally remove 1 more because some FASFL=N
+     colnames(MyMissProb) <- c("V2 missing","V2 not missing")
+     rownames(MyMissProb) <- c("V1 missing","V1 not missing")
+     # }}}
+ 
+                                         # {{{ generate data
+     ## ** simulate
+     res <- GenData(n=n, 
+                    N.fw=2,
+                    rand.block=block,
+                    allsd=allsd,
+                    mean0=mean0,
+                    delta=delta,
+                    ar=ar,
+                    cor.01.1=cor011,
+                    cor.ij.1=corij1,
+                    cor.0j.1=cor0j1,
+                    seed=myseedi,
+                    MissProb=MyMissProb,
+                    DigitsOutcome=2,
+                    TimeFactor=TimeFactor,
+                    DigitsTime=0
+                    )
+     d <- res$d
+     ## head(d,n=20)
+                                         # }}}
+                                         # {{{ reformat data like those of Corine
+     ## Make data long format
+     ## dd <- FormatAsCase(d)
+     ## head(dd)
+     ## summary(dd)
+                                         # }}}
+    
+                                         # {{{ make data available at interim
+                                         # Here we stop inclusion data collection for the interim analysis as soon as
+                                         # half of the participants have completed (or had the opportunity to complete) the follow-up 
+     thet <- d$t3[ceiling(n*PropForInterim)]
+     di <- SelectData(d,t=thet)
+     ## ddi <- FormatAsCase(di) # needed ????
+     ## head(d[d$id==52,])
+                                         # }}}
+     ## {{{ analyze data at at interim
+     ## ** interim
+     lmmI <- analyzeData(di, ddf = "nlme", data.decision = sum(d$t1 <= thet + theDelta.t*TimeFactor), getinfo = TRUE, trace = TRUE)
+     ## lmmI <- analyzeData(di, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     currentGSD <- vector(mode = "list", length = 3)
+     out.interim <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+ 
+         currentGSD[[iMeth]] <- update(plannedB[[iMeth]], delta = lmmI, trace = FALSE)
+ 
+         iConfint.interim <- confint(currentGSD[[iMeth]])
+         iInfo.interim <- coef(currentGSD[[iMeth]], type = "information")
+         iBoundary.interim <- coef(currentGSD[[iMeth]], type = "boundary")
+         iDecision.interim <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+         out.interim[[iMeth]] <-  data.frame(statistic = iConfint.interim[1,"statistic"],
+                                             estimate_ML = iConfint.interim[1,"estimate"],
+                                             se_ML = iConfint.interim[1,"se"],
+                                             info = iInfo.interim[1,"Interim"],
+                                             infoPC = iInfo.interim[1,"Interim.pc"],
+                                             info.pred = iInfo.interim[1,"Decision"],
+                                             infoPC.pred = iInfo.interim[1,"Decision.pc"],
+                                             uk = iBoundary.interim[1,"Ebound"],
+                                             lk = iBoundary.interim[1,"Fbound"],
+                                             decision = iDecision.interim["decision","stage 1"],
+                                             reason = iDecision.interim["reason.interim","stage 1"])
+     }
+     ## currentGSD[[1]]
+     ## plot(currentGSD[[1]])
+ 
+     ## ** decision
+     dDecision <- d[which(d$t1 <= thet + theDelta.t*TimeFactor),]
+     lmmD <- analyzeData(dDecision, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+     
+     out.decision <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+           
+         if(out.interim[[iMeth]]$decision == "stop"){
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, trace = FALSE)
+             ## plot(currentGSD[[iMeth]])
+ 
+             iConfint.decision <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.decision  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = iConfint.decision[1,"statistic"],
+                                                 p.value_ML = iConfint.decision[iConfint.decision$method == "ML","p.value"],
+                                                 lower_ML = iConfint.decision[iConfint.decision$method == "ML","lower"],
+                                                 upper_ML = iConfint.decision[iConfint.decision$method == "ML","upper"],
+                                                 estimate_ML = iConfint.decision[iConfint.decision$method == "ML","estimate"],
+                                                 p.value_MUE = iConfint.decision[iConfint.decision$method == "MUE","p.value"],
+                                                 lower_MUE = iConfint.decision[iConfint.decision$method == "MUE","lower"],
+                                                 upper_MUE = iConfint.decision[iConfint.decision$method == "MUE","upper"],
+                                                 estimate_MUE = iConfint.decision[iConfint.decision$method == "MUE","estimate"],
+                                                 info = iInfo.decision[1,"Interim"],
+                                                 infoPC = iInfo.decision[1,"Interim.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = unname(iDecision.decision["decision","stage 2"])
+                                                 )
+ 
+         }else{
+             ## update information
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, k = 1, type.k = "decision", trace = FALSE)
+ 
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = NA,
+                                                 p.value_ML = NA,
+                                                 lower_ML = NA,
+                                                 upper_ML = NA,
+                                                 estimate_ML = NA,
+                                                 p.value_MUE = NA,
+                                                 lower_MUE = NA,
+                                                 upper_MUE = NA,
+                                                 estimate_MUE = NA,
+                                                 info = iInfo.decision[1,"Decision"],
+                                                 infoPC = iInfo.decision[1,"Decision.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = NA)
+         }
+     }
+                                         # }}}
+                                         # {{{ Analyze data at decision
+ 
+     ## ** finale
+     dFinal <- d
+     lmmF <- analyzeData(dFinal, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     out.final <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+         if(out.interim[[iMeth]]$decision == "stop"){
+             out.final[[iMeth]] <- data.frame(statistic = NA,
+                                              p.value_ML = NA,
+                                              lower_ML = NA,
+                                              upper_ML = NA,
+                                              estimate_ML = NA,
+                                              p.value_MUE = NA,
+                                              lower_MUE = NA,
+                                              upper_MUE = NA,
+                                              estimate_MUE = NA,
+                                              info = NA,
+                                              infoPC = NA,
+                                              ck = NA,
+                                              decision = NA)
+ 
+         }else{
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmF, trace = FALSE)
+ 
+             ## plot(test)
+             ## summary(test)
+             iConfint.final <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.final <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.final <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.final  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.final[[iMeth]] <- data.frame(statistic = iConfint.final[1,"statistic"],
+                                              p.value_ML = iConfint.final[iConfint.final$method == "ML","p.value"],
+                                              lower_ML = iConfint.final[iConfint.final$method == "ML","lower"],
+                                              upper_ML = iConfint.final[iConfint.final$method == "ML","upper"],
+                                              estimate_ML = iConfint.final[iConfint.final$method == "ML","estimate"],
+                                              p.value_MUE = iConfint.final[iConfint.final$method == "MUE","p.value"],
+                                              lower_MUE = iConfint.final[iConfint.final$method == "MUE","lower"],
+                                              upper_MUE = iConfint.final[iConfint.final$method == "MUE","upper"],
+                                              estimate_MUE = iConfint.final[iConfint.final$method == "MUE","estimate"],
+                                              info = iInfo.final[1,"Interim"],
+                                              infoPC = iInfo.final[1,"Interim.pc"],
+                                              ck = iBoundary.final[1,"Cbound"],
+                                              decision = unname(coef(currentGSD[[iMeth]], type = "decision")["decision","stage 2"])
+                                              )
+         }
+     }
+                                         # }}}
+ 
+     stopComp <- Sys.time()
+                                         # {{{ Save results
+ 
+     outMerge <- do.call(rbind,lapply(method, function(iMeth){
+         iNames <- unique(c(names(out.interim[[iMeth]]),names(out.decision[[iMeth]]),names(out.final[[iMeth]])))
+         iMerge <- data.frame(matrix(NA, ncol = length(iNames)+3, nrow = 3, dimnames = list(NULL, c("method", "stage", "type", iNames))))
+         iMerge[1,c("method","stage","type",names(out.interim[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "interim", out.interim[[iMeth]]) 
+         iMerge[2,c("method","stage","type",names(out.decision[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "decision", out.decision[[iMeth]]) 
+         iMerge[3,c("method","stage","type",names(out.final[[iMeth]]))] <- data.frame(method = iMeth, stage = 2, type = "final", out.final[[iMeth]])
+         return(iMerge)
+     }))
+ 
+     ## outMerge[outMerge$method==3,]
+ 
+     out <- cbind(
+         ## results
+         outMerge,
+         ## simulation details
+         time.interim = thet,
+         seed=myseedi,             
+         nX1.interim = sum(!is.na(di$X1)),
+         nX2.interim = sum(!is.na(di$X2)),
+         nX3.interim = sum(!is.na(di$X3)),
+         ## computation time
+         computation.time=as.double(round(difftime(stopComp,startComp,units="secs"),3))
+     )
+     ## names(out) <- myColNames
+     RES <- rbind(RES,out)
+     save(RES,file=paste0(path.res,name,"(tempo)-",iter_sim,".rda"))
+                                         # }}}
+ }
[1] "seed 31322 for j=1 out of 250 (i.e. j=9251 in [9251;9500], as job id is i=38)"
Loading required namespace: nlme
[1] "seed 25822 for j=2 out of 250 (i.e. j=9252 in [9251;9500], as job id is i=38)"
[1] "seed 14286 for j=3 out of 250 (i.e. j=9253 in [9251;9500], as job id is i=38)"
[1] "seed 14291 for j=4 out of 250 (i.e. j=9254 in [9251;9500], as job id is i=38)"
[1] "seed 9150 for j=5 out of 250 (i.e. j=9255 in [9251;9500], as job id is i=38)"
[1] "seed 97296 for j=6 out of 250 (i.e. j=9256 in [9251;9500], as job id is i=38)"
[1] "seed 5412 for j=7 out of 250 (i.e. j=9257 in [9251;9500], as job id is i=38)"
[1] "seed 55656 for j=8 out of 250 (i.e. j=9258 in [9251;9500], as job id is i=38)"
[1] "seed 42259 for j=9 out of 250 (i.e. j=9259 in [9251;9500], as job id is i=38)"
[1] "seed 5004 for j=10 out of 250 (i.e. j=9260 in [9251;9500], as job id is i=38)"
[1] "seed 33809 for j=11 out of 250 (i.e. j=9261 in [9251;9500], as job id is i=38)"
[1] "seed 92705 for j=12 out of 250 (i.e. j=9262 in [9251;9500], as job id is i=38)"
[1] "seed 28970 for j=13 out of 250 (i.e. j=9263 in [9251;9500], as job id is i=38)"
[1] "seed 90267 for j=14 out of 250 (i.e. j=9264 in [9251;9500], as job id is i=38)"
[1] "seed 61915 for j=15 out of 250 (i.e. j=9265 in [9251;9500], as job id is i=38)"
[1] "seed 84855 for j=16 out of 250 (i.e. j=9266 in [9251;9500], as job id is i=38)"
[1] "seed 30942 for j=17 out of 250 (i.e. j=9267 in [9251;9500], as job id is i=38)"
[1] "seed 65050 for j=18 out of 250 (i.e. j=9268 in [9251;9500], as job id is i=38)"
[1] "seed 25035 for j=19 out of 250 (i.e. j=9269 in [9251;9500], as job id is i=38)"
[1] "seed 78 for j=20 out of 250 (i.e. j=9270 in [9251;9500], as job id is i=38)"
[1] "seed 79853 for j=21 out of 250 (i.e. j=9271 in [9251;9500], as job id is i=38)"
[1] "seed 52215 for j=22 out of 250 (i.e. j=9272 in [9251;9500], as job id is i=38)"
[1] "seed 20141 for j=23 out of 250 (i.e. j=9273 in [9251;9500], as job id is i=38)"
[1] "seed 97621 for j=24 out of 250 (i.e. j=9274 in [9251;9500], as job id is i=38)"
[1] "seed 13022 for j=25 out of 250 (i.e. j=9275 in [9251;9500], as job id is i=38)"
[1] "seed 95827 for j=26 out of 250 (i.e. j=9276 in [9251;9500], as job id is i=38)"
[1] "seed 86458 for j=27 out of 250 (i.e. j=9277 in [9251;9500], as job id is i=38)"
[1] "seed 72450 for j=28 out of 250 (i.e. j=9278 in [9251;9500], as job id is i=38)"
[1] "seed 32886 for j=29 out of 250 (i.e. j=9279 in [9251;9500], as job id is i=38)"
[1] "seed 3205 for j=30 out of 250 (i.e. j=9280 in [9251;9500], as job id is i=38)"
[1] "seed 78340 for j=31 out of 250 (i.e. j=9281 in [9251;9500], as job id is i=38)"
[1] "seed 85069 for j=32 out of 250 (i.e. j=9282 in [9251;9500], as job id is i=38)"
[1] "seed 42629 for j=33 out of 250 (i.e. j=9283 in [9251;9500], as job id is i=38)"
[1] "seed 42947 for j=34 out of 250 (i.e. j=9284 in [9251;9500], as job id is i=38)"
[1] "seed 64210 for j=35 out of 250 (i.e. j=9285 in [9251;9500], as job id is i=38)"
[1] "seed 81132 for j=36 out of 250 (i.e. j=9286 in [9251;9500], as job id is i=38)"
[1] "seed 6876 for j=37 out of 250 (i.e. j=9287 in [9251;9500], as job id is i=38)"
[1] "seed 34219 for j=38 out of 250 (i.e. j=9288 in [9251;9500], as job id is i=38)"
[1] "seed 37968 for j=39 out of 250 (i.e. j=9289 in [9251;9500], as job id is i=38)"
[1] "seed 75900 for j=40 out of 250 (i.e. j=9290 in [9251;9500], as job id is i=38)"
[1] "seed 81521 for j=41 out of 250 (i.e. j=9291 in [9251;9500], as job id is i=38)"
[1] "seed 32825 for j=42 out of 250 (i.e. j=9292 in [9251;9500], as job id is i=38)"
[1] "seed 90891 for j=43 out of 250 (i.e. j=9293 in [9251;9500], as job id is i=38)"
[1] "seed 25870 for j=44 out of 250 (i.e. j=9294 in [9251;9500], as job id is i=38)"
[1] "seed 61128 for j=45 out of 250 (i.e. j=9295 in [9251;9500], as job id is i=38)"
[1] "seed 19561 for j=46 out of 250 (i.e. j=9296 in [9251;9500], as job id is i=38)"
[1] "seed 76413 for j=47 out of 250 (i.e. j=9297 in [9251;9500], as job id is i=38)"
[1] "seed 71382 for j=48 out of 250 (i.e. j=9298 in [9251;9500], as job id is i=38)"
[1] "seed 14567 for j=49 out of 250 (i.e. j=9299 in [9251;9500], as job id is i=38)"
[1] "seed 4857 for j=50 out of 250 (i.e. j=9300 in [9251;9500], as job id is i=38)"
[1] "seed 38117 for j=51 out of 250 (i.e. j=9301 in [9251;9500], as job id is i=38)"
[1] "seed 83817 for j=52 out of 250 (i.e. j=9302 in [9251;9500], as job id is i=38)"
[1] "seed 71085 for j=53 out of 250 (i.e. j=9303 in [9251;9500], as job id is i=38)"
[1] "seed 41641 for j=54 out of 250 (i.e. j=9304 in [9251;9500], as job id is i=38)"
[1] "seed 17535 for j=55 out of 250 (i.e. j=9305 in [9251;9500], as job id is i=38)"
[1] "seed 85821 for j=56 out of 250 (i.e. j=9306 in [9251;9500], as job id is i=38)"
[1] "seed 85383 for j=57 out of 250 (i.e. j=9307 in [9251;9500], as job id is i=38)"
[1] "seed 14511 for j=58 out of 250 (i.e. j=9308 in [9251;9500], as job id is i=38)"
[1] "seed 86888 for j=59 out of 250 (i.e. j=9309 in [9251;9500], as job id is i=38)"
[1] "seed 2106 for j=60 out of 250 (i.e. j=9310 in [9251;9500], as job id is i=38)"
[1] "seed 94832 for j=61 out of 250 (i.e. j=9311 in [9251;9500], as job id is i=38)"
[1] "seed 60288 for j=62 out of 250 (i.e. j=9312 in [9251;9500], as job id is i=38)"
[1] "seed 13095 for j=63 out of 250 (i.e. j=9313 in [9251;9500], as job id is i=38)"
[1] "seed 96813 for j=64 out of 250 (i.e. j=9314 in [9251;9500], as job id is i=38)"
[1] "seed 87487 for j=65 out of 250 (i.e. j=9315 in [9251;9500], as job id is i=38)"
[1] "seed 49009 for j=66 out of 250 (i.e. j=9316 in [9251;9500], as job id is i=38)"
[1] "seed 30656 for j=67 out of 250 (i.e. j=9317 in [9251;9500], as job id is i=38)"
[1] "seed 49018 for j=68 out of 250 (i.e. j=9318 in [9251;9500], as job id is i=38)"
[1] "seed 44839 for j=69 out of 250 (i.e. j=9319 in [9251;9500], as job id is i=38)"
[1] "seed 63711 for j=70 out of 250 (i.e. j=9320 in [9251;9500], as job id is i=38)"
[1] "seed 79787 for j=71 out of 250 (i.e. j=9321 in [9251;9500], as job id is i=38)"
[1] "seed 85649 for j=72 out of 250 (i.e. j=9322 in [9251;9500], as job id is i=38)"
[1] "seed 15231 for j=73 out of 250 (i.e. j=9323 in [9251;9500], as job id is i=38)"
[1] "seed 86119 for j=74 out of 250 (i.e. j=9324 in [9251;9500], as job id is i=38)"
[1] "seed 50830 for j=75 out of 250 (i.e. j=9325 in [9251;9500], as job id is i=38)"
[1] "seed 22588 for j=76 out of 250 (i.e. j=9326 in [9251;9500], as job id is i=38)"
[1] "seed 15589 for j=77 out of 250 (i.e. j=9327 in [9251;9500], as job id is i=38)"
[1] "seed 58410 for j=78 out of 250 (i.e. j=9328 in [9251;9500], as job id is i=38)"
[1] "seed 83856 for j=79 out of 250 (i.e. j=9329 in [9251;9500], as job id is i=38)"
[1] "seed 57742 for j=80 out of 250 (i.e. j=9330 in [9251;9500], as job id is i=38)"
[1] "seed 11477 for j=81 out of 250 (i.e. j=9331 in [9251;9500], as job id is i=38)"
[1] "seed 17479 for j=82 out of 250 (i.e. j=9332 in [9251;9500], as job id is i=38)"
[1] "seed 62447 for j=83 out of 250 (i.e. j=9333 in [9251;9500], as job id is i=38)"
[1] "seed 90898 for j=84 out of 250 (i.e. j=9334 in [9251;9500], as job id is i=38)"
[1] "seed 50680 for j=85 out of 250 (i.e. j=9335 in [9251;9500], as job id is i=38)"
[1] "seed 55596 for j=86 out of 250 (i.e. j=9336 in [9251;9500], as job id is i=38)"
[1] "seed 10387 for j=87 out of 250 (i.e. j=9337 in [9251;9500], as job id is i=38)"
[1] "seed 45908 for j=88 out of 250 (i.e. j=9338 in [9251;9500], as job id is i=38)"
[1] "seed 55338 for j=89 out of 250 (i.e. j=9339 in [9251;9500], as job id is i=38)"
[1] "seed 58878 for j=90 out of 250 (i.e. j=9340 in [9251;9500], as job id is i=38)"
[1] "seed 43461 for j=91 out of 250 (i.e. j=9341 in [9251;9500], as job id is i=38)"
[1] "seed 84186 for j=92 out of 250 (i.e. j=9342 in [9251;9500], as job id is i=38)"
[1] "seed 91938 for j=93 out of 250 (i.e. j=9343 in [9251;9500], as job id is i=38)"
[1] "seed 73924 for j=94 out of 250 (i.e. j=9344 in [9251;9500], as job id is i=38)"
[1] "seed 63508 for j=95 out of 250 (i.e. j=9345 in [9251;9500], as job id is i=38)"
[1] "seed 43685 for j=96 out of 250 (i.e. j=9346 in [9251;9500], as job id is i=38)"
[1] "seed 49385 for j=97 out of 250 (i.e. j=9347 in [9251;9500], as job id is i=38)"
[1] "seed 57285 for j=98 out of 250 (i.e. j=9348 in [9251;9500], as job id is i=38)"
[1] "seed 70615 for j=99 out of 250 (i.e. j=9349 in [9251;9500], as job id is i=38)"
[1] "seed 29759 for j=100 out of 250 (i.e. j=9350 in [9251;9500], as job id is i=38)"
[1] "seed 68906 for j=101 out of 250 (i.e. j=9351 in [9251;9500], as job id is i=38)"
[1] "seed 97887 for j=102 out of 250 (i.e. j=9352 in [9251;9500], as job id is i=38)"
[1] "seed 42269 for j=103 out of 250 (i.e. j=9353 in [9251;9500], as job id is i=38)"
[1] "seed 14058 for j=104 out of 250 (i.e. j=9354 in [9251;9500], as job id is i=38)"
[1] "seed 84698 for j=105 out of 250 (i.e. j=9355 in [9251;9500], as job id is i=38)"
[1] "seed 11457 for j=106 out of 250 (i.e. j=9356 in [9251;9500], as job id is i=38)"
[1] "seed 21855 for j=107 out of 250 (i.e. j=9357 in [9251;9500], as job id is i=38)"
[1] "seed 12272 for j=108 out of 250 (i.e. j=9358 in [9251;9500], as job id is i=38)"
[1] "seed 15576 for j=109 out of 250 (i.e. j=9359 in [9251;9500], as job id is i=38)"
[1] "seed 3599 for j=110 out of 250 (i.e. j=9360 in [9251;9500], as job id is i=38)"
[1] "seed 95285 for j=111 out of 250 (i.e. j=9361 in [9251;9500], as job id is i=38)"
[1] "seed 39659 for j=112 out of 250 (i.e. j=9362 in [9251;9500], as job id is i=38)"
[1] "seed 71767 for j=113 out of 250 (i.e. j=9363 in [9251;9500], as job id is i=38)"
[1] "seed 15323 for j=114 out of 250 (i.e. j=9364 in [9251;9500], as job id is i=38)"
[1] "seed 62143 for j=115 out of 250 (i.e. j=9365 in [9251;9500], as job id is i=38)"
[1] "seed 86522 for j=116 out of 250 (i.e. j=9366 in [9251;9500], as job id is i=38)"
[1] "seed 60771 for j=117 out of 250 (i.e. j=9367 in [9251;9500], as job id is i=38)"
[1] "seed 99258 for j=118 out of 250 (i.e. j=9368 in [9251;9500], as job id is i=38)"
[1] "seed 27382 for j=119 out of 250 (i.e. j=9369 in [9251;9500], as job id is i=38)"
[1] "seed 91429 for j=120 out of 250 (i.e. j=9370 in [9251;9500], as job id is i=38)"
[1] "seed 90794 for j=121 out of 250 (i.e. j=9371 in [9251;9500], as job id is i=38)"
[1] "seed 69823 for j=122 out of 250 (i.e. j=9372 in [9251;9500], as job id is i=38)"
[1] "seed 6263 for j=123 out of 250 (i.e. j=9373 in [9251;9500], as job id is i=38)"
[1] "seed 76859 for j=124 out of 250 (i.e. j=9374 in [9251;9500], as job id is i=38)"
[1] "seed 64160 for j=125 out of 250 (i.e. j=9375 in [9251;9500], as job id is i=38)"
[1] "seed 93805 for j=126 out of 250 (i.e. j=9376 in [9251;9500], as job id is i=38)"
[1] "seed 69417 for j=127 out of 250 (i.e. j=9377 in [9251;9500], as job id is i=38)"
[1] "seed 1647 for j=128 out of 250 (i.e. j=9378 in [9251;9500], as job id is i=38)"
[1] "seed 83025 for j=129 out of 250 (i.e. j=9379 in [9251;9500], as job id is i=38)"
[1] "seed 6153 for j=130 out of 250 (i.e. j=9380 in [9251;9500], as job id is i=38)"
[1] "seed 85576 for j=131 out of 250 (i.e. j=9381 in [9251;9500], as job id is i=38)"
[1] "seed 42479 for j=132 out of 250 (i.e. j=9382 in [9251;9500], as job id is i=38)"
[1] "seed 82766 for j=133 out of 250 (i.e. j=9383 in [9251;9500], as job id is i=38)"
[1] "seed 59742 for j=134 out of 250 (i.e. j=9384 in [9251;9500], as job id is i=38)"
[1] "seed 37915 for j=135 out of 250 (i.e. j=9385 in [9251;9500], as job id is i=38)"
[1] "seed 26870 for j=136 out of 250 (i.e. j=9386 in [9251;9500], as job id is i=38)"
[1] "seed 26488 for j=137 out of 250 (i.e. j=9387 in [9251;9500], as job id is i=38)"
[1] "seed 58310 for j=138 out of 250 (i.e. j=9388 in [9251;9500], as job id is i=38)"
[1] "seed 4295 for j=139 out of 250 (i.e. j=9389 in [9251;9500], as job id is i=38)"
[1] "seed 69345 for j=140 out of 250 (i.e. j=9390 in [9251;9500], as job id is i=38)"
[1] "seed 84164 for j=141 out of 250 (i.e. j=9391 in [9251;9500], as job id is i=38)"
[1] "seed 10027 for j=142 out of 250 (i.e. j=9392 in [9251;9500], as job id is i=38)"
[1] "seed 59529 for j=143 out of 250 (i.e. j=9393 in [9251;9500], as job id is i=38)"
[1] "seed 49711 for j=144 out of 250 (i.e. j=9394 in [9251;9500], as job id is i=38)"
[1] "seed 17705 for j=145 out of 250 (i.e. j=9395 in [9251;9500], as job id is i=38)"
[1] "seed 87257 for j=146 out of 250 (i.e. j=9396 in [9251;9500], as job id is i=38)"
[1] "seed 4236 for j=147 out of 250 (i.e. j=9397 in [9251;9500], as job id is i=38)"
[1] "seed 39837 for j=148 out of 250 (i.e. j=9398 in [9251;9500], as job id is i=38)"
[1] "seed 19977 for j=149 out of 250 (i.e. j=9399 in [9251;9500], as job id is i=38)"
[1] "seed 80697 for j=150 out of 250 (i.e. j=9400 in [9251;9500], as job id is i=38)"
[1] "seed 15300 for j=151 out of 250 (i.e. j=9401 in [9251;9500], as job id is i=38)"
[1] "seed 36018 for j=152 out of 250 (i.e. j=9402 in [9251;9500], as job id is i=38)"
[1] "seed 3657 for j=153 out of 250 (i.e. j=9403 in [9251;9500], as job id is i=38)"
[1] "seed 7103 for j=154 out of 250 (i.e. j=9404 in [9251;9500], as job id is i=38)"
[1] "seed 46494 for j=155 out of 250 (i.e. j=9405 in [9251;9500], as job id is i=38)"
[1] "seed 4760 for j=156 out of 250 (i.e. j=9406 in [9251;9500], as job id is i=38)"
[1] "seed 3437 for j=157 out of 250 (i.e. j=9407 in [9251;9500], as job id is i=38)"
[1] "seed 61815 for j=158 out of 250 (i.e. j=9408 in [9251;9500], as job id is i=38)"
[1] "seed 58162 for j=159 out of 250 (i.e. j=9409 in [9251;9500], as job id is i=38)"
[1] "seed 69220 for j=160 out of 250 (i.e. j=9410 in [9251;9500], as job id is i=38)"
[1] "seed 26220 for j=161 out of 250 (i.e. j=9411 in [9251;9500], as job id is i=38)"
[1] "seed 89862 for j=162 out of 250 (i.e. j=9412 in [9251;9500], as job id is i=38)"
[1] "seed 23496 for j=163 out of 250 (i.e. j=9413 in [9251;9500], as job id is i=38)"
[1] "seed 330 for j=164 out of 250 (i.e. j=9414 in [9251;9500], as job id is i=38)"
[1] "seed 75063 for j=165 out of 250 (i.e. j=9415 in [9251;9500], as job id is i=38)"
[1] "seed 73992 for j=166 out of 250 (i.e. j=9416 in [9251;9500], as job id is i=38)"
[1] "seed 27292 for j=167 out of 250 (i.e. j=9417 in [9251;9500], as job id is i=38)"
[1] "seed 63358 for j=168 out of 250 (i.e. j=9418 in [9251;9500], as job id is i=38)"
[1] "seed 67839 for j=169 out of 250 (i.e. j=9419 in [9251;9500], as job id is i=38)"
[1] "seed 70786 for j=170 out of 250 (i.e. j=9420 in [9251;9500], as job id is i=38)"
[1] "seed 44809 for j=171 out of 250 (i.e. j=9421 in [9251;9500], as job id is i=38)"
[1] "seed 33190 for j=172 out of 250 (i.e. j=9422 in [9251;9500], as job id is i=38)"
[1] "seed 34813 for j=173 out of 250 (i.e. j=9423 in [9251;9500], as job id is i=38)"
[1] "seed 77952 for j=174 out of 250 (i.e. j=9424 in [9251;9500], as job id is i=38)"
[1] "seed 21705 for j=175 out of 250 (i.e. j=9425 in [9251;9500], as job id is i=38)"
[1] "seed 48568 for j=176 out of 250 (i.e. j=9426 in [9251;9500], as job id is i=38)"
[1] "seed 4457 for j=177 out of 250 (i.e. j=9427 in [9251;9500], as job id is i=38)"
[1] "seed 15540 for j=178 out of 250 (i.e. j=9428 in [9251;9500], as job id is i=38)"
[1] "seed 29651 for j=179 out of 250 (i.e. j=9429 in [9251;9500], as job id is i=38)"
[1] "seed 79636 for j=180 out of 250 (i.e. j=9430 in [9251;9500], as job id is i=38)"
[1] "seed 61393 for j=181 out of 250 (i.e. j=9431 in [9251;9500], as job id is i=38)"
[1] "seed 40342 for j=182 out of 250 (i.e. j=9432 in [9251;9500], as job id is i=38)"
[1] "seed 65181 for j=183 out of 250 (i.e. j=9433 in [9251;9500], as job id is i=38)"
[1] "seed 2081 for j=184 out of 250 (i.e. j=9434 in [9251;9500], as job id is i=38)"
[1] "seed 17233 for j=185 out of 250 (i.e. j=9435 in [9251;9500], as job id is i=38)"
[1] "seed 35484 for j=186 out of 250 (i.e. j=9436 in [9251;9500], as job id is i=38)"
[1] "seed 79138 for j=187 out of 250 (i.e. j=9437 in [9251;9500], as job id is i=38)"
[1] "seed 56533 for j=188 out of 250 (i.e. j=9438 in [9251;9500], as job id is i=38)"
[1] "seed 26515 for j=189 out of 250 (i.e. j=9439 in [9251;9500], as job id is i=38)"
[1] "seed 65368 for j=190 out of 250 (i.e. j=9440 in [9251;9500], as job id is i=38)"
[1] "seed 68859 for j=191 out of 250 (i.e. j=9441 in [9251;9500], as job id is i=38)"
[1] "seed 17670 for j=192 out of 250 (i.e. j=9442 in [9251;9500], as job id is i=38)"
[1] "seed 90855 for j=193 out of 250 (i.e. j=9443 in [9251;9500], as job id is i=38)"
[1] "seed 49003 for j=194 out of 250 (i.e. j=9444 in [9251;9500], as job id is i=38)"
[1] "seed 16654 for j=195 out of 250 (i.e. j=9445 in [9251;9500], as job id is i=38)"
[1] "seed 21812 for j=196 out of 250 (i.e. j=9446 in [9251;9500], as job id is i=38)"
[1] "seed 30344 for j=197 out of 250 (i.e. j=9447 in [9251;9500], as job id is i=38)"
[1] "seed 23185 for j=198 out of 250 (i.e. j=9448 in [9251;9500], as job id is i=38)"
[1] "seed 72184 for j=199 out of 250 (i.e. j=9449 in [9251;9500], as job id is i=38)"
[1] "seed 8791 for j=200 out of 250 (i.e. j=9450 in [9251;9500], as job id is i=38)"
[1] "seed 82178 for j=201 out of 250 (i.e. j=9451 in [9251;9500], as job id is i=38)"
[1] "seed 40521 for j=202 out of 250 (i.e. j=9452 in [9251;9500], as job id is i=38)"
[1] "seed 45242 for j=203 out of 250 (i.e. j=9453 in [9251;9500], as job id is i=38)"
[1] "seed 69115 for j=204 out of 250 (i.e. j=9454 in [9251;9500], as job id is i=38)"
[1] "seed 63004 for j=205 out of 250 (i.e. j=9455 in [9251;9500], as job id is i=38)"
[1] "seed 20655 for j=206 out of 250 (i.e. j=9456 in [9251;9500], as job id is i=38)"
[1] "seed 4655 for j=207 out of 250 (i.e. j=9457 in [9251;9500], as job id is i=38)"
[1] "seed 30566 for j=208 out of 250 (i.e. j=9458 in [9251;9500], as job id is i=38)"
[1] "seed 12978 for j=209 out of 250 (i.e. j=9459 in [9251;9500], as job id is i=38)"
[1] "seed 23015 for j=210 out of 250 (i.e. j=9460 in [9251;9500], as job id is i=38)"
[1] "seed 11169 for j=211 out of 250 (i.e. j=9461 in [9251;9500], as job id is i=38)"
[1] "seed 47440 for j=212 out of 250 (i.e. j=9462 in [9251;9500], as job id is i=38)"
[1] "seed 69882 for j=213 out of 250 (i.e. j=9463 in [9251;9500], as job id is i=38)"
[1] "seed 70339 for j=214 out of 250 (i.e. j=9464 in [9251;9500], as job id is i=38)"
[1] "seed 88268 for j=215 out of 250 (i.e. j=9465 in [9251;9500], as job id is i=38)"
[1] "seed 24776 for j=216 out of 250 (i.e. j=9466 in [9251;9500], as job id is i=38)"
[1] "seed 45245 for j=217 out of 250 (i.e. j=9467 in [9251;9500], as job id is i=38)"
[1] "seed 15723 for j=218 out of 250 (i.e. j=9468 in [9251;9500], as job id is i=38)"
[1] "seed 82513 for j=219 out of 250 (i.e. j=9469 in [9251;9500], as job id is i=38)"
[1] "seed 30041 for j=220 out of 250 (i.e. j=9470 in [9251;9500], as job id is i=38)"
[1] "seed 37770 for j=221 out of 250 (i.e. j=9471 in [9251;9500], as job id is i=38)"
[1] "seed 74653 for j=222 out of 250 (i.e. j=9472 in [9251;9500], as job id is i=38)"
[1] "seed 74663 for j=223 out of 250 (i.e. j=9473 in [9251;9500], as job id is i=38)"
[1] "seed 87555 for j=224 out of 250 (i.e. j=9474 in [9251;9500], as job id is i=38)"
[1] "seed 94326 for j=225 out of 250 (i.e. j=9475 in [9251;9500], as job id is i=38)"
[1] "seed 37906 for j=226 out of 250 (i.e. j=9476 in [9251;9500], as job id is i=38)"
[1] "seed 79345 for j=227 out of 250 (i.e. j=9477 in [9251;9500], as job id is i=38)"
[1] "seed 88828 for j=228 out of 250 (i.e. j=9478 in [9251;9500], as job id is i=38)"
[1] "seed 98319 for j=229 out of 250 (i.e. j=9479 in [9251;9500], as job id is i=38)"
[1] "seed 19503 for j=230 out of 250 (i.e. j=9480 in [9251;9500], as job id is i=38)"
[1] "seed 22097 for j=231 out of 250 (i.e. j=9481 in [9251;9500], as job id is i=38)"
[1] "seed 77020 for j=232 out of 250 (i.e. j=9482 in [9251;9500], as job id is i=38)"
[1] "seed 7457 for j=233 out of 250 (i.e. j=9483 in [9251;9500], as job id is i=38)"
[1] "seed 15317 for j=234 out of 250 (i.e. j=9484 in [9251;9500], as job id is i=38)"
[1] "seed 17543 for j=235 out of 250 (i.e. j=9485 in [9251;9500], as job id is i=38)"
[1] "seed 30972 for j=236 out of 250 (i.e. j=9486 in [9251;9500], as job id is i=38)"
[1] "seed 90212 for j=237 out of 250 (i.e. j=9487 in [9251;9500], as job id is i=38)"
[1] "seed 31659 for j=238 out of 250 (i.e. j=9488 in [9251;9500], as job id is i=38)"
[1] "seed 58820 for j=239 out of 250 (i.e. j=9489 in [9251;9500], as job id is i=38)"
[1] "seed 133 for j=240 out of 250 (i.e. j=9490 in [9251;9500], as job id is i=38)"
[1] "seed 56897 for j=241 out of 250 (i.e. j=9491 in [9251;9500], as job id is i=38)"
[1] "seed 30892 for j=242 out of 250 (i.e. j=9492 in [9251;9500], as job id is i=38)"
[1] "seed 59269 for j=243 out of 250 (i.e. j=9493 in [9251;9500], as job id is i=38)"
[1] "seed 29717 for j=244 out of 250 (i.e. j=9494 in [9251;9500], as job id is i=38)"
[1] "seed 14814 for j=245 out of 250 (i.e. j=9495 in [9251;9500], as job id is i=38)"
[1] "seed 32320 for j=246 out of 250 (i.e. j=9496 in [9251;9500], as job id is i=38)"
[1] "seed 18730 for j=247 out of 250 (i.e. j=9497 in [9251;9500], as job id is i=38)"
[1] "seed 63371 for j=248 out of 250 (i.e. j=9498 in [9251;9500], as job id is i=38)"
[1] "seed 80860 for j=249 out of 250 (i.e. j=9499 in [9251;9500], as job id is i=38)"
[1] "seed 90028 for j=250 out of 250 (i.e. j=9500 in [9251;9500], as job id is i=38)"
There were 16 warnings (use warnings() to see them)
> rownames(RES) <- NULL
> save(RES,file=paste0(path.res,name,"-",iter_sim,".rda"))
> 
> ## * Summary results
> sessionInfo()
R version 4.1.2 (2021-11-01)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Red Hat Enterprise Linux 8.5 (Ootpa)

Matrix products: default
BLAS:   /opt/software/R/4.1.2/lib64/R/lib/libRblas.so
LAPACK: /opt/software/R/4.1.2/lib64/R/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] mvtnorm_1.1-3    DelayedGSD_0.0.3

loaded via a namespace (and not attached):
 [1] BB_2019.10-1     magrittr_2.0.3   tidyselect_1.1.2 munsell_0.5.0   
 [5] lattice_0.20-45  colorspace_2.0-3 xtable_1.8-4     R6_2.5.1        
 [9] quadprog_1.5-8   rlang_1.0.3      fansi_1.0.3      dplyr_1.0.9     
[13] grid_4.1.2       nlme_3.1-153     gtable_0.3.0     gsDesign_3.3.0  
[17] utf8_1.2.2       cli_3.3.0        ellipsis_0.3.2   tibble_3.1.7    
[21] lifecycle_1.0.1  crayon_1.5.1     purrr_0.3.4      ggplot2_3.3.6   
[25] tidyr_1.2.0      vctrs_0.4.1      glue_1.6.2       compiler_4.1.2  
[29] pillar_1.7.0     generics_0.1.3   scales_1.2.0     pkgconfig_2.0.3 
> summary(RES)
     method        stage           type             statistic     
 Min.   :1.0   Min.   :1.000   Length:1500        Min.   :0.0234  
 1st Qu.:1.0   1st Qu.:1.000   Class :character   1st Qu.:1.5919  
 Median :1.5   Median :1.000   Mode  :character   Median :2.3625  
 Mean   :1.5   Mean   :1.333                      Mean   :2.2613  
 3rd Qu.:2.0   3rd Qu.:2.000                      3rd Qu.:2.9372  
 Max.   :2.0   Max.   :2.000                      Max.   :4.4818  
                                                  NA's   :500     
  estimate_ML          se_ML             info           infoPC      
 Min.   :-0.3286   Min.   :0.3455   Min.   :4.527   Min.   :0.3537  
 1st Qu.: 0.5554   1st Qu.:0.3832   1st Qu.:5.693   1st Qu.:0.4449  
 Median : 0.8007   Median :0.4045   Median :6.188   Median :0.4835  
 Mean   : 0.8033   Mean   :0.4033   Mean   :6.307   Mean   :0.4928  
 3rd Qu.: 1.0429   3rd Qu.:0.4221   3rd Qu.:6.873   3rd Qu.:0.5370  
 Max.   : 1.8505   Max.   :0.4700   Max.   :9.204   Max.   :0.7192  
 NA's   :500       NA's   :1000     NA's   :170     NA's   :170     
   info.pred      infoPC.pred           uk              lk         
 Min.   :4.817   Min.   :0.3764   Min.   :2.300   Min.   :-0.2576  
 1st Qu.:5.972   1st Qu.:0.4667   1st Qu.:2.453   1st Qu.: 0.1267  
 Median :6.502   Median :0.5081   Median :2.530   Median : 0.2887  
 Mean   :6.619   Mean   :0.5172   Mean   :2.522   Mean   : 0.3164  
 3rd Qu.:7.218   3rd Qu.:0.5641   3rd Qu.:2.589   3rd Qu.: 0.5043  
 Max.   :9.103   Max.   :0.7113   Max.   :2.734   Max.   : 0.9488  
 NA's   :1000    NA's   :1000     NA's   :1000    NA's   :1000     
   decision            reason            p.value_ML        lower_ML      
 Length:1500        Length:1500        Min.   :0.0000   Min.   :-0.9438  
 Class :character   Class :character   1st Qu.:0.0020   1st Qu.:-0.0509  
 Mode  :character   Mode  :character   Median :0.0083   Median : 0.1209  
                                       Mean   :0.0646   Mean   : 0.1035  
                                       3rd Qu.:0.0393   3rd Qu.: 0.2657  
                                       Max.   :0.9408   Max.   : 0.7712  
                                       NA's   :1000     NA's   :1000     
    upper_ML       p.value_MUE       lower_MUE         upper_MUE     
 Min.   :0.7495   Min.   :0.0000   Min.   :-0.9599   Min.   :0.7449  
 1st Qu.:1.2501   1st Qu.:0.0034   1st Qu.:-0.0594   1st Qu.:1.2391  
 Median :1.4516   Median :0.0078   Median : 0.0612   Median :1.4256  
 Mean   :1.5421   Mean   :0.0400   Mean   : 0.0777   Mean   :1.5537  
 3rd Qu.:1.8293   3rd Qu.:0.0219   3rd Qu.: 0.1950   3rd Qu.:1.8816  
 Max.   :2.6199   Max.   :0.8038   Max.   : 1.2914   Max.   :2.6381  
 NA's   :1000     NA's   :1000     NA's   :1000      NA's   :1000    
  estimate_MUE           ck          time.interim        seed      
 Min.   :-0.0972   Min.   :0.2021   Min.   :535.0   Min.   :   78  
 1st Qu.: 0.5924   1st Qu.:1.3962   1st Qu.:588.0   1st Qu.:21812  
 Median : 0.7701   Median :1.4485   Median :607.0   Median :48004  
 Mean   : 0.8231   Mean   :1.4310   Mean   :606.5   Mean   :48511  
 3rd Qu.: 1.0486   3rd Qu.:1.5139   3rd Qu.:626.0   3rd Qu.:74663  
 Max.   : 1.8394   Max.   :1.6836   Max.   :682.0   Max.   :99258  
 NA's   :1000      NA's   :670                                     
  nX1.interim     nX2.interim     nX3.interim  computation.time
 Min.   :146.0   Min.   :130.0   Min.   :121   Min.   :0.7030  
 1st Qu.:147.0   1st Qu.:135.0   1st Qu.:125   1st Qu.:0.9000  
 Median :148.0   Median :136.0   Median :127   Median :0.9765  
 Mean   :148.5   Mean   :136.4   Mean   :127   Mean   :1.0075  
 3rd Qu.:150.0   3rd Qu.:138.0   3rd Qu.:129   3rd Qu.:1.1210  
 Max.   :153.0   Max.   :142.0   Max.   :134   Max.   :3.8400  
                                                               
> 
> #----------------------------------------------------------------------
> ### BATCH_simuMain.R ends here
> 
> proc.time()
   user  system elapsed 
254.640   0.431 265.419 
