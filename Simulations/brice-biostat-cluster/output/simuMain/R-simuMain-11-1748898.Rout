
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### BATCH_simuMain.R --- 
> #----------------------------------------------------------------------
> ## Author: Paul Blanche
> ## Created: Mar  5 2021 (10:56) 
> ## Version: 
> ## Last-Updated: jul  7 2022 (13:56) 
> ##           By: Brice Ozenne
> ##     Update #: 518
> #----------------------------------------------------------------------
> ## 
> ### Commentary: 
> ## 
> ### Change Log:
> #----------------------------------------------------------------------
> ## 
> ### Code:
> 
> ## ** BATCH loop
> ## cd /projects/biostat01/people/hpl802/DelayedGSD/
> ## for ITER in `seq 1 10`;
> ## do
> ## eval 'R CMD BATCH --vanilla "--args iter_sim='$ITER' n.iter_sim=10" BATCH_simuMain.R output/R-simuMain-'$ITER'.Rout &'
> ## done
> 
> ## [1] 1186669
> ## [2] 1186670
> ## [3] 1186671
> ## [4] 1186672
> ## [5] 1186673
> ## [6] 1186674
> ## [7] 1186675
> ## [8] 1186676
> ## [9] 1186677
> ## [10] 1186678
> 
> rm(list=ls())
>                                    # {{{ parameters
> ## * parameters
> name <- "ScenarioName" # To save the results
> method <- 1:2 # methods used to compute the boundaries
>                                         #---
> myseed <- 140786598
>                                         #--- to plan the trial ----
> NMC <- 250 # number of sequential simulations to run in parallel. Eg. with 250, then we can run 40 scripts in paralell to get N=10,000 runs in total.
> kMax <- 2  #max number of analyses (including final)
> alpha <- 0.025  #type I error (one sided)
> beta <- 0.2  #type II error
> informationRates <- c(0.5,1)  #planned  information rates
> rho_alpha <- 2  # rho parameter for alpha error spending function
> rho_beta <- 2  # rho parameter for beta error spending function
> ## deltaPower <- 0.75 # just to try another value when Id > Imax
> Id <- 0.55  #(expected) information rate at each decision analysis
> binding <- TRUE
>                                         #
>                                         #---- to generate data -----------
>                                         #
> block <- c(1,1,0,0) 
> allsd <- c(2.5,2.1,2.4) # sd, first from baseline measurement, then the two changes from baseline
> mean0 <- c(10,0,0) # mean placebo group (again, first is absolute value, then change from baseline)
> delta <- c(0,0.6,0.8) # treatment effect
> ar <- (0.86*2)*2 # orginial accrual rate from data from Corine is 0.86 per week, hence we multiply by 2 for by 14 days. As to low, we further multiply by 2
> cor011 <- -0.15 # ~ from data from Corine
> corij1 <- 0.68  # ~ from data from Corine
> cor0j1 <- -0.27  # ~ from data from Corine
> Miss11 <- 5/104 # miss both V1 and V2
> Miss12 <- 1/104 # miss V1 and but not V2
> Miss21 <- 6/104 # do not miss V1 and but miss V2
> Miss22 <- 92/104 # miss none
> PropForInterim <- 0.5 # Decide to have interim analysiz when PropForInterim % of all subjects have had the chance to have one follow-up measuement recorded in the data to be available for analysis.
> theDelta.t <- 1.50001 # time lag to process the data and make them ready to analyze after collecting them (unit is time between two follow-up visits)
> TimeFactor <- 14 ## number of days between two visits
>                                         #
>                                         #--- actually for both planing the trial  and generating data-----
>                                         #
>                                         #
> deltaPower <- abs(delta[3]) # effect (NOT Z-scale/unit, but outcome scale/unit!) that the study is powered for: should we choose ourselves or compute from other numbers above ???
> n <- ceiling(2*2*((allsd[3]/deltaPower)^2)*(qnorm(1-beta)-qnorm(alpha))^2) #104 with Corine's data # should we choose ourselves or compute from the above numbers ???
>                                         # inflate SS as required for interim
> 
>                                         # {{{ Set seeds for parallel computing and reproducibility
> ## * Seed
> args <- commandArgs(TRUE) ## BATCH MODE
> if(length(args)>0){
+     for (arg in args){
+         eval(parse(text=arg))
+     }
+ }else{ ## SLUMR
+     iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_ID"))
+     n.iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_COUNT"))
+ } ## interactive
> if(is.na(iter_sim)){iter_sim <- 1}
> if(is.na(n.iter_sim)){n.iter_sim <- 40}
> 
> set.seed(140786598)
> allseeds <- sample.int(n = 10*n.iter_sim*NMC, size = n.iter_sim*NMC, replace=FALSE) #x=1:(.Machine$integer.max) seems to be maximal possible
> # }}}
> 
> # {{{ set path to load and save and othe machine specific variables
> ## * path
> path <- "."
> path.res <- file.path(path,"Results","simuMain")
> if(dir.exists(path.res)==FALSE){
+     if(dir.exists(file.path(path,"Results"))==FALSE){
+     dir.create(file.path(path,"Results"))
+     }
+     dir.create(path.res)
+ }
> path.output <- file.path(path,"output","simuMain")
> if(dir.exists(path.output)==FALSE){
+     if(dir.exists(file.path(path,"output"))==FALSE){
+     dir.create(file.path(path,"output"))
+     }
+     dir.create(path.output)
+ }
> # }}}
> 
> 
> ## * libraries and functions
> library(DelayedGSD)
DelayedGSD version 0.0.3
> ## sourceDir <- function(path, trace = TRUE, ...) {
> ##     for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
> ##         if(trace) cat(nm,":")
> ##         source(file.path(path, nm), ...)
> ##         if(trace) cat("\n")
> ##     }
> ## }
> ## sourceDir(pathToLoad)
>     
> 
> ## * Compute inflation factor and sample size
> plannedB <- vector(mode = "list", length = 3)
> for(iMeth in method){ ## iMeth <- 1
+     plannedB[[iMeth]] <- CalcBoundaries(kMax=kMax,  
+                                         alpha=alpha, 
+                                         beta=beta,  
+                                         InfoR.i=informationRates,  
+                                         InfoR.d=c(Id,1),  
+                                         rho_alpha=rho_alpha,  
+                                         rho_beta=rho_beta,  
+                                         method=iMeth,  
+                                         cNotBelowFixedc=FALSE,
+                                         bindingFutility=binding,
+                                         delta=tail(delta,1))
+     ## summary(plannedB[[1]])
+     ## coef(plannedB[[iMeth]], type = "information")
+ }
Loading required namespace: gsDesign
Loading required package: mvtnorm
Loading required namespace: BB
> inflationFactor <- unlist(lapply(plannedB,function(iP){iP$planned$InflationFactor}))
> nGSD <- ceiling(n*inflationFactor)
> ##  plot(plannedB[[1]])
> 
> #
> # --- just to check---
> ## n
> ## InfoFixed <- ((qnorm(1-beta)-qnorm(alpha))/(deltaPower))^2
> ## InfoFixed
> ## n/(4*(allsd[3])^2)
> #---
> # }}}
> 
> 
> 
> 
> # {{{ technical details to loop
> RES <- NULL # initialize results to save
> allj <- ((iter_sim-1)*NMC + 1):(iter_sim*NMC) # indices of all iterations (replicates) for this job, accountng for the other jobs running in parallel
> # }}}
> 
> ## * Loop
> for(j in allj){ ## j <- 51 ## 5
+     startComp <- Sys.time()
+     myseedi <- allseeds[j]
+     # {{{ TRACE info (e.g. to check the Rout)
+     print(paste0("seed ",myseedi," for ","j=",which(j==allj)," out of ",NMC, " (i.e. j=",j," in [",(iter_sim-1)*NMC + 1,";",iter_sim*NMC,"], as job id is i=",iter_sim,")"))
+     # }}}
+     # {{{ Missing probabilities
+     MyMissProb <- matrix(c(Miss11,Miss12,Miss21,Miss22),ncol=2,nrow=2,byrow=TRUE) # to additionnally remove 1 more because some FASFL=N
+     colnames(MyMissProb) <- c("V2 missing","V2 not missing")
+     rownames(MyMissProb) <- c("V1 missing","V1 not missing")
+     # }}}
+ 
+                                         # {{{ generate data
+     ## ** simulate
+     res <- GenData(n=n, 
+                    N.fw=2,
+                    rand.block=block,
+                    allsd=allsd,
+                    mean0=mean0,
+                    delta=delta,
+                    ar=ar,
+                    cor.01.1=cor011,
+                    cor.ij.1=corij1,
+                    cor.0j.1=cor0j1,
+                    seed=myseedi,
+                    MissProb=MyMissProb,
+                    DigitsOutcome=2,
+                    TimeFactor=TimeFactor,
+                    DigitsTime=0
+                    )
+     d <- res$d
+     ## head(d,n=20)
+                                         # }}}
+                                         # {{{ reformat data like those of Corine
+     ## Make data long format
+     ## dd <- FormatAsCase(d)
+     ## head(dd)
+     ## summary(dd)
+                                         # }}}
+    
+                                         # {{{ make data available at interim
+                                         # Here we stop inclusion data collection for the interim analysis as soon as
+                                         # half of the participants have completed (or had the opportunity to complete) the follow-up 
+     thet <- d$t3[ceiling(n*PropForInterim)]
+     di <- SelectData(d,t=thet)
+     ## ddi <- FormatAsCase(di) # needed ????
+     ## head(d[d$id==52,])
+                                         # }}}
+     ## {{{ analyze data at at interim
+     ## ** interim
+     lmmI <- analyzeData(di, ddf = "nlme", data.decision = sum(d$t1 <= thet + theDelta.t*TimeFactor), getinfo = TRUE, trace = TRUE)
+     ## lmmI <- analyzeData(di, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     currentGSD <- vector(mode = "list", length = 3)
+     out.interim <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+ 
+         currentGSD[[iMeth]] <- update(plannedB[[iMeth]], delta = lmmI, trace = FALSE)
+ 
+         iConfint.interim <- confint(currentGSD[[iMeth]])
+         iInfo.interim <- coef(currentGSD[[iMeth]], type = "information")
+         iBoundary.interim <- coef(currentGSD[[iMeth]], type = "boundary")
+         iDecision.interim <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+         out.interim[[iMeth]] <-  data.frame(statistic = iConfint.interim[1,"statistic"],
+                                             estimate_ML = iConfint.interim[1,"estimate"],
+                                             se_ML = iConfint.interim[1,"se"],
+                                             info = iInfo.interim[1,"Interim"],
+                                             infoPC = iInfo.interim[1,"Interim.pc"],
+                                             info.pred = iInfo.interim[1,"Decision"],
+                                             infoPC.pred = iInfo.interim[1,"Decision.pc"],
+                                             uk = iBoundary.interim[1,"Ebound"],
+                                             lk = iBoundary.interim[1,"Fbound"],
+                                             decision = iDecision.interim["decision","stage 1"],
+                                             reason = iDecision.interim["reason.interim","stage 1"])
+     }
+     ## currentGSD[[1]]
+     ## plot(currentGSD[[1]])
+ 
+     ## ** decision
+     dDecision <- d[which(d$t1 <= thet + theDelta.t*TimeFactor),]
+     lmmD <- analyzeData(dDecision, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+     
+     out.decision <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+           
+         if(out.interim[[iMeth]]$decision == "stop"){
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, trace = FALSE)
+             ## plot(currentGSD[[iMeth]])
+ 
+             iConfint.decision <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.decision  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = iConfint.decision[1,"statistic"],
+                                                 p.value_ML = iConfint.decision[iConfint.decision$method == "ML","p.value"],
+                                                 lower_ML = iConfint.decision[iConfint.decision$method == "ML","lower"],
+                                                 upper_ML = iConfint.decision[iConfint.decision$method == "ML","upper"],
+                                                 estimate_ML = iConfint.decision[iConfint.decision$method == "ML","estimate"],
+                                                 p.value_MUE = iConfint.decision[iConfint.decision$method == "MUE","p.value"],
+                                                 lower_MUE = iConfint.decision[iConfint.decision$method == "MUE","lower"],
+                                                 upper_MUE = iConfint.decision[iConfint.decision$method == "MUE","upper"],
+                                                 estimate_MUE = iConfint.decision[iConfint.decision$method == "MUE","estimate"],
+                                                 info = iInfo.decision[1,"Interim"],
+                                                 infoPC = iInfo.decision[1,"Interim.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = unname(iDecision.decision["decision","stage 2"])
+                                                 )
+ 
+         }else{
+             ## update information
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, k = 1, type.k = "decision", trace = FALSE)
+ 
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = NA,
+                                                 p.value_ML = NA,
+                                                 lower_ML = NA,
+                                                 upper_ML = NA,
+                                                 estimate_ML = NA,
+                                                 p.value_MUE = NA,
+                                                 lower_MUE = NA,
+                                                 upper_MUE = NA,
+                                                 estimate_MUE = NA,
+                                                 info = iInfo.decision[1,"Decision"],
+                                                 infoPC = iInfo.decision[1,"Decision.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = NA)
+         }
+     }
+                                         # }}}
+                                         # {{{ Analyze data at decision
+ 
+     ## ** finale
+     dFinal <- d
+     lmmF <- analyzeData(dFinal, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     out.final <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+         if(out.interim[[iMeth]]$decision == "stop"){
+             out.final[[iMeth]] <- data.frame(statistic = NA,
+                                              p.value_ML = NA,
+                                              lower_ML = NA,
+                                              upper_ML = NA,
+                                              estimate_ML = NA,
+                                              p.value_MUE = NA,
+                                              lower_MUE = NA,
+                                              upper_MUE = NA,
+                                              estimate_MUE = NA,
+                                              info = NA,
+                                              infoPC = NA,
+                                              ck = NA,
+                                              decision = NA)
+ 
+         }else{
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmF, trace = FALSE)
+ 
+             ## plot(test)
+             ## summary(test)
+             iConfint.final <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.final <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.final <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.final  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.final[[iMeth]] <- data.frame(statistic = iConfint.final[1,"statistic"],
+                                              p.value_ML = iConfint.final[iConfint.final$method == "ML","p.value"],
+                                              lower_ML = iConfint.final[iConfint.final$method == "ML","lower"],
+                                              upper_ML = iConfint.final[iConfint.final$method == "ML","upper"],
+                                              estimate_ML = iConfint.final[iConfint.final$method == "ML","estimate"],
+                                              p.value_MUE = iConfint.final[iConfint.final$method == "MUE","p.value"],
+                                              lower_MUE = iConfint.final[iConfint.final$method == "MUE","lower"],
+                                              upper_MUE = iConfint.final[iConfint.final$method == "MUE","upper"],
+                                              estimate_MUE = iConfint.final[iConfint.final$method == "MUE","estimate"],
+                                              info = iInfo.final[1,"Interim"],
+                                              infoPC = iInfo.final[1,"Interim.pc"],
+                                              ck = iBoundary.final[1,"Cbound"],
+                                              decision = unname(coef(currentGSD[[iMeth]], type = "decision")["decision","stage 2"])
+                                              )
+         }
+     }
+                                         # }}}
+ 
+     stopComp <- Sys.time()
+                                         # {{{ Save results
+ 
+     outMerge <- do.call(rbind,lapply(method, function(iMeth){
+         iNames <- unique(c(names(out.interim[[iMeth]]),names(out.decision[[iMeth]]),names(out.final[[iMeth]])))
+         iMerge <- data.frame(matrix(NA, ncol = length(iNames)+3, nrow = 3, dimnames = list(NULL, c("method", "stage", "type", iNames))))
+         iMerge[1,c("method","stage","type",names(out.interim[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "interim", out.interim[[iMeth]]) 
+         iMerge[2,c("method","stage","type",names(out.decision[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "decision", out.decision[[iMeth]]) 
+         iMerge[3,c("method","stage","type",names(out.final[[iMeth]]))] <- data.frame(method = iMeth, stage = 2, type = "final", out.final[[iMeth]])
+         return(iMerge)
+     }))
+ 
+     ## outMerge[outMerge$method==3,]
+ 
+     out <- cbind(
+         ## results
+         outMerge,
+         ## simulation details
+         time.interim = thet,
+         seed=myseedi,             
+         nX1.interim = sum(!is.na(di$X1)),
+         nX2.interim = sum(!is.na(di$X2)),
+         nX3.interim = sum(!is.na(di$X3)),
+         ## computation time
+         computation.time=as.double(round(difftime(stopComp,startComp,units="secs"),3))
+     )
+     ## names(out) <- myColNames
+     RES <- rbind(RES,out)
+     save(RES,file=paste0(path.res,name,"(tempo)-",iter_sim,".rda"))
+                                         # }}}
+ }
[1] "seed 7704 for j=1 out of 250 (i.e. j=2501 in [2501;2750], as job id is i=11)"
Loading required namespace: nlme
[1] "seed 57234 for j=2 out of 250 (i.e. j=2502 in [2501;2750], as job id is i=11)"
[1] "seed 44245 for j=3 out of 250 (i.e. j=2503 in [2501;2750], as job id is i=11)"
[1] "seed 51277 for j=4 out of 250 (i.e. j=2504 in [2501;2750], as job id is i=11)"
[1] "seed 28155 for j=5 out of 250 (i.e. j=2505 in [2501;2750], as job id is i=11)"
[1] "seed 69316 for j=6 out of 250 (i.e. j=2506 in [2501;2750], as job id is i=11)"
[1] "seed 2553 for j=7 out of 250 (i.e. j=2507 in [2501;2750], as job id is i=11)"
[1] "seed 43326 for j=8 out of 250 (i.e. j=2508 in [2501;2750], as job id is i=11)"
[1] "seed 73421 for j=9 out of 250 (i.e. j=2509 in [2501;2750], as job id is i=11)"
[1] "seed 42675 for j=10 out of 250 (i.e. j=2510 in [2501;2750], as job id is i=11)"
[1] "seed 45381 for j=11 out of 250 (i.e. j=2511 in [2501;2750], as job id is i=11)"
[1] "seed 9213 for j=12 out of 250 (i.e. j=2512 in [2501;2750], as job id is i=11)"
[1] "seed 29783 for j=13 out of 250 (i.e. j=2513 in [2501;2750], as job id is i=11)"
[1] "seed 93048 for j=14 out of 250 (i.e. j=2514 in [2501;2750], as job id is i=11)"
[1] "seed 17082 for j=15 out of 250 (i.e. j=2515 in [2501;2750], as job id is i=11)"
[1] "seed 51960 for j=16 out of 250 (i.e. j=2516 in [2501;2750], as job id is i=11)"
[1] "seed 65512 for j=17 out of 250 (i.e. j=2517 in [2501;2750], as job id is i=11)"
[1] "seed 53158 for j=18 out of 250 (i.e. j=2518 in [2501;2750], as job id is i=11)"
[1] "seed 13040 for j=19 out of 250 (i.e. j=2519 in [2501;2750], as job id is i=11)"
[1] "seed 66956 for j=20 out of 250 (i.e. j=2520 in [2501;2750], as job id is i=11)"
[1] "seed 4761 for j=21 out of 250 (i.e. j=2521 in [2501;2750], as job id is i=11)"
[1] "seed 25113 for j=22 out of 250 (i.e. j=2522 in [2501;2750], as job id is i=11)"
[1] "seed 55853 for j=23 out of 250 (i.e. j=2523 in [2501;2750], as job id is i=11)"
[1] "seed 1945 for j=24 out of 250 (i.e. j=2524 in [2501;2750], as job id is i=11)"
[1] "seed 5594 for j=25 out of 250 (i.e. j=2525 in [2501;2750], as job id is i=11)"
[1] "seed 34851 for j=26 out of 250 (i.e. j=2526 in [2501;2750], as job id is i=11)"
[1] "seed 88713 for j=27 out of 250 (i.e. j=2527 in [2501;2750], as job id is i=11)"
[1] "seed 93829 for j=28 out of 250 (i.e. j=2528 in [2501;2750], as job id is i=11)"
[1] "seed 33579 for j=29 out of 250 (i.e. j=2529 in [2501;2750], as job id is i=11)"
[1] "seed 39510 for j=30 out of 250 (i.e. j=2530 in [2501;2750], as job id is i=11)"
[1] "seed 5785 for j=31 out of 250 (i.e. j=2531 in [2501;2750], as job id is i=11)"
[1] "seed 92357 for j=32 out of 250 (i.e. j=2532 in [2501;2750], as job id is i=11)"
[1] "seed 13877 for j=33 out of 250 (i.e. j=2533 in [2501;2750], as job id is i=11)"
[1] "seed 18677 for j=34 out of 250 (i.e. j=2534 in [2501;2750], as job id is i=11)"
[1] "seed 46002 for j=35 out of 250 (i.e. j=2535 in [2501;2750], as job id is i=11)"
[1] "seed 8919 for j=36 out of 250 (i.e. j=2536 in [2501;2750], as job id is i=11)"
[1] "seed 45217 for j=37 out of 250 (i.e. j=2537 in [2501;2750], as job id is i=11)"
[1] "seed 93159 for j=38 out of 250 (i.e. j=2538 in [2501;2750], as job id is i=11)"
[1] "seed 28487 for j=39 out of 250 (i.e. j=2539 in [2501;2750], as job id is i=11)"
[1] "seed 40886 for j=40 out of 250 (i.e. j=2540 in [2501;2750], as job id is i=11)"
[1] "seed 67137 for j=41 out of 250 (i.e. j=2541 in [2501;2750], as job id is i=11)"
[1] "seed 37719 for j=42 out of 250 (i.e. j=2542 in [2501;2750], as job id is i=11)"
[1] "seed 86177 for j=43 out of 250 (i.e. j=2543 in [2501;2750], as job id is i=11)"
[1] "seed 81241 for j=44 out of 250 (i.e. j=2544 in [2501;2750], as job id is i=11)"
[1] "seed 25946 for j=45 out of 250 (i.e. j=2545 in [2501;2750], as job id is i=11)"
[1] "seed 81550 for j=46 out of 250 (i.e. j=2546 in [2501;2750], as job id is i=11)"
[1] "seed 97564 for j=47 out of 250 (i.e. j=2547 in [2501;2750], as job id is i=11)"
[1] "seed 75674 for j=48 out of 250 (i.e. j=2548 in [2501;2750], as job id is i=11)"
[1] "seed 83053 for j=49 out of 250 (i.e. j=2549 in [2501;2750], as job id is i=11)"
[1] "seed 2302 for j=50 out of 250 (i.e. j=2550 in [2501;2750], as job id is i=11)"
[1] "seed 95784 for j=51 out of 250 (i.e. j=2551 in [2501;2750], as job id is i=11)"
[1] "seed 95231 for j=52 out of 250 (i.e. j=2552 in [2501;2750], as job id is i=11)"
[1] "seed 11973 for j=53 out of 250 (i.e. j=2553 in [2501;2750], as job id is i=11)"
[1] "seed 6890 for j=54 out of 250 (i.e. j=2554 in [2501;2750], as job id is i=11)"
[1] "seed 43923 for j=55 out of 250 (i.e. j=2555 in [2501;2750], as job id is i=11)"
[1] "seed 67895 for j=56 out of 250 (i.e. j=2556 in [2501;2750], as job id is i=11)"
[1] "seed 22731 for j=57 out of 250 (i.e. j=2557 in [2501;2750], as job id is i=11)"
[1] "seed 58976 for j=58 out of 250 (i.e. j=2558 in [2501;2750], as job id is i=11)"
[1] "seed 30650 for j=59 out of 250 (i.e. j=2559 in [2501;2750], as job id is i=11)"
[1] "seed 92007 for j=60 out of 250 (i.e. j=2560 in [2501;2750], as job id is i=11)"
[1] "seed 27327 for j=61 out of 250 (i.e. j=2561 in [2501;2750], as job id is i=11)"
[1] "seed 97708 for j=62 out of 250 (i.e. j=2562 in [2501;2750], as job id is i=11)"
[1] "seed 75192 for j=63 out of 250 (i.e. j=2563 in [2501;2750], as job id is i=11)"
[1] "seed 11910 for j=64 out of 250 (i.e. j=2564 in [2501;2750], as job id is i=11)"
[1] "seed 52060 for j=65 out of 250 (i.e. j=2565 in [2501;2750], as job id is i=11)"
[1] "seed 44711 for j=66 out of 250 (i.e. j=2566 in [2501;2750], as job id is i=11)"
[1] "seed 67938 for j=67 out of 250 (i.e. j=2567 in [2501;2750], as job id is i=11)"
[1] "seed 29468 for j=68 out of 250 (i.e. j=2568 in [2501;2750], as job id is i=11)"
[1] "seed 42836 for j=69 out of 250 (i.e. j=2569 in [2501;2750], as job id is i=11)"
[1] "seed 68174 for j=70 out of 250 (i.e. j=2570 in [2501;2750], as job id is i=11)"
[1] "seed 75979 for j=71 out of 250 (i.e. j=2571 in [2501;2750], as job id is i=11)"
[1] "seed 83417 for j=72 out of 250 (i.e. j=2572 in [2501;2750], as job id is i=11)"
[1] "seed 55727 for j=73 out of 250 (i.e. j=2573 in [2501;2750], as job id is i=11)"
[1] "seed 55059 for j=74 out of 250 (i.e. j=2574 in [2501;2750], as job id is i=11)"
[1] "seed 10667 for j=75 out of 250 (i.e. j=2575 in [2501;2750], as job id is i=11)"
[1] "seed 24370 for j=76 out of 250 (i.e. j=2576 in [2501;2750], as job id is i=11)"
[1] "seed 34957 for j=77 out of 250 (i.e. j=2577 in [2501;2750], as job id is i=11)"
[1] "seed 99199 for j=78 out of 250 (i.e. j=2578 in [2501;2750], as job id is i=11)"
[1] "seed 39373 for j=79 out of 250 (i.e. j=2579 in [2501;2750], as job id is i=11)"
[1] "seed 89584 for j=80 out of 250 (i.e. j=2580 in [2501;2750], as job id is i=11)"
[1] "seed 22127 for j=81 out of 250 (i.e. j=2581 in [2501;2750], as job id is i=11)"
[1] "seed 1918 for j=82 out of 250 (i.e. j=2582 in [2501;2750], as job id is i=11)"
[1] "seed 1032 for j=83 out of 250 (i.e. j=2583 in [2501;2750], as job id is i=11)"
[1] "seed 63063 for j=84 out of 250 (i.e. j=2584 in [2501;2750], as job id is i=11)"
[1] "seed 68535 for j=85 out of 250 (i.e. j=2585 in [2501;2750], as job id is i=11)"
[1] "seed 11299 for j=86 out of 250 (i.e. j=2586 in [2501;2750], as job id is i=11)"
[1] "seed 71444 for j=87 out of 250 (i.e. j=2587 in [2501;2750], as job id is i=11)"
[1] "seed 8551 for j=88 out of 250 (i.e. j=2588 in [2501;2750], as job id is i=11)"
[1] "seed 77447 for j=89 out of 250 (i.e. j=2589 in [2501;2750], as job id is i=11)"
[1] "seed 87231 for j=90 out of 250 (i.e. j=2590 in [2501;2750], as job id is i=11)"
[1] "seed 35382 for j=91 out of 250 (i.e. j=2591 in [2501;2750], as job id is i=11)"
[1] "seed 63746 for j=92 out of 250 (i.e. j=2592 in [2501;2750], as job id is i=11)"
[1] "seed 84595 for j=93 out of 250 (i.e. j=2593 in [2501;2750], as job id is i=11)"
[1] "seed 34647 for j=94 out of 250 (i.e. j=2594 in [2501;2750], as job id is i=11)"
[1] "seed 98808 for j=95 out of 250 (i.e. j=2595 in [2501;2750], as job id is i=11)"
[1] "seed 24213 for j=96 out of 250 (i.e. j=2596 in [2501;2750], as job id is i=11)"
[1] "seed 53547 for j=97 out of 250 (i.e. j=2597 in [2501;2750], as job id is i=11)"
[1] "seed 44820 for j=98 out of 250 (i.e. j=2598 in [2501;2750], as job id is i=11)"
[1] "seed 64884 for j=99 out of 250 (i.e. j=2599 in [2501;2750], as job id is i=11)"
[1] "seed 79247 for j=100 out of 250 (i.e. j=2600 in [2501;2750], as job id is i=11)"
[1] "seed 28038 for j=101 out of 250 (i.e. j=2601 in [2501;2750], as job id is i=11)"
[1] "seed 15511 for j=102 out of 250 (i.e. j=2602 in [2501;2750], as job id is i=11)"
[1] "seed 78095 for j=103 out of 250 (i.e. j=2603 in [2501;2750], as job id is i=11)"
[1] "seed 2628 for j=104 out of 250 (i.e. j=2604 in [2501;2750], as job id is i=11)"
[1] "seed 97654 for j=105 out of 250 (i.e. j=2605 in [2501;2750], as job id is i=11)"
[1] "seed 91471 for j=106 out of 250 (i.e. j=2606 in [2501;2750], as job id is i=11)"
[1] "seed 76362 for j=107 out of 250 (i.e. j=2607 in [2501;2750], as job id is i=11)"
[1] "seed 62952 for j=108 out of 250 (i.e. j=2608 in [2501;2750], as job id is i=11)"
[1] "seed 61628 for j=109 out of 250 (i.e. j=2609 in [2501;2750], as job id is i=11)"
[1] "seed 87140 for j=110 out of 250 (i.e. j=2610 in [2501;2750], as job id is i=11)"
[1] "seed 15677 for j=111 out of 250 (i.e. j=2611 in [2501;2750], as job id is i=11)"
[1] "seed 17871 for j=112 out of 250 (i.e. j=2612 in [2501;2750], as job id is i=11)"
[1] "seed 75649 for j=113 out of 250 (i.e. j=2613 in [2501;2750], as job id is i=11)"
[1] "seed 89137 for j=114 out of 250 (i.e. j=2614 in [2501;2750], as job id is i=11)"
[1] "seed 43261 for j=115 out of 250 (i.e. j=2615 in [2501;2750], as job id is i=11)"
[1] "seed 801 for j=116 out of 250 (i.e. j=2616 in [2501;2750], as job id is i=11)"
[1] "seed 11419 for j=117 out of 250 (i.e. j=2617 in [2501;2750], as job id is i=11)"
[1] "seed 55133 for j=118 out of 250 (i.e. j=2618 in [2501;2750], as job id is i=11)"
[1] "seed 72408 for j=119 out of 250 (i.e. j=2619 in [2501;2750], as job id is i=11)"
[1] "seed 54880 for j=120 out of 250 (i.e. j=2620 in [2501;2750], as job id is i=11)"
[1] "seed 26201 for j=121 out of 250 (i.e. j=2621 in [2501;2750], as job id is i=11)"
[1] "seed 35585 for j=122 out of 250 (i.e. j=2622 in [2501;2750], as job id is i=11)"
[1] "seed 46272 for j=123 out of 250 (i.e. j=2623 in [2501;2750], as job id is i=11)"
[1] "seed 45686 for j=124 out of 250 (i.e. j=2624 in [2501;2750], as job id is i=11)"
[1] "seed 46580 for j=125 out of 250 (i.e. j=2625 in [2501;2750], as job id is i=11)"
[1] "seed 16120 for j=126 out of 250 (i.e. j=2626 in [2501;2750], as job id is i=11)"
[1] "seed 69877 for j=127 out of 250 (i.e. j=2627 in [2501;2750], as job id is i=11)"
[1] "seed 74960 for j=128 out of 250 (i.e. j=2628 in [2501;2750], as job id is i=11)"
[1] "seed 85819 for j=129 out of 250 (i.e. j=2629 in [2501;2750], as job id is i=11)"
[1] "seed 69192 for j=130 out of 250 (i.e. j=2630 in [2501;2750], as job id is i=11)"
[1] "seed 72965 for j=131 out of 250 (i.e. j=2631 in [2501;2750], as job id is i=11)"
[1] "seed 4529 for j=132 out of 250 (i.e. j=2632 in [2501;2750], as job id is i=11)"
[1] "seed 26443 for j=133 out of 250 (i.e. j=2633 in [2501;2750], as job id is i=11)"
[1] "seed 2420 for j=134 out of 250 (i.e. j=2634 in [2501;2750], as job id is i=11)"
[1] "seed 77171 for j=135 out of 250 (i.e. j=2635 in [2501;2750], as job id is i=11)"
[1] "seed 52882 for j=136 out of 250 (i.e. j=2636 in [2501;2750], as job id is i=11)"
[1] "seed 97263 for j=137 out of 250 (i.e. j=2637 in [2501;2750], as job id is i=11)"
[1] "seed 79335 for j=138 out of 250 (i.e. j=2638 in [2501;2750], as job id is i=11)"
[1] "seed 45359 for j=139 out of 250 (i.e. j=2639 in [2501;2750], as job id is i=11)"
[1] "seed 54673 for j=140 out of 250 (i.e. j=2640 in [2501;2750], as job id is i=11)"
[1] "seed 82524 for j=141 out of 250 (i.e. j=2641 in [2501;2750], as job id is i=11)"
[1] "seed 49563 for j=142 out of 250 (i.e. j=2642 in [2501;2750], as job id is i=11)"
[1] "seed 64576 for j=143 out of 250 (i.e. j=2643 in [2501;2750], as job id is i=11)"
[1] "seed 91322 for j=144 out of 250 (i.e. j=2644 in [2501;2750], as job id is i=11)"
[1] "seed 93583 for j=145 out of 250 (i.e. j=2645 in [2501;2750], as job id is i=11)"
[1] "seed 69845 for j=146 out of 250 (i.e. j=2646 in [2501;2750], as job id is i=11)"
[1] "seed 18791 for j=147 out of 250 (i.e. j=2647 in [2501;2750], as job id is i=11)"
[1] "seed 47151 for j=148 out of 250 (i.e. j=2648 in [2501;2750], as job id is i=11)"
[1] "seed 63639 for j=149 out of 250 (i.e. j=2649 in [2501;2750], as job id is i=11)"
[1] "seed 13042 for j=150 out of 250 (i.e. j=2650 in [2501;2750], as job id is i=11)"
[1] "seed 85471 for j=151 out of 250 (i.e. j=2651 in [2501;2750], as job id is i=11)"
[1] "seed 18990 for j=152 out of 250 (i.e. j=2652 in [2501;2750], as job id is i=11)"
[1] "seed 13607 for j=153 out of 250 (i.e. j=2653 in [2501;2750], as job id is i=11)"
[1] "seed 91681 for j=154 out of 250 (i.e. j=2654 in [2501;2750], as job id is i=11)"
[1] "seed 66900 for j=155 out of 250 (i.e. j=2655 in [2501;2750], as job id is i=11)"
[1] "seed 98489 for j=156 out of 250 (i.e. j=2656 in [2501;2750], as job id is i=11)"
[1] "seed 60223 for j=157 out of 250 (i.e. j=2657 in [2501;2750], as job id is i=11)"
[1] "seed 43239 for j=158 out of 250 (i.e. j=2658 in [2501;2750], as job id is i=11)"
[1] "seed 60445 for j=159 out of 250 (i.e. j=2659 in [2501;2750], as job id is i=11)"
[1] "seed 37983 for j=160 out of 250 (i.e. j=2660 in [2501;2750], as job id is i=11)"
[1] "seed 30061 for j=161 out of 250 (i.e. j=2661 in [2501;2750], as job id is i=11)"
[1] "seed 40848 for j=162 out of 250 (i.e. j=2662 in [2501;2750], as job id is i=11)"
[1] "seed 22716 for j=163 out of 250 (i.e. j=2663 in [2501;2750], as job id is i=11)"
[1] "seed 45514 for j=164 out of 250 (i.e. j=2664 in [2501;2750], as job id is i=11)"
[1] "seed 72201 for j=165 out of 250 (i.e. j=2665 in [2501;2750], as job id is i=11)"
[1] "seed 74003 for j=166 out of 250 (i.e. j=2666 in [2501;2750], as job id is i=11)"
[1] "seed 60386 for j=167 out of 250 (i.e. j=2667 in [2501;2750], as job id is i=11)"
[1] "seed 50285 for j=168 out of 250 (i.e. j=2668 in [2501;2750], as job id is i=11)"
[1] "seed 22661 for j=169 out of 250 (i.e. j=2669 in [2501;2750], as job id is i=11)"
[1] "seed 16216 for j=170 out of 250 (i.e. j=2670 in [2501;2750], as job id is i=11)"
[1] "seed 20103 for j=171 out of 250 (i.e. j=2671 in [2501;2750], as job id is i=11)"
[1] "seed 81956 for j=172 out of 250 (i.e. j=2672 in [2501;2750], as job id is i=11)"
[1] "seed 18751 for j=173 out of 250 (i.e. j=2673 in [2501;2750], as job id is i=11)"
[1] "seed 26264 for j=174 out of 250 (i.e. j=2674 in [2501;2750], as job id is i=11)"
[1] "seed 14556 for j=175 out of 250 (i.e. j=2675 in [2501;2750], as job id is i=11)"
[1] "seed 70350 for j=176 out of 250 (i.e. j=2676 in [2501;2750], as job id is i=11)"
[1] "seed 58823 for j=177 out of 250 (i.e. j=2677 in [2501;2750], as job id is i=11)"
[1] "seed 52004 for j=178 out of 250 (i.e. j=2678 in [2501;2750], as job id is i=11)"
[1] "seed 5028 for j=179 out of 250 (i.e. j=2679 in [2501;2750], as job id is i=11)"
[1] "seed 78233 for j=180 out of 250 (i.e. j=2680 in [2501;2750], as job id is i=11)"
[1] "seed 12954 for j=181 out of 250 (i.e. j=2681 in [2501;2750], as job id is i=11)"
[1] "seed 69496 for j=182 out of 250 (i.e. j=2682 in [2501;2750], as job id is i=11)"
[1] "seed 9054 for j=183 out of 250 (i.e. j=2683 in [2501;2750], as job id is i=11)"
[1] "seed 32723 for j=184 out of 250 (i.e. j=2684 in [2501;2750], as job id is i=11)"
[1] "seed 98900 for j=185 out of 250 (i.e. j=2685 in [2501;2750], as job id is i=11)"
[1] "seed 44277 for j=186 out of 250 (i.e. j=2686 in [2501;2750], as job id is i=11)"
[1] "seed 55081 for j=187 out of 250 (i.e. j=2687 in [2501;2750], as job id is i=11)"
[1] "seed 75516 for j=188 out of 250 (i.e. j=2688 in [2501;2750], as job id is i=11)"
[1] "seed 79409 for j=189 out of 250 (i.e. j=2689 in [2501;2750], as job id is i=11)"
[1] "seed 80338 for j=190 out of 250 (i.e. j=2690 in [2501;2750], as job id is i=11)"
[1] "seed 31317 for j=191 out of 250 (i.e. j=2691 in [2501;2750], as job id is i=11)"
[1] "seed 12595 for j=192 out of 250 (i.e. j=2692 in [2501;2750], as job id is i=11)"
[1] "seed 90483 for j=193 out of 250 (i.e. j=2693 in [2501;2750], as job id is i=11)"
[1] "seed 84316 for j=194 out of 250 (i.e. j=2694 in [2501;2750], as job id is i=11)"
[1] "seed 57483 for j=195 out of 250 (i.e. j=2695 in [2501;2750], as job id is i=11)"
[1] "seed 26692 for j=196 out of 250 (i.e. j=2696 in [2501;2750], as job id is i=11)"
[1] "seed 93610 for j=197 out of 250 (i.e. j=2697 in [2501;2750], as job id is i=11)"
[1] "seed 90644 for j=198 out of 250 (i.e. j=2698 in [2501;2750], as job id is i=11)"
[1] "seed 22645 for j=199 out of 250 (i.e. j=2699 in [2501;2750], as job id is i=11)"
[1] "seed 51947 for j=200 out of 250 (i.e. j=2700 in [2501;2750], as job id is i=11)"
[1] "seed 34643 for j=201 out of 250 (i.e. j=2701 in [2501;2750], as job id is i=11)"
[1] "seed 88955 for j=202 out of 250 (i.e. j=2702 in [2501;2750], as job id is i=11)"
[1] "seed 89618 for j=203 out of 250 (i.e. j=2703 in [2501;2750], as job id is i=11)"
[1] "seed 25810 for j=204 out of 250 (i.e. j=2704 in [2501;2750], as job id is i=11)"
[1] "seed 14188 for j=205 out of 250 (i.e. j=2705 in [2501;2750], as job id is i=11)"
[1] "seed 63924 for j=206 out of 250 (i.e. j=2706 in [2501;2750], as job id is i=11)"
[1] "seed 81997 for j=207 out of 250 (i.e. j=2707 in [2501;2750], as job id is i=11)"
[1] "seed 93761 for j=208 out of 250 (i.e. j=2708 in [2501;2750], as job id is i=11)"
[1] "seed 3558 for j=209 out of 250 (i.e. j=2709 in [2501;2750], as job id is i=11)"
[1] "seed 32503 for j=210 out of 250 (i.e. j=2710 in [2501;2750], as job id is i=11)"
[1] "seed 62666 for j=211 out of 250 (i.e. j=2711 in [2501;2750], as job id is i=11)"
[1] "seed 24975 for j=212 out of 250 (i.e. j=2712 in [2501;2750], as job id is i=11)"
[1] "seed 28285 for j=213 out of 250 (i.e. j=2713 in [2501;2750], as job id is i=11)"
[1] "seed 22676 for j=214 out of 250 (i.e. j=2714 in [2501;2750], as job id is i=11)"
[1] "seed 71235 for j=215 out of 250 (i.e. j=2715 in [2501;2750], as job id is i=11)"
[1] "seed 12358 for j=216 out of 250 (i.e. j=2716 in [2501;2750], as job id is i=11)"
[1] "seed 25813 for j=217 out of 250 (i.e. j=2717 in [2501;2750], as job id is i=11)"
[1] "seed 63712 for j=218 out of 250 (i.e. j=2718 in [2501;2750], as job id is i=11)"
[1] "seed 33282 for j=219 out of 250 (i.e. j=2719 in [2501;2750], as job id is i=11)"
[1] "seed 93932 for j=220 out of 250 (i.e. j=2720 in [2501;2750], as job id is i=11)"
[1] "seed 35062 for j=221 out of 250 (i.e. j=2721 in [2501;2750], as job id is i=11)"
[1] "seed 83097 for j=222 out of 250 (i.e. j=2722 in [2501;2750], as job id is i=11)"
[1] "seed 51453 for j=223 out of 250 (i.e. j=2723 in [2501;2750], as job id is i=11)"
[1] "seed 67126 for j=224 out of 250 (i.e. j=2724 in [2501;2750], as job id is i=11)"
[1] "seed 64383 for j=225 out of 250 (i.e. j=2725 in [2501;2750], as job id is i=11)"
[1] "seed 91765 for j=226 out of 250 (i.e. j=2726 in [2501;2750], as job id is i=11)"
[1] "seed 14483 for j=227 out of 250 (i.e. j=2727 in [2501;2750], as job id is i=11)"
[1] "seed 5289 for j=228 out of 250 (i.e. j=2728 in [2501;2750], as job id is i=11)"
[1] "seed 92227 for j=229 out of 250 (i.e. j=2729 in [2501;2750], as job id is i=11)"
[1] "seed 5222 for j=230 out of 250 (i.e. j=2730 in [2501;2750], as job id is i=11)"
[1] "seed 40445 for j=231 out of 250 (i.e. j=2731 in [2501;2750], as job id is i=11)"
[1] "seed 70218 for j=232 out of 250 (i.e. j=2732 in [2501;2750], as job id is i=11)"
[1] "seed 49476 for j=233 out of 250 (i.e. j=2733 in [2501;2750], as job id is i=11)"
[1] "seed 87557 for j=234 out of 250 (i.e. j=2734 in [2501;2750], as job id is i=11)"
[1] "seed 97790 for j=235 out of 250 (i.e. j=2735 in [2501;2750], as job id is i=11)"
[1] "seed 83833 for j=236 out of 250 (i.e. j=2736 in [2501;2750], as job id is i=11)"
[1] "seed 64818 for j=237 out of 250 (i.e. j=2737 in [2501;2750], as job id is i=11)"
[1] "seed 95610 for j=238 out of 250 (i.e. j=2738 in [2501;2750], as job id is i=11)"
[1] "seed 29489 for j=239 out of 250 (i.e. j=2739 in [2501;2750], as job id is i=11)"
[1] "seed 27178 for j=240 out of 250 (i.e. j=2740 in [2501;2750], as job id is i=11)"
[1] "seed 27296 for j=241 out of 250 (i.e. j=2741 in [2501;2750], as job id is i=11)"
[1] "seed 81247 for j=242 out of 250 (i.e. j=2742 in [2501;2750], as job id is i=11)"
[1] "seed 57250 for j=243 out of 250 (i.e. j=2743 in [2501;2750], as job id is i=11)"
[1] "seed 9771 for j=244 out of 250 (i.e. j=2744 in [2501;2750], as job id is i=11)"
[1] "seed 49261 for j=245 out of 250 (i.e. j=2745 in [2501;2750], as job id is i=11)"
[1] "seed 43091 for j=246 out of 250 (i.e. j=2746 in [2501;2750], as job id is i=11)"
[1] "seed 43784 for j=247 out of 250 (i.e. j=2747 in [2501;2750], as job id is i=11)"
[1] "seed 60281 for j=248 out of 250 (i.e. j=2748 in [2501;2750], as job id is i=11)"
[1] "seed 66367 for j=249 out of 250 (i.e. j=2749 in [2501;2750], as job id is i=11)"
[1] "seed 65365 for j=250 out of 250 (i.e. j=2750 in [2501;2750], as job id is i=11)"
There were 22 warnings (use warnings() to see them)
> rownames(RES) <- NULL
> save(RES,file=paste0(path.res,name,"-",iter_sim,".rda"))
> 
> ## * Summary results
> sessionInfo()
R version 4.1.2 (2021-11-01)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Red Hat Enterprise Linux 8.5 (Ootpa)

Matrix products: default
BLAS:   /opt/software/R/4.1.2/lib64/R/lib/libRblas.so
LAPACK: /opt/software/R/4.1.2/lib64/R/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] mvtnorm_1.1-3    DelayedGSD_0.0.3

loaded via a namespace (and not attached):
 [1] BB_2019.10-1     magrittr_2.0.3   tidyselect_1.1.2 munsell_0.5.0   
 [5] lattice_0.20-45  colorspace_2.0-3 xtable_1.8-4     R6_2.5.1        
 [9] quadprog_1.5-8   rlang_1.0.3      fansi_1.0.3      dplyr_1.0.9     
[13] grid_4.1.2       nlme_3.1-153     gtable_0.3.0     gsDesign_3.3.0  
[17] utf8_1.2.2       cli_3.3.0        ellipsis_0.3.2   tibble_3.1.7    
[21] lifecycle_1.0.1  crayon_1.5.1     purrr_0.3.4      ggplot2_3.3.6   
[25] tidyr_1.2.0      vctrs_0.4.1      glue_1.6.2       compiler_4.1.2  
[29] pillar_1.7.0     generics_0.1.3   scales_1.2.0     pkgconfig_2.0.3 
> summary(RES)
     method        stage           type             statistic    
 Min.   :1.0   Min.   :1.000   Length:1500        Min.   :0.006  
 1st Qu.:1.0   1st Qu.:1.000   Class :character   1st Qu.:1.510  
 Median :1.5   Median :1.000   Mode  :character   Median :2.272  
 Mean   :1.5   Mean   :1.333                      Mean   :2.247  
 3rd Qu.:2.0   3rd Qu.:2.000                      3rd Qu.:3.051  
 Max.   :2.0   Max.   :2.000                      Max.   :5.338  
                                                  NA's   :500    
  estimate_ML          se_ML             info           infoPC      
 Min.   :-0.3027   Min.   :0.3366   Min.   :4.437   Min.   :0.3467  
 1st Qu.: 0.5237   1st Qu.:0.3880   1st Qu.:5.839   1st Qu.:0.4562  
 Median : 0.7582   Median :0.4016   Median :6.278   Median :0.4905  
 Mean   : 0.7929   Mean   :0.4024   Mean   :6.330   Mean   :0.4946  
 3rd Qu.: 1.0451   3rd Qu.:0.4171   3rd Qu.:6.736   3rd Qu.:0.5264  
 Max.   : 2.1932   Max.   :0.4747   Max.   :8.957   Max.   :0.6999  
 NA's   :500       NA's   :1000     NA's   :152     NA's   :152     
   info.pred      infoPC.pred           uk              lk         
 Min.   :4.648   Min.   :0.3632   Min.   :2.260   Min.   :-0.2914  
 1st Qu.:6.120   1st Qu.:0.4782   1st Qu.:2.471   1st Qu.: 0.1713  
 Median :6.599   Median :0.5156   Median :2.520   Median : 0.3164  
 Mean   :6.627   Mean   :0.5178   Mean   :2.519   Mean   : 0.3217  
 3rd Qu.:7.051   3rd Qu.:0.5510   3rd Qu.:2.573   3rd Qu.: 0.4534  
 Max.   :9.580   Max.   :0.7486   Max.   :2.747   Max.   : 1.0686  
 NA's   :1000    NA's   :1000     NA's   :1000    NA's   :1000     
   decision            reason            p.value_ML        lower_ML      
 Length:1500        Length:1500        Min.   :0.0000   Min.   :-1.0296  
 Class :character   Class :character   1st Qu.:0.0015   1st Qu.:-0.0894  
 Mode  :character   Mode  :character   Median :0.0080   Median : 0.1320  
                                       Mean   :0.0749   Mean   : 0.1076  
                                       3rd Qu.:0.0533   3rd Qu.: 0.2951  
                                       Max.   :0.9866   Max.   : 1.1637  
                                       NA's   :1000     NA's   :1000     
    upper_ML       p.value_MUE       lower_MUE         upper_MUE     
 Min.   :0.7043   Min.   :0.0000   Min.   :-1.0290   Min.   :0.6973  
 1st Qu.:1.2090   1st Qu.:0.0035   1st Qu.:-0.0856   1st Qu.:1.2024  
 Median :1.4319   Median :0.0079   Median : 0.0631   Median :1.4023  
 Mean   :1.5306   Mean   :0.0486   Mean   : 0.0694   Mean   :1.5265  
 3rd Qu.:1.8022   3rd Qu.:0.0290   3rd Qu.: 0.1870   3rd Qu.:1.8519  
 Max.   :2.9763   Max.   :0.7476   Max.   : 1.2999   Max.   :2.9714  
 NA's   :1000     NA's   :1000     NA's   :1000      NA's   :1000    
  estimate_MUE           ck          time.interim        seed      
 Min.   :-0.1656   Min.   :0.0825   Min.   :523.0   Min.   :  801  
 1st Qu.: 0.5684   1st Qu.:1.4063   1st Qu.:585.0   1st Qu.:26201  
 Median : 0.7714   Median :1.4571   Median :605.0   Median :51954  
 Mean   : 0.8100   Mean   :1.4140   Mean   :603.7   Mean   :50942  
 3rd Qu.: 1.0131   3rd Qu.:1.5005   3rd Qu.:624.0   3rd Qu.:75649  
 Max.   : 2.0700   Max.   :1.6685   Max.   :666.0   Max.   :99199  
 NA's   :1000      NA's   :652                                     
  nX1.interim     nX2.interim     nX3.interim    computation.time
 Min.   :146.0   Min.   :130.0   Min.   :120.0   Min.   :0.700   
 1st Qu.:147.0   1st Qu.:135.0   1st Qu.:125.0   1st Qu.:0.899   
 Median :148.0   Median :136.0   Median :127.0   Median :0.998   
 Mean   :148.5   Mean   :136.4   Mean   :126.9   Mean   :1.026   
 3rd Qu.:150.0   3rd Qu.:138.0   3rd Qu.:129.0   3rd Qu.:1.140   
 Max.   :154.0   Max.   :144.0   Max.   :133.0   Max.   :3.751   
                                                                 
> 
> #----------------------------------------------------------------------
> ### BATCH_simuMain.R ends here
> 
> proc.time()
   user  system elapsed 
259.049   0.413 270.397 
