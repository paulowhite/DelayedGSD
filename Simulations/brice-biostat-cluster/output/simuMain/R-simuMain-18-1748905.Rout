
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### BATCH_simuMain.R --- 
> #----------------------------------------------------------------------
> ## Author: Paul Blanche
> ## Created: Mar  5 2021 (10:56) 
> ## Version: 
> ## Last-Updated: jul  7 2022 (13:56) 
> ##           By: Brice Ozenne
> ##     Update #: 518
> #----------------------------------------------------------------------
> ## 
> ### Commentary: 
> ## 
> ### Change Log:
> #----------------------------------------------------------------------
> ## 
> ### Code:
> 
> ## ** BATCH loop
> ## cd /projects/biostat01/people/hpl802/DelayedGSD/
> ## for ITER in `seq 1 10`;
> ## do
> ## eval 'R CMD BATCH --vanilla "--args iter_sim='$ITER' n.iter_sim=10" BATCH_simuMain.R output/R-simuMain-'$ITER'.Rout &'
> ## done
> 
> ## [1] 1186669
> ## [2] 1186670
> ## [3] 1186671
> ## [4] 1186672
> ## [5] 1186673
> ## [6] 1186674
> ## [7] 1186675
> ## [8] 1186676
> ## [9] 1186677
> ## [10] 1186678
> 
> rm(list=ls())
>                                    # {{{ parameters
> ## * parameters
> name <- "ScenarioName" # To save the results
> method <- 1:2 # methods used to compute the boundaries
>                                         #---
> myseed <- 140786598
>                                         #--- to plan the trial ----
> NMC <- 250 # number of sequential simulations to run in parallel. Eg. with 250, then we can run 40 scripts in paralell to get N=10,000 runs in total.
> kMax <- 2  #max number of analyses (including final)
> alpha <- 0.025  #type I error (one sided)
> beta <- 0.2  #type II error
> informationRates <- c(0.5,1)  #planned  information rates
> rho_alpha <- 2  # rho parameter for alpha error spending function
> rho_beta <- 2  # rho parameter for beta error spending function
> ## deltaPower <- 0.75 # just to try another value when Id > Imax
> Id <- 0.55  #(expected) information rate at each decision analysis
> binding <- TRUE
>                                         #
>                                         #---- to generate data -----------
>                                         #
> block <- c(1,1,0,0) 
> allsd <- c(2.5,2.1,2.4) # sd, first from baseline measurement, then the two changes from baseline
> mean0 <- c(10,0,0) # mean placebo group (again, first is absolute value, then change from baseline)
> delta <- c(0,0.6,0.8) # treatment effect
> ar <- (0.86*2)*2 # orginial accrual rate from data from Corine is 0.86 per week, hence we multiply by 2 for by 14 days. As to low, we further multiply by 2
> cor011 <- -0.15 # ~ from data from Corine
> corij1 <- 0.68  # ~ from data from Corine
> cor0j1 <- -0.27  # ~ from data from Corine
> Miss11 <- 5/104 # miss both V1 and V2
> Miss12 <- 1/104 # miss V1 and but not V2
> Miss21 <- 6/104 # do not miss V1 and but miss V2
> Miss22 <- 92/104 # miss none
> PropForInterim <- 0.5 # Decide to have interim analysiz when PropForInterim % of all subjects have had the chance to have one follow-up measuement recorded in the data to be available for analysis.
> theDelta.t <- 1.50001 # time lag to process the data and make them ready to analyze after collecting them (unit is time between two follow-up visits)
> TimeFactor <- 14 ## number of days between two visits
>                                         #
>                                         #--- actually for both planing the trial  and generating data-----
>                                         #
>                                         #
> deltaPower <- abs(delta[3]) # effect (NOT Z-scale/unit, but outcome scale/unit!) that the study is powered for: should we choose ourselves or compute from other numbers above ???
> n <- ceiling(2*2*((allsd[3]/deltaPower)^2)*(qnorm(1-beta)-qnorm(alpha))^2) #104 with Corine's data # should we choose ourselves or compute from the above numbers ???
>                                         # inflate SS as required for interim
> 
>                                         # {{{ Set seeds for parallel computing and reproducibility
> ## * Seed
> args <- commandArgs(TRUE) ## BATCH MODE
> if(length(args)>0){
+     for (arg in args){
+         eval(parse(text=arg))
+     }
+ }else{ ## SLUMR
+     iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_ID"))
+     n.iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_COUNT"))
+ } ## interactive
> if(is.na(iter_sim)){iter_sim <- 1}
> if(is.na(n.iter_sim)){n.iter_sim <- 40}
> 
> set.seed(140786598)
> allseeds <- sample.int(n = 10*n.iter_sim*NMC, size = n.iter_sim*NMC, replace=FALSE) #x=1:(.Machine$integer.max) seems to be maximal possible
> # }}}
> 
> # {{{ set path to load and save and othe machine specific variables
> ## * path
> path <- "."
> path.res <- file.path(path,"Results","simuMain")
> if(dir.exists(path.res)==FALSE){
+     if(dir.exists(file.path(path,"Results"))==FALSE){
+     dir.create(file.path(path,"Results"))
+     }
+     dir.create(path.res)
+ }
> path.output <- file.path(path,"output","simuMain")
> if(dir.exists(path.output)==FALSE){
+     if(dir.exists(file.path(path,"output"))==FALSE){
+     dir.create(file.path(path,"output"))
+     }
+     dir.create(path.output)
+ }
> # }}}
> 
> 
> ## * libraries and functions
> library(DelayedGSD)
DelayedGSD version 0.0.3
> ## sourceDir <- function(path, trace = TRUE, ...) {
> ##     for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
> ##         if(trace) cat(nm,":")
> ##         source(file.path(path, nm), ...)
> ##         if(trace) cat("\n")
> ##     }
> ## }
> ## sourceDir(pathToLoad)
>     
> 
> ## * Compute inflation factor and sample size
> plannedB <- vector(mode = "list", length = 3)
> for(iMeth in method){ ## iMeth <- 1
+     plannedB[[iMeth]] <- CalcBoundaries(kMax=kMax,  
+                                         alpha=alpha, 
+                                         beta=beta,  
+                                         InfoR.i=informationRates,  
+                                         InfoR.d=c(Id,1),  
+                                         rho_alpha=rho_alpha,  
+                                         rho_beta=rho_beta,  
+                                         method=iMeth,  
+                                         cNotBelowFixedc=FALSE,
+                                         bindingFutility=binding,
+                                         delta=tail(delta,1))
+     ## summary(plannedB[[1]])
+     ## coef(plannedB[[iMeth]], type = "information")
+ }
Loading required namespace: gsDesign
Loading required package: mvtnorm
Loading required namespace: BB
> inflationFactor <- unlist(lapply(plannedB,function(iP){iP$planned$InflationFactor}))
> nGSD <- ceiling(n*inflationFactor)
> ##  plot(plannedB[[1]])
> 
> #
> # --- just to check---
> ## n
> ## InfoFixed <- ((qnorm(1-beta)-qnorm(alpha))/(deltaPower))^2
> ## InfoFixed
> ## n/(4*(allsd[3])^2)
> #---
> # }}}
> 
> 
> 
> 
> # {{{ technical details to loop
> RES <- NULL # initialize results to save
> allj <- ((iter_sim-1)*NMC + 1):(iter_sim*NMC) # indices of all iterations (replicates) for this job, accountng for the other jobs running in parallel
> # }}}
> 
> ## * Loop
> for(j in allj){ ## j <- 51 ## 5
+     startComp <- Sys.time()
+     myseedi <- allseeds[j]
+     # {{{ TRACE info (e.g. to check the Rout)
+     print(paste0("seed ",myseedi," for ","j=",which(j==allj)," out of ",NMC, " (i.e. j=",j," in [",(iter_sim-1)*NMC + 1,";",iter_sim*NMC,"], as job id is i=",iter_sim,")"))
+     # }}}
+     # {{{ Missing probabilities
+     MyMissProb <- matrix(c(Miss11,Miss12,Miss21,Miss22),ncol=2,nrow=2,byrow=TRUE) # to additionnally remove 1 more because some FASFL=N
+     colnames(MyMissProb) <- c("V2 missing","V2 not missing")
+     rownames(MyMissProb) <- c("V1 missing","V1 not missing")
+     # }}}
+ 
+                                         # {{{ generate data
+     ## ** simulate
+     res <- GenData(n=n, 
+                    N.fw=2,
+                    rand.block=block,
+                    allsd=allsd,
+                    mean0=mean0,
+                    delta=delta,
+                    ar=ar,
+                    cor.01.1=cor011,
+                    cor.ij.1=corij1,
+                    cor.0j.1=cor0j1,
+                    seed=myseedi,
+                    MissProb=MyMissProb,
+                    DigitsOutcome=2,
+                    TimeFactor=TimeFactor,
+                    DigitsTime=0
+                    )
+     d <- res$d
+     ## head(d,n=20)
+                                         # }}}
+                                         # {{{ reformat data like those of Corine
+     ## Make data long format
+     ## dd <- FormatAsCase(d)
+     ## head(dd)
+     ## summary(dd)
+                                         # }}}
+    
+                                         # {{{ make data available at interim
+                                         # Here we stop inclusion data collection for the interim analysis as soon as
+                                         # half of the participants have completed (or had the opportunity to complete) the follow-up 
+     thet <- d$t3[ceiling(n*PropForInterim)]
+     di <- SelectData(d,t=thet)
+     ## ddi <- FormatAsCase(di) # needed ????
+     ## head(d[d$id==52,])
+                                         # }}}
+     ## {{{ analyze data at at interim
+     ## ** interim
+     lmmI <- analyzeData(di, ddf = "nlme", data.decision = sum(d$t1 <= thet + theDelta.t*TimeFactor), getinfo = TRUE, trace = TRUE)
+     ## lmmI <- analyzeData(di, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     currentGSD <- vector(mode = "list", length = 3)
+     out.interim <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+ 
+         currentGSD[[iMeth]] <- update(plannedB[[iMeth]], delta = lmmI, trace = FALSE)
+ 
+         iConfint.interim <- confint(currentGSD[[iMeth]])
+         iInfo.interim <- coef(currentGSD[[iMeth]], type = "information")
+         iBoundary.interim <- coef(currentGSD[[iMeth]], type = "boundary")
+         iDecision.interim <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+         out.interim[[iMeth]] <-  data.frame(statistic = iConfint.interim[1,"statistic"],
+                                             estimate_ML = iConfint.interim[1,"estimate"],
+                                             se_ML = iConfint.interim[1,"se"],
+                                             info = iInfo.interim[1,"Interim"],
+                                             infoPC = iInfo.interim[1,"Interim.pc"],
+                                             info.pred = iInfo.interim[1,"Decision"],
+                                             infoPC.pred = iInfo.interim[1,"Decision.pc"],
+                                             uk = iBoundary.interim[1,"Ebound"],
+                                             lk = iBoundary.interim[1,"Fbound"],
+                                             decision = iDecision.interim["decision","stage 1"],
+                                             reason = iDecision.interim["reason.interim","stage 1"])
+     }
+     ## currentGSD[[1]]
+     ## plot(currentGSD[[1]])
+ 
+     ## ** decision
+     dDecision <- d[which(d$t1 <= thet + theDelta.t*TimeFactor),]
+     lmmD <- analyzeData(dDecision, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+     
+     out.decision <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+           
+         if(out.interim[[iMeth]]$decision == "stop"){
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, trace = FALSE)
+             ## plot(currentGSD[[iMeth]])
+ 
+             iConfint.decision <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.decision  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = iConfint.decision[1,"statistic"],
+                                                 p.value_ML = iConfint.decision[iConfint.decision$method == "ML","p.value"],
+                                                 lower_ML = iConfint.decision[iConfint.decision$method == "ML","lower"],
+                                                 upper_ML = iConfint.decision[iConfint.decision$method == "ML","upper"],
+                                                 estimate_ML = iConfint.decision[iConfint.decision$method == "ML","estimate"],
+                                                 p.value_MUE = iConfint.decision[iConfint.decision$method == "MUE","p.value"],
+                                                 lower_MUE = iConfint.decision[iConfint.decision$method == "MUE","lower"],
+                                                 upper_MUE = iConfint.decision[iConfint.decision$method == "MUE","upper"],
+                                                 estimate_MUE = iConfint.decision[iConfint.decision$method == "MUE","estimate"],
+                                                 info = iInfo.decision[1,"Interim"],
+                                                 infoPC = iInfo.decision[1,"Interim.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = unname(iDecision.decision["decision","stage 2"])
+                                                 )
+ 
+         }else{
+             ## update information
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, k = 1, type.k = "decision", trace = FALSE)
+ 
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = NA,
+                                                 p.value_ML = NA,
+                                                 lower_ML = NA,
+                                                 upper_ML = NA,
+                                                 estimate_ML = NA,
+                                                 p.value_MUE = NA,
+                                                 lower_MUE = NA,
+                                                 upper_MUE = NA,
+                                                 estimate_MUE = NA,
+                                                 info = iInfo.decision[1,"Decision"],
+                                                 infoPC = iInfo.decision[1,"Decision.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = NA)
+         }
+     }
+                                         # }}}
+                                         # {{{ Analyze data at decision
+ 
+     ## ** finale
+     dFinal <- d
+     lmmF <- analyzeData(dFinal, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     out.final <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+         if(out.interim[[iMeth]]$decision == "stop"){
+             out.final[[iMeth]] <- data.frame(statistic = NA,
+                                              p.value_ML = NA,
+                                              lower_ML = NA,
+                                              upper_ML = NA,
+                                              estimate_ML = NA,
+                                              p.value_MUE = NA,
+                                              lower_MUE = NA,
+                                              upper_MUE = NA,
+                                              estimate_MUE = NA,
+                                              info = NA,
+                                              infoPC = NA,
+                                              ck = NA,
+                                              decision = NA)
+ 
+         }else{
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmF, trace = FALSE)
+ 
+             ## plot(test)
+             ## summary(test)
+             iConfint.final <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.final <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.final <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.final  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.final[[iMeth]] <- data.frame(statistic = iConfint.final[1,"statistic"],
+                                              p.value_ML = iConfint.final[iConfint.final$method == "ML","p.value"],
+                                              lower_ML = iConfint.final[iConfint.final$method == "ML","lower"],
+                                              upper_ML = iConfint.final[iConfint.final$method == "ML","upper"],
+                                              estimate_ML = iConfint.final[iConfint.final$method == "ML","estimate"],
+                                              p.value_MUE = iConfint.final[iConfint.final$method == "MUE","p.value"],
+                                              lower_MUE = iConfint.final[iConfint.final$method == "MUE","lower"],
+                                              upper_MUE = iConfint.final[iConfint.final$method == "MUE","upper"],
+                                              estimate_MUE = iConfint.final[iConfint.final$method == "MUE","estimate"],
+                                              info = iInfo.final[1,"Interim"],
+                                              infoPC = iInfo.final[1,"Interim.pc"],
+                                              ck = iBoundary.final[1,"Cbound"],
+                                              decision = unname(coef(currentGSD[[iMeth]], type = "decision")["decision","stage 2"])
+                                              )
+         }
+     }
+                                         # }}}
+ 
+     stopComp <- Sys.time()
+                                         # {{{ Save results
+ 
+     outMerge <- do.call(rbind,lapply(method, function(iMeth){
+         iNames <- unique(c(names(out.interim[[iMeth]]),names(out.decision[[iMeth]]),names(out.final[[iMeth]])))
+         iMerge <- data.frame(matrix(NA, ncol = length(iNames)+3, nrow = 3, dimnames = list(NULL, c("method", "stage", "type", iNames))))
+         iMerge[1,c("method","stage","type",names(out.interim[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "interim", out.interim[[iMeth]]) 
+         iMerge[2,c("method","stage","type",names(out.decision[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "decision", out.decision[[iMeth]]) 
+         iMerge[3,c("method","stage","type",names(out.final[[iMeth]]))] <- data.frame(method = iMeth, stage = 2, type = "final", out.final[[iMeth]])
+         return(iMerge)
+     }))
+ 
+     ## outMerge[outMerge$method==3,]
+ 
+     out <- cbind(
+         ## results
+         outMerge,
+         ## simulation details
+         time.interim = thet,
+         seed=myseedi,             
+         nX1.interim = sum(!is.na(di$X1)),
+         nX2.interim = sum(!is.na(di$X2)),
+         nX3.interim = sum(!is.na(di$X3)),
+         ## computation time
+         computation.time=as.double(round(difftime(stopComp,startComp,units="secs"),3))
+     )
+     ## names(out) <- myColNames
+     RES <- rbind(RES,out)
+     save(RES,file=paste0(path.res,name,"(tempo)-",iter_sim,".rda"))
+                                         # }}}
+ }
[1] "seed 3510 for j=1 out of 250 (i.e. j=4251 in [4251;4500], as job id is i=18)"
Loading required namespace: nlme
[1] "seed 35306 for j=2 out of 250 (i.e. j=4252 in [4251;4500], as job id is i=18)"
[1] "seed 62933 for j=3 out of 250 (i.e. j=4253 in [4251;4500], as job id is i=18)"
[1] "seed 56165 for j=4 out of 250 (i.e. j=4254 in [4251;4500], as job id is i=18)"
[1] "seed 67184 for j=5 out of 250 (i.e. j=4255 in [4251;4500], as job id is i=18)"
[1] "seed 20434 for j=6 out of 250 (i.e. j=4256 in [4251;4500], as job id is i=18)"
[1] "seed 7163 for j=7 out of 250 (i.e. j=4257 in [4251;4500], as job id is i=18)"
[1] "seed 95917 for j=8 out of 250 (i.e. j=4258 in [4251;4500], as job id is i=18)"
[1] "seed 99319 for j=9 out of 250 (i.e. j=4259 in [4251;4500], as job id is i=18)"
[1] "seed 2225 for j=10 out of 250 (i.e. j=4260 in [4251;4500], as job id is i=18)"
[1] "seed 75174 for j=11 out of 250 (i.e. j=4261 in [4251;4500], as job id is i=18)"
[1] "seed 44129 for j=12 out of 250 (i.e. j=4262 in [4251;4500], as job id is i=18)"
[1] "seed 50857 for j=13 out of 250 (i.e. j=4263 in [4251;4500], as job id is i=18)"
[1] "seed 39038 for j=14 out of 250 (i.e. j=4264 in [4251;4500], as job id is i=18)"
[1] "seed 8556 for j=15 out of 250 (i.e. j=4265 in [4251;4500], as job id is i=18)"
[1] "seed 80958 for j=16 out of 250 (i.e. j=4266 in [4251;4500], as job id is i=18)"
[1] "seed 56184 for j=17 out of 250 (i.e. j=4267 in [4251;4500], as job id is i=18)"
[1] "seed 7136 for j=18 out of 250 (i.e. j=4268 in [4251;4500], as job id is i=18)"
[1] "seed 16741 for j=19 out of 250 (i.e. j=4269 in [4251;4500], as job id is i=18)"
[1] "seed 53373 for j=20 out of 250 (i.e. j=4270 in [4251;4500], as job id is i=18)"
[1] "seed 23929 for j=21 out of 250 (i.e. j=4271 in [4251;4500], as job id is i=18)"
[1] "seed 10570 for j=22 out of 250 (i.e. j=4272 in [4251;4500], as job id is i=18)"
[1] "seed 62932 for j=23 out of 250 (i.e. j=4273 in [4251;4500], as job id is i=18)"
[1] "seed 89811 for j=24 out of 250 (i.e. j=4274 in [4251;4500], as job id is i=18)"
[1] "seed 5366 for j=25 out of 250 (i.e. j=4275 in [4251;4500], as job id is i=18)"
[1] "seed 23141 for j=26 out of 250 (i.e. j=4276 in [4251;4500], as job id is i=18)"
[1] "seed 44766 for j=27 out of 250 (i.e. j=4277 in [4251;4500], as job id is i=18)"
[1] "seed 97742 for j=28 out of 250 (i.e. j=4278 in [4251;4500], as job id is i=18)"
[1] "seed 63269 for j=29 out of 250 (i.e. j=4279 in [4251;4500], as job id is i=18)"
[1] "seed 37255 for j=30 out of 250 (i.e. j=4280 in [4251;4500], as job id is i=18)"
[1] "seed 63022 for j=31 out of 250 (i.e. j=4281 in [4251;4500], as job id is i=18)"
[1] "seed 66811 for j=32 out of 250 (i.e. j=4282 in [4251;4500], as job id is i=18)"
[1] "seed 68520 for j=33 out of 250 (i.e. j=4283 in [4251;4500], as job id is i=18)"
[1] "seed 1577 for j=34 out of 250 (i.e. j=4284 in [4251;4500], as job id is i=18)"
[1] "seed 60986 for j=35 out of 250 (i.e. j=4285 in [4251;4500], as job id is i=18)"
[1] "seed 390 for j=36 out of 250 (i.e. j=4286 in [4251;4500], as job id is i=18)"
[1] "seed 87347 for j=37 out of 250 (i.e. j=4287 in [4251;4500], as job id is i=18)"
[1] "seed 79264 for j=38 out of 250 (i.e. j=4288 in [4251;4500], as job id is i=18)"
[1] "seed 49952 for j=39 out of 250 (i.e. j=4289 in [4251;4500], as job id is i=18)"
[1] "seed 70425 for j=40 out of 250 (i.e. j=4290 in [4251;4500], as job id is i=18)"
[1] "seed 98121 for j=41 out of 250 (i.e. j=4291 in [4251;4500], as job id is i=18)"
[1] "seed 9511 for j=42 out of 250 (i.e. j=4292 in [4251;4500], as job id is i=18)"
[1] "seed 69546 for j=43 out of 250 (i.e. j=4293 in [4251;4500], as job id is i=18)"
[1] "seed 30768 for j=44 out of 250 (i.e. j=4294 in [4251;4500], as job id is i=18)"
[1] "seed 31773 for j=45 out of 250 (i.e. j=4295 in [4251;4500], as job id is i=18)"
[1] "seed 30535 for j=46 out of 250 (i.e. j=4296 in [4251;4500], as job id is i=18)"
[1] "seed 53774 for j=47 out of 250 (i.e. j=4297 in [4251;4500], as job id is i=18)"
[1] "seed 55157 for j=48 out of 250 (i.e. j=4298 in [4251;4500], as job id is i=18)"
[1] "seed 71944 for j=49 out of 250 (i.e. j=4299 in [4251;4500], as job id is i=18)"
[1] "seed 22936 for j=50 out of 250 (i.e. j=4300 in [4251;4500], as job id is i=18)"
[1] "seed 78812 for j=51 out of 250 (i.e. j=4301 in [4251;4500], as job id is i=18)"
[1] "seed 67181 for j=52 out of 250 (i.e. j=4302 in [4251;4500], as job id is i=18)"
[1] "seed 20561 for j=53 out of 250 (i.e. j=4303 in [4251;4500], as job id is i=18)"
[1] "seed 40516 for j=54 out of 250 (i.e. j=4304 in [4251;4500], as job id is i=18)"
[1] "seed 26979 for j=55 out of 250 (i.e. j=4305 in [4251;4500], as job id is i=18)"
[1] "seed 71031 for j=56 out of 250 (i.e. j=4306 in [4251;4500], as job id is i=18)"
[1] "seed 38130 for j=57 out of 250 (i.e. j=4307 in [4251;4500], as job id is i=18)"
[1] "seed 11643 for j=58 out of 250 (i.e. j=4308 in [4251;4500], as job id is i=18)"
[1] "seed 65916 for j=59 out of 250 (i.e. j=4309 in [4251;4500], as job id is i=18)"
[1] "seed 47358 for j=60 out of 250 (i.e. j=4310 in [4251;4500], as job id is i=18)"
[1] "seed 52242 for j=61 out of 250 (i.e. j=4311 in [4251;4500], as job id is i=18)"
[1] "seed 10352 for j=62 out of 250 (i.e. j=4312 in [4251;4500], as job id is i=18)"
[1] "seed 6590 for j=63 out of 250 (i.e. j=4313 in [4251;4500], as job id is i=18)"
[1] "seed 50684 for j=64 out of 250 (i.e. j=4314 in [4251;4500], as job id is i=18)"
[1] "seed 23236 for j=65 out of 250 (i.e. j=4315 in [4251;4500], as job id is i=18)"
[1] "seed 10124 for j=66 out of 250 (i.e. j=4316 in [4251;4500], as job id is i=18)"
[1] "seed 83192 for j=67 out of 250 (i.e. j=4317 in [4251;4500], as job id is i=18)"
[1] "seed 74446 for j=68 out of 250 (i.e. j=4318 in [4251;4500], as job id is i=18)"
[1] "seed 86788 for j=69 out of 250 (i.e. j=4319 in [4251;4500], as job id is i=18)"
[1] "seed 82058 for j=70 out of 250 (i.e. j=4320 in [4251;4500], as job id is i=18)"
[1] "seed 77917 for j=71 out of 250 (i.e. j=4321 in [4251;4500], as job id is i=18)"
[1] "seed 9867 for j=72 out of 250 (i.e. j=4322 in [4251;4500], as job id is i=18)"
[1] "seed 68114 for j=73 out of 250 (i.e. j=4323 in [4251;4500], as job id is i=18)"
[1] "seed 72072 for j=74 out of 250 (i.e. j=4324 in [4251;4500], as job id is i=18)"
[1] "seed 88805 for j=75 out of 250 (i.e. j=4325 in [4251;4500], as job id is i=18)"
[1] "seed 80435 for j=76 out of 250 (i.e. j=4326 in [4251;4500], as job id is i=18)"
[1] "seed 93764 for j=77 out of 250 (i.e. j=4327 in [4251;4500], as job id is i=18)"
[1] "seed 72647 for j=78 out of 250 (i.e. j=4328 in [4251;4500], as job id is i=18)"
[1] "seed 83842 for j=79 out of 250 (i.e. j=4329 in [4251;4500], as job id is i=18)"
[1] "seed 42620 for j=80 out of 250 (i.e. j=4330 in [4251;4500], as job id is i=18)"
[1] "seed 79039 for j=81 out of 250 (i.e. j=4331 in [4251;4500], as job id is i=18)"
[1] "seed 4946 for j=82 out of 250 (i.e. j=4332 in [4251;4500], as job id is i=18)"
[1] "seed 97050 for j=83 out of 250 (i.e. j=4333 in [4251;4500], as job id is i=18)"
[1] "seed 64889 for j=84 out of 250 (i.e. j=4334 in [4251;4500], as job id is i=18)"
[1] "seed 21441 for j=85 out of 250 (i.e. j=4335 in [4251;4500], as job id is i=18)"
[1] "seed 12888 for j=86 out of 250 (i.e. j=4336 in [4251;4500], as job id is i=18)"
[1] "seed 1385 for j=87 out of 250 (i.e. j=4337 in [4251;4500], as job id is i=18)"
[1] "seed 60514 for j=88 out of 250 (i.e. j=4338 in [4251;4500], as job id is i=18)"
[1] "seed 41160 for j=89 out of 250 (i.e. j=4339 in [4251;4500], as job id is i=18)"
[1] "seed 72964 for j=90 out of 250 (i.e. j=4340 in [4251;4500], as job id is i=18)"
[1] "seed 32239 for j=91 out of 250 (i.e. j=4341 in [4251;4500], as job id is i=18)"
[1] "seed 92108 for j=92 out of 250 (i.e. j=4342 in [4251;4500], as job id is i=18)"
[1] "seed 46619 for j=93 out of 250 (i.e. j=4343 in [4251;4500], as job id is i=18)"
[1] "seed 15871 for j=94 out of 250 (i.e. j=4344 in [4251;4500], as job id is i=18)"
[1] "seed 53603 for j=95 out of 250 (i.e. j=4345 in [4251;4500], as job id is i=18)"
[1] "seed 31761 for j=96 out of 250 (i.e. j=4346 in [4251;4500], as job id is i=18)"
[1] "seed 62499 for j=97 out of 250 (i.e. j=4347 in [4251;4500], as job id is i=18)"
[1] "seed 3905 for j=98 out of 250 (i.e. j=4348 in [4251;4500], as job id is i=18)"
[1] "seed 61199 for j=99 out of 250 (i.e. j=4349 in [4251;4500], as job id is i=18)"
[1] "seed 98667 for j=100 out of 250 (i.e. j=4350 in [4251;4500], as job id is i=18)"
[1] "seed 24678 for j=101 out of 250 (i.e. j=4351 in [4251;4500], as job id is i=18)"
[1] "seed 69085 for j=102 out of 250 (i.e. j=4352 in [4251;4500], as job id is i=18)"
[1] "seed 38661 for j=103 out of 250 (i.e. j=4353 in [4251;4500], as job id is i=18)"
[1] "seed 97008 for j=104 out of 250 (i.e. j=4354 in [4251;4500], as job id is i=18)"
[1] "seed 94490 for j=105 out of 250 (i.e. j=4355 in [4251;4500], as job id is i=18)"
[1] "seed 13348 for j=106 out of 250 (i.e. j=4356 in [4251;4500], as job id is i=18)"
[1] "seed 36147 for j=107 out of 250 (i.e. j=4357 in [4251;4500], as job id is i=18)"
[1] "seed 28521 for j=108 out of 250 (i.e. j=4358 in [4251;4500], as job id is i=18)"
[1] "seed 15461 for j=109 out of 250 (i.e. j=4359 in [4251;4500], as job id is i=18)"
[1] "seed 2563 for j=110 out of 250 (i.e. j=4360 in [4251;4500], as job id is i=18)"
[1] "seed 5240 for j=111 out of 250 (i.e. j=4361 in [4251;4500], as job id is i=18)"
[1] "seed 15883 for j=112 out of 250 (i.e. j=4362 in [4251;4500], as job id is i=18)"
[1] "seed 55007 for j=113 out of 250 (i.e. j=4363 in [4251;4500], as job id is i=18)"
[1] "seed 34129 for j=114 out of 250 (i.e. j=4364 in [4251;4500], as job id is i=18)"
[1] "seed 15034 for j=115 out of 250 (i.e. j=4365 in [4251;4500], as job id is i=18)"
[1] "seed 95191 for j=116 out of 250 (i.e. j=4366 in [4251;4500], as job id is i=18)"
[1] "seed 74361 for j=117 out of 250 (i.e. j=4367 in [4251;4500], as job id is i=18)"
[1] "seed 31920 for j=118 out of 250 (i.e. j=4368 in [4251;4500], as job id is i=18)"
[1] "seed 65024 for j=119 out of 250 (i.e. j=4369 in [4251;4500], as job id is i=18)"
[1] "seed 78370 for j=120 out of 250 (i.e. j=4370 in [4251;4500], as job id is i=18)"
[1] "seed 47320 for j=121 out of 250 (i.e. j=4371 in [4251;4500], as job id is i=18)"
[1] "seed 36594 for j=122 out of 250 (i.e. j=4372 in [4251;4500], as job id is i=18)"
[1] "seed 7134 for j=123 out of 250 (i.e. j=4373 in [4251;4500], as job id is i=18)"
[1] "seed 66511 for j=124 out of 250 (i.e. j=4374 in [4251;4500], as job id is i=18)"
[1] "seed 14696 for j=125 out of 250 (i.e. j=4375 in [4251;4500], as job id is i=18)"
[1] "seed 65487 for j=126 out of 250 (i.e. j=4376 in [4251;4500], as job id is i=18)"
[1] "seed 81960 for j=127 out of 250 (i.e. j=4377 in [4251;4500], as job id is i=18)"
[1] "seed 76801 for j=128 out of 250 (i.e. j=4378 in [4251;4500], as job id is i=18)"
[1] "seed 29641 for j=129 out of 250 (i.e. j=4379 in [4251;4500], as job id is i=18)"
[1] "seed 8899 for j=130 out of 250 (i.e. j=4380 in [4251;4500], as job id is i=18)"
[1] "seed 8516 for j=131 out of 250 (i.e. j=4381 in [4251;4500], as job id is i=18)"
[1] "seed 64031 for j=132 out of 250 (i.e. j=4382 in [4251;4500], as job id is i=18)"
[1] "seed 7517 for j=133 out of 250 (i.e. j=4383 in [4251;4500], as job id is i=18)"
[1] "seed 47526 for j=134 out of 250 (i.e. j=4384 in [4251;4500], as job id is i=18)"
[1] "seed 39317 for j=135 out of 250 (i.e. j=4385 in [4251;4500], as job id is i=18)"
[1] "seed 13602 for j=136 out of 250 (i.e. j=4386 in [4251;4500], as job id is i=18)"
[1] "seed 56920 for j=137 out of 250 (i.e. j=4387 in [4251;4500], as job id is i=18)"
[1] "seed 15383 for j=138 out of 250 (i.e. j=4388 in [4251;4500], as job id is i=18)"
[1] "seed 77511 for j=139 out of 250 (i.e. j=4389 in [4251;4500], as job id is i=18)"
[1] "seed 15790 for j=140 out of 250 (i.e. j=4390 in [4251;4500], as job id is i=18)"
[1] "seed 84989 for j=141 out of 250 (i.e. j=4391 in [4251;4500], as job id is i=18)"
[1] "seed 52859 for j=142 out of 250 (i.e. j=4392 in [4251;4500], as job id is i=18)"
[1] "seed 97553 for j=143 out of 250 (i.e. j=4393 in [4251;4500], as job id is i=18)"
[1] "seed 72394 for j=144 out of 250 (i.e. j=4394 in [4251;4500], as job id is i=18)"
[1] "seed 66839 for j=145 out of 250 (i.e. j=4395 in [4251;4500], as job id is i=18)"
[1] "seed 29942 for j=146 out of 250 (i.e. j=4396 in [4251;4500], as job id is i=18)"
[1] "seed 4478 for j=147 out of 250 (i.e. j=4397 in [4251;4500], as job id is i=18)"
[1] "seed 97833 for j=148 out of 250 (i.e. j=4398 in [4251;4500], as job id is i=18)"
[1] "seed 40450 for j=149 out of 250 (i.e. j=4399 in [4251;4500], as job id is i=18)"
[1] "seed 32037 for j=150 out of 250 (i.e. j=4400 in [4251;4500], as job id is i=18)"
[1] "seed 88699 for j=151 out of 250 (i.e. j=4401 in [4251;4500], as job id is i=18)"
[1] "seed 43896 for j=152 out of 250 (i.e. j=4402 in [4251;4500], as job id is i=18)"
[1] "seed 57672 for j=153 out of 250 (i.e. j=4403 in [4251;4500], as job id is i=18)"
[1] "seed 61367 for j=154 out of 250 (i.e. j=4404 in [4251;4500], as job id is i=18)"
[1] "seed 90811 for j=155 out of 250 (i.e. j=4405 in [4251;4500], as job id is i=18)"
[1] "seed 23892 for j=156 out of 250 (i.e. j=4406 in [4251;4500], as job id is i=18)"
[1] "seed 64089 for j=157 out of 250 (i.e. j=4407 in [4251;4500], as job id is i=18)"
[1] "seed 12603 for j=158 out of 250 (i.e. j=4408 in [4251;4500], as job id is i=18)"
[1] "seed 17219 for j=159 out of 250 (i.e. j=4409 in [4251;4500], as job id is i=18)"
[1] "seed 32558 for j=160 out of 250 (i.e. j=4410 in [4251;4500], as job id is i=18)"
[1] "seed 95671 for j=161 out of 250 (i.e. j=4411 in [4251;4500], as job id is i=18)"
[1] "seed 84862 for j=162 out of 250 (i.e. j=4412 in [4251;4500], as job id is i=18)"
[1] "seed 78451 for j=163 out of 250 (i.e. j=4413 in [4251;4500], as job id is i=18)"
[1] "seed 61953 for j=164 out of 250 (i.e. j=4414 in [4251;4500], as job id is i=18)"
[1] "seed 90559 for j=165 out of 250 (i.e. j=4415 in [4251;4500], as job id is i=18)"
[1] "seed 16315 for j=166 out of 250 (i.e. j=4416 in [4251;4500], as job id is i=18)"
[1] "seed 35869 for j=167 out of 250 (i.e. j=4417 in [4251;4500], as job id is i=18)"
[1] "seed 28378 for j=168 out of 250 (i.e. j=4418 in [4251;4500], as job id is i=18)"
[1] "seed 83912 for j=169 out of 250 (i.e. j=4419 in [4251;4500], as job id is i=18)"
[1] "seed 85236 for j=170 out of 250 (i.e. j=4420 in [4251;4500], as job id is i=18)"
[1] "seed 14518 for j=171 out of 250 (i.e. j=4421 in [4251;4500], as job id is i=18)"
[1] "seed 25109 for j=172 out of 250 (i.e. j=4422 in [4251;4500], as job id is i=18)"
[1] "seed 91385 for j=173 out of 250 (i.e. j=4423 in [4251;4500], as job id is i=18)"
[1] "seed 94945 for j=174 out of 250 (i.e. j=4424 in [4251;4500], as job id is i=18)"
[1] "seed 4879 for j=175 out of 250 (i.e. j=4425 in [4251;4500], as job id is i=18)"
[1] "seed 8069 for j=176 out of 250 (i.e. j=4426 in [4251;4500], as job id is i=18)"
[1] "seed 79214 for j=177 out of 250 (i.e. j=4427 in [4251;4500], as job id is i=18)"
[1] "seed 98132 for j=178 out of 250 (i.e. j=4428 in [4251;4500], as job id is i=18)"
[1] "seed 74571 for j=179 out of 250 (i.e. j=4429 in [4251;4500], as job id is i=18)"
[1] "seed 31913 for j=180 out of 250 (i.e. j=4430 in [4251;4500], as job id is i=18)"
[1] "seed 99710 for j=181 out of 250 (i.e. j=4431 in [4251;4500], as job id is i=18)"
[1] "seed 12186 for j=182 out of 250 (i.e. j=4432 in [4251;4500], as job id is i=18)"
[1] "seed 648 for j=183 out of 250 (i.e. j=4433 in [4251;4500], as job id is i=18)"
[1] "seed 94320 for j=184 out of 250 (i.e. j=4434 in [4251;4500], as job id is i=18)"
[1] "seed 12993 for j=185 out of 250 (i.e. j=4435 in [4251;4500], as job id is i=18)"
[1] "seed 26003 for j=186 out of 250 (i.e. j=4436 in [4251;4500], as job id is i=18)"
[1] "seed 53056 for j=187 out of 250 (i.e. j=4437 in [4251;4500], as job id is i=18)"
[1] "seed 6168 for j=188 out of 250 (i.e. j=4438 in [4251;4500], as job id is i=18)"
[1] "seed 49485 for j=189 out of 250 (i.e. j=4439 in [4251;4500], as job id is i=18)"
[1] "seed 5371 for j=190 out of 250 (i.e. j=4440 in [4251;4500], as job id is i=18)"
[1] "seed 63557 for j=191 out of 250 (i.e. j=4441 in [4251;4500], as job id is i=18)"
[1] "seed 87854 for j=192 out of 250 (i.e. j=4442 in [4251;4500], as job id is i=18)"
[1] "seed 69396 for j=193 out of 250 (i.e. j=4443 in [4251;4500], as job id is i=18)"
[1] "seed 22413 for j=194 out of 250 (i.e. j=4444 in [4251;4500], as job id is i=18)"
[1] "seed 39994 for j=195 out of 250 (i.e. j=4445 in [4251;4500], as job id is i=18)"
[1] "seed 42914 for j=196 out of 250 (i.e. j=4446 in [4251;4500], as job id is i=18)"
[1] "seed 51379 for j=197 out of 250 (i.e. j=4447 in [4251;4500], as job id is i=18)"
[1] "seed 50879 for j=198 out of 250 (i.e. j=4448 in [4251;4500], as job id is i=18)"
[1] "seed 5660 for j=199 out of 250 (i.e. j=4449 in [4251;4500], as job id is i=18)"
[1] "seed 76493 for j=200 out of 250 (i.e. j=4450 in [4251;4500], as job id is i=18)"
[1] "seed 2776 for j=201 out of 250 (i.e. j=4451 in [4251;4500], as job id is i=18)"
[1] "seed 76040 for j=202 out of 250 (i.e. j=4452 in [4251;4500], as job id is i=18)"
[1] "seed 5047 for j=203 out of 250 (i.e. j=4453 in [4251;4500], as job id is i=18)"
[1] "seed 41170 for j=204 out of 250 (i.e. j=4454 in [4251;4500], as job id is i=18)"
[1] "seed 31984 for j=205 out of 250 (i.e. j=4455 in [4251;4500], as job id is i=18)"
[1] "seed 70437 for j=206 out of 250 (i.e. j=4456 in [4251;4500], as job id is i=18)"
[1] "seed 38680 for j=207 out of 250 (i.e. j=4457 in [4251;4500], as job id is i=18)"
[1] "seed 26268 for j=208 out of 250 (i.e. j=4458 in [4251;4500], as job id is i=18)"
[1] "seed 49777 for j=209 out of 250 (i.e. j=4459 in [4251;4500], as job id is i=18)"
[1] "seed 80100 for j=210 out of 250 (i.e. j=4460 in [4251;4500], as job id is i=18)"
[1] "seed 48716 for j=211 out of 250 (i.e. j=4461 in [4251;4500], as job id is i=18)"
[1] "seed 87185 for j=212 out of 250 (i.e. j=4462 in [4251;4500], as job id is i=18)"
[1] "seed 63940 for j=213 out of 250 (i.e. j=4463 in [4251;4500], as job id is i=18)"
[1] "seed 28577 for j=214 out of 250 (i.e. j=4464 in [4251;4500], as job id is i=18)"
[1] "seed 80140 for j=215 out of 250 (i.e. j=4465 in [4251;4500], as job id is i=18)"
[1] "seed 52749 for j=216 out of 250 (i.e. j=4466 in [4251;4500], as job id is i=18)"
[1] "seed 8977 for j=217 out of 250 (i.e. j=4467 in [4251;4500], as job id is i=18)"
[1] "seed 15812 for j=218 out of 250 (i.e. j=4468 in [4251;4500], as job id is i=18)"
[1] "seed 44379 for j=219 out of 250 (i.e. j=4469 in [4251;4500], as job id is i=18)"
[1] "seed 13810 for j=220 out of 250 (i.e. j=4470 in [4251;4500], as job id is i=18)"
[1] "seed 94113 for j=221 out of 250 (i.e. j=4471 in [4251;4500], as job id is i=18)"
[1] "seed 28336 for j=222 out of 250 (i.e. j=4472 in [4251;4500], as job id is i=18)"
[1] "seed 74675 for j=223 out of 250 (i.e. j=4473 in [4251;4500], as job id is i=18)"
[1] "seed 38593 for j=224 out of 250 (i.e. j=4474 in [4251;4500], as job id is i=18)"
[1] "seed 47061 for j=225 out of 250 (i.e. j=4475 in [4251;4500], as job id is i=18)"
[1] "seed 52294 for j=226 out of 250 (i.e. j=4476 in [4251;4500], as job id is i=18)"
[1] "seed 89938 for j=227 out of 250 (i.e. j=4477 in [4251;4500], as job id is i=18)"
[1] "seed 95141 for j=228 out of 250 (i.e. j=4478 in [4251;4500], as job id is i=18)"
[1] "seed 53672 for j=229 out of 250 (i.e. j=4479 in [4251;4500], as job id is i=18)"
[1] "seed 41478 for j=230 out of 250 (i.e. j=4480 in [4251;4500], as job id is i=18)"
[1] "seed 53209 for j=231 out of 250 (i.e. j=4481 in [4251;4500], as job id is i=18)"
[1] "seed 75895 for j=232 out of 250 (i.e. j=4482 in [4251;4500], as job id is i=18)"
[1] "seed 11345 for j=233 out of 250 (i.e. j=4483 in [4251;4500], as job id is i=18)"
[1] "seed 75792 for j=234 out of 250 (i.e. j=4484 in [4251;4500], as job id is i=18)"
[1] "seed 39787 for j=235 out of 250 (i.e. j=4485 in [4251;4500], as job id is i=18)"
[1] "seed 35961 for j=236 out of 250 (i.e. j=4486 in [4251;4500], as job id is i=18)"
[1] "seed 10647 for j=237 out of 250 (i.e. j=4487 in [4251;4500], as job id is i=18)"
[1] "seed 24802 for j=238 out of 250 (i.e. j=4488 in [4251;4500], as job id is i=18)"
[1] "seed 25803 for j=239 out of 250 (i.e. j=4489 in [4251;4500], as job id is i=18)"
[1] "seed 32589 for j=240 out of 250 (i.e. j=4490 in [4251;4500], as job id is i=18)"
[1] "seed 92255 for j=241 out of 250 (i.e. j=4491 in [4251;4500], as job id is i=18)"
[1] "seed 76689 for j=242 out of 250 (i.e. j=4492 in [4251;4500], as job id is i=18)"
[1] "seed 67958 for j=243 out of 250 (i.e. j=4493 in [4251;4500], as job id is i=18)"
[1] "seed 52672 for j=244 out of 250 (i.e. j=4494 in [4251;4500], as job id is i=18)"
[1] "seed 55316 for j=245 out of 250 (i.e. j=4495 in [4251;4500], as job id is i=18)"
[1] "seed 18754 for j=246 out of 250 (i.e. j=4496 in [4251;4500], as job id is i=18)"
[1] "seed 77059 for j=247 out of 250 (i.e. j=4497 in [4251;4500], as job id is i=18)"
[1] "seed 59654 for j=248 out of 250 (i.e. j=4498 in [4251;4500], as job id is i=18)"
[1] "seed 73262 for j=249 out of 250 (i.e. j=4499 in [4251;4500], as job id is i=18)"
[1] "seed 11651 for j=250 out of 250 (i.e. j=4500 in [4251;4500], as job id is i=18)"
There were 14 warnings (use warnings() to see them)
> rownames(RES) <- NULL
> save(RES,file=paste0(path.res,name,"-",iter_sim,".rda"))
> 
> ## * Summary results
> sessionInfo()
R version 4.1.2 (2021-11-01)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Red Hat Enterprise Linux 8.5 (Ootpa)

Matrix products: default
BLAS:   /opt/software/R/4.1.2/lib64/R/lib/libRblas.so
LAPACK: /opt/software/R/4.1.2/lib64/R/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] mvtnorm_1.1-3    DelayedGSD_0.0.3

loaded via a namespace (and not attached):
 [1] BB_2019.10-1     magrittr_2.0.3   tidyselect_1.1.2 munsell_0.5.0   
 [5] lattice_0.20-45  colorspace_2.0-3 xtable_1.8-4     R6_2.5.1        
 [9] quadprog_1.5-8   rlang_1.0.3      fansi_1.0.3      dplyr_1.0.9     
[13] grid_4.1.2       nlme_3.1-153     gtable_0.3.0     gsDesign_3.3.0  
[17] utf8_1.2.2       cli_3.3.0        ellipsis_0.3.2   tibble_3.1.7    
[21] lifecycle_1.0.1  crayon_1.5.1     purrr_0.3.4      ggplot2_3.3.6   
[25] tidyr_1.2.0      vctrs_0.4.1      glue_1.6.2       compiler_4.1.2  
[29] pillar_1.7.0     generics_0.1.3   scales_1.2.0     pkgconfig_2.0.3 
> summary(RES)
     method        stage           type             statistic     
 Min.   :1.0   Min.   :1.000   Length:1500        Min.   :0.0461  
 1st Qu.:1.0   1st Qu.:1.000   Class :character   1st Qu.:1.6575  
 Median :1.5   Median :1.000   Mode  :character   Median :2.4225  
 Mean   :1.5   Mean   :1.333                      Mean   :2.2770  
 3rd Qu.:2.0   3rd Qu.:2.000                      3rd Qu.:2.9735  
 Max.   :2.0   Max.   :2.000                      Max.   :5.3020  
                                                  NA's   :500     
  estimate_ML          se_ML             info           infoPC      
 Min.   :-0.4354   Min.   :0.3353   Min.   :4.645   Min.   :0.3630  
 1st Qu.: 0.5817   1st Qu.:0.3839   1st Qu.:5.631   1st Qu.:0.4400  
 Median : 0.8352   Median :0.4036   Median :6.218   Median :0.4859  
 Mean   : 0.8140   Mean   :0.4045   Mean   :6.265   Mean   :0.4895  
 3rd Qu.: 1.0611   3rd Qu.:0.4220   3rd Qu.:6.836   3rd Qu.:0.5341  
 Max.   : 2.1669   Max.   :0.4640   Max.   :9.003   Max.   :0.7035  
 NA's   :500       NA's   :1000     NA's   :184     NA's   :184     
   info.pred      infoPC.pred           uk              lk         
 Min.   :4.845   Min.   :0.3785   Min.   :2.255   Min.   :-0.2131  
 1st Qu.:5.953   1st Qu.:0.4652   1st Qu.:2.456   1st Qu.: 0.1275  
 Median :6.574   Median :0.5137   Median :2.527   Median : 0.2971  
 Mean   :6.596   Mean   :0.5154   Mean   :2.525   Mean   : 0.3065  
 3rd Qu.:7.152   3rd Qu.:0.5589   3rd Qu.:2.589   3rd Qu.: 0.4964  
 Max.   :9.400   Max.   :0.7345   Max.   :2.717   Max.   : 1.0856  
 NA's   :1000    NA's   :1000     NA's   :1000    NA's   :1000     
   decision            reason            p.value_ML        lower_ML      
 Length:1500        Length:1500        Min.   :0.0000   Min.   :-0.9415  
 Class :character   Class :character   1st Qu.:0.0015   1st Qu.:-0.0559  
 Mode  :character   Mode  :character   Median :0.0077   Median : 0.1485  
                                       Mean   :0.0723   Mean   : 0.1030  
                                       3rd Qu.:0.0416   3rd Qu.: 0.2995  
                                       Max.   :0.9048   Max.   : 1.1159  
                                       NA's   :1000     NA's   :1000     
    upper_ML       p.value_MUE       lower_MUE         upper_MUE     
 Min.   :0.6645   Min.   :0.0000   Min.   :-0.9463   Min.   :0.6603  
 1st Qu.:1.2633   1st Qu.:0.0034   1st Qu.:-0.0506   1st Qu.:1.2694  
 Median :1.4957   Median :0.0072   Median : 0.0766   Median :1.4823  
 Mean   :1.5577   Mean   :0.0522   Mean   : 0.0699   Mean   :1.5638  
 3rd Qu.:1.8549   3rd Qu.:0.0230   3rd Qu.: 0.1939   3rd Qu.:1.9053  
 Max.   :2.8501   Max.   :1.0000   Max.   : 1.1472   Max.   :2.8455  
 NA's   :1000     NA's   :1000     NA's   :1000      NA's   :1000    
  estimate_MUE           ck         time.interim        seed      
 Min.   :-0.0861   Min.   :0.125   Min.   :514.0   Min.   :  390  
 1st Qu.: 0.6031   1st Qu.:1.386   1st Qu.:583.0   1st Qu.:23141  
 Median : 0.8034   Median :1.450   Median :604.0   Median :50318  
 Mean   : 0.8226   Mean   :1.427   Mean   :602.4   Mean   :48828  
 3rd Qu.: 1.0636   3rd Qu.:1.507   3rd Qu.:624.0   3rd Qu.:74446  
 Max.   : 1.9830   Max.   :1.697   Max.   :712.0   Max.   :99710  
 NA's   :1000      NA's   :684                                    
  nX1.interim     nX2.interim     nX3.interim    computation.time
 Min.   :145.0   Min.   :131.0   Min.   :119.0   Min.   :0.6690  
 1st Qu.:148.0   1st Qu.:135.0   1st Qu.:126.0   1st Qu.:0.8790  
 Median :149.0   Median :136.0   Median :127.0   Median :0.9745  
 Mean   :148.9   Mean   :136.5   Mean   :127.2   Mean   :1.0050  
 3rd Qu.:150.0   3rd Qu.:138.0   3rd Qu.:129.0   3rd Qu.:1.1020  
 Max.   :155.0   Max.   :143.0   Max.   :136.0   Max.   :3.8080  
                                                                 
> 
> #----------------------------------------------------------------------
> ### BATCH_simuMain.R ends here
> 
> proc.time()
   user  system elapsed 
254.059   0.425 265.557 
