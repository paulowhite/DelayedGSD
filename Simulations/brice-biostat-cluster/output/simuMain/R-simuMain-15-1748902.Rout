
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### BATCH_simuMain.R --- 
> #----------------------------------------------------------------------
> ## Author: Paul Blanche
> ## Created: Mar  5 2021 (10:56) 
> ## Version: 
> ## Last-Updated: jul  7 2022 (13:56) 
> ##           By: Brice Ozenne
> ##     Update #: 518
> #----------------------------------------------------------------------
> ## 
> ### Commentary: 
> ## 
> ### Change Log:
> #----------------------------------------------------------------------
> ## 
> ### Code:
> 
> ## ** BATCH loop
> ## cd /projects/biostat01/people/hpl802/DelayedGSD/
> ## for ITER in `seq 1 10`;
> ## do
> ## eval 'R CMD BATCH --vanilla "--args iter_sim='$ITER' n.iter_sim=10" BATCH_simuMain.R output/R-simuMain-'$ITER'.Rout &'
> ## done
> 
> ## [1] 1186669
> ## [2] 1186670
> ## [3] 1186671
> ## [4] 1186672
> ## [5] 1186673
> ## [6] 1186674
> ## [7] 1186675
> ## [8] 1186676
> ## [9] 1186677
> ## [10] 1186678
> 
> rm(list=ls())
>                                    # {{{ parameters
> ## * parameters
> name <- "ScenarioName" # To save the results
> method <- 1:2 # methods used to compute the boundaries
>                                         #---
> myseed <- 140786598
>                                         #--- to plan the trial ----
> NMC <- 250 # number of sequential simulations to run in parallel. Eg. with 250, then we can run 40 scripts in paralell to get N=10,000 runs in total.
> kMax <- 2  #max number of analyses (including final)
> alpha <- 0.025  #type I error (one sided)
> beta <- 0.2  #type II error
> informationRates <- c(0.5,1)  #planned  information rates
> rho_alpha <- 2  # rho parameter for alpha error spending function
> rho_beta <- 2  # rho parameter for beta error spending function
> ## deltaPower <- 0.75 # just to try another value when Id > Imax
> Id <- 0.55  #(expected) information rate at each decision analysis
> binding <- TRUE
>                                         #
>                                         #---- to generate data -----------
>                                         #
> block <- c(1,1,0,0) 
> allsd <- c(2.5,2.1,2.4) # sd, first from baseline measurement, then the two changes from baseline
> mean0 <- c(10,0,0) # mean placebo group (again, first is absolute value, then change from baseline)
> delta <- c(0,0.6,0.8) # treatment effect
> ar <- (0.86*2)*2 # orginial accrual rate from data from Corine is 0.86 per week, hence we multiply by 2 for by 14 days. As to low, we further multiply by 2
> cor011 <- -0.15 # ~ from data from Corine
> corij1 <- 0.68  # ~ from data from Corine
> cor0j1 <- -0.27  # ~ from data from Corine
> Miss11 <- 5/104 # miss both V1 and V2
> Miss12 <- 1/104 # miss V1 and but not V2
> Miss21 <- 6/104 # do not miss V1 and but miss V2
> Miss22 <- 92/104 # miss none
> PropForInterim <- 0.5 # Decide to have interim analysiz when PropForInterim % of all subjects have had the chance to have one follow-up measuement recorded in the data to be available for analysis.
> theDelta.t <- 1.50001 # time lag to process the data and make them ready to analyze after collecting them (unit is time between two follow-up visits)
> TimeFactor <- 14 ## number of days between two visits
>                                         #
>                                         #--- actually for both planing the trial  and generating data-----
>                                         #
>                                         #
> deltaPower <- abs(delta[3]) # effect (NOT Z-scale/unit, but outcome scale/unit!) that the study is powered for: should we choose ourselves or compute from other numbers above ???
> n <- ceiling(2*2*((allsd[3]/deltaPower)^2)*(qnorm(1-beta)-qnorm(alpha))^2) #104 with Corine's data # should we choose ourselves or compute from the above numbers ???
>                                         # inflate SS as required for interim
> 
>                                         # {{{ Set seeds for parallel computing and reproducibility
> ## * Seed
> args <- commandArgs(TRUE) ## BATCH MODE
> if(length(args)>0){
+     for (arg in args){
+         eval(parse(text=arg))
+     }
+ }else{ ## SLUMR
+     iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_ID"))
+     n.iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_COUNT"))
+ } ## interactive
> if(is.na(iter_sim)){iter_sim <- 1}
> if(is.na(n.iter_sim)){n.iter_sim <- 40}
> 
> set.seed(140786598)
> allseeds <- sample.int(n = 10*n.iter_sim*NMC, size = n.iter_sim*NMC, replace=FALSE) #x=1:(.Machine$integer.max) seems to be maximal possible
> # }}}
> 
> # {{{ set path to load and save and othe machine specific variables
> ## * path
> path <- "."
> path.res <- file.path(path,"Results","simuMain")
> if(dir.exists(path.res)==FALSE){
+     if(dir.exists(file.path(path,"Results"))==FALSE){
+     dir.create(file.path(path,"Results"))
+     }
+     dir.create(path.res)
+ }
> path.output <- file.path(path,"output","simuMain")
> if(dir.exists(path.output)==FALSE){
+     if(dir.exists(file.path(path,"output"))==FALSE){
+     dir.create(file.path(path,"output"))
+     }
+     dir.create(path.output)
+ }
> # }}}
> 
> 
> ## * libraries and functions
> library(DelayedGSD)
DelayedGSD version 0.0.3
> ## sourceDir <- function(path, trace = TRUE, ...) {
> ##     for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
> ##         if(trace) cat(nm,":")
> ##         source(file.path(path, nm), ...)
> ##         if(trace) cat("\n")
> ##     }
> ## }
> ## sourceDir(pathToLoad)
>     
> 
> ## * Compute inflation factor and sample size
> plannedB <- vector(mode = "list", length = 3)
> for(iMeth in method){ ## iMeth <- 1
+     plannedB[[iMeth]] <- CalcBoundaries(kMax=kMax,  
+                                         alpha=alpha, 
+                                         beta=beta,  
+                                         InfoR.i=informationRates,  
+                                         InfoR.d=c(Id,1),  
+                                         rho_alpha=rho_alpha,  
+                                         rho_beta=rho_beta,  
+                                         method=iMeth,  
+                                         cNotBelowFixedc=FALSE,
+                                         bindingFutility=binding,
+                                         delta=tail(delta,1))
+     ## summary(plannedB[[1]])
+     ## coef(plannedB[[iMeth]], type = "information")
+ }
Loading required namespace: gsDesign
Loading required package: mvtnorm
Loading required namespace: BB
> inflationFactor <- unlist(lapply(plannedB,function(iP){iP$planned$InflationFactor}))
> nGSD <- ceiling(n*inflationFactor)
> ##  plot(plannedB[[1]])
> 
> #
> # --- just to check---
> ## n
> ## InfoFixed <- ((qnorm(1-beta)-qnorm(alpha))/(deltaPower))^2
> ## InfoFixed
> ## n/(4*(allsd[3])^2)
> #---
> # }}}
> 
> 
> 
> 
> # {{{ technical details to loop
> RES <- NULL # initialize results to save
> allj <- ((iter_sim-1)*NMC + 1):(iter_sim*NMC) # indices of all iterations (replicates) for this job, accountng for the other jobs running in parallel
> # }}}
> 
> ## * Loop
> for(j in allj){ ## j <- 51 ## 5
+     startComp <- Sys.time()
+     myseedi <- allseeds[j]
+     # {{{ TRACE info (e.g. to check the Rout)
+     print(paste0("seed ",myseedi," for ","j=",which(j==allj)," out of ",NMC, " (i.e. j=",j," in [",(iter_sim-1)*NMC + 1,";",iter_sim*NMC,"], as job id is i=",iter_sim,")"))
+     # }}}
+     # {{{ Missing probabilities
+     MyMissProb <- matrix(c(Miss11,Miss12,Miss21,Miss22),ncol=2,nrow=2,byrow=TRUE) # to additionnally remove 1 more because some FASFL=N
+     colnames(MyMissProb) <- c("V2 missing","V2 not missing")
+     rownames(MyMissProb) <- c("V1 missing","V1 not missing")
+     # }}}
+ 
+                                         # {{{ generate data
+     ## ** simulate
+     res <- GenData(n=n, 
+                    N.fw=2,
+                    rand.block=block,
+                    allsd=allsd,
+                    mean0=mean0,
+                    delta=delta,
+                    ar=ar,
+                    cor.01.1=cor011,
+                    cor.ij.1=corij1,
+                    cor.0j.1=cor0j1,
+                    seed=myseedi,
+                    MissProb=MyMissProb,
+                    DigitsOutcome=2,
+                    TimeFactor=TimeFactor,
+                    DigitsTime=0
+                    )
+     d <- res$d
+     ## head(d,n=20)
+                                         # }}}
+                                         # {{{ reformat data like those of Corine
+     ## Make data long format
+     ## dd <- FormatAsCase(d)
+     ## head(dd)
+     ## summary(dd)
+                                         # }}}
+    
+                                         # {{{ make data available at interim
+                                         # Here we stop inclusion data collection for the interim analysis as soon as
+                                         # half of the participants have completed (or had the opportunity to complete) the follow-up 
+     thet <- d$t3[ceiling(n*PropForInterim)]
+     di <- SelectData(d,t=thet)
+     ## ddi <- FormatAsCase(di) # needed ????
+     ## head(d[d$id==52,])
+                                         # }}}
+     ## {{{ analyze data at at interim
+     ## ** interim
+     lmmI <- analyzeData(di, ddf = "nlme", data.decision = sum(d$t1 <= thet + theDelta.t*TimeFactor), getinfo = TRUE, trace = TRUE)
+     ## lmmI <- analyzeData(di, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     currentGSD <- vector(mode = "list", length = 3)
+     out.interim <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+ 
+         currentGSD[[iMeth]] <- update(plannedB[[iMeth]], delta = lmmI, trace = FALSE)
+ 
+         iConfint.interim <- confint(currentGSD[[iMeth]])
+         iInfo.interim <- coef(currentGSD[[iMeth]], type = "information")
+         iBoundary.interim <- coef(currentGSD[[iMeth]], type = "boundary")
+         iDecision.interim <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+         out.interim[[iMeth]] <-  data.frame(statistic = iConfint.interim[1,"statistic"],
+                                             estimate_ML = iConfint.interim[1,"estimate"],
+                                             se_ML = iConfint.interim[1,"se"],
+                                             info = iInfo.interim[1,"Interim"],
+                                             infoPC = iInfo.interim[1,"Interim.pc"],
+                                             info.pred = iInfo.interim[1,"Decision"],
+                                             infoPC.pred = iInfo.interim[1,"Decision.pc"],
+                                             uk = iBoundary.interim[1,"Ebound"],
+                                             lk = iBoundary.interim[1,"Fbound"],
+                                             decision = iDecision.interim["decision","stage 1"],
+                                             reason = iDecision.interim["reason.interim","stage 1"])
+     }
+     ## currentGSD[[1]]
+     ## plot(currentGSD[[1]])
+ 
+     ## ** decision
+     dDecision <- d[which(d$t1 <= thet + theDelta.t*TimeFactor),]
+     lmmD <- analyzeData(dDecision, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+     
+     out.decision <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+           
+         if(out.interim[[iMeth]]$decision == "stop"){
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, trace = FALSE)
+             ## plot(currentGSD[[iMeth]])
+ 
+             iConfint.decision <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.decision  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = iConfint.decision[1,"statistic"],
+                                                 p.value_ML = iConfint.decision[iConfint.decision$method == "ML","p.value"],
+                                                 lower_ML = iConfint.decision[iConfint.decision$method == "ML","lower"],
+                                                 upper_ML = iConfint.decision[iConfint.decision$method == "ML","upper"],
+                                                 estimate_ML = iConfint.decision[iConfint.decision$method == "ML","estimate"],
+                                                 p.value_MUE = iConfint.decision[iConfint.decision$method == "MUE","p.value"],
+                                                 lower_MUE = iConfint.decision[iConfint.decision$method == "MUE","lower"],
+                                                 upper_MUE = iConfint.decision[iConfint.decision$method == "MUE","upper"],
+                                                 estimate_MUE = iConfint.decision[iConfint.decision$method == "MUE","estimate"],
+                                                 info = iInfo.decision[1,"Interim"],
+                                                 infoPC = iInfo.decision[1,"Interim.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = unname(iDecision.decision["decision","stage 2"])
+                                                 )
+ 
+         }else{
+             ## update information
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, k = 1, type.k = "decision", trace = FALSE)
+ 
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = NA,
+                                                 p.value_ML = NA,
+                                                 lower_ML = NA,
+                                                 upper_ML = NA,
+                                                 estimate_ML = NA,
+                                                 p.value_MUE = NA,
+                                                 lower_MUE = NA,
+                                                 upper_MUE = NA,
+                                                 estimate_MUE = NA,
+                                                 info = iInfo.decision[1,"Decision"],
+                                                 infoPC = iInfo.decision[1,"Decision.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = NA)
+         }
+     }
+                                         # }}}
+                                         # {{{ Analyze data at decision
+ 
+     ## ** finale
+     dFinal <- d
+     lmmF <- analyzeData(dFinal, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     out.final <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+         if(out.interim[[iMeth]]$decision == "stop"){
+             out.final[[iMeth]] <- data.frame(statistic = NA,
+                                              p.value_ML = NA,
+                                              lower_ML = NA,
+                                              upper_ML = NA,
+                                              estimate_ML = NA,
+                                              p.value_MUE = NA,
+                                              lower_MUE = NA,
+                                              upper_MUE = NA,
+                                              estimate_MUE = NA,
+                                              info = NA,
+                                              infoPC = NA,
+                                              ck = NA,
+                                              decision = NA)
+ 
+         }else{
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmF, trace = FALSE)
+ 
+             ## plot(test)
+             ## summary(test)
+             iConfint.final <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.final <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.final <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.final  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.final[[iMeth]] <- data.frame(statistic = iConfint.final[1,"statistic"],
+                                              p.value_ML = iConfint.final[iConfint.final$method == "ML","p.value"],
+                                              lower_ML = iConfint.final[iConfint.final$method == "ML","lower"],
+                                              upper_ML = iConfint.final[iConfint.final$method == "ML","upper"],
+                                              estimate_ML = iConfint.final[iConfint.final$method == "ML","estimate"],
+                                              p.value_MUE = iConfint.final[iConfint.final$method == "MUE","p.value"],
+                                              lower_MUE = iConfint.final[iConfint.final$method == "MUE","lower"],
+                                              upper_MUE = iConfint.final[iConfint.final$method == "MUE","upper"],
+                                              estimate_MUE = iConfint.final[iConfint.final$method == "MUE","estimate"],
+                                              info = iInfo.final[1,"Interim"],
+                                              infoPC = iInfo.final[1,"Interim.pc"],
+                                              ck = iBoundary.final[1,"Cbound"],
+                                              decision = unname(coef(currentGSD[[iMeth]], type = "decision")["decision","stage 2"])
+                                              )
+         }
+     }
+                                         # }}}
+ 
+     stopComp <- Sys.time()
+                                         # {{{ Save results
+ 
+     outMerge <- do.call(rbind,lapply(method, function(iMeth){
+         iNames <- unique(c(names(out.interim[[iMeth]]),names(out.decision[[iMeth]]),names(out.final[[iMeth]])))
+         iMerge <- data.frame(matrix(NA, ncol = length(iNames)+3, nrow = 3, dimnames = list(NULL, c("method", "stage", "type", iNames))))
+         iMerge[1,c("method","stage","type",names(out.interim[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "interim", out.interim[[iMeth]]) 
+         iMerge[2,c("method","stage","type",names(out.decision[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "decision", out.decision[[iMeth]]) 
+         iMerge[3,c("method","stage","type",names(out.final[[iMeth]]))] <- data.frame(method = iMeth, stage = 2, type = "final", out.final[[iMeth]])
+         return(iMerge)
+     }))
+ 
+     ## outMerge[outMerge$method==3,]
+ 
+     out <- cbind(
+         ## results
+         outMerge,
+         ## simulation details
+         time.interim = thet,
+         seed=myseedi,             
+         nX1.interim = sum(!is.na(di$X1)),
+         nX2.interim = sum(!is.na(di$X2)),
+         nX3.interim = sum(!is.na(di$X3)),
+         ## computation time
+         computation.time=as.double(round(difftime(stopComp,startComp,units="secs"),3))
+     )
+     ## names(out) <- myColNames
+     RES <- rbind(RES,out)
+     save(RES,file=paste0(path.res,name,"(tempo)-",iter_sim,".rda"))
+                                         # }}}
+ }
[1] "seed 38839 for j=1 out of 250 (i.e. j=3501 in [3501;3750], as job id is i=15)"
Loading required namespace: nlme
[1] "seed 73508 for j=2 out of 250 (i.e. j=3502 in [3501;3750], as job id is i=15)"
[1] "seed 36507 for j=3 out of 250 (i.e. j=3503 in [3501;3750], as job id is i=15)"
[1] "seed 17852 for j=4 out of 250 (i.e. j=3504 in [3501;3750], as job id is i=15)"
[1] "seed 61091 for j=5 out of 250 (i.e. j=3505 in [3501;3750], as job id is i=15)"
[1] "seed 97251 for j=6 out of 250 (i.e. j=3506 in [3501;3750], as job id is i=15)"
[1] "seed 7070 for j=7 out of 250 (i.e. j=3507 in [3501;3750], as job id is i=15)"
[1] "seed 32124 for j=8 out of 250 (i.e. j=3508 in [3501;3750], as job id is i=15)"
[1] "seed 25424 for j=9 out of 250 (i.e. j=3509 in [3501;3750], as job id is i=15)"
[1] "seed 23991 for j=10 out of 250 (i.e. j=3510 in [3501;3750], as job id is i=15)"
[1] "seed 26257 for j=11 out of 250 (i.e. j=3511 in [3501;3750], as job id is i=15)"
[1] "seed 19967 for j=12 out of 250 (i.e. j=3512 in [3501;3750], as job id is i=15)"
[1] "seed 54065 for j=13 out of 250 (i.e. j=3513 in [3501;3750], as job id is i=15)"
[1] "seed 13933 for j=14 out of 250 (i.e. j=3514 in [3501;3750], as job id is i=15)"
[1] "seed 62885 for j=15 out of 250 (i.e. j=3515 in [3501;3750], as job id is i=15)"
[1] "seed 77725 for j=16 out of 250 (i.e. j=3516 in [3501;3750], as job id is i=15)"
[1] "seed 90679 for j=17 out of 250 (i.e. j=3517 in [3501;3750], as job id is i=15)"
[1] "seed 46531 for j=18 out of 250 (i.e. j=3518 in [3501;3750], as job id is i=15)"
[1] "seed 24489 for j=19 out of 250 (i.e. j=3519 in [3501;3750], as job id is i=15)"
[1] "seed 1515 for j=20 out of 250 (i.e. j=3520 in [3501;3750], as job id is i=15)"
[1] "seed 4223 for j=21 out of 250 (i.e. j=3521 in [3501;3750], as job id is i=15)"
[1] "seed 51300 for j=22 out of 250 (i.e. j=3522 in [3501;3750], as job id is i=15)"
[1] "seed 38720 for j=23 out of 250 (i.e. j=3523 in [3501;3750], as job id is i=15)"
[1] "seed 95726 for j=24 out of 250 (i.e. j=3524 in [3501;3750], as job id is i=15)"
[1] "seed 8501 for j=25 out of 250 (i.e. j=3525 in [3501;3750], as job id is i=15)"
[1] "seed 25964 for j=26 out of 250 (i.e. j=3526 in [3501;3750], as job id is i=15)"
[1] "seed 97097 for j=27 out of 250 (i.e. j=3527 in [3501;3750], as job id is i=15)"
[1] "seed 81060 for j=28 out of 250 (i.e. j=3528 in [3501;3750], as job id is i=15)"
[1] "seed 40974 for j=29 out of 250 (i.e. j=3529 in [3501;3750], as job id is i=15)"
[1] "seed 49938 for j=30 out of 250 (i.e. j=3530 in [3501;3750], as job id is i=15)"
[1] "seed 28184 for j=31 out of 250 (i.e. j=3531 in [3501;3750], as job id is i=15)"
[1] "seed 11166 for j=32 out of 250 (i.e. j=3532 in [3501;3750], as job id is i=15)"
[1] "seed 58665 for j=33 out of 250 (i.e. j=3533 in [3501;3750], as job id is i=15)"
[1] "seed 57689 for j=34 out of 250 (i.e. j=3534 in [3501;3750], as job id is i=15)"
[1] "seed 76332 for j=35 out of 250 (i.e. j=3535 in [3501;3750], as job id is i=15)"
[1] "seed 71838 for j=36 out of 250 (i.e. j=3536 in [3501;3750], as job id is i=15)"
[1] "seed 10523 for j=37 out of 250 (i.e. j=3537 in [3501;3750], as job id is i=15)"
[1] "seed 99875 for j=38 out of 250 (i.e. j=3538 in [3501;3750], as job id is i=15)"
[1] "seed 22600 for j=39 out of 250 (i.e. j=3539 in [3501;3750], as job id is i=15)"
[1] "seed 43195 for j=40 out of 250 (i.e. j=3540 in [3501;3750], as job id is i=15)"
[1] "seed 26900 for j=41 out of 250 (i.e. j=3541 in [3501;3750], as job id is i=15)"
[1] "seed 68092 for j=42 out of 250 (i.e. j=3542 in [3501;3750], as job id is i=15)"
[1] "seed 24702 for j=43 out of 250 (i.e. j=3543 in [3501;3750], as job id is i=15)"
[1] "seed 64039 for j=44 out of 250 (i.e. j=3544 in [3501;3750], as job id is i=15)"
[1] "seed 23090 for j=45 out of 250 (i.e. j=3545 in [3501;3750], as job id is i=15)"
[1] "seed 51148 for j=46 out of 250 (i.e. j=3546 in [3501;3750], as job id is i=15)"
[1] "seed 9364 for j=47 out of 250 (i.e. j=3547 in [3501;3750], as job id is i=15)"
[1] "seed 35297 for j=48 out of 250 (i.e. j=3548 in [3501;3750], as job id is i=15)"
[1] "seed 77233 for j=49 out of 250 (i.e. j=3549 in [3501;3750], as job id is i=15)"
[1] "seed 19245 for j=50 out of 250 (i.e. j=3550 in [3501;3750], as job id is i=15)"
[1] "seed 62428 for j=51 out of 250 (i.e. j=3551 in [3501;3750], as job id is i=15)"
[1] "seed 55480 for j=52 out of 250 (i.e. j=3552 in [3501;3750], as job id is i=15)"
[1] "seed 49340 for j=53 out of 250 (i.e. j=3553 in [3501;3750], as job id is i=15)"
[1] "seed 77398 for j=54 out of 250 (i.e. j=3554 in [3501;3750], as job id is i=15)"
[1] "seed 92294 for j=55 out of 250 (i.e. j=3555 in [3501;3750], as job id is i=15)"
[1] "seed 46748 for j=56 out of 250 (i.e. j=3556 in [3501;3750], as job id is i=15)"
[1] "seed 33500 for j=57 out of 250 (i.e. j=3557 in [3501;3750], as job id is i=15)"
[1] "seed 24625 for j=58 out of 250 (i.e. j=3558 in [3501;3750], as job id is i=15)"
[1] "seed 54014 for j=59 out of 250 (i.e. j=3559 in [3501;3750], as job id is i=15)"
[1] "seed 92618 for j=60 out of 250 (i.e. j=3560 in [3501;3750], as job id is i=15)"
[1] "seed 32395 for j=61 out of 250 (i.e. j=3561 in [3501;3750], as job id is i=15)"
[1] "seed 29060 for j=62 out of 250 (i.e. j=3562 in [3501;3750], as job id is i=15)"
[1] "seed 61208 for j=63 out of 250 (i.e. j=3563 in [3501;3750], as job id is i=15)"
[1] "seed 61049 for j=64 out of 250 (i.e. j=3564 in [3501;3750], as job id is i=15)"
[1] "seed 3256 for j=65 out of 250 (i.e. j=3565 in [3501;3750], as job id is i=15)"
[1] "seed 56005 for j=66 out of 250 (i.e. j=3566 in [3501;3750], as job id is i=15)"
[1] "seed 18661 for j=67 out of 250 (i.e. j=3567 in [3501;3750], as job id is i=15)"
[1] "seed 63239 for j=68 out of 250 (i.e. j=3568 in [3501;3750], as job id is i=15)"
[1] "seed 38063 for j=69 out of 250 (i.e. j=3569 in [3501;3750], as job id is i=15)"
[1] "seed 33106 for j=70 out of 250 (i.e. j=3570 in [3501;3750], as job id is i=15)"
[1] "seed 52481 for j=71 out of 250 (i.e. j=3571 in [3501;3750], as job id is i=15)"
[1] "seed 28592 for j=72 out of 250 (i.e. j=3572 in [3501;3750], as job id is i=15)"
[1] "seed 7116 for j=73 out of 250 (i.e. j=3573 in [3501;3750], as job id is i=15)"
[1] "seed 98519 for j=74 out of 250 (i.e. j=3574 in [3501;3750], as job id is i=15)"
[1] "seed 79936 for j=75 out of 250 (i.e. j=3575 in [3501;3750], as job id is i=15)"
[1] "seed 11468 for j=76 out of 250 (i.e. j=3576 in [3501;3750], as job id is i=15)"
[1] "seed 8319 for j=77 out of 250 (i.e. j=3577 in [3501;3750], as job id is i=15)"
[1] "seed 73906 for j=78 out of 250 (i.e. j=3578 in [3501;3750], as job id is i=15)"
[1] "seed 65174 for j=79 out of 250 (i.e. j=3579 in [3501;3750], as job id is i=15)"
[1] "seed 63617 for j=80 out of 250 (i.e. j=3580 in [3501;3750], as job id is i=15)"
[1] "seed 27046 for j=81 out of 250 (i.e. j=3581 in [3501;3750], as job id is i=15)"
[1] "seed 75543 for j=82 out of 250 (i.e. j=3582 in [3501;3750], as job id is i=15)"
[1] "seed 59162 for j=83 out of 250 (i.e. j=3583 in [3501;3750], as job id is i=15)"
[1] "seed 3509 for j=84 out of 250 (i.e. j=3584 in [3501;3750], as job id is i=15)"
[1] "seed 75743 for j=85 out of 250 (i.e. j=3585 in [3501;3750], as job id is i=15)"
[1] "seed 8782 for j=86 out of 250 (i.e. j=3586 in [3501;3750], as job id is i=15)"
[1] "seed 965 for j=87 out of 250 (i.e. j=3587 in [3501;3750], as job id is i=15)"
[1] "seed 64104 for j=88 out of 250 (i.e. j=3588 in [3501;3750], as job id is i=15)"
[1] "seed 31885 for j=89 out of 250 (i.e. j=3589 in [3501;3750], as job id is i=15)"
[1] "seed 92026 for j=90 out of 250 (i.e. j=3590 in [3501;3750], as job id is i=15)"
[1] "seed 41104 for j=91 out of 250 (i.e. j=3591 in [3501;3750], as job id is i=15)"
[1] "seed 26447 for j=92 out of 250 (i.e. j=3592 in [3501;3750], as job id is i=15)"
[1] "seed 62738 for j=93 out of 250 (i.e. j=3593 in [3501;3750], as job id is i=15)"
[1] "seed 42806 for j=94 out of 250 (i.e. j=3594 in [3501;3750], as job id is i=15)"
[1] "seed 22828 for j=95 out of 250 (i.e. j=3595 in [3501;3750], as job id is i=15)"
[1] "seed 94025 for j=96 out of 250 (i.e. j=3596 in [3501;3750], as job id is i=15)"
[1] "seed 71296 for j=97 out of 250 (i.e. j=3597 in [3501;3750], as job id is i=15)"
[1] "seed 51754 for j=98 out of 250 (i.e. j=3598 in [3501;3750], as job id is i=15)"
[1] "seed 76833 for j=99 out of 250 (i.e. j=3599 in [3501;3750], as job id is i=15)"
[1] "seed 36674 for j=100 out of 250 (i.e. j=3600 in [3501;3750], as job id is i=15)"
[1] "seed 58787 for j=101 out of 250 (i.e. j=3601 in [3501;3750], as job id is i=15)"
[1] "seed 19190 for j=102 out of 250 (i.e. j=3602 in [3501;3750], as job id is i=15)"
[1] "seed 38648 for j=103 out of 250 (i.e. j=3603 in [3501;3750], as job id is i=15)"
[1] "seed 48734 for j=104 out of 250 (i.e. j=3604 in [3501;3750], as job id is i=15)"
[1] "seed 91389 for j=105 out of 250 (i.e. j=3605 in [3501;3750], as job id is i=15)"
[1] "seed 15647 for j=106 out of 250 (i.e. j=3606 in [3501;3750], as job id is i=15)"
[1] "seed 68210 for j=107 out of 250 (i.e. j=3607 in [3501;3750], as job id is i=15)"
[1] "seed 75562 for j=108 out of 250 (i.e. j=3608 in [3501;3750], as job id is i=15)"
[1] "seed 11238 for j=109 out of 250 (i.e. j=3609 in [3501;3750], as job id is i=15)"
[1] "seed 51857 for j=110 out of 250 (i.e. j=3610 in [3501;3750], as job id is i=15)"
[1] "seed 99063 for j=111 out of 250 (i.e. j=3611 in [3501;3750], as job id is i=15)"
[1] "seed 61212 for j=112 out of 250 (i.e. j=3612 in [3501;3750], as job id is i=15)"
[1] "seed 97334 for j=113 out of 250 (i.e. j=3613 in [3501;3750], as job id is i=15)"
[1] "seed 44716 for j=114 out of 250 (i.e. j=3614 in [3501;3750], as job id is i=15)"
[1] "seed 52259 for j=115 out of 250 (i.e. j=3615 in [3501;3750], as job id is i=15)"
[1] "seed 27462 for j=116 out of 250 (i.e. j=3616 in [3501;3750], as job id is i=15)"
[1] "seed 45143 for j=117 out of 250 (i.e. j=3617 in [3501;3750], as job id is i=15)"
[1] "seed 83006 for j=118 out of 250 (i.e. j=3618 in [3501;3750], as job id is i=15)"
[1] "seed 84133 for j=119 out of 250 (i.e. j=3619 in [3501;3750], as job id is i=15)"
[1] "seed 4411 for j=120 out of 250 (i.e. j=3620 in [3501;3750], as job id is i=15)"
[1] "seed 51458 for j=121 out of 250 (i.e. j=3621 in [3501;3750], as job id is i=15)"
[1] "seed 25729 for j=122 out of 250 (i.e. j=3622 in [3501;3750], as job id is i=15)"
[1] "seed 89093 for j=123 out of 250 (i.e. j=3623 in [3501;3750], as job id is i=15)"
[1] "seed 32233 for j=124 out of 250 (i.e. j=3624 in [3501;3750], as job id is i=15)"
[1] "seed 52369 for j=125 out of 250 (i.e. j=3625 in [3501;3750], as job id is i=15)"
[1] "seed 75410 for j=126 out of 250 (i.e. j=3626 in [3501;3750], as job id is i=15)"
[1] "seed 60896 for j=127 out of 250 (i.e. j=3627 in [3501;3750], as job id is i=15)"
[1] "seed 3350 for j=128 out of 250 (i.e. j=3628 in [3501;3750], as job id is i=15)"
[1] "seed 34871 for j=129 out of 250 (i.e. j=3629 in [3501;3750], as job id is i=15)"
[1] "seed 39736 for j=130 out of 250 (i.e. j=3630 in [3501;3750], as job id is i=15)"
[1] "seed 38570 for j=131 out of 250 (i.e. j=3631 in [3501;3750], as job id is i=15)"
[1] "seed 44380 for j=132 out of 250 (i.e. j=3632 in [3501;3750], as job id is i=15)"
[1] "seed 10780 for j=133 out of 250 (i.e. j=3633 in [3501;3750], as job id is i=15)"
[1] "seed 17552 for j=134 out of 250 (i.e. j=3634 in [3501;3750], as job id is i=15)"
[1] "seed 18155 for j=135 out of 250 (i.e. j=3635 in [3501;3750], as job id is i=15)"
[1] "seed 26266 for j=136 out of 250 (i.e. j=3636 in [3501;3750], as job id is i=15)"
[1] "seed 33791 for j=137 out of 250 (i.e. j=3637 in [3501;3750], as job id is i=15)"
[1] "seed 72880 for j=138 out of 250 (i.e. j=3638 in [3501;3750], as job id is i=15)"
[1] "seed 69961 for j=139 out of 250 (i.e. j=3639 in [3501;3750], as job id is i=15)"
[1] "seed 12798 for j=140 out of 250 (i.e. j=3640 in [3501;3750], as job id is i=15)"
[1] "seed 95129 for j=141 out of 250 (i.e. j=3641 in [3501;3750], as job id is i=15)"
[1] "seed 7158 for j=142 out of 250 (i.e. j=3642 in [3501;3750], as job id is i=15)"
[1] "seed 39126 for j=143 out of 250 (i.e. j=3643 in [3501;3750], as job id is i=15)"
[1] "seed 32083 for j=144 out of 250 (i.e. j=3644 in [3501;3750], as job id is i=15)"
[1] "seed 12178 for j=145 out of 250 (i.e. j=3645 in [3501;3750], as job id is i=15)"
[1] "seed 59843 for j=146 out of 250 (i.e. j=3646 in [3501;3750], as job id is i=15)"
[1] "seed 14303 for j=147 out of 250 (i.e. j=3647 in [3501;3750], as job id is i=15)"
[1] "seed 64938 for j=148 out of 250 (i.e. j=3648 in [3501;3750], as job id is i=15)"
[1] "seed 17532 for j=149 out of 250 (i.e. j=3649 in [3501;3750], as job id is i=15)"
[1] "seed 54503 for j=150 out of 250 (i.e. j=3650 in [3501;3750], as job id is i=15)"
[1] "seed 92085 for j=151 out of 250 (i.e. j=3651 in [3501;3750], as job id is i=15)"
[1] "seed 30464 for j=152 out of 250 (i.e. j=3652 in [3501;3750], as job id is i=15)"
[1] "seed 23432 for j=153 out of 250 (i.e. j=3653 in [3501;3750], as job id is i=15)"
[1] "seed 30921 for j=154 out of 250 (i.e. j=3654 in [3501;3750], as job id is i=15)"
[1] "seed 49230 for j=155 out of 250 (i.e. j=3655 in [3501;3750], as job id is i=15)"
[1] "seed 66478 for j=156 out of 250 (i.e. j=3656 in [3501;3750], as job id is i=15)"
[1] "seed 98610 for j=157 out of 250 (i.e. j=3657 in [3501;3750], as job id is i=15)"
[1] "seed 65413 for j=158 out of 250 (i.e. j=3658 in [3501;3750], as job id is i=15)"
[1] "seed 17150 for j=159 out of 250 (i.e. j=3659 in [3501;3750], as job id is i=15)"
[1] "seed 61249 for j=160 out of 250 (i.e. j=3660 in [3501;3750], as job id is i=15)"
[1] "seed 34552 for j=161 out of 250 (i.e. j=3661 in [3501;3750], as job id is i=15)"
[1] "seed 95081 for j=162 out of 250 (i.e. j=3662 in [3501;3750], as job id is i=15)"
[1] "seed 34161 for j=163 out of 250 (i.e. j=3663 in [3501;3750], as job id is i=15)"
[1] "seed 47392 for j=164 out of 250 (i.e. j=3664 in [3501;3750], as job id is i=15)"
[1] "seed 6882 for j=165 out of 250 (i.e. j=3665 in [3501;3750], as job id is i=15)"
[1] "seed 51426 for j=166 out of 250 (i.e. j=3666 in [3501;3750], as job id is i=15)"
[1] "seed 65869 for j=167 out of 250 (i.e. j=3667 in [3501;3750], as job id is i=15)"
[1] "seed 9663 for j=168 out of 250 (i.e. j=3668 in [3501;3750], as job id is i=15)"
[1] "seed 37925 for j=169 out of 250 (i.e. j=3669 in [3501;3750], as job id is i=15)"
[1] "seed 83268 for j=170 out of 250 (i.e. j=3670 in [3501;3750], as job id is i=15)"
[1] "seed 55672 for j=171 out of 250 (i.e. j=3671 in [3501;3750], as job id is i=15)"
[1] "seed 91231 for j=172 out of 250 (i.e. j=3672 in [3501;3750], as job id is i=15)"
[1] "seed 53624 for j=173 out of 250 (i.e. j=3673 in [3501;3750], as job id is i=15)"
[1] "seed 35773 for j=174 out of 250 (i.e. j=3674 in [3501;3750], as job id is i=15)"
[1] "seed 2244 for j=175 out of 250 (i.e. j=3675 in [3501;3750], as job id is i=15)"
[1] "seed 21571 for j=176 out of 250 (i.e. j=3676 in [3501;3750], as job id is i=15)"
[1] "seed 50300 for j=177 out of 250 (i.e. j=3677 in [3501;3750], as job id is i=15)"
[1] "seed 96397 for j=178 out of 250 (i.e. j=3678 in [3501;3750], as job id is i=15)"
[1] "seed 37602 for j=179 out of 250 (i.e. j=3679 in [3501;3750], as job id is i=15)"
[1] "seed 81007 for j=180 out of 250 (i.e. j=3680 in [3501;3750], as job id is i=15)"
[1] "seed 15650 for j=181 out of 250 (i.e. j=3681 in [3501;3750], as job id is i=15)"
[1] "seed 77685 for j=182 out of 250 (i.e. j=3682 in [3501;3750], as job id is i=15)"
[1] "seed 83297 for j=183 out of 250 (i.e. j=3683 in [3501;3750], as job id is i=15)"
[1] "seed 36579 for j=184 out of 250 (i.e. j=3684 in [3501;3750], as job id is i=15)"
[1] "seed 82295 for j=185 out of 250 (i.e. j=3685 in [3501;3750], as job id is i=15)"
[1] "seed 23718 for j=186 out of 250 (i.e. j=3686 in [3501;3750], as job id is i=15)"
[1] "seed 58281 for j=187 out of 250 (i.e. j=3687 in [3501;3750], as job id is i=15)"
[1] "seed 62161 for j=188 out of 250 (i.e. j=3688 in [3501;3750], as job id is i=15)"
[1] "seed 93040 for j=189 out of 250 (i.e. j=3689 in [3501;3750], as job id is i=15)"
[1] "seed 90548 for j=190 out of 250 (i.e. j=3690 in [3501;3750], as job id is i=15)"
[1] "seed 5916 for j=191 out of 250 (i.e. j=3691 in [3501;3750], as job id is i=15)"
[1] "seed 21377 for j=192 out of 250 (i.e. j=3692 in [3501;3750], as job id is i=15)"
[1] "seed 46755 for j=193 out of 250 (i.e. j=3693 in [3501;3750], as job id is i=15)"
[1] "seed 19126 for j=194 out of 250 (i.e. j=3694 in [3501;3750], as job id is i=15)"
[1] "seed 84383 for j=195 out of 250 (i.e. j=3695 in [3501;3750], as job id is i=15)"
[1] "seed 73174 for j=196 out of 250 (i.e. j=3696 in [3501;3750], as job id is i=15)"
[1] "seed 23562 for j=197 out of 250 (i.e. j=3697 in [3501;3750], as job id is i=15)"
[1] "seed 20531 for j=198 out of 250 (i.e. j=3698 in [3501;3750], as job id is i=15)"
[1] "seed 71919 for j=199 out of 250 (i.e. j=3699 in [3501;3750], as job id is i=15)"
[1] "seed 47178 for j=200 out of 250 (i.e. j=3700 in [3501;3750], as job id is i=15)"
[1] "seed 97776 for j=201 out of 250 (i.e. j=3701 in [3501;3750], as job id is i=15)"
[1] "seed 88723 for j=202 out of 250 (i.e. j=3702 in [3501;3750], as job id is i=15)"
[1] "seed 60969 for j=203 out of 250 (i.e. j=3703 in [3501;3750], as job id is i=15)"
[1] "seed 30271 for j=204 out of 250 (i.e. j=3704 in [3501;3750], as job id is i=15)"
[1] "seed 21280 for j=205 out of 250 (i.e. j=3705 in [3501;3750], as job id is i=15)"
[1] "seed 36046 for j=206 out of 250 (i.e. j=3706 in [3501;3750], as job id is i=15)"
[1] "seed 46915 for j=207 out of 250 (i.e. j=3707 in [3501;3750], as job id is i=15)"
[1] "seed 31608 for j=208 out of 250 (i.e. j=3708 in [3501;3750], as job id is i=15)"
[1] "seed 86413 for j=209 out of 250 (i.e. j=3709 in [3501;3750], as job id is i=15)"
[1] "seed 4151 for j=210 out of 250 (i.e. j=3710 in [3501;3750], as job id is i=15)"
[1] "seed 75443 for j=211 out of 250 (i.e. j=3711 in [3501;3750], as job id is i=15)"
[1] "seed 98123 for j=212 out of 250 (i.e. j=3712 in [3501;3750], as job id is i=15)"
[1] "seed 19257 for j=213 out of 250 (i.e. j=3713 in [3501;3750], as job id is i=15)"
[1] "seed 59077 for j=214 out of 250 (i.e. j=3714 in [3501;3750], as job id is i=15)"
[1] "seed 45 for j=215 out of 250 (i.e. j=3715 in [3501;3750], as job id is i=15)"
[1] "seed 80289 for j=216 out of 250 (i.e. j=3716 in [3501;3750], as job id is i=15)"
[1] "seed 31147 for j=217 out of 250 (i.e. j=3717 in [3501;3750], as job id is i=15)"
[1] "seed 25010 for j=218 out of 250 (i.e. j=3718 in [3501;3750], as job id is i=15)"
[1] "seed 61922 for j=219 out of 250 (i.e. j=3719 in [3501;3750], as job id is i=15)"
[1] "seed 29497 for j=220 out of 250 (i.e. j=3720 in [3501;3750], as job id is i=15)"
[1] "seed 24321 for j=221 out of 250 (i.e. j=3721 in [3501;3750], as job id is i=15)"
[1] "seed 62036 for j=222 out of 250 (i.e. j=3722 in [3501;3750], as job id is i=15)"
[1] "seed 84784 for j=223 out of 250 (i.e. j=3723 in [3501;3750], as job id is i=15)"
[1] "seed 14437 for j=224 out of 250 (i.e. j=3724 in [3501;3750], as job id is i=15)"
[1] "seed 83503 for j=225 out of 250 (i.e. j=3725 in [3501;3750], as job id is i=15)"
[1] "seed 95330 for j=226 out of 250 (i.e. j=3726 in [3501;3750], as job id is i=15)"
[1] "seed 68082 for j=227 out of 250 (i.e. j=3727 in [3501;3750], as job id is i=15)"
[1] "seed 10926 for j=228 out of 250 (i.e. j=3728 in [3501;3750], as job id is i=15)"
[1] "seed 26990 for j=229 out of 250 (i.e. j=3729 in [3501;3750], as job id is i=15)"
[1] "seed 9716 for j=230 out of 250 (i.e. j=3730 in [3501;3750], as job id is i=15)"
[1] "seed 74889 for j=231 out of 250 (i.e. j=3731 in [3501;3750], as job id is i=15)"
[1] "seed 83901 for j=232 out of 250 (i.e. j=3732 in [3501;3750], as job id is i=15)"
[1] "seed 22024 for j=233 out of 250 (i.e. j=3733 in [3501;3750], as job id is i=15)"
[1] "seed 87691 for j=234 out of 250 (i.e. j=3734 in [3501;3750], as job id is i=15)"
[1] "seed 35244 for j=235 out of 250 (i.e. j=3735 in [3501;3750], as job id is i=15)"
[1] "seed 38755 for j=236 out of 250 (i.e. j=3736 in [3501;3750], as job id is i=15)"
[1] "seed 61925 for j=237 out of 250 (i.e. j=3737 in [3501;3750], as job id is i=15)"
[1] "seed 16843 for j=238 out of 250 (i.e. j=3738 in [3501;3750], as job id is i=15)"
[1] "seed 35878 for j=239 out of 250 (i.e. j=3739 in [3501;3750], as job id is i=15)"
[1] "seed 60904 for j=240 out of 250 (i.e. j=3740 in [3501;3750], as job id is i=15)"
[1] "seed 17649 for j=241 out of 250 (i.e. j=3741 in [3501;3750], as job id is i=15)"
[1] "seed 66827 for j=242 out of 250 (i.e. j=3742 in [3501;3750], as job id is i=15)"
[1] "seed 12696 for j=243 out of 250 (i.e. j=3743 in [3501;3750], as job id is i=15)"
[1] "seed 34555 for j=244 out of 250 (i.e. j=3744 in [3501;3750], as job id is i=15)"
[1] "seed 29193 for j=245 out of 250 (i.e. j=3745 in [3501;3750], as job id is i=15)"
[1] "seed 88571 for j=246 out of 250 (i.e. j=3746 in [3501;3750], as job id is i=15)"
[1] "seed 67054 for j=247 out of 250 (i.e. j=3747 in [3501;3750], as job id is i=15)"
[1] "seed 92661 for j=248 out of 250 (i.e. j=3748 in [3501;3750], as job id is i=15)"
[1] "seed 43228 for j=249 out of 250 (i.e. j=3749 in [3501;3750], as job id is i=15)"
[1] "seed 17312 for j=250 out of 250 (i.e. j=3750 in [3501;3750], as job id is i=15)"
There were 24 warnings (use warnings() to see them)
> rownames(RES) <- NULL
> save(RES,file=paste0(path.res,name,"-",iter_sim,".rda"))
> 
> ## * Summary results
> sessionInfo()
R version 4.1.2 (2021-11-01)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Red Hat Enterprise Linux 8.5 (Ootpa)

Matrix products: default
BLAS:   /opt/software/R/4.1.2/lib64/R/lib/libRblas.so
LAPACK: /opt/software/R/4.1.2/lib64/R/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] mvtnorm_1.1-3    DelayedGSD_0.0.3

loaded via a namespace (and not attached):
 [1] BB_2019.10-1     magrittr_2.0.3   tidyselect_1.1.2 munsell_0.5.0   
 [5] lattice_0.20-45  colorspace_2.0-3 xtable_1.8-4     R6_2.5.1        
 [9] quadprog_1.5-8   rlang_1.0.3      fansi_1.0.3      dplyr_1.0.9     
[13] grid_4.1.2       nlme_3.1-153     gtable_0.3.0     gsDesign_3.3.0  
[17] utf8_1.2.2       cli_3.3.0        ellipsis_0.3.2   tibble_3.1.7    
[21] lifecycle_1.0.1  crayon_1.5.1     purrr_0.3.4      ggplot2_3.3.6   
[25] tidyr_1.2.0      vctrs_0.4.1      glue_1.6.2       compiler_4.1.2  
[29] pillar_1.7.0     generics_0.1.3   scales_1.2.0     pkgconfig_2.0.3 
> summary(RES)
     method        stage           type             statistic     
 Min.   :1.0   Min.   :1.000   Length:1500        Min.   :0.0034  
 1st Qu.:1.0   1st Qu.:1.000   Class :character   1st Qu.:1.5973  
 Median :1.5   Median :1.000   Mode  :character   Median :2.3778  
 Mean   :1.5   Mean   :1.333                      Mean   :2.2852  
 3rd Qu.:2.0   3rd Qu.:2.000                      3rd Qu.:3.0212  
 Max.   :2.0   Max.   :2.000                      Max.   :4.6619  
                                                  NA's   :500     
  estimate_ML          se_ML             info           infoPC      
 Min.   :-0.3279   Min.   :0.3341   Min.   :4.267   Min.   :0.3334  
 1st Qu.: 0.5535   1st Qu.:0.3880   1st Qu.:5.682   1st Qu.:0.4440  
 Median : 0.8044   Median :0.4036   Median :6.215   Median :0.4856  
 Mean   : 0.8100   Mean   :0.4035   Mean   :6.297   Mean   :0.4920  
 3rd Qu.: 1.0840   3rd Qu.:0.4219   3rd Qu.:6.740   3rd Qu.:0.5266  
 Max.   : 1.8024   Max.   :0.4841   Max.   :9.290   Max.   :0.7259  
 NA's   :500       NA's   :1000     NA's   :166     NA's   :166     
   info.pred      infoPC.pred           uk              lk         
 Min.   :4.479   Min.   :0.3500   Min.   :2.249   Min.   :-0.3572  
 1st Qu.:5.958   1st Qu.:0.4656   1st Qu.:2.471   1st Qu.: 0.1285  
 Median :6.537   Median :0.5108   Median :2.527   Median : 0.2974  
 Mean   :6.610   Mean   :0.5165   Mean   :2.522   Mean   : 0.3147  
 3rd Qu.:7.045   3rd Qu.:0.5505   3rd Qu.:2.589   3rd Qu.: 0.4539  
 Max.   :9.757   Max.   :0.7624   Max.   :2.773   Max.   : 1.1041  
 NA's   :1000    NA's   :1000     NA's   :1000    NA's   :1000     
   decision            reason            p.value_ML        lower_ML      
 Length:1500        Length:1500        Min.   :0.0000   Min.   :-1.0615  
 Class :character   Class :character   1st Qu.:0.0016   1st Qu.:-0.0707  
 Mode  :character   Mode  :character   Median :0.0083   Median : 0.1255  
                                       Mean   :0.0777   Mean   : 0.1044  
                                       3rd Qu.:0.0448   3rd Qu.: 0.3376  
                                       Max.   :0.9973   Max.   : 0.8736  
                                       NA's   :1000     NA's   :1000     
    upper_ML       p.value_MUE       lower_MUE         upper_MUE     
 Min.   :0.5783   Min.   :0.0000   Min.   :-1.0572   Min.   :0.5739  
 1st Qu.:1.2203   1st Qu.:0.0033   1st Qu.:-0.0667   1st Qu.:1.2232  
 Median :1.4386   Median :0.0074   Median : 0.0740   Median :1.4201  
 Mean   :1.5424   Mean   :0.0535   Mean   : 0.0814   Mean   :1.5509  
 3rd Qu.:1.8673   3rd Qu.:0.0246   3rd Qu.: 0.2086   3rd Qu.:1.9416  
 Max.   :2.6144   Max.   :1.0000   Max.   : 1.8728   Max.   :3.1429  
 NA's   :1000     NA's   :1000     NA's   :1000      NA's   :1000    
  estimate_MUE           ck          time.interim        seed      
 Min.   :-0.2417   Min.   :0.0635   Min.   :532.0   Min.   :   45  
 1st Qu.: 0.5759   1st Qu.:1.3902   1st Qu.:584.0   1st Qu.:24489  
 Median : 0.7717   Median :1.4554   Median :600.0   Median :46640  
 Mean   : 0.8223   Mean   :1.4085   Mean   :602.8   Mean   :47776  
 3rd Qu.: 1.0798   3rd Qu.:1.5035   3rd Qu.:622.0   3rd Qu.:69961  
 Max.   : 2.4171   Max.   :1.7302   Max.   :678.0   Max.   :99875  
 NA's   :1000      NA's   :666                                     
  nX1.interim     nX2.interim     nX3.interim    computation.time
 Min.   :145.0   Min.   :132.0   Min.   :121.0   Min.   :0.713   
 1st Qu.:147.0   1st Qu.:135.0   1st Qu.:126.0   1st Qu.:0.908   
 Median :148.0   Median :137.0   Median :127.0   Median :0.989   
 Mean   :148.6   Mean   :136.6   Mean   :127.3   Mean   :1.015   
 3rd Qu.:149.0   3rd Qu.:138.0   3rd Qu.:129.0   3rd Qu.:1.113   
 Max.   :153.0   Max.   :144.0   Max.   :134.0   Max.   :3.658   
                                                                 
> 
> #----------------------------------------------------------------------
> ### BATCH_simuMain.R ends here
> 
> proc.time()
   user  system elapsed 
257.030   0.411 268.054 
