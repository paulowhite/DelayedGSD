
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### BATCH_simuMain.R --- 
> #----------------------------------------------------------------------
> ## Author: Paul Blanche
> ## Created: Mar  5 2021 (10:56) 
> ## Version: 
> ## Last-Updated: jul  7 2022 (13:56) 
> ##           By: Brice Ozenne
> ##     Update #: 518
> #----------------------------------------------------------------------
> ## 
> ### Commentary: 
> ## 
> ### Change Log:
> #----------------------------------------------------------------------
> ## 
> ### Code:
> 
> ## ** BATCH loop
> ## cd /projects/biostat01/people/hpl802/DelayedGSD/
> ## for ITER in `seq 1 10`;
> ## do
> ## eval 'R CMD BATCH --vanilla "--args iter_sim='$ITER' n.iter_sim=10" BATCH_simuMain.R output/R-simuMain-'$ITER'.Rout &'
> ## done
> 
> ## [1] 1186669
> ## [2] 1186670
> ## [3] 1186671
> ## [4] 1186672
> ## [5] 1186673
> ## [6] 1186674
> ## [7] 1186675
> ## [8] 1186676
> ## [9] 1186677
> ## [10] 1186678
> 
> rm(list=ls())
>                                    # {{{ parameters
> ## * parameters
> name <- "ScenarioName" # To save the results
> method <- 1:2 # methods used to compute the boundaries
>                                         #---
> myseed <- 140786598
>                                         #--- to plan the trial ----
> NMC <- 250 # number of sequential simulations to run in parallel. Eg. with 250, then we can run 40 scripts in paralell to get N=10,000 runs in total.
> kMax <- 2  #max number of analyses (including final)
> alpha <- 0.025  #type I error (one sided)
> beta <- 0.2  #type II error
> informationRates <- c(0.5,1)  #planned  information rates
> rho_alpha <- 2  # rho parameter for alpha error spending function
> rho_beta <- 2  # rho parameter for beta error spending function
> ## deltaPower <- 0.75 # just to try another value when Id > Imax
> Id <- 0.55  #(expected) information rate at each decision analysis
> binding <- TRUE
>                                         #
>                                         #---- to generate data -----------
>                                         #
> block <- c(1,1,0,0) 
> allsd <- c(2.5,2.1,2.4) # sd, first from baseline measurement, then the two changes from baseline
> mean0 <- c(10,0,0) # mean placebo group (again, first is absolute value, then change from baseline)
> delta <- c(0,0.6,0.8) # treatment effect
> ar <- (0.86*2)*2 # orginial accrual rate from data from Corine is 0.86 per week, hence we multiply by 2 for by 14 days. As to low, we further multiply by 2
> cor011 <- -0.15 # ~ from data from Corine
> corij1 <- 0.68  # ~ from data from Corine
> cor0j1 <- -0.27  # ~ from data from Corine
> Miss11 <- 5/104 # miss both V1 and V2
> Miss12 <- 1/104 # miss V1 and but not V2
> Miss21 <- 6/104 # do not miss V1 and but miss V2
> Miss22 <- 92/104 # miss none
> PropForInterim <- 0.5 # Decide to have interim analysiz when PropForInterim % of all subjects have had the chance to have one follow-up measuement recorded in the data to be available for analysis.
> theDelta.t <- 1.50001 # time lag to process the data and make them ready to analyze after collecting them (unit is time between two follow-up visits)
> TimeFactor <- 14 ## number of days between two visits
>                                         #
>                                         #--- actually for both planing the trial  and generating data-----
>                                         #
>                                         #
> deltaPower <- abs(delta[3]) # effect (NOT Z-scale/unit, but outcome scale/unit!) that the study is powered for: should we choose ourselves or compute from other numbers above ???
> n <- ceiling(2*2*((allsd[3]/deltaPower)^2)*(qnorm(1-beta)-qnorm(alpha))^2) #104 with Corine's data # should we choose ourselves or compute from the above numbers ???
>                                         # inflate SS as required for interim
> 
>                                         # {{{ Set seeds for parallel computing and reproducibility
> ## * Seed
> args <- commandArgs(TRUE) ## BATCH MODE
> if(length(args)>0){
+     for (arg in args){
+         eval(parse(text=arg))
+     }
+ }else{ ## SLUMR
+     iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_ID"))
+     n.iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_COUNT"))
+ } ## interactive
> if(is.na(iter_sim)){iter_sim <- 1}
> if(is.na(n.iter_sim)){n.iter_sim <- 40}
> 
> set.seed(140786598)
> allseeds <- sample.int(n = 10*n.iter_sim*NMC, size = n.iter_sim*NMC, replace=FALSE) #x=1:(.Machine$integer.max) seems to be maximal possible
> # }}}
> 
> # {{{ set path to load and save and othe machine specific variables
> ## * path
> path <- "."
> path.res <- file.path(path,"Results","simuMain")
> if(dir.exists(path.res)==FALSE){
+     if(dir.exists(file.path(path,"Results"))==FALSE){
+     dir.create(file.path(path,"Results"))
+     }
+     dir.create(path.res)
+ }
> path.output <- file.path(path,"output","simuMain")
> if(dir.exists(path.output)==FALSE){
+     if(dir.exists(file.path(path,"output"))==FALSE){
+     dir.create(file.path(path,"output"))
+     }
+     dir.create(path.output)
+ }
> # }}}
> 
> 
> ## * libraries and functions
> library(DelayedGSD)
DelayedGSD version 0.0.3
> ## sourceDir <- function(path, trace = TRUE, ...) {
> ##     for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
> ##         if(trace) cat(nm,":")
> ##         source(file.path(path, nm), ...)
> ##         if(trace) cat("\n")
> ##     }
> ## }
> ## sourceDir(pathToLoad)
>     
> 
> ## * Compute inflation factor and sample size
> plannedB <- vector(mode = "list", length = 3)
> for(iMeth in method){ ## iMeth <- 1
+     plannedB[[iMeth]] <- CalcBoundaries(kMax=kMax,  
+                                         alpha=alpha, 
+                                         beta=beta,  
+                                         InfoR.i=informationRates,  
+                                         InfoR.d=c(Id,1),  
+                                         rho_alpha=rho_alpha,  
+                                         rho_beta=rho_beta,  
+                                         method=iMeth,  
+                                         cNotBelowFixedc=FALSE,
+                                         bindingFutility=binding,
+                                         delta=tail(delta,1))
+     ## summary(plannedB[[1]])
+     ## coef(plannedB[[iMeth]], type = "information")
+ }
Loading required namespace: gsDesign
Loading required package: mvtnorm
Loading required namespace: BB
> inflationFactor <- unlist(lapply(plannedB,function(iP){iP$planned$InflationFactor}))
> nGSD <- ceiling(n*inflationFactor)
> ##  plot(plannedB[[1]])
> 
> #
> # --- just to check---
> ## n
> ## InfoFixed <- ((qnorm(1-beta)-qnorm(alpha))/(deltaPower))^2
> ## InfoFixed
> ## n/(4*(allsd[3])^2)
> #---
> # }}}
> 
> 
> 
> 
> # {{{ technical details to loop
> RES <- NULL # initialize results to save
> allj <- ((iter_sim-1)*NMC + 1):(iter_sim*NMC) # indices of all iterations (replicates) for this job, accountng for the other jobs running in parallel
> # }}}
> 
> ## * Loop
> for(j in allj){ ## j <- 51 ## 5
+     startComp <- Sys.time()
+     myseedi <- allseeds[j]
+     # {{{ TRACE info (e.g. to check the Rout)
+     print(paste0("seed ",myseedi," for ","j=",which(j==allj)," out of ",NMC, " (i.e. j=",j," in [",(iter_sim-1)*NMC + 1,";",iter_sim*NMC,"], as job id is i=",iter_sim,")"))
+     # }}}
+     # {{{ Missing probabilities
+     MyMissProb <- matrix(c(Miss11,Miss12,Miss21,Miss22),ncol=2,nrow=2,byrow=TRUE) # to additionnally remove 1 more because some FASFL=N
+     colnames(MyMissProb) <- c("V2 missing","V2 not missing")
+     rownames(MyMissProb) <- c("V1 missing","V1 not missing")
+     # }}}
+ 
+                                         # {{{ generate data
+     ## ** simulate
+     res <- GenData(n=n, 
+                    N.fw=2,
+                    rand.block=block,
+                    allsd=allsd,
+                    mean0=mean0,
+                    delta=delta,
+                    ar=ar,
+                    cor.01.1=cor011,
+                    cor.ij.1=corij1,
+                    cor.0j.1=cor0j1,
+                    seed=myseedi,
+                    MissProb=MyMissProb,
+                    DigitsOutcome=2,
+                    TimeFactor=TimeFactor,
+                    DigitsTime=0
+                    )
+     d <- res$d
+     ## head(d,n=20)
+                                         # }}}
+                                         # {{{ reformat data like those of Corine
+     ## Make data long format
+     ## dd <- FormatAsCase(d)
+     ## head(dd)
+     ## summary(dd)
+                                         # }}}
+    
+                                         # {{{ make data available at interim
+                                         # Here we stop inclusion data collection for the interim analysis as soon as
+                                         # half of the participants have completed (or had the opportunity to complete) the follow-up 
+     thet <- d$t3[ceiling(n*PropForInterim)]
+     di <- SelectData(d,t=thet)
+     ## ddi <- FormatAsCase(di) # needed ????
+     ## head(d[d$id==52,])
+                                         # }}}
+     ## {{{ analyze data at at interim
+     ## ** interim
+     lmmI <- analyzeData(di, ddf = "nlme", data.decision = sum(d$t1 <= thet + theDelta.t*TimeFactor), getinfo = TRUE, trace = TRUE)
+     ## lmmI <- analyzeData(di, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     currentGSD <- vector(mode = "list", length = 3)
+     out.interim <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+ 
+         currentGSD[[iMeth]] <- update(plannedB[[iMeth]], delta = lmmI, trace = FALSE)
+ 
+         iConfint.interim <- confint(currentGSD[[iMeth]])
+         iInfo.interim <- coef(currentGSD[[iMeth]], type = "information")
+         iBoundary.interim <- coef(currentGSD[[iMeth]], type = "boundary")
+         iDecision.interim <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+         out.interim[[iMeth]] <-  data.frame(statistic = iConfint.interim[1,"statistic"],
+                                             estimate_ML = iConfint.interim[1,"estimate"],
+                                             se_ML = iConfint.interim[1,"se"],
+                                             info = iInfo.interim[1,"Interim"],
+                                             infoPC = iInfo.interim[1,"Interim.pc"],
+                                             info.pred = iInfo.interim[1,"Decision"],
+                                             infoPC.pred = iInfo.interim[1,"Decision.pc"],
+                                             uk = iBoundary.interim[1,"Ebound"],
+                                             lk = iBoundary.interim[1,"Fbound"],
+                                             decision = iDecision.interim["decision","stage 1"],
+                                             reason = iDecision.interim["reason.interim","stage 1"])
+     }
+     ## currentGSD[[1]]
+     ## plot(currentGSD[[1]])
+ 
+     ## ** decision
+     dDecision <- d[which(d$t1 <= thet + theDelta.t*TimeFactor),]
+     lmmD <- analyzeData(dDecision, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+     
+     out.decision <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+           
+         if(out.interim[[iMeth]]$decision == "stop"){
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, trace = FALSE)
+             ## plot(currentGSD[[iMeth]])
+ 
+             iConfint.decision <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.decision  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = iConfint.decision[1,"statistic"],
+                                                 p.value_ML = iConfint.decision[iConfint.decision$method == "ML","p.value"],
+                                                 lower_ML = iConfint.decision[iConfint.decision$method == "ML","lower"],
+                                                 upper_ML = iConfint.decision[iConfint.decision$method == "ML","upper"],
+                                                 estimate_ML = iConfint.decision[iConfint.decision$method == "ML","estimate"],
+                                                 p.value_MUE = iConfint.decision[iConfint.decision$method == "MUE","p.value"],
+                                                 lower_MUE = iConfint.decision[iConfint.decision$method == "MUE","lower"],
+                                                 upper_MUE = iConfint.decision[iConfint.decision$method == "MUE","upper"],
+                                                 estimate_MUE = iConfint.decision[iConfint.decision$method == "MUE","estimate"],
+                                                 info = iInfo.decision[1,"Interim"],
+                                                 infoPC = iInfo.decision[1,"Interim.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = unname(iDecision.decision["decision","stage 2"])
+                                                 )
+ 
+         }else{
+             ## update information
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, k = 1, type.k = "decision", trace = FALSE)
+ 
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = NA,
+                                                 p.value_ML = NA,
+                                                 lower_ML = NA,
+                                                 upper_ML = NA,
+                                                 estimate_ML = NA,
+                                                 p.value_MUE = NA,
+                                                 lower_MUE = NA,
+                                                 upper_MUE = NA,
+                                                 estimate_MUE = NA,
+                                                 info = iInfo.decision[1,"Decision"],
+                                                 infoPC = iInfo.decision[1,"Decision.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = NA)
+         }
+     }
+                                         # }}}
+                                         # {{{ Analyze data at decision
+ 
+     ## ** finale
+     dFinal <- d
+     lmmF <- analyzeData(dFinal, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     out.final <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+         if(out.interim[[iMeth]]$decision == "stop"){
+             out.final[[iMeth]] <- data.frame(statistic = NA,
+                                              p.value_ML = NA,
+                                              lower_ML = NA,
+                                              upper_ML = NA,
+                                              estimate_ML = NA,
+                                              p.value_MUE = NA,
+                                              lower_MUE = NA,
+                                              upper_MUE = NA,
+                                              estimate_MUE = NA,
+                                              info = NA,
+                                              infoPC = NA,
+                                              ck = NA,
+                                              decision = NA)
+ 
+         }else{
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmF, trace = FALSE)
+ 
+             ## plot(test)
+             ## summary(test)
+             iConfint.final <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.final <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.final <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.final  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.final[[iMeth]] <- data.frame(statistic = iConfint.final[1,"statistic"],
+                                              p.value_ML = iConfint.final[iConfint.final$method == "ML","p.value"],
+                                              lower_ML = iConfint.final[iConfint.final$method == "ML","lower"],
+                                              upper_ML = iConfint.final[iConfint.final$method == "ML","upper"],
+                                              estimate_ML = iConfint.final[iConfint.final$method == "ML","estimate"],
+                                              p.value_MUE = iConfint.final[iConfint.final$method == "MUE","p.value"],
+                                              lower_MUE = iConfint.final[iConfint.final$method == "MUE","lower"],
+                                              upper_MUE = iConfint.final[iConfint.final$method == "MUE","upper"],
+                                              estimate_MUE = iConfint.final[iConfint.final$method == "MUE","estimate"],
+                                              info = iInfo.final[1,"Interim"],
+                                              infoPC = iInfo.final[1,"Interim.pc"],
+                                              ck = iBoundary.final[1,"Cbound"],
+                                              decision = unname(coef(currentGSD[[iMeth]], type = "decision")["decision","stage 2"])
+                                              )
+         }
+     }
+                                         # }}}
+ 
+     stopComp <- Sys.time()
+                                         # {{{ Save results
+ 
+     outMerge <- do.call(rbind,lapply(method, function(iMeth){
+         iNames <- unique(c(names(out.interim[[iMeth]]),names(out.decision[[iMeth]]),names(out.final[[iMeth]])))
+         iMerge <- data.frame(matrix(NA, ncol = length(iNames)+3, nrow = 3, dimnames = list(NULL, c("method", "stage", "type", iNames))))
+         iMerge[1,c("method","stage","type",names(out.interim[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "interim", out.interim[[iMeth]]) 
+         iMerge[2,c("method","stage","type",names(out.decision[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "decision", out.decision[[iMeth]]) 
+         iMerge[3,c("method","stage","type",names(out.final[[iMeth]]))] <- data.frame(method = iMeth, stage = 2, type = "final", out.final[[iMeth]])
+         return(iMerge)
+     }))
+ 
+     ## outMerge[outMerge$method==3,]
+ 
+     out <- cbind(
+         ## results
+         outMerge,
+         ## simulation details
+         time.interim = thet,
+         seed=myseedi,             
+         nX1.interim = sum(!is.na(di$X1)),
+         nX2.interim = sum(!is.na(di$X2)),
+         nX3.interim = sum(!is.na(di$X3)),
+         ## computation time
+         computation.time=as.double(round(difftime(stopComp,startComp,units="secs"),3))
+     )
+     ## names(out) <- myColNames
+     RES <- rbind(RES,out)
+     save(RES,file=paste0(path.res,name,"(tempo)-",iter_sim,".rda"))
+                                         # }}}
+ }
[1] "seed 22688 for j=1 out of 250 (i.e. j=4501 in [4501;4750], as job id is i=19)"
Loading required namespace: nlme
[1] "seed 3361 for j=2 out of 250 (i.e. j=4502 in [4501;4750], as job id is i=19)"
[1] "seed 2399 for j=3 out of 250 (i.e. j=4503 in [4501;4750], as job id is i=19)"
[1] "seed 81157 for j=4 out of 250 (i.e. j=4504 in [4501;4750], as job id is i=19)"
[1] "seed 2645 for j=5 out of 250 (i.e. j=4505 in [4501;4750], as job id is i=19)"
[1] "seed 50032 for j=6 out of 250 (i.e. j=4506 in [4501;4750], as job id is i=19)"
[1] "seed 358 for j=7 out of 250 (i.e. j=4507 in [4501;4750], as job id is i=19)"
[1] "seed 96333 for j=8 out of 250 (i.e. j=4508 in [4501;4750], as job id is i=19)"
[1] "seed 93454 for j=9 out of 250 (i.e. j=4509 in [4501;4750], as job id is i=19)"
[1] "seed 16515 for j=10 out of 250 (i.e. j=4510 in [4501;4750], as job id is i=19)"
[1] "seed 54102 for j=11 out of 250 (i.e. j=4511 in [4501;4750], as job id is i=19)"
[1] "seed 67065 for j=12 out of 250 (i.e. j=4512 in [4501;4750], as job id is i=19)"
[1] "seed 20786 for j=13 out of 250 (i.e. j=4513 in [4501;4750], as job id is i=19)"
[1] "seed 31273 for j=14 out of 250 (i.e. j=4514 in [4501;4750], as job id is i=19)"
[1] "seed 511 for j=15 out of 250 (i.e. j=4515 in [4501;4750], as job id is i=19)"
[1] "seed 87624 for j=16 out of 250 (i.e. j=4516 in [4501;4750], as job id is i=19)"
[1] "seed 91136 for j=17 out of 250 (i.e. j=4517 in [4501;4750], as job id is i=19)"
[1] "seed 57918 for j=18 out of 250 (i.e. j=4518 in [4501;4750], as job id is i=19)"
[1] "seed 41810 for j=19 out of 250 (i.e. j=4519 in [4501;4750], as job id is i=19)"
[1] "seed 70399 for j=20 out of 250 (i.e. j=4520 in [4501;4750], as job id is i=19)"
[1] "seed 38474 for j=21 out of 250 (i.e. j=4521 in [4501;4750], as job id is i=19)"
[1] "seed 3737 for j=22 out of 250 (i.e. j=4522 in [4501;4750], as job id is i=19)"
[1] "seed 64930 for j=23 out of 250 (i.e. j=4523 in [4501;4750], as job id is i=19)"
[1] "seed 36627 for j=24 out of 250 (i.e. j=4524 in [4501;4750], as job id is i=19)"
[1] "seed 8339 for j=25 out of 250 (i.e. j=4525 in [4501;4750], as job id is i=19)"
[1] "seed 7826 for j=26 out of 250 (i.e. j=4526 in [4501;4750], as job id is i=19)"
[1] "seed 18427 for j=27 out of 250 (i.e. j=4527 in [4501;4750], as job id is i=19)"
[1] "seed 60732 for j=28 out of 250 (i.e. j=4528 in [4501;4750], as job id is i=19)"
[1] "seed 43806 for j=29 out of 250 (i.e. j=4529 in [4501;4750], as job id is i=19)"
[1] "seed 59477 for j=30 out of 250 (i.e. j=4530 in [4501;4750], as job id is i=19)"
[1] "seed 26589 for j=31 out of 250 (i.e. j=4531 in [4501;4750], as job id is i=19)"
[1] "seed 39534 for j=32 out of 250 (i.e. j=4532 in [4501;4750], as job id is i=19)"
[1] "seed 76301 for j=33 out of 250 (i.e. j=4533 in [4501;4750], as job id is i=19)"
[1] "seed 42857 for j=34 out of 250 (i.e. j=4534 in [4501;4750], as job id is i=19)"
[1] "seed 23063 for j=35 out of 250 (i.e. j=4535 in [4501;4750], as job id is i=19)"
[1] "seed 22556 for j=36 out of 250 (i.e. j=4536 in [4501;4750], as job id is i=19)"
[1] "seed 16684 for j=37 out of 250 (i.e. j=4537 in [4501;4750], as job id is i=19)"
[1] "seed 35506 for j=38 out of 250 (i.e. j=4538 in [4501;4750], as job id is i=19)"
[1] "seed 34071 for j=39 out of 250 (i.e. j=4539 in [4501;4750], as job id is i=19)"
[1] "seed 33931 for j=40 out of 250 (i.e. j=4540 in [4501;4750], as job id is i=19)"
[1] "seed 46043 for j=41 out of 250 (i.e. j=4541 in [4501;4750], as job id is i=19)"
[1] "seed 69339 for j=42 out of 250 (i.e. j=4542 in [4501;4750], as job id is i=19)"
[1] "seed 46037 for j=43 out of 250 (i.e. j=4543 in [4501;4750], as job id is i=19)"
[1] "seed 80491 for j=44 out of 250 (i.e. j=4544 in [4501;4750], as job id is i=19)"
[1] "seed 90228 for j=45 out of 250 (i.e. j=4545 in [4501;4750], as job id is i=19)"
[1] "seed 81450 for j=46 out of 250 (i.e. j=4546 in [4501;4750], as job id is i=19)"
[1] "seed 7256 for j=47 out of 250 (i.e. j=4547 in [4501;4750], as job id is i=19)"
[1] "seed 41412 for j=48 out of 250 (i.e. j=4548 in [4501;4750], as job id is i=19)"
[1] "seed 29546 for j=49 out of 250 (i.e. j=4549 in [4501;4750], as job id is i=19)"
[1] "seed 3760 for j=50 out of 250 (i.e. j=4550 in [4501;4750], as job id is i=19)"
[1] "seed 24886 for j=51 out of 250 (i.e. j=4551 in [4501;4750], as job id is i=19)"
[1] "seed 4645 for j=52 out of 250 (i.e. j=4552 in [4501;4750], as job id is i=19)"
[1] "seed 64977 for j=53 out of 250 (i.e. j=4553 in [4501;4750], as job id is i=19)"
[1] "seed 61497 for j=54 out of 250 (i.e. j=4554 in [4501;4750], as job id is i=19)"
[1] "seed 69215 for j=55 out of 250 (i.e. j=4555 in [4501;4750], as job id is i=19)"
[1] "seed 28699 for j=56 out of 250 (i.e. j=4556 in [4501;4750], as job id is i=19)"
[1] "seed 5090 for j=57 out of 250 (i.e. j=4557 in [4501;4750], as job id is i=19)"
[1] "seed 27063 for j=58 out of 250 (i.e. j=4558 in [4501;4750], as job id is i=19)"
[1] "seed 85473 for j=59 out of 250 (i.e. j=4559 in [4501;4750], as job id is i=19)"
[1] "seed 28382 for j=60 out of 250 (i.e. j=4560 in [4501;4750], as job id is i=19)"
[1] "seed 40761 for j=61 out of 250 (i.e. j=4561 in [4501;4750], as job id is i=19)"
[1] "seed 93216 for j=62 out of 250 (i.e. j=4562 in [4501;4750], as job id is i=19)"
[1] "seed 97458 for j=63 out of 250 (i.e. j=4563 in [4501;4750], as job id is i=19)"
[1] "seed 70132 for j=64 out of 250 (i.e. j=4564 in [4501;4750], as job id is i=19)"
[1] "seed 72327 for j=65 out of 250 (i.e. j=4565 in [4501;4750], as job id is i=19)"
[1] "seed 80284 for j=66 out of 250 (i.e. j=4566 in [4501;4750], as job id is i=19)"
[1] "seed 32101 for j=67 out of 250 (i.e. j=4567 in [4501;4750], as job id is i=19)"
[1] "seed 48647 for j=68 out of 250 (i.e. j=4568 in [4501;4750], as job id is i=19)"
[1] "seed 12074 for j=69 out of 250 (i.e. j=4569 in [4501;4750], as job id is i=19)"
[1] "seed 15631 for j=70 out of 250 (i.e. j=4570 in [4501;4750], as job id is i=19)"
[1] "seed 91927 for j=71 out of 250 (i.e. j=4571 in [4501;4750], as job id is i=19)"
[1] "seed 13948 for j=72 out of 250 (i.e. j=4572 in [4501;4750], as job id is i=19)"
[1] "seed 94720 for j=73 out of 250 (i.e. j=4573 in [4501;4750], as job id is i=19)"
[1] "seed 45825 for j=74 out of 250 (i.e. j=4574 in [4501;4750], as job id is i=19)"
[1] "seed 13959 for j=75 out of 250 (i.e. j=4575 in [4501;4750], as job id is i=19)"
[1] "seed 33361 for j=76 out of 250 (i.e. j=4576 in [4501;4750], as job id is i=19)"
[1] "seed 65727 for j=77 out of 250 (i.e. j=4577 in [4501;4750], as job id is i=19)"
[1] "seed 12737 for j=78 out of 250 (i.e. j=4578 in [4501;4750], as job id is i=19)"
[1] "seed 35968 for j=79 out of 250 (i.e. j=4579 in [4501;4750], as job id is i=19)"
[1] "seed 8235 for j=80 out of 250 (i.e. j=4580 in [4501;4750], as job id is i=19)"
[1] "seed 42927 for j=81 out of 250 (i.e. j=4581 in [4501;4750], as job id is i=19)"
[1] "seed 40672 for j=82 out of 250 (i.e. j=4582 in [4501;4750], as job id is i=19)"
[1] "seed 75404 for j=83 out of 250 (i.e. j=4583 in [4501;4750], as job id is i=19)"
[1] "seed 43175 for j=84 out of 250 (i.e. j=4584 in [4501;4750], as job id is i=19)"
[1] "seed 21729 for j=85 out of 250 (i.e. j=4585 in [4501;4750], as job id is i=19)"
[1] "seed 22208 for j=86 out of 250 (i.e. j=4586 in [4501;4750], as job id is i=19)"
[1] "seed 58894 for j=87 out of 250 (i.e. j=4587 in [4501;4750], as job id is i=19)"
[1] "seed 37253 for j=88 out of 250 (i.e. j=4588 in [4501;4750], as job id is i=19)"
[1] "seed 91204 for j=89 out of 250 (i.e. j=4589 in [4501;4750], as job id is i=19)"
[1] "seed 2517 for j=90 out of 250 (i.e. j=4590 in [4501;4750], as job id is i=19)"
[1] "seed 36180 for j=91 out of 250 (i.e. j=4591 in [4501;4750], as job id is i=19)"
[1] "seed 14637 for j=92 out of 250 (i.e. j=4592 in [4501;4750], as job id is i=19)"
[1] "seed 53057 for j=93 out of 250 (i.e. j=4593 in [4501;4750], as job id is i=19)"
[1] "seed 22163 for j=94 out of 250 (i.e. j=4594 in [4501;4750], as job id is i=19)"
[1] "seed 83175 for j=95 out of 250 (i.e. j=4595 in [4501;4750], as job id is i=19)"
[1] "seed 76185 for j=96 out of 250 (i.e. j=4596 in [4501;4750], as job id is i=19)"
[1] "seed 57492 for j=97 out of 250 (i.e. j=4597 in [4501;4750], as job id is i=19)"
[1] "seed 98250 for j=98 out of 250 (i.e. j=4598 in [4501;4750], as job id is i=19)"
[1] "seed 3909 for j=99 out of 250 (i.e. j=4599 in [4501;4750], as job id is i=19)"
[1] "seed 81904 for j=100 out of 250 (i.e. j=4600 in [4501;4750], as job id is i=19)"
[1] "seed 60937 for j=101 out of 250 (i.e. j=4601 in [4501;4750], as job id is i=19)"
[1] "seed 33957 for j=102 out of 250 (i.e. j=4602 in [4501;4750], as job id is i=19)"
[1] "seed 52050 for j=103 out of 250 (i.e. j=4603 in [4501;4750], as job id is i=19)"
[1] "seed 81224 for j=104 out of 250 (i.e. j=4604 in [4501;4750], as job id is i=19)"
[1] "seed 56332 for j=105 out of 250 (i.e. j=4605 in [4501;4750], as job id is i=19)"
[1] "seed 95000 for j=106 out of 250 (i.e. j=4606 in [4501;4750], as job id is i=19)"
[1] "seed 89183 for j=107 out of 250 (i.e. j=4607 in [4501;4750], as job id is i=19)"
[1] "seed 31605 for j=108 out of 250 (i.e. j=4608 in [4501;4750], as job id is i=19)"
[1] "seed 60860 for j=109 out of 250 (i.e. j=4609 in [4501;4750], as job id is i=19)"
[1] "seed 67667 for j=110 out of 250 (i.e. j=4610 in [4501;4750], as job id is i=19)"
[1] "seed 7761 for j=111 out of 250 (i.e. j=4611 in [4501;4750], as job id is i=19)"
[1] "seed 12413 for j=112 out of 250 (i.e. j=4612 in [4501;4750], as job id is i=19)"
[1] "seed 92649 for j=113 out of 250 (i.e. j=4613 in [4501;4750], as job id is i=19)"
[1] "seed 4844 for j=114 out of 250 (i.e. j=4614 in [4501;4750], as job id is i=19)"
[1] "seed 26240 for j=115 out of 250 (i.e. j=4615 in [4501;4750], as job id is i=19)"
[1] "seed 22719 for j=116 out of 250 (i.e. j=4616 in [4501;4750], as job id is i=19)"
[1] "seed 5923 for j=117 out of 250 (i.e. j=4617 in [4501;4750], as job id is i=19)"
[1] "seed 75550 for j=118 out of 250 (i.e. j=4618 in [4501;4750], as job id is i=19)"
[1] "seed 28672 for j=119 out of 250 (i.e. j=4619 in [4501;4750], as job id is i=19)"
[1] "seed 70049 for j=120 out of 250 (i.e. j=4620 in [4501;4750], as job id is i=19)"
[1] "seed 80883 for j=121 out of 250 (i.e. j=4621 in [4501;4750], as job id is i=19)"
[1] "seed 15845 for j=122 out of 250 (i.e. j=4622 in [4501;4750], as job id is i=19)"
[1] "seed 61937 for j=123 out of 250 (i.e. j=4623 in [4501;4750], as job id is i=19)"
[1] "seed 44822 for j=124 out of 250 (i.e. j=4624 in [4501;4750], as job id is i=19)"
[1] "seed 92115 for j=125 out of 250 (i.e. j=4625 in [4501;4750], as job id is i=19)"
[1] "seed 30149 for j=126 out of 250 (i.e. j=4626 in [4501;4750], as job id is i=19)"
[1] "seed 74266 for j=127 out of 250 (i.e. j=4627 in [4501;4750], as job id is i=19)"
[1] "seed 37054 for j=128 out of 250 (i.e. j=4628 in [4501;4750], as job id is i=19)"
[1] "seed 90083 for j=129 out of 250 (i.e. j=4629 in [4501;4750], as job id is i=19)"
[1] "seed 91455 for j=130 out of 250 (i.e. j=4630 in [4501;4750], as job id is i=19)"
[1] "seed 90554 for j=131 out of 250 (i.e. j=4631 in [4501;4750], as job id is i=19)"
[1] "seed 32342 for j=132 out of 250 (i.e. j=4632 in [4501;4750], as job id is i=19)"
[1] "seed 17187 for j=133 out of 250 (i.e. j=4633 in [4501;4750], as job id is i=19)"
[1] "seed 2816 for j=134 out of 250 (i.e. j=4634 in [4501;4750], as job id is i=19)"
[1] "seed 85663 for j=135 out of 250 (i.e. j=4635 in [4501;4750], as job id is i=19)"
[1] "seed 98254 for j=136 out of 250 (i.e. j=4636 in [4501;4750], as job id is i=19)"
[1] "seed 20156 for j=137 out of 250 (i.e. j=4637 in [4501;4750], as job id is i=19)"
[1] "seed 68326 for j=138 out of 250 (i.e. j=4638 in [4501;4750], as job id is i=19)"
[1] "seed 85467 for j=139 out of 250 (i.e. j=4639 in [4501;4750], as job id is i=19)"
[1] "seed 48845 for j=140 out of 250 (i.e. j=4640 in [4501;4750], as job id is i=19)"
[1] "seed 84244 for j=141 out of 250 (i.e. j=4641 in [4501;4750], as job id is i=19)"
[1] "seed 63262 for j=142 out of 250 (i.e. j=4642 in [4501;4750], as job id is i=19)"
[1] "seed 33333 for j=143 out of 250 (i.e. j=4643 in [4501;4750], as job id is i=19)"
[1] "seed 80716 for j=144 out of 250 (i.e. j=4644 in [4501;4750], as job id is i=19)"
[1] "seed 80614 for j=145 out of 250 (i.e. j=4645 in [4501;4750], as job id is i=19)"
[1] "seed 39477 for j=146 out of 250 (i.e. j=4646 in [4501;4750], as job id is i=19)"
[1] "seed 65661 for j=147 out of 250 (i.e. j=4647 in [4501;4750], as job id is i=19)"
[1] "seed 41961 for j=148 out of 250 (i.e. j=4648 in [4501;4750], as job id is i=19)"
[1] "seed 52786 for j=149 out of 250 (i.e. j=4649 in [4501;4750], as job id is i=19)"
[1] "seed 88192 for j=150 out of 250 (i.e. j=4650 in [4501;4750], as job id is i=19)"
[1] "seed 61926 for j=151 out of 250 (i.e. j=4651 in [4501;4750], as job id is i=19)"
[1] "seed 88110 for j=152 out of 250 (i.e. j=4652 in [4501;4750], as job id is i=19)"
[1] "seed 8378 for j=153 out of 250 (i.e. j=4653 in [4501;4750], as job id is i=19)"
[1] "seed 12562 for j=154 out of 250 (i.e. j=4654 in [4501;4750], as job id is i=19)"
[1] "seed 93456 for j=155 out of 250 (i.e. j=4655 in [4501;4750], as job id is i=19)"
[1] "seed 65505 for j=156 out of 250 (i.e. j=4656 in [4501;4750], as job id is i=19)"
[1] "seed 2958 for j=157 out of 250 (i.e. j=4657 in [4501;4750], as job id is i=19)"
[1] "seed 74678 for j=158 out of 250 (i.e. j=4658 in [4501;4750], as job id is i=19)"
[1] "seed 4246 for j=159 out of 250 (i.e. j=4659 in [4501;4750], as job id is i=19)"
[1] "seed 98484 for j=160 out of 250 (i.e. j=4660 in [4501;4750], as job id is i=19)"
[1] "seed 92709 for j=161 out of 250 (i.e. j=4661 in [4501;4750], as job id is i=19)"
[1] "seed 94525 for j=162 out of 250 (i.e. j=4662 in [4501;4750], as job id is i=19)"
[1] "seed 28831 for j=163 out of 250 (i.e. j=4663 in [4501;4750], as job id is i=19)"
[1] "seed 47506 for j=164 out of 250 (i.e. j=4664 in [4501;4750], as job id is i=19)"
[1] "seed 19922 for j=165 out of 250 (i.e. j=4665 in [4501;4750], as job id is i=19)"
[1] "seed 71366 for j=166 out of 250 (i.e. j=4666 in [4501;4750], as job id is i=19)"
[1] "seed 97196 for j=167 out of 250 (i.e. j=4667 in [4501;4750], as job id is i=19)"
[1] "seed 43129 for j=168 out of 250 (i.e. j=4668 in [4501;4750], as job id is i=19)"
[1] "seed 12824 for j=169 out of 250 (i.e. j=4669 in [4501;4750], as job id is i=19)"
[1] "seed 36104 for j=170 out of 250 (i.e. j=4670 in [4501;4750], as job id is i=19)"
[1] "seed 42697 for j=171 out of 250 (i.e. j=4671 in [4501;4750], as job id is i=19)"
[1] "seed 31120 for j=172 out of 250 (i.e. j=4672 in [4501;4750], as job id is i=19)"
[1] "seed 80729 for j=173 out of 250 (i.e. j=4673 in [4501;4750], as job id is i=19)"
[1] "seed 61698 for j=174 out of 250 (i.e. j=4674 in [4501;4750], as job id is i=19)"
[1] "seed 53157 for j=175 out of 250 (i.e. j=4675 in [4501;4750], as job id is i=19)"
[1] "seed 41706 for j=176 out of 250 (i.e. j=4676 in [4501;4750], as job id is i=19)"
[1] "seed 52609 for j=177 out of 250 (i.e. j=4677 in [4501;4750], as job id is i=19)"
[1] "seed 80202 for j=178 out of 250 (i.e. j=4678 in [4501;4750], as job id is i=19)"
[1] "seed 16621 for j=179 out of 250 (i.e. j=4679 in [4501;4750], as job id is i=19)"
[1] "seed 11280 for j=180 out of 250 (i.e. j=4680 in [4501;4750], as job id is i=19)"
[1] "seed 6720 for j=181 out of 250 (i.e. j=4681 in [4501;4750], as job id is i=19)"
[1] "seed 32804 for j=182 out of 250 (i.e. j=4682 in [4501;4750], as job id is i=19)"
[1] "seed 53399 for j=183 out of 250 (i.e. j=4683 in [4501;4750], as job id is i=19)"
[1] "seed 47775 for j=184 out of 250 (i.e. j=4684 in [4501;4750], as job id is i=19)"
[1] "seed 45185 for j=185 out of 250 (i.e. j=4685 in [4501;4750], as job id is i=19)"
[1] "seed 26834 for j=186 out of 250 (i.e. j=4686 in [4501;4750], as job id is i=19)"
[1] "seed 14318 for j=187 out of 250 (i.e. j=4687 in [4501;4750], as job id is i=19)"
[1] "seed 30814 for j=188 out of 250 (i.e. j=4688 in [4501;4750], as job id is i=19)"
[1] "seed 51958 for j=189 out of 250 (i.e. j=4689 in [4501;4750], as job id is i=19)"
[1] "seed 66989 for j=190 out of 250 (i.e. j=4690 in [4501;4750], as job id is i=19)"
[1] "seed 50340 for j=191 out of 250 (i.e. j=4691 in [4501;4750], as job id is i=19)"
[1] "seed 48327 for j=192 out of 250 (i.e. j=4692 in [4501;4750], as job id is i=19)"
[1] "seed 48281 for j=193 out of 250 (i.e. j=4693 in [4501;4750], as job id is i=19)"
[1] "seed 55765 for j=194 out of 250 (i.e. j=4694 in [4501;4750], as job id is i=19)"
[1] "seed 10579 for j=195 out of 250 (i.e. j=4695 in [4501;4750], as job id is i=19)"
[1] "seed 34276 for j=196 out of 250 (i.e. j=4696 in [4501;4750], as job id is i=19)"
[1] "seed 66099 for j=197 out of 250 (i.e. j=4697 in [4501;4750], as job id is i=19)"
[1] "seed 1200 for j=198 out of 250 (i.e. j=4698 in [4501;4750], as job id is i=19)"
[1] "seed 59236 for j=199 out of 250 (i.e. j=4699 in [4501;4750], as job id is i=19)"
[1] "seed 99028 for j=200 out of 250 (i.e. j=4700 in [4501;4750], as job id is i=19)"
[1] "seed 84346 for j=201 out of 250 (i.e. j=4701 in [4501;4750], as job id is i=19)"
[1] "seed 80573 for j=202 out of 250 (i.e. j=4702 in [4501;4750], as job id is i=19)"
[1] "seed 40059 for j=203 out of 250 (i.e. j=4703 in [4501;4750], as job id is i=19)"
[1] "seed 1847 for j=204 out of 250 (i.e. j=4704 in [4501;4750], as job id is i=19)"
[1] "seed 63728 for j=205 out of 250 (i.e. j=4705 in [4501;4750], as job id is i=19)"
[1] "seed 37224 for j=206 out of 250 (i.e. j=4706 in [4501;4750], as job id is i=19)"
[1] "seed 76627 for j=207 out of 250 (i.e. j=4707 in [4501;4750], as job id is i=19)"
[1] "seed 72682 for j=208 out of 250 (i.e. j=4708 in [4501;4750], as job id is i=19)"
[1] "seed 33234 for j=209 out of 250 (i.e. j=4709 in [4501;4750], as job id is i=19)"
[1] "seed 97082 for j=210 out of 250 (i.e. j=4710 in [4501;4750], as job id is i=19)"
[1] "seed 39718 for j=211 out of 250 (i.e. j=4711 in [4501;4750], as job id is i=19)"
[1] "seed 14368 for j=212 out of 250 (i.e. j=4712 in [4501;4750], as job id is i=19)"
[1] "seed 21145 for j=213 out of 250 (i.e. j=4713 in [4501;4750], as job id is i=19)"
[1] "seed 22752 for j=214 out of 250 (i.e. j=4714 in [4501;4750], as job id is i=19)"
[1] "seed 71309 for j=215 out of 250 (i.e. j=4715 in [4501;4750], as job id is i=19)"
[1] "seed 86129 for j=216 out of 250 (i.e. j=4716 in [4501;4750], as job id is i=19)"
[1] "seed 79486 for j=217 out of 250 (i.e. j=4717 in [4501;4750], as job id is i=19)"
[1] "seed 90831 for j=218 out of 250 (i.e. j=4718 in [4501;4750], as job id is i=19)"
[1] "seed 30237 for j=219 out of 250 (i.e. j=4719 in [4501;4750], as job id is i=19)"
[1] "seed 96621 for j=220 out of 250 (i.e. j=4720 in [4501;4750], as job id is i=19)"
[1] "seed 95349 for j=221 out of 250 (i.e. j=4721 in [4501;4750], as job id is i=19)"
[1] "seed 82307 for j=222 out of 250 (i.e. j=4722 in [4501;4750], as job id is i=19)"
[1] "seed 96834 for j=223 out of 250 (i.e. j=4723 in [4501;4750], as job id is i=19)"
[1] "seed 51641 for j=224 out of 250 (i.e. j=4724 in [4501;4750], as job id is i=19)"
[1] "seed 45307 for j=225 out of 250 (i.e. j=4725 in [4501;4750], as job id is i=19)"
[1] "seed 67245 for j=226 out of 250 (i.e. j=4726 in [4501;4750], as job id is i=19)"
[1] "seed 99383 for j=227 out of 250 (i.e. j=4727 in [4501;4750], as job id is i=19)"
[1] "seed 75268 for j=228 out of 250 (i.e. j=4728 in [4501;4750], as job id is i=19)"
[1] "seed 10982 for j=229 out of 250 (i.e. j=4729 in [4501;4750], as job id is i=19)"
[1] "seed 69657 for j=230 out of 250 (i.e. j=4730 in [4501;4750], as job id is i=19)"
[1] "seed 6006 for j=231 out of 250 (i.e. j=4731 in [4501;4750], as job id is i=19)"
[1] "seed 59280 for j=232 out of 250 (i.e. j=4732 in [4501;4750], as job id is i=19)"
[1] "seed 21668 for j=233 out of 250 (i.e. j=4733 in [4501;4750], as job id is i=19)"
[1] "seed 26485 for j=234 out of 250 (i.e. j=4734 in [4501;4750], as job id is i=19)"
[1] "seed 56839 for j=235 out of 250 (i.e. j=4735 in [4501;4750], as job id is i=19)"
[1] "seed 34809 for j=236 out of 250 (i.e. j=4736 in [4501;4750], as job id is i=19)"
[1] "seed 54430 for j=237 out of 250 (i.e. j=4737 in [4501;4750], as job id is i=19)"
[1] "seed 91784 for j=238 out of 250 (i.e. j=4738 in [4501;4750], as job id is i=19)"
[1] "seed 2671 for j=239 out of 250 (i.e. j=4739 in [4501;4750], as job id is i=19)"
[1] "seed 58423 for j=240 out of 250 (i.e. j=4740 in [4501;4750], as job id is i=19)"
[1] "seed 32380 for j=241 out of 250 (i.e. j=4741 in [4501;4750], as job id is i=19)"
[1] "seed 16142 for j=242 out of 250 (i.e. j=4742 in [4501;4750], as job id is i=19)"
[1] "seed 23471 for j=243 out of 250 (i.e. j=4743 in [4501;4750], as job id is i=19)"
[1] "seed 90112 for j=244 out of 250 (i.e. j=4744 in [4501;4750], as job id is i=19)"
[1] "seed 18761 for j=245 out of 250 (i.e. j=4745 in [4501;4750], as job id is i=19)"
[1] "seed 80061 for j=246 out of 250 (i.e. j=4746 in [4501;4750], as job id is i=19)"
[1] "seed 49119 for j=247 out of 250 (i.e. j=4747 in [4501;4750], as job id is i=19)"
[1] "seed 55702 for j=248 out of 250 (i.e. j=4748 in [4501;4750], as job id is i=19)"
[1] "seed 52214 for j=249 out of 250 (i.e. j=4749 in [4501;4750], as job id is i=19)"
[1] "seed 49964 for j=250 out of 250 (i.e. j=4750 in [4501;4750], as job id is i=19)"
There were 20 warnings (use warnings() to see them)
> rownames(RES) <- NULL
> save(RES,file=paste0(path.res,name,"-",iter_sim,".rda"))
> 
> ## * Summary results
> sessionInfo()
R version 4.1.2 (2021-11-01)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Red Hat Enterprise Linux 8.5 (Ootpa)

Matrix products: default
BLAS:   /opt/software/R/4.1.2/lib64/R/lib/libRblas.so
LAPACK: /opt/software/R/4.1.2/lib64/R/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] mvtnorm_1.1-3    DelayedGSD_0.0.3

loaded via a namespace (and not attached):
 [1] BB_2019.10-1     magrittr_2.0.3   tidyselect_1.1.2 munsell_0.5.0   
 [5] lattice_0.20-45  colorspace_2.0-3 xtable_1.8-4     R6_2.5.1        
 [9] quadprog_1.5-8   rlang_1.0.3      fansi_1.0.3      dplyr_1.0.9     
[13] grid_4.1.2       nlme_3.1-153     gtable_0.3.0     gsDesign_3.3.0  
[17] utf8_1.2.2       cli_3.3.0        ellipsis_0.3.2   tibble_3.1.7    
[21] lifecycle_1.0.1  crayon_1.5.1     purrr_0.3.4      ggplot2_3.3.6   
[25] tidyr_1.2.0      vctrs_0.4.1      glue_1.6.2       compiler_4.1.2  
[29] pillar_1.7.0     generics_0.1.3   scales_1.2.0     pkgconfig_2.0.3 
> summary(RES)
     method        stage           type             statistic     
 Min.   :1.0   Min.   :1.000   Length:1500        Min.   :0.0121  
 1st Qu.:1.0   1st Qu.:1.000   Class :character   1st Qu.:1.4935  
 Median :1.5   Median :1.000   Mode  :character   Median :2.3326  
 Mean   :1.5   Mean   :1.333                      Mean   :2.2042  
 3rd Qu.:2.0   3rd Qu.:2.000                      3rd Qu.:2.8798  
 Max.   :2.0   Max.   :2.000                      Max.   :4.3516  
                                                  NA's   :500     
  estimate_ML          se_ML             info           infoPC      
 Min.   :-0.2150   Min.   :0.3350   Min.   :4.603   Min.   :0.3597  
 1st Qu.: 0.5379   1st Qu.:0.3866   1st Qu.:5.749   1st Qu.:0.4492  
 Median : 0.7795   Median :0.4019   Median :6.295   Median :0.4919  
 Mean   : 0.7758   Mean   :0.4033   Mean   :6.304   Mean   :0.4926  
 3rd Qu.: 1.0370   3rd Qu.:0.4197   3rd Qu.:6.756   3rd Qu.:0.5279  
 Max.   : 1.6569   Max.   :0.4661   Max.   :9.508   Max.   :0.7430  
 NA's   :500       NA's   :1000     NA's   :162     NA's   :162     
   info.pred      infoPC.pred           uk              lk         
 Min.   :4.931   Min.   :0.3853   Min.   :2.253   Min.   :-0.2288  
 1st Qu.:6.041   1st Qu.:0.4721   1st Qu.:2.466   1st Qu.: 0.1483  
 Median :6.575   Median :0.5138   Median :2.521   Median : 0.3141  
 Mean   :6.612   Mean   :0.5167   Mean   :2.522   Mean   : 0.3145  
 3rd Qu.:7.117   3rd Qu.:0.5562   3rd Qu.:2.581   3rd Qu.: 0.4684  
 Max.   :9.415   Max.   :0.7357   Max.   :2.723   Max.   : 1.0895  
 NA's   :1000    NA's   :1000     NA's   :1000    NA's   :1000     
   decision            reason            p.value_ML        lower_ML      
 Length:1500        Length:1500        Min.   :0.0000   Min.   :-1.1109  
 Class :character   Class :character   1st Qu.:0.0019   1st Qu.:-0.0225  
 Mode  :character   Mode  :character   Median :0.0074   Median : 0.1410  
                                       Mean   :0.0738   Mean   : 0.0939  
                                       3rd Qu.:0.0308   3rd Qu.: 0.2623  
                                       Max.   :0.9670   Max.   : 0.7848  
                                       NA's   :1000     NA's   :1000     
    upper_ML       p.value_MUE       lower_MUE         upper_MUE     
 Min.   :0.6913   Min.   :0.0000   Min.   :-1.1060   Min.   :0.6863  
 1st Qu.:1.2694   1st Qu.:0.0033   1st Qu.:-0.0451   1st Qu.:1.2579  
 Median :1.4419   Median :0.0074   Median : 0.0692   Median :1.4179  
 Mean   :1.5269   Mean   :0.0403   Mean   : 0.0641   Mean   :1.5341  
 3rd Qu.:1.8087   3rd Qu.:0.0180   3rd Qu.: 0.1856   3rd Qu.:1.8440  
 Max.   :2.4971   Max.   :0.7001   Max.   : 1.6121   Max.   :3.0145  
 NA's   :1000     NA's   :1000     NA's   :1000      NA's   :1000    
  estimate_MUE           ck          time.interim        seed      
 Min.   :-0.2098   Min.   :0.0131   Min.   :487.0   Min.   :  358  
 1st Qu.: 0.6174   1st Qu.:1.3990   1st Qu.:583.0   1st Qu.:23471  
 Median : 0.7792   Median :1.4546   Median :600.0   Median :48028  
 Mean   : 0.8163   Mean   :1.4199   Mean   :601.4   Mean   :49148  
 3rd Qu.: 1.0408   3rd Qu.:1.5117   3rd Qu.:620.0   3rd Qu.:75268  
 Max.   : 2.2130   Max.   :1.7143   Max.   :682.0   Max.   :99383  
 NA's   :1000      NA's   :662                                     
  nX1.interim     nX2.interim     nX3.interim    computation.time
 Min.   :146.0   Min.   :130.0   Min.   :119.0   Min.   :0.6710  
 1st Qu.:148.0   1st Qu.:135.0   1st Qu.:125.0   1st Qu.:0.9150  
 Median :148.0   Median :136.0   Median :127.0   Median :0.9925  
 Mean   :148.6   Mean   :136.4   Mean   :126.9   Mean   :1.0211  
 3rd Qu.:149.0   3rd Qu.:138.0   3rd Qu.:129.0   3rd Qu.:1.1290  
 Max.   :154.0   Max.   :143.0   Max.   :135.0   Max.   :3.6350  
                                                                 
> 
> #----------------------------------------------------------------------
> ### BATCH_simuMain.R ends here
> 
> proc.time()
   user  system elapsed 
258.204   0.448 269.615 
