
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### BATCH_simuMain.R --- 
> #----------------------------------------------------------------------
> ## Author: Paul Blanche
> ## Created: Mar  5 2021 (10:56) 
> ## Version: 
> ## Last-Updated: jul  7 2022 (13:56) 
> ##           By: Brice Ozenne
> ##     Update #: 518
> #----------------------------------------------------------------------
> ## 
> ### Commentary: 
> ## 
> ### Change Log:
> #----------------------------------------------------------------------
> ## 
> ### Code:
> 
> ## ** BATCH loop
> ## cd /projects/biostat01/people/hpl802/DelayedGSD/
> ## for ITER in `seq 1 10`;
> ## do
> ## eval 'R CMD BATCH --vanilla "--args iter_sim='$ITER' n.iter_sim=10" BATCH_simuMain.R output/R-simuMain-'$ITER'.Rout &'
> ## done
> 
> ## [1] 1186669
> ## [2] 1186670
> ## [3] 1186671
> ## [4] 1186672
> ## [5] 1186673
> ## [6] 1186674
> ## [7] 1186675
> ## [8] 1186676
> ## [9] 1186677
> ## [10] 1186678
> 
> rm(list=ls())
>                                    # {{{ parameters
> ## * parameters
> name <- "ScenarioName" # To save the results
> method <- 1:2 # methods used to compute the boundaries
>                                         #---
> myseed <- 140786598
>                                         #--- to plan the trial ----
> NMC <- 250 # number of sequential simulations to run in parallel. Eg. with 250, then we can run 40 scripts in paralell to get N=10,000 runs in total.
> kMax <- 2  #max number of analyses (including final)
> alpha <- 0.025  #type I error (one sided)
> beta <- 0.2  #type II error
> informationRates <- c(0.5,1)  #planned  information rates
> rho_alpha <- 2  # rho parameter for alpha error spending function
> rho_beta <- 2  # rho parameter for beta error spending function
> ## deltaPower <- 0.75 # just to try another value when Id > Imax
> Id <- 0.55  #(expected) information rate at each decision analysis
> binding <- TRUE
>                                         #
>                                         #---- to generate data -----------
>                                         #
> block <- c(1,1,0,0) 
> allsd <- c(2.5,2.1,2.4) # sd, first from baseline measurement, then the two changes from baseline
> mean0 <- c(10,0,0) # mean placebo group (again, first is absolute value, then change from baseline)
> delta <- c(0,0.6,0.8) # treatment effect
> ar <- (0.86*2)*2 # orginial accrual rate from data from Corine is 0.86 per week, hence we multiply by 2 for by 14 days. As to low, we further multiply by 2
> cor011 <- -0.15 # ~ from data from Corine
> corij1 <- 0.68  # ~ from data from Corine
> cor0j1 <- -0.27  # ~ from data from Corine
> Miss11 <- 5/104 # miss both V1 and V2
> Miss12 <- 1/104 # miss V1 and but not V2
> Miss21 <- 6/104 # do not miss V1 and but miss V2
> Miss22 <- 92/104 # miss none
> PropForInterim <- 0.5 # Decide to have interim analysiz when PropForInterim % of all subjects have had the chance to have one follow-up measuement recorded in the data to be available for analysis.
> theDelta.t <- 1.50001 # time lag to process the data and make them ready to analyze after collecting them (unit is time between two follow-up visits)
> TimeFactor <- 14 ## number of days between two visits
>                                         #
>                                         #--- actually for both planing the trial  and generating data-----
>                                         #
>                                         #
> deltaPower <- abs(delta[3]) # effect (NOT Z-scale/unit, but outcome scale/unit!) that the study is powered for: should we choose ourselves or compute from other numbers above ???
> n <- ceiling(2*2*((allsd[3]/deltaPower)^2)*(qnorm(1-beta)-qnorm(alpha))^2) #104 with Corine's data # should we choose ourselves or compute from the above numbers ???
>                                         # inflate SS as required for interim
> 
>                                         # {{{ Set seeds for parallel computing and reproducibility
> ## * Seed
> args <- commandArgs(TRUE) ## BATCH MODE
> if(length(args)>0){
+     for (arg in args){
+         eval(parse(text=arg))
+     }
+ }else{ ## SLUMR
+     iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_ID"))
+     n.iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_COUNT"))
+ } ## interactive
> if(is.na(iter_sim)){iter_sim <- 1}
> if(is.na(n.iter_sim)){n.iter_sim <- 40}
> 
> set.seed(140786598)
> allseeds <- sample.int(n = 10*n.iter_sim*NMC, size = n.iter_sim*NMC, replace=FALSE) #x=1:(.Machine$integer.max) seems to be maximal possible
> # }}}
> 
> # {{{ set path to load and save and othe machine specific variables
> ## * path
> path <- "."
> path.res <- file.path(path,"Results","simuMain")
> if(dir.exists(path.res)==FALSE){
+     if(dir.exists(file.path(path,"Results"))==FALSE){
+     dir.create(file.path(path,"Results"))
+     }
+     dir.create(path.res)
+ }
> path.output <- file.path(path,"output","simuMain")
> if(dir.exists(path.output)==FALSE){
+     if(dir.exists(file.path(path,"output"))==FALSE){
+     dir.create(file.path(path,"output"))
+     }
+     dir.create(path.output)
+ }
> # }}}
> 
> 
> ## * libraries and functions
> library(DelayedGSD)
DelayedGSD version 0.0.3
> ## sourceDir <- function(path, trace = TRUE, ...) {
> ##     for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
> ##         if(trace) cat(nm,":")
> ##         source(file.path(path, nm), ...)
> ##         if(trace) cat("\n")
> ##     }
> ## }
> ## sourceDir(pathToLoad)
>     
> 
> ## * Compute inflation factor and sample size
> plannedB <- vector(mode = "list", length = 3)
> for(iMeth in method){ ## iMeth <- 1
+     plannedB[[iMeth]] <- CalcBoundaries(kMax=kMax,  
+                                         alpha=alpha, 
+                                         beta=beta,  
+                                         InfoR.i=informationRates,  
+                                         InfoR.d=c(Id,1),  
+                                         rho_alpha=rho_alpha,  
+                                         rho_beta=rho_beta,  
+                                         method=iMeth,  
+                                         cNotBelowFixedc=FALSE,
+                                         bindingFutility=binding,
+                                         delta=tail(delta,1))
+     ## summary(plannedB[[1]])
+     ## coef(plannedB[[iMeth]], type = "information")
+ }
Loading required namespace: gsDesign
Loading required package: mvtnorm
Loading required namespace: BB
> inflationFactor <- unlist(lapply(plannedB,function(iP){iP$planned$InflationFactor}))
> nGSD <- ceiling(n*inflationFactor)
> ##  plot(plannedB[[1]])
> 
> #
> # --- just to check---
> ## n
> ## InfoFixed <- ((qnorm(1-beta)-qnorm(alpha))/(deltaPower))^2
> ## InfoFixed
> ## n/(4*(allsd[3])^2)
> #---
> # }}}
> 
> 
> 
> 
> # {{{ technical details to loop
> RES <- NULL # initialize results to save
> allj <- ((iter_sim-1)*NMC + 1):(iter_sim*NMC) # indices of all iterations (replicates) for this job, accountng for the other jobs running in parallel
> # }}}
> 
> ## * Loop
> for(j in allj){ ## j <- 51 ## 5
+     startComp <- Sys.time()
+     myseedi <- allseeds[j]
+     # {{{ TRACE info (e.g. to check the Rout)
+     print(paste0("seed ",myseedi," for ","j=",which(j==allj)," out of ",NMC, " (i.e. j=",j," in [",(iter_sim-1)*NMC + 1,";",iter_sim*NMC,"], as job id is i=",iter_sim,")"))
+     # }}}
+     # {{{ Missing probabilities
+     MyMissProb <- matrix(c(Miss11,Miss12,Miss21,Miss22),ncol=2,nrow=2,byrow=TRUE) # to additionnally remove 1 more because some FASFL=N
+     colnames(MyMissProb) <- c("V2 missing","V2 not missing")
+     rownames(MyMissProb) <- c("V1 missing","V1 not missing")
+     # }}}
+ 
+                                         # {{{ generate data
+     ## ** simulate
+     res <- GenData(n=n, 
+                    N.fw=2,
+                    rand.block=block,
+                    allsd=allsd,
+                    mean0=mean0,
+                    delta=delta,
+                    ar=ar,
+                    cor.01.1=cor011,
+                    cor.ij.1=corij1,
+                    cor.0j.1=cor0j1,
+                    seed=myseedi,
+                    MissProb=MyMissProb,
+                    DigitsOutcome=2,
+                    TimeFactor=TimeFactor,
+                    DigitsTime=0
+                    )
+     d <- res$d
+     ## head(d,n=20)
+                                         # }}}
+                                         # {{{ reformat data like those of Corine
+     ## Make data long format
+     ## dd <- FormatAsCase(d)
+     ## head(dd)
+     ## summary(dd)
+                                         # }}}
+    
+                                         # {{{ make data available at interim
+                                         # Here we stop inclusion data collection for the interim analysis as soon as
+                                         # half of the participants have completed (or had the opportunity to complete) the follow-up 
+     thet <- d$t3[ceiling(n*PropForInterim)]
+     di <- SelectData(d,t=thet)
+     ## ddi <- FormatAsCase(di) # needed ????
+     ## head(d[d$id==52,])
+                                         # }}}
+     ## {{{ analyze data at at interim
+     ## ** interim
+     lmmI <- analyzeData(di, ddf = "nlme", data.decision = sum(d$t1 <= thet + theDelta.t*TimeFactor), getinfo = TRUE, trace = TRUE)
+     ## lmmI <- analyzeData(di, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     currentGSD <- vector(mode = "list", length = 3)
+     out.interim <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+ 
+         currentGSD[[iMeth]] <- update(plannedB[[iMeth]], delta = lmmI, trace = FALSE)
+ 
+         iConfint.interim <- confint(currentGSD[[iMeth]])
+         iInfo.interim <- coef(currentGSD[[iMeth]], type = "information")
+         iBoundary.interim <- coef(currentGSD[[iMeth]], type = "boundary")
+         iDecision.interim <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+         out.interim[[iMeth]] <-  data.frame(statistic = iConfint.interim[1,"statistic"],
+                                             estimate_ML = iConfint.interim[1,"estimate"],
+                                             se_ML = iConfint.interim[1,"se"],
+                                             info = iInfo.interim[1,"Interim"],
+                                             infoPC = iInfo.interim[1,"Interim.pc"],
+                                             info.pred = iInfo.interim[1,"Decision"],
+                                             infoPC.pred = iInfo.interim[1,"Decision.pc"],
+                                             uk = iBoundary.interim[1,"Ebound"],
+                                             lk = iBoundary.interim[1,"Fbound"],
+                                             decision = iDecision.interim["decision","stage 1"],
+                                             reason = iDecision.interim["reason.interim","stage 1"])
+     }
+     ## currentGSD[[1]]
+     ## plot(currentGSD[[1]])
+ 
+     ## ** decision
+     dDecision <- d[which(d$t1 <= thet + theDelta.t*TimeFactor),]
+     lmmD <- analyzeData(dDecision, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+     
+     out.decision <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+           
+         if(out.interim[[iMeth]]$decision == "stop"){
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, trace = FALSE)
+             ## plot(currentGSD[[iMeth]])
+ 
+             iConfint.decision <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.decision  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = iConfint.decision[1,"statistic"],
+                                                 p.value_ML = iConfint.decision[iConfint.decision$method == "ML","p.value"],
+                                                 lower_ML = iConfint.decision[iConfint.decision$method == "ML","lower"],
+                                                 upper_ML = iConfint.decision[iConfint.decision$method == "ML","upper"],
+                                                 estimate_ML = iConfint.decision[iConfint.decision$method == "ML","estimate"],
+                                                 p.value_MUE = iConfint.decision[iConfint.decision$method == "MUE","p.value"],
+                                                 lower_MUE = iConfint.decision[iConfint.decision$method == "MUE","lower"],
+                                                 upper_MUE = iConfint.decision[iConfint.decision$method == "MUE","upper"],
+                                                 estimate_MUE = iConfint.decision[iConfint.decision$method == "MUE","estimate"],
+                                                 info = iInfo.decision[1,"Interim"],
+                                                 infoPC = iInfo.decision[1,"Interim.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = unname(iDecision.decision["decision","stage 2"])
+                                                 )
+ 
+         }else{
+             ## update information
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, k = 1, type.k = "decision", trace = FALSE)
+ 
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = NA,
+                                                 p.value_ML = NA,
+                                                 lower_ML = NA,
+                                                 upper_ML = NA,
+                                                 estimate_ML = NA,
+                                                 p.value_MUE = NA,
+                                                 lower_MUE = NA,
+                                                 upper_MUE = NA,
+                                                 estimate_MUE = NA,
+                                                 info = iInfo.decision[1,"Decision"],
+                                                 infoPC = iInfo.decision[1,"Decision.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = NA)
+         }
+     }
+                                         # }}}
+                                         # {{{ Analyze data at decision
+ 
+     ## ** finale
+     dFinal <- d
+     lmmF <- analyzeData(dFinal, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     out.final <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+         if(out.interim[[iMeth]]$decision == "stop"){
+             out.final[[iMeth]] <- data.frame(statistic = NA,
+                                              p.value_ML = NA,
+                                              lower_ML = NA,
+                                              upper_ML = NA,
+                                              estimate_ML = NA,
+                                              p.value_MUE = NA,
+                                              lower_MUE = NA,
+                                              upper_MUE = NA,
+                                              estimate_MUE = NA,
+                                              info = NA,
+                                              infoPC = NA,
+                                              ck = NA,
+                                              decision = NA)
+ 
+         }else{
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmF, trace = FALSE)
+ 
+             ## plot(test)
+             ## summary(test)
+             iConfint.final <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.final <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.final <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.final  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.final[[iMeth]] <- data.frame(statistic = iConfint.final[1,"statistic"],
+                                              p.value_ML = iConfint.final[iConfint.final$method == "ML","p.value"],
+                                              lower_ML = iConfint.final[iConfint.final$method == "ML","lower"],
+                                              upper_ML = iConfint.final[iConfint.final$method == "ML","upper"],
+                                              estimate_ML = iConfint.final[iConfint.final$method == "ML","estimate"],
+                                              p.value_MUE = iConfint.final[iConfint.final$method == "MUE","p.value"],
+                                              lower_MUE = iConfint.final[iConfint.final$method == "MUE","lower"],
+                                              upper_MUE = iConfint.final[iConfint.final$method == "MUE","upper"],
+                                              estimate_MUE = iConfint.final[iConfint.final$method == "MUE","estimate"],
+                                              info = iInfo.final[1,"Interim"],
+                                              infoPC = iInfo.final[1,"Interim.pc"],
+                                              ck = iBoundary.final[1,"Cbound"],
+                                              decision = unname(coef(currentGSD[[iMeth]], type = "decision")["decision","stage 2"])
+                                              )
+         }
+     }
+                                         # }}}
+ 
+     stopComp <- Sys.time()
+                                         # {{{ Save results
+ 
+     outMerge <- do.call(rbind,lapply(method, function(iMeth){
+         iNames <- unique(c(names(out.interim[[iMeth]]),names(out.decision[[iMeth]]),names(out.final[[iMeth]])))
+         iMerge <- data.frame(matrix(NA, ncol = length(iNames)+3, nrow = 3, dimnames = list(NULL, c("method", "stage", "type", iNames))))
+         iMerge[1,c("method","stage","type",names(out.interim[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "interim", out.interim[[iMeth]]) 
+         iMerge[2,c("method","stage","type",names(out.decision[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "decision", out.decision[[iMeth]]) 
+         iMerge[3,c("method","stage","type",names(out.final[[iMeth]]))] <- data.frame(method = iMeth, stage = 2, type = "final", out.final[[iMeth]])
+         return(iMerge)
+     }))
+ 
+     ## outMerge[outMerge$method==3,]
+ 
+     out <- cbind(
+         ## results
+         outMerge,
+         ## simulation details
+         time.interim = thet,
+         seed=myseedi,             
+         nX1.interim = sum(!is.na(di$X1)),
+         nX2.interim = sum(!is.na(di$X2)),
+         nX3.interim = sum(!is.na(di$X3)),
+         ## computation time
+         computation.time=as.double(round(difftime(stopComp,startComp,units="secs"),3))
+     )
+     ## names(out) <- myColNames
+     RES <- rbind(RES,out)
+     save(RES,file=paste0(path.res,name,"(tempo)-",iter_sim,".rda"))
+                                         # }}}
+ }
[1] "seed 42849 for j=1 out of 250 (i.e. j=7251 in [7251;7500], as job id is i=30)"
Loading required namespace: nlme
[1] "seed 65531 for j=2 out of 250 (i.e. j=7252 in [7251;7500], as job id is i=30)"
[1] "seed 32220 for j=3 out of 250 (i.e. j=7253 in [7251;7500], as job id is i=30)"
[1] "seed 33525 for j=4 out of 250 (i.e. j=7254 in [7251;7500], as job id is i=30)"
[1] "seed 7805 for j=5 out of 250 (i.e. j=7255 in [7251;7500], as job id is i=30)"
[1] "seed 72442 for j=6 out of 250 (i.e. j=7256 in [7251;7500], as job id is i=30)"
[1] "seed 19627 for j=7 out of 250 (i.e. j=7257 in [7251;7500], as job id is i=30)"
[1] "seed 21603 for j=8 out of 250 (i.e. j=7258 in [7251;7500], as job id is i=30)"
[1] "seed 76503 for j=9 out of 250 (i.e. j=7259 in [7251;7500], as job id is i=30)"
[1] "seed 28644 for j=10 out of 250 (i.e. j=7260 in [7251;7500], as job id is i=30)"
[1] "seed 60439 for j=11 out of 250 (i.e. j=7261 in [7251;7500], as job id is i=30)"
[1] "seed 45891 for j=12 out of 250 (i.e. j=7262 in [7251;7500], as job id is i=30)"
[1] "seed 91051 for j=13 out of 250 (i.e. j=7263 in [7251;7500], as job id is i=30)"
[1] "seed 85734 for j=14 out of 250 (i.e. j=7264 in [7251;7500], as job id is i=30)"
[1] "seed 13532 for j=15 out of 250 (i.e. j=7265 in [7251;7500], as job id is i=30)"
[1] "seed 24128 for j=16 out of 250 (i.e. j=7266 in [7251;7500], as job id is i=30)"
[1] "seed 2308 for j=17 out of 250 (i.e. j=7267 in [7251;7500], as job id is i=30)"
[1] "seed 54852 for j=18 out of 250 (i.e. j=7268 in [7251;7500], as job id is i=30)"
[1] "seed 59179 for j=19 out of 250 (i.e. j=7269 in [7251;7500], as job id is i=30)"
[1] "seed 80679 for j=20 out of 250 (i.e. j=7270 in [7251;7500], as job id is i=30)"
[1] "seed 40674 for j=21 out of 250 (i.e. j=7271 in [7251;7500], as job id is i=30)"
[1] "seed 83203 for j=22 out of 250 (i.e. j=7272 in [7251;7500], as job id is i=30)"
[1] "seed 19520 for j=23 out of 250 (i.e. j=7273 in [7251;7500], as job id is i=30)"
[1] "seed 47124 for j=24 out of 250 (i.e. j=7274 in [7251;7500], as job id is i=30)"
[1] "seed 53272 for j=25 out of 250 (i.e. j=7275 in [7251;7500], as job id is i=30)"
[1] "seed 1166 for j=26 out of 250 (i.e. j=7276 in [7251;7500], as job id is i=30)"
[1] "seed 58563 for j=27 out of 250 (i.e. j=7277 in [7251;7500], as job id is i=30)"
[1] "seed 76838 for j=28 out of 250 (i.e. j=7278 in [7251;7500], as job id is i=30)"
[1] "seed 93774 for j=29 out of 250 (i.e. j=7279 in [7251;7500], as job id is i=30)"
[1] "seed 51487 for j=30 out of 250 (i.e. j=7280 in [7251;7500], as job id is i=30)"
[1] "seed 70597 for j=31 out of 250 (i.e. j=7281 in [7251;7500], as job id is i=30)"
[1] "seed 14659 for j=32 out of 250 (i.e. j=7282 in [7251;7500], as job id is i=30)"
[1] "seed 88988 for j=33 out of 250 (i.e. j=7283 in [7251;7500], as job id is i=30)"
[1] "seed 16937 for j=34 out of 250 (i.e. j=7284 in [7251;7500], as job id is i=30)"
[1] "seed 58972 for j=35 out of 250 (i.e. j=7285 in [7251;7500], as job id is i=30)"
[1] "seed 19347 for j=36 out of 250 (i.e. j=7286 in [7251;7500], as job id is i=30)"
[1] "seed 35743 for j=37 out of 250 (i.e. j=7287 in [7251;7500], as job id is i=30)"
[1] "seed 29785 for j=38 out of 250 (i.e. j=7288 in [7251;7500], as job id is i=30)"
[1] "seed 34836 for j=39 out of 250 (i.e. j=7289 in [7251;7500], as job id is i=30)"
[1] "seed 29738 for j=40 out of 250 (i.e. j=7290 in [7251;7500], as job id is i=30)"
[1] "seed 75070 for j=41 out of 250 (i.e. j=7291 in [7251;7500], as job id is i=30)"
[1] "seed 54443 for j=42 out of 250 (i.e. j=7292 in [7251;7500], as job id is i=30)"
[1] "seed 64200 for j=43 out of 250 (i.e. j=7293 in [7251;7500], as job id is i=30)"
[1] "seed 583 for j=44 out of 250 (i.e. j=7294 in [7251;7500], as job id is i=30)"
[1] "seed 57756 for j=45 out of 250 (i.e. j=7295 in [7251;7500], as job id is i=30)"
[1] "seed 31093 for j=46 out of 250 (i.e. j=7296 in [7251;7500], as job id is i=30)"
[1] "seed 18622 for j=47 out of 250 (i.e. j=7297 in [7251;7500], as job id is i=30)"
[1] "seed 34409 for j=48 out of 250 (i.e. j=7298 in [7251;7500], as job id is i=30)"
[1] "seed 59617 for j=49 out of 250 (i.e. j=7299 in [7251;7500], as job id is i=30)"
[1] "seed 2592 for j=50 out of 250 (i.e. j=7300 in [7251;7500], as job id is i=30)"
[1] "seed 97617 for j=51 out of 250 (i.e. j=7301 in [7251;7500], as job id is i=30)"
[1] "seed 62290 for j=52 out of 250 (i.e. j=7302 in [7251;7500], as job id is i=30)"
[1] "seed 24851 for j=53 out of 250 (i.e. j=7303 in [7251;7500], as job id is i=30)"
[1] "seed 62164 for j=54 out of 250 (i.e. j=7304 in [7251;7500], as job id is i=30)"
[1] "seed 90419 for j=55 out of 250 (i.e. j=7305 in [7251;7500], as job id is i=30)"
[1] "seed 10626 for j=56 out of 250 (i.e. j=7306 in [7251;7500], as job id is i=30)"
[1] "seed 63976 for j=57 out of 250 (i.e. j=7307 in [7251;7500], as job id is i=30)"
[1] "seed 51632 for j=58 out of 250 (i.e. j=7308 in [7251;7500], as job id is i=30)"
[1] "seed 66766 for j=59 out of 250 (i.e. j=7309 in [7251;7500], as job id is i=30)"
[1] "seed 37655 for j=60 out of 250 (i.e. j=7310 in [7251;7500], as job id is i=30)"
[1] "seed 18639 for j=61 out of 250 (i.e. j=7311 in [7251;7500], as job id is i=30)"
[1] "seed 52423 for j=62 out of 250 (i.e. j=7312 in [7251;7500], as job id is i=30)"
[1] "seed 23183 for j=63 out of 250 (i.e. j=7313 in [7251;7500], as job id is i=30)"
[1] "seed 99885 for j=64 out of 250 (i.e. j=7314 in [7251;7500], as job id is i=30)"
[1] "seed 86583 for j=65 out of 250 (i.e. j=7315 in [7251;7500], as job id is i=30)"
[1] "seed 58307 for j=66 out of 250 (i.e. j=7316 in [7251;7500], as job id is i=30)"
[1] "seed 7353 for j=67 out of 250 (i.e. j=7317 in [7251;7500], as job id is i=30)"
[1] "seed 42724 for j=68 out of 250 (i.e. j=7318 in [7251;7500], as job id is i=30)"
[1] "seed 13301 for j=69 out of 250 (i.e. j=7319 in [7251;7500], as job id is i=30)"
[1] "seed 49015 for j=70 out of 250 (i.e. j=7320 in [7251;7500], as job id is i=30)"
[1] "seed 87037 for j=71 out of 250 (i.e. j=7321 in [7251;7500], as job id is i=30)"
[1] "seed 78738 for j=72 out of 250 (i.e. j=7322 in [7251;7500], as job id is i=30)"
[1] "seed 67363 for j=73 out of 250 (i.e. j=7323 in [7251;7500], as job id is i=30)"
[1] "seed 65540 for j=74 out of 250 (i.e. j=7324 in [7251;7500], as job id is i=30)"
[1] "seed 77189 for j=75 out of 250 (i.e. j=7325 in [7251;7500], as job id is i=30)"
[1] "seed 68952 for j=76 out of 250 (i.e. j=7326 in [7251;7500], as job id is i=30)"
[1] "seed 7170 for j=77 out of 250 (i.e. j=7327 in [7251;7500], as job id is i=30)"
[1] "seed 95841 for j=78 out of 250 (i.e. j=7328 in [7251;7500], as job id is i=30)"
[1] "seed 20142 for j=79 out of 250 (i.e. j=7329 in [7251;7500], as job id is i=30)"
[1] "seed 92685 for j=80 out of 250 (i.e. j=7330 in [7251;7500], as job id is i=30)"
[1] "seed 57205 for j=81 out of 250 (i.e. j=7331 in [7251;7500], as job id is i=30)"
[1] "seed 98578 for j=82 out of 250 (i.e. j=7332 in [7251;7500], as job id is i=30)"
[1] "seed 19805 for j=83 out of 250 (i.e. j=7333 in [7251;7500], as job id is i=30)"
[1] "seed 54238 for j=84 out of 250 (i.e. j=7334 in [7251;7500], as job id is i=30)"
[1] "seed 11184 for j=85 out of 250 (i.e. j=7335 in [7251;7500], as job id is i=30)"
[1] "seed 51085 for j=86 out of 250 (i.e. j=7336 in [7251;7500], as job id is i=30)"
[1] "seed 75987 for j=87 out of 250 (i.e. j=7337 in [7251;7500], as job id is i=30)"
[1] "seed 23084 for j=88 out of 250 (i.e. j=7338 in [7251;7500], as job id is i=30)"
[1] "seed 44367 for j=89 out of 250 (i.e. j=7339 in [7251;7500], as job id is i=30)"
[1] "seed 36094 for j=90 out of 250 (i.e. j=7340 in [7251;7500], as job id is i=30)"
[1] "seed 35546 for j=91 out of 250 (i.e. j=7341 in [7251;7500], as job id is i=30)"
[1] "seed 3269 for j=92 out of 250 (i.e. j=7342 in [7251;7500], as job id is i=30)"
[1] "seed 21583 for j=93 out of 250 (i.e. j=7343 in [7251;7500], as job id is i=30)"
[1] "seed 9038 for j=94 out of 250 (i.e. j=7344 in [7251;7500], as job id is i=30)"
[1] "seed 25741 for j=95 out of 250 (i.e. j=7345 in [7251;7500], as job id is i=30)"
[1] "seed 11326 for j=96 out of 250 (i.e. j=7346 in [7251;7500], as job id is i=30)"
[1] "seed 87553 for j=97 out of 250 (i.e. j=7347 in [7251;7500], as job id is i=30)"
[1] "seed 10064 for j=98 out of 250 (i.e. j=7348 in [7251;7500], as job id is i=30)"
[1] "seed 79233 for j=99 out of 250 (i.e. j=7349 in [7251;7500], as job id is i=30)"
[1] "seed 70510 for j=100 out of 250 (i.e. j=7350 in [7251;7500], as job id is i=30)"
[1] "seed 85231 for j=101 out of 250 (i.e. j=7351 in [7251;7500], as job id is i=30)"
[1] "seed 36886 for j=102 out of 250 (i.e. j=7352 in [7251;7500], as job id is i=30)"
[1] "seed 45198 for j=103 out of 250 (i.e. j=7353 in [7251;7500], as job id is i=30)"
[1] "seed 19359 for j=104 out of 250 (i.e. j=7354 in [7251;7500], as job id is i=30)"
[1] "seed 40289 for j=105 out of 250 (i.e. j=7355 in [7251;7500], as job id is i=30)"
[1] "seed 94812 for j=106 out of 250 (i.e. j=7356 in [7251;7500], as job id is i=30)"
[1] "seed 41851 for j=107 out of 250 (i.e. j=7357 in [7251;7500], as job id is i=30)"
[1] "seed 5241 for j=108 out of 250 (i.e. j=7358 in [7251;7500], as job id is i=30)"
[1] "seed 57183 for j=109 out of 250 (i.e. j=7359 in [7251;7500], as job id is i=30)"
[1] "seed 4340 for j=110 out of 250 (i.e. j=7360 in [7251;7500], as job id is i=30)"
[1] "seed 87894 for j=111 out of 250 (i.e. j=7361 in [7251;7500], as job id is i=30)"
[1] "seed 8792 for j=112 out of 250 (i.e. j=7362 in [7251;7500], as job id is i=30)"
[1] "seed 64112 for j=113 out of 250 (i.e. j=7363 in [7251;7500], as job id is i=30)"
[1] "seed 23111 for j=114 out of 250 (i.e. j=7364 in [7251;7500], as job id is i=30)"
[1] "seed 85395 for j=115 out of 250 (i.e. j=7365 in [7251;7500], as job id is i=30)"
[1] "seed 52465 for j=116 out of 250 (i.e. j=7366 in [7251;7500], as job id is i=30)"
[1] "seed 83829 for j=117 out of 250 (i.e. j=7367 in [7251;7500], as job id is i=30)"
[1] "seed 90310 for j=118 out of 250 (i.e. j=7368 in [7251;7500], as job id is i=30)"
[1] "seed 98187 for j=119 out of 250 (i.e. j=7369 in [7251;7500], as job id is i=30)"
[1] "seed 82763 for j=120 out of 250 (i.e. j=7370 in [7251;7500], as job id is i=30)"
[1] "seed 71459 for j=121 out of 250 (i.e. j=7371 in [7251;7500], as job id is i=30)"
[1] "seed 83590 for j=122 out of 250 (i.e. j=7372 in [7251;7500], as job id is i=30)"
[1] "seed 79069 for j=123 out of 250 (i.e. j=7373 in [7251;7500], as job id is i=30)"
[1] "seed 39598 for j=124 out of 250 (i.e. j=7374 in [7251;7500], as job id is i=30)"
[1] "seed 83863 for j=125 out of 250 (i.e. j=7375 in [7251;7500], as job id is i=30)"
[1] "seed 75184 for j=126 out of 250 (i.e. j=7376 in [7251;7500], as job id is i=30)"
[1] "seed 90877 for j=127 out of 250 (i.e. j=7377 in [7251;7500], as job id is i=30)"
[1] "seed 88724 for j=128 out of 250 (i.e. j=7378 in [7251;7500], as job id is i=30)"
[1] "seed 4516 for j=129 out of 250 (i.e. j=7379 in [7251;7500], as job id is i=30)"
[1] "seed 62879 for j=130 out of 250 (i.e. j=7380 in [7251;7500], as job id is i=30)"
[1] "seed 94902 for j=131 out of 250 (i.e. j=7381 in [7251;7500], as job id is i=30)"
[1] "seed 76473 for j=132 out of 250 (i.e. j=7382 in [7251;7500], as job id is i=30)"
[1] "seed 94073 for j=133 out of 250 (i.e. j=7383 in [7251;7500], as job id is i=30)"
[1] "seed 42191 for j=134 out of 250 (i.e. j=7384 in [7251;7500], as job id is i=30)"
[1] "seed 32443 for j=135 out of 250 (i.e. j=7385 in [7251;7500], as job id is i=30)"
[1] "seed 1853 for j=136 out of 250 (i.e. j=7386 in [7251;7500], as job id is i=30)"
[1] "seed 78352 for j=137 out of 250 (i.e. j=7387 in [7251;7500], as job id is i=30)"
[1] "seed 3369 for j=138 out of 250 (i.e. j=7388 in [7251;7500], as job id is i=30)"
[1] "seed 96148 for j=139 out of 250 (i.e. j=7389 in [7251;7500], as job id is i=30)"
[1] "seed 40166 for j=140 out of 250 (i.e. j=7390 in [7251;7500], as job id is i=30)"
[1] "seed 17575 for j=141 out of 250 (i.e. j=7391 in [7251;7500], as job id is i=30)"
[1] "seed 25183 for j=142 out of 250 (i.e. j=7392 in [7251;7500], as job id is i=30)"
[1] "seed 12833 for j=143 out of 250 (i.e. j=7393 in [7251;7500], as job id is i=30)"
[1] "seed 88494 for j=144 out of 250 (i.e. j=7394 in [7251;7500], as job id is i=30)"
[1] "seed 17983 for j=145 out of 250 (i.e. j=7395 in [7251;7500], as job id is i=30)"
[1] "seed 58329 for j=146 out of 250 (i.e. j=7396 in [7251;7500], as job id is i=30)"
[1] "seed 43314 for j=147 out of 250 (i.e. j=7397 in [7251;7500], as job id is i=30)"
[1] "seed 68049 for j=148 out of 250 (i.e. j=7398 in [7251;7500], as job id is i=30)"
[1] "seed 683 for j=149 out of 250 (i.e. j=7399 in [7251;7500], as job id is i=30)"
[1] "seed 9061 for j=150 out of 250 (i.e. j=7400 in [7251;7500], as job id is i=30)"
[1] "seed 93824 for j=151 out of 250 (i.e. j=7401 in [7251;7500], as job id is i=30)"
[1] "seed 37776 for j=152 out of 250 (i.e. j=7402 in [7251;7500], as job id is i=30)"
[1] "seed 19436 for j=153 out of 250 (i.e. j=7403 in [7251;7500], as job id is i=30)"
[1] "seed 3535 for j=154 out of 250 (i.e. j=7404 in [7251;7500], as job id is i=30)"
[1] "seed 57895 for j=155 out of 250 (i.e. j=7405 in [7251;7500], as job id is i=30)"
[1] "seed 71632 for j=156 out of 250 (i.e. j=7406 in [7251;7500], as job id is i=30)"
[1] "seed 57732 for j=157 out of 250 (i.e. j=7407 in [7251;7500], as job id is i=30)"
[1] "seed 37773 for j=158 out of 250 (i.e. j=7408 in [7251;7500], as job id is i=30)"
[1] "seed 7511 for j=159 out of 250 (i.e. j=7409 in [7251;7500], as job id is i=30)"
[1] "seed 98762 for j=160 out of 250 (i.e. j=7410 in [7251;7500], as job id is i=30)"
[1] "seed 41977 for j=161 out of 250 (i.e. j=7411 in [7251;7500], as job id is i=30)"
[1] "seed 80150 for j=162 out of 250 (i.e. j=7412 in [7251;7500], as job id is i=30)"
[1] "seed 70922 for j=163 out of 250 (i.e. j=7413 in [7251;7500], as job id is i=30)"
[1] "seed 69952 for j=164 out of 250 (i.e. j=7414 in [7251;7500], as job id is i=30)"
[1] "seed 21889 for j=165 out of 250 (i.e. j=7415 in [7251;7500], as job id is i=30)"
[1] "seed 62137 for j=166 out of 250 (i.e. j=7416 in [7251;7500], as job id is i=30)"
[1] "seed 98755 for j=167 out of 250 (i.e. j=7417 in [7251;7500], as job id is i=30)"
[1] "seed 81137 for j=168 out of 250 (i.e. j=7418 in [7251;7500], as job id is i=30)"
[1] "seed 26895 for j=169 out of 250 (i.e. j=7419 in [7251;7500], as job id is i=30)"
[1] "seed 82813 for j=170 out of 250 (i.e. j=7420 in [7251;7500], as job id is i=30)"
[1] "seed 81792 for j=171 out of 250 (i.e. j=7421 in [7251;7500], as job id is i=30)"
[1] "seed 17512 for j=172 out of 250 (i.e. j=7422 in [7251;7500], as job id is i=30)"
[1] "seed 61138 for j=173 out of 250 (i.e. j=7423 in [7251;7500], as job id is i=30)"
[1] "seed 64836 for j=174 out of 250 (i.e. j=7424 in [7251;7500], as job id is i=30)"
[1] "seed 58496 for j=175 out of 250 (i.e. j=7425 in [7251;7500], as job id is i=30)"
[1] "seed 79530 for j=176 out of 250 (i.e. j=7426 in [7251;7500], as job id is i=30)"
[1] "seed 25196 for j=177 out of 250 (i.e. j=7427 in [7251;7500], as job id is i=30)"
[1] "seed 57316 for j=178 out of 250 (i.e. j=7428 in [7251;7500], as job id is i=30)"
[1] "seed 61033 for j=179 out of 250 (i.e. j=7429 in [7251;7500], as job id is i=30)"
[1] "seed 68893 for j=180 out of 250 (i.e. j=7430 in [7251;7500], as job id is i=30)"
[1] "seed 35669 for j=181 out of 250 (i.e. j=7431 in [7251;7500], as job id is i=30)"
[1] "seed 71116 for j=182 out of 250 (i.e. j=7432 in [7251;7500], as job id is i=30)"
[1] "seed 87606 for j=183 out of 250 (i.e. j=7433 in [7251;7500], as job id is i=30)"
[1] "seed 95269 for j=184 out of 250 (i.e. j=7434 in [7251;7500], as job id is i=30)"
[1] "seed 26775 for j=185 out of 250 (i.e. j=7435 in [7251;7500], as job id is i=30)"
[1] "seed 41237 for j=186 out of 250 (i.e. j=7436 in [7251;7500], as job id is i=30)"
[1] "seed 81042 for j=187 out of 250 (i.e. j=7437 in [7251;7500], as job id is i=30)"
[1] "seed 44176 for j=188 out of 250 (i.e. j=7438 in [7251;7500], as job id is i=30)"
[1] "seed 81731 for j=189 out of 250 (i.e. j=7439 in [7251;7500], as job id is i=30)"
[1] "seed 84929 for j=190 out of 250 (i.e. j=7440 in [7251;7500], as job id is i=30)"
[1] "seed 74933 for j=191 out of 250 (i.e. j=7441 in [7251;7500], as job id is i=30)"
[1] "seed 40343 for j=192 out of 250 (i.e. j=7442 in [7251;7500], as job id is i=30)"
[1] "seed 36133 for j=193 out of 250 (i.e. j=7443 in [7251;7500], as job id is i=30)"
[1] "seed 42575 for j=194 out of 250 (i.e. j=7444 in [7251;7500], as job id is i=30)"
[1] "seed 57557 for j=195 out of 250 (i.e. j=7445 in [7251;7500], as job id is i=30)"
[1] "seed 4188 for j=196 out of 250 (i.e. j=7446 in [7251;7500], as job id is i=30)"
[1] "seed 52669 for j=197 out of 250 (i.e. j=7447 in [7251;7500], as job id is i=30)"
[1] "seed 48443 for j=198 out of 250 (i.e. j=7448 in [7251;7500], as job id is i=30)"
[1] "seed 14332 for j=199 out of 250 (i.e. j=7449 in [7251;7500], as job id is i=30)"
[1] "seed 98779 for j=200 out of 250 (i.e. j=7450 in [7251;7500], as job id is i=30)"
[1] "seed 83040 for j=201 out of 250 (i.e. j=7451 in [7251;7500], as job id is i=30)"
[1] "seed 198 for j=202 out of 250 (i.e. j=7452 in [7251;7500], as job id is i=30)"
[1] "seed 40143 for j=203 out of 250 (i.e. j=7453 in [7251;7500], as job id is i=30)"
[1] "seed 32310 for j=204 out of 250 (i.e. j=7454 in [7251;7500], as job id is i=30)"
[1] "seed 20965 for j=205 out of 250 (i.e. j=7455 in [7251;7500], as job id is i=30)"
[1] "seed 7506 for j=206 out of 250 (i.e. j=7456 in [7251;7500], as job id is i=30)"
[1] "seed 19108 for j=207 out of 250 (i.e. j=7457 in [7251;7500], as job id is i=30)"
[1] "seed 89354 for j=208 out of 250 (i.e. j=7458 in [7251;7500], as job id is i=30)"
[1] "seed 63228 for j=209 out of 250 (i.e. j=7459 in [7251;7500], as job id is i=30)"
[1] "seed 70242 for j=210 out of 250 (i.e. j=7460 in [7251;7500], as job id is i=30)"
[1] "seed 90389 for j=211 out of 250 (i.e. j=7461 in [7251;7500], as job id is i=30)"
[1] "seed 81759 for j=212 out of 250 (i.e. j=7462 in [7251;7500], as job id is i=30)"
[1] "seed 7440 for j=213 out of 250 (i.e. j=7463 in [7251;7500], as job id is i=30)"
[1] "seed 74240 for j=214 out of 250 (i.e. j=7464 in [7251;7500], as job id is i=30)"
[1] "seed 71012 for j=215 out of 250 (i.e. j=7465 in [7251;7500], as job id is i=30)"
[1] "seed 76741 for j=216 out of 250 (i.e. j=7466 in [7251;7500], as job id is i=30)"
[1] "seed 64259 for j=217 out of 250 (i.e. j=7467 in [7251;7500], as job id is i=30)"
[1] "seed 75793 for j=218 out of 250 (i.e. j=7468 in [7251;7500], as job id is i=30)"
[1] "seed 87818 for j=219 out of 250 (i.e. j=7469 in [7251;7500], as job id is i=30)"
[1] "seed 76411 for j=220 out of 250 (i.e. j=7470 in [7251;7500], as job id is i=30)"
[1] "seed 16287 for j=221 out of 250 (i.e. j=7471 in [7251;7500], as job id is i=30)"
[1] "seed 76675 for j=222 out of 250 (i.e. j=7472 in [7251;7500], as job id is i=30)"
[1] "seed 96854 for j=223 out of 250 (i.e. j=7473 in [7251;7500], as job id is i=30)"
[1] "seed 61541 for j=224 out of 250 (i.e. j=7474 in [7251;7500], as job id is i=30)"
[1] "seed 15802 for j=225 out of 250 (i.e. j=7475 in [7251;7500], as job id is i=30)"
[1] "seed 16713 for j=226 out of 250 (i.e. j=7476 in [7251;7500], as job id is i=30)"
[1] "seed 56895 for j=227 out of 250 (i.e. j=7477 in [7251;7500], as job id is i=30)"
[1] "seed 60418 for j=228 out of 250 (i.e. j=7478 in [7251;7500], as job id is i=30)"
[1] "seed 9514 for j=229 out of 250 (i.e. j=7479 in [7251;7500], as job id is i=30)"
[1] "seed 6134 for j=230 out of 250 (i.e. j=7480 in [7251;7500], as job id is i=30)"
[1] "seed 73547 for j=231 out of 250 (i.e. j=7481 in [7251;7500], as job id is i=30)"
[1] "seed 64120 for j=232 out of 250 (i.e. j=7482 in [7251;7500], as job id is i=30)"
[1] "seed 64423 for j=233 out of 250 (i.e. j=7483 in [7251;7500], as job id is i=30)"
[1] "seed 87424 for j=234 out of 250 (i.e. j=7484 in [7251;7500], as job id is i=30)"
[1] "seed 55365 for j=235 out of 250 (i.e. j=7485 in [7251;7500], as job id is i=30)"
[1] "seed 83188 for j=236 out of 250 (i.e. j=7486 in [7251;7500], as job id is i=30)"
[1] "seed 38378 for j=237 out of 250 (i.e. j=7487 in [7251;7500], as job id is i=30)"
[1] "seed 16414 for j=238 out of 250 (i.e. j=7488 in [7251;7500], as job id is i=30)"
[1] "seed 93133 for j=239 out of 250 (i.e. j=7489 in [7251;7500], as job id is i=30)"
[1] "seed 56573 for j=240 out of 250 (i.e. j=7490 in [7251;7500], as job id is i=30)"
[1] "seed 27494 for j=241 out of 250 (i.e. j=7491 in [7251;7500], as job id is i=30)"
[1] "seed 29281 for j=242 out of 250 (i.e. j=7492 in [7251;7500], as job id is i=30)"
[1] "seed 21834 for j=243 out of 250 (i.e. j=7493 in [7251;7500], as job id is i=30)"
[1] "seed 91355 for j=244 out of 250 (i.e. j=7494 in [7251;7500], as job id is i=30)"
[1] "seed 4172 for j=245 out of 250 (i.e. j=7495 in [7251;7500], as job id is i=30)"
[1] "seed 17432 for j=246 out of 250 (i.e. j=7496 in [7251;7500], as job id is i=30)"
[1] "seed 46266 for j=247 out of 250 (i.e. j=7497 in [7251;7500], as job id is i=30)"
[1] "seed 78582 for j=248 out of 250 (i.e. j=7498 in [7251;7500], as job id is i=30)"
[1] "seed 49272 for j=249 out of 250 (i.e. j=7499 in [7251;7500], as job id is i=30)"
[1] "seed 43165 for j=250 out of 250 (i.e. j=7500 in [7251;7500], as job id is i=30)"
There were 26 warnings (use warnings() to see them)
> rownames(RES) <- NULL
> save(RES,file=paste0(path.res,name,"-",iter_sim,".rda"))
> 
> ## * Summary results
> sessionInfo()
R version 4.1.2 (2021-11-01)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Red Hat Enterprise Linux 8.5 (Ootpa)

Matrix products: default
BLAS:   /opt/software/R/4.1.2/lib64/R/lib/libRblas.so
LAPACK: /opt/software/R/4.1.2/lib64/R/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] mvtnorm_1.1-3    DelayedGSD_0.0.3

loaded via a namespace (and not attached):
 [1] BB_2019.10-1     magrittr_2.0.3   tidyselect_1.1.2 munsell_0.5.0   
 [5] lattice_0.20-45  colorspace_2.0-3 xtable_1.8-4     R6_2.5.1        
 [9] quadprog_1.5-8   rlang_1.0.3      fansi_1.0.3      dplyr_1.0.9     
[13] grid_4.1.2       nlme_3.1-153     gtable_0.3.0     gsDesign_3.3.0  
[17] utf8_1.2.2       cli_3.3.0        ellipsis_0.3.2   tibble_3.1.7    
[21] lifecycle_1.0.1  crayon_1.5.1     purrr_0.3.4      ggplot2_3.3.6   
[25] tidyr_1.2.0      vctrs_0.4.1      glue_1.6.2       compiler_4.1.2  
[29] pillar_1.7.0     generics_0.1.3   scales_1.2.0     pkgconfig_2.0.3 
> summary(RES)
     method        stage           type             statistic     
 Min.   :1.0   Min.   :1.000   Length:1500        Min.   :0.0387  
 1st Qu.:1.0   1st Qu.:1.000   Class :character   1st Qu.:1.6199  
 Median :1.5   Median :1.000   Mode  :character   Median :2.5035  
 Mean   :1.5   Mean   :1.333                      Mean   :2.3453  
 3rd Qu.:2.0   3rd Qu.:2.000                      3rd Qu.:3.0389  
 Max.   :2.0   Max.   :2.000                      Max.   :5.1971  
                                                  NA's   :500     
  estimate_ML          se_ML             info           infoPC      
 Min.   :-0.4803   Min.   :0.3352   Min.   :4.359   Min.   :0.3406  
 1st Qu.: 0.5837   1st Qu.:0.3894   1st Qu.:5.654   1st Qu.:0.4418  
 Median : 0.8364   Median :0.4060   Median :6.151   Median :0.4807  
 Mean   : 0.8437   Mean   :0.4056   Mean   :6.221   Mean   :0.4861  
 3rd Qu.: 1.1011   3rd Qu.:0.4243   3rd Qu.:6.695   3rd Qu.:0.5231  
 Max.   : 2.1334   Max.   :0.4790   Max.   :8.899   Max.   :0.6954  
 NA's   :500       NA's   :1000     NA's   :186     NA's   :186     
   info.pred      infoPC.pred           uk              lk         
 Min.   :4.738   Min.   :0.3703   Min.   :2.254   Min.   :-0.3213  
 1st Qu.:5.908   1st Qu.:0.4617   1st Qu.:2.476   1st Qu.: 0.1076  
 Median :6.464   Median :0.5051   Median :2.535   Median : 0.2743  
 Mean   :6.537   Mean   :0.5108   Mean   :2.530   Mean   : 0.2911  
 3rd Qu.:7.021   3rd Qu.:0.5486   3rd Qu.:2.596   3rd Qu.: 0.4390  
 Max.   :9.351   Max.   :0.7307   Max.   :2.759   Max.   : 1.0861  
 NA's   :1000    NA's   :1000     NA's   :1000    NA's   :1000     
   decision            reason            p.value_ML        lower_ML      
 Length:1500        Length:1500        Min.   :0.0000   Min.   :-0.8700  
 Class :character   Class :character   1st Qu.:0.0016   1st Qu.:-0.0248  
 Mode  :character   Mode  :character   Median :0.0066   Median : 0.1495  
                                       Mean   :0.0627   Mean   : 0.1345  
                                       3rd Qu.:0.0306   3rd Qu.: 0.3239  
                                       Max.   :0.9692   Max.   : 1.1618  
                                       NA's   :1000     NA's   :1000     
    upper_ML       p.value_MUE       lower_MUE         upper_MUE     
 Min.   :0.7491   Min.   :0.0000   Min.   :-0.8827   Min.   :0.8675  
 1st Qu.:1.2841   1st Qu.:0.0017   1st Qu.:-0.0338   1st Qu.:1.2561  
 Median :1.5175   Median :0.0068   Median : 0.0852   Median :1.4879  
 Mean   :1.5981   Mean   :0.0378   Mean   : 0.1106   Mean   :1.5962  
 3rd Qu.:1.9257   3rd Qu.:0.0178   3rd Qu.: 0.2546   3rd Qu.:1.9509  
 Max.   :3.0709   Max.   :1.0000   Max.   : 1.7130   Max.   :3.1622  
 NA's   :1000     NA's   :1000     NA's   :1000      NA's   :1000    
  estimate_MUE          ck          time.interim      seed      
 Min.   :0.0021   Min.   :0.1043   Min.   :515   Min.   :  198  
 1st Qu.:0.6305   1st Qu.:1.3869   1st Qu.:584   1st Qu.:24128  
 Median :0.8460   Median :1.4403   Median :600   Median :55108  
 Mean   :0.8700   Mean   :1.3967   Mean   :601   Mean   :51377  
 3rd Qu.:1.0919   3rd Qu.:1.4924   3rd Qu.:620   3rd Qu.:76741  
 Max.   :2.3340   Max.   :1.7245   Max.   :679   Max.   :99885  
 NA's   :1000     NA's   :686                                   
  nX1.interim     nX2.interim     nX3.interim  computation.time
 Min.   :146.0   Min.   :130.0   Min.   :119   Min.   :0.682   
 1st Qu.:147.0   1st Qu.:135.0   1st Qu.:125   1st Qu.:0.909   
 Median :149.0   Median :136.0   Median :127   Median :0.995   
 Mean   :148.7   Mean   :136.4   Mean   :127   Mean   :1.026   
 3rd Qu.:150.0   3rd Qu.:138.0   3rd Qu.:129   3rd Qu.:1.149   
 Max.   :154.0   Max.   :142.0   Max.   :134   Max.   :3.618   
                                                               
> 
> #----------------------------------------------------------------------
> ### BATCH_simuMain.R ends here
> 
> proc.time()
   user  system elapsed 
259.875   0.418 270.791 
