
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### BATCH_simuMain.R --- 
> #----------------------------------------------------------------------
> ## Author: Paul Blanche
> ## Created: Mar  5 2021 (10:56) 
> ## Version: 
> ## Last-Updated: jul  7 2022 (13:56) 
> ##           By: Brice Ozenne
> ##     Update #: 518
> #----------------------------------------------------------------------
> ## 
> ### Commentary: 
> ## 
> ### Change Log:
> #----------------------------------------------------------------------
> ## 
> ### Code:
> 
> ## ** BATCH loop
> ## cd /projects/biostat01/people/hpl802/DelayedGSD/
> ## for ITER in `seq 1 10`;
> ## do
> ## eval 'R CMD BATCH --vanilla "--args iter_sim='$ITER' n.iter_sim=10" BATCH_simuMain.R output/R-simuMain-'$ITER'.Rout &'
> ## done
> 
> ## [1] 1186669
> ## [2] 1186670
> ## [3] 1186671
> ## [4] 1186672
> ## [5] 1186673
> ## [6] 1186674
> ## [7] 1186675
> ## [8] 1186676
> ## [9] 1186677
> ## [10] 1186678
> 
> rm(list=ls())
>                                    # {{{ parameters
> ## * parameters
> name <- "ScenarioName" # To save the results
> method <- 1:2 # methods used to compute the boundaries
>                                         #---
> myseed <- 140786598
>                                         #--- to plan the trial ----
> NMC <- 250 # number of sequential simulations to run in parallel. Eg. with 250, then we can run 40 scripts in paralell to get N=10,000 runs in total.
> kMax <- 2  #max number of analyses (including final)
> alpha <- 0.025  #type I error (one sided)
> beta <- 0.2  #type II error
> informationRates <- c(0.5,1)  #planned  information rates
> rho_alpha <- 2  # rho parameter for alpha error spending function
> rho_beta <- 2  # rho parameter for beta error spending function
> ## deltaPower <- 0.75 # just to try another value when Id > Imax
> Id <- 0.55  #(expected) information rate at each decision analysis
> binding <- TRUE
>                                         #
>                                         #---- to generate data -----------
>                                         #
> block <- c(1,1,0,0) 
> allsd <- c(2.5,2.1,2.4) # sd, first from baseline measurement, then the two changes from baseline
> mean0 <- c(10,0,0) # mean placebo group (again, first is absolute value, then change from baseline)
> delta <- c(0,0.6,0.8) # treatment effect
> ar <- (0.86*2)*2 # orginial accrual rate from data from Corine is 0.86 per week, hence we multiply by 2 for by 14 days. As to low, we further multiply by 2
> cor011 <- -0.15 # ~ from data from Corine
> corij1 <- 0.68  # ~ from data from Corine
> cor0j1 <- -0.27  # ~ from data from Corine
> Miss11 <- 5/104 # miss both V1 and V2
> Miss12 <- 1/104 # miss V1 and but not V2
> Miss21 <- 6/104 # do not miss V1 and but miss V2
> Miss22 <- 92/104 # miss none
> PropForInterim <- 0.5 # Decide to have interim analysiz when PropForInterim % of all subjects have had the chance to have one follow-up measuement recorded in the data to be available for analysis.
> theDelta.t <- 1.50001 # time lag to process the data and make them ready to analyze after collecting them (unit is time between two follow-up visits)
> TimeFactor <- 14 ## number of days between two visits
>                                         #
>                                         #--- actually for both planing the trial  and generating data-----
>                                         #
>                                         #
> deltaPower <- abs(delta[3]) # effect (NOT Z-scale/unit, but outcome scale/unit!) that the study is powered for: should we choose ourselves or compute from other numbers above ???
> n <- ceiling(2*2*((allsd[3]/deltaPower)^2)*(qnorm(1-beta)-qnorm(alpha))^2) #104 with Corine's data # should we choose ourselves or compute from the above numbers ???
>                                         # inflate SS as required for interim
> 
>                                         # {{{ Set seeds for parallel computing and reproducibility
> ## * Seed
> args <- commandArgs(TRUE) ## BATCH MODE
> if(length(args)>0){
+     for (arg in args){
+         eval(parse(text=arg))
+     }
+ }else{ ## SLUMR
+     iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_ID"))
+     n.iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_COUNT"))
+ } ## interactive
> if(is.na(iter_sim)){iter_sim <- 1}
> if(is.na(n.iter_sim)){n.iter_sim <- 40}
> 
> set.seed(140786598)
> allseeds <- sample.int(n = 10*n.iter_sim*NMC, size = n.iter_sim*NMC, replace=FALSE) #x=1:(.Machine$integer.max) seems to be maximal possible
> # }}}
> 
> # {{{ set path to load and save and othe machine specific variables
> ## * path
> path <- "."
> path.res <- file.path(path,"Results","simuMain")
> if(dir.exists(path.res)==FALSE){
+     if(dir.exists(file.path(path,"Results"))==FALSE){
+     dir.create(file.path(path,"Results"))
+     }
+     dir.create(path.res)
+ }
> path.output <- file.path(path,"output","simuMain")
> if(dir.exists(path.output)==FALSE){
+     if(dir.exists(file.path(path,"output"))==FALSE){
+     dir.create(file.path(path,"output"))
+     }
+     dir.create(path.output)
+ }
> # }}}
> 
> 
> ## * libraries and functions
> library(DelayedGSD)
DelayedGSD version 0.0.3
> ## sourceDir <- function(path, trace = TRUE, ...) {
> ##     for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
> ##         if(trace) cat(nm,":")
> ##         source(file.path(path, nm), ...)
> ##         if(trace) cat("\n")
> ##     }
> ## }
> ## sourceDir(pathToLoad)
>     
> 
> ## * Compute inflation factor and sample size
> plannedB <- vector(mode = "list", length = 3)
> for(iMeth in method){ ## iMeth <- 1
+     plannedB[[iMeth]] <- CalcBoundaries(kMax=kMax,  
+                                         alpha=alpha, 
+                                         beta=beta,  
+                                         InfoR.i=informationRates,  
+                                         InfoR.d=c(Id,1),  
+                                         rho_alpha=rho_alpha,  
+                                         rho_beta=rho_beta,  
+                                         method=iMeth,  
+                                         cNotBelowFixedc=FALSE,
+                                         bindingFutility=binding,
+                                         delta=tail(delta,1))
+     ## summary(plannedB[[1]])
+     ## coef(plannedB[[iMeth]], type = "information")
+ }
Loading required namespace: gsDesign
Loading required package: mvtnorm
Loading required namespace: BB
> inflationFactor <- unlist(lapply(plannedB,function(iP){iP$planned$InflationFactor}))
> nGSD <- ceiling(n*inflationFactor)
> ##  plot(plannedB[[1]])
> 
> #
> # --- just to check---
> ## n
> ## InfoFixed <- ((qnorm(1-beta)-qnorm(alpha))/(deltaPower))^2
> ## InfoFixed
> ## n/(4*(allsd[3])^2)
> #---
> # }}}
> 
> 
> 
> 
> # {{{ technical details to loop
> RES <- NULL # initialize results to save
> allj <- ((iter_sim-1)*NMC + 1):(iter_sim*NMC) # indices of all iterations (replicates) for this job, accountng for the other jobs running in parallel
> # }}}
> 
> ## * Loop
> for(j in allj){ ## j <- 51 ## 5
+     startComp <- Sys.time()
+     myseedi <- allseeds[j]
+     # {{{ TRACE info (e.g. to check the Rout)
+     print(paste0("seed ",myseedi," for ","j=",which(j==allj)," out of ",NMC, " (i.e. j=",j," in [",(iter_sim-1)*NMC + 1,";",iter_sim*NMC,"], as job id is i=",iter_sim,")"))
+     # }}}
+     # {{{ Missing probabilities
+     MyMissProb <- matrix(c(Miss11,Miss12,Miss21,Miss22),ncol=2,nrow=2,byrow=TRUE) # to additionnally remove 1 more because some FASFL=N
+     colnames(MyMissProb) <- c("V2 missing","V2 not missing")
+     rownames(MyMissProb) <- c("V1 missing","V1 not missing")
+     # }}}
+ 
+                                         # {{{ generate data
+     ## ** simulate
+     res <- GenData(n=n, 
+                    N.fw=2,
+                    rand.block=block,
+                    allsd=allsd,
+                    mean0=mean0,
+                    delta=delta,
+                    ar=ar,
+                    cor.01.1=cor011,
+                    cor.ij.1=corij1,
+                    cor.0j.1=cor0j1,
+                    seed=myseedi,
+                    MissProb=MyMissProb,
+                    DigitsOutcome=2,
+                    TimeFactor=TimeFactor,
+                    DigitsTime=0
+                    )
+     d <- res$d
+     ## head(d,n=20)
+                                         # }}}
+                                         # {{{ reformat data like those of Corine
+     ## Make data long format
+     ## dd <- FormatAsCase(d)
+     ## head(dd)
+     ## summary(dd)
+                                         # }}}
+    
+                                         # {{{ make data available at interim
+                                         # Here we stop inclusion data collection for the interim analysis as soon as
+                                         # half of the participants have completed (or had the opportunity to complete) the follow-up 
+     thet <- d$t3[ceiling(n*PropForInterim)]
+     di <- SelectData(d,t=thet)
+     ## ddi <- FormatAsCase(di) # needed ????
+     ## head(d[d$id==52,])
+                                         # }}}
+     ## {{{ analyze data at at interim
+     ## ** interim
+     lmmI <- analyzeData(di, ddf = "nlme", data.decision = sum(d$t1 <= thet + theDelta.t*TimeFactor), getinfo = TRUE, trace = TRUE)
+     ## lmmI <- analyzeData(di, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     currentGSD <- vector(mode = "list", length = 3)
+     out.interim <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+ 
+         currentGSD[[iMeth]] <- update(plannedB[[iMeth]], delta = lmmI, trace = FALSE)
+ 
+         iConfint.interim <- confint(currentGSD[[iMeth]])
+         iInfo.interim <- coef(currentGSD[[iMeth]], type = "information")
+         iBoundary.interim <- coef(currentGSD[[iMeth]], type = "boundary")
+         iDecision.interim <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+         out.interim[[iMeth]] <-  data.frame(statistic = iConfint.interim[1,"statistic"],
+                                             estimate_ML = iConfint.interim[1,"estimate"],
+                                             se_ML = iConfint.interim[1,"se"],
+                                             info = iInfo.interim[1,"Interim"],
+                                             infoPC = iInfo.interim[1,"Interim.pc"],
+                                             info.pred = iInfo.interim[1,"Decision"],
+                                             infoPC.pred = iInfo.interim[1,"Decision.pc"],
+                                             uk = iBoundary.interim[1,"Ebound"],
+                                             lk = iBoundary.interim[1,"Fbound"],
+                                             decision = iDecision.interim["decision","stage 1"],
+                                             reason = iDecision.interim["reason.interim","stage 1"])
+     }
+     ## currentGSD[[1]]
+     ## plot(currentGSD[[1]])
+ 
+     ## ** decision
+     dDecision <- d[which(d$t1 <= thet + theDelta.t*TimeFactor),]
+     lmmD <- analyzeData(dDecision, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+     
+     out.decision <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+           
+         if(out.interim[[iMeth]]$decision == "stop"){
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, trace = FALSE)
+             ## plot(currentGSD[[iMeth]])
+ 
+             iConfint.decision <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.decision  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = iConfint.decision[1,"statistic"],
+                                                 p.value_ML = iConfint.decision[iConfint.decision$method == "ML","p.value"],
+                                                 lower_ML = iConfint.decision[iConfint.decision$method == "ML","lower"],
+                                                 upper_ML = iConfint.decision[iConfint.decision$method == "ML","upper"],
+                                                 estimate_ML = iConfint.decision[iConfint.decision$method == "ML","estimate"],
+                                                 p.value_MUE = iConfint.decision[iConfint.decision$method == "MUE","p.value"],
+                                                 lower_MUE = iConfint.decision[iConfint.decision$method == "MUE","lower"],
+                                                 upper_MUE = iConfint.decision[iConfint.decision$method == "MUE","upper"],
+                                                 estimate_MUE = iConfint.decision[iConfint.decision$method == "MUE","estimate"],
+                                                 info = iInfo.decision[1,"Interim"],
+                                                 infoPC = iInfo.decision[1,"Interim.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = unname(iDecision.decision["decision","stage 2"])
+                                                 )
+ 
+         }else{
+             ## update information
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, k = 1, type.k = "decision", trace = FALSE)
+ 
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = NA,
+                                                 p.value_ML = NA,
+                                                 lower_ML = NA,
+                                                 upper_ML = NA,
+                                                 estimate_ML = NA,
+                                                 p.value_MUE = NA,
+                                                 lower_MUE = NA,
+                                                 upper_MUE = NA,
+                                                 estimate_MUE = NA,
+                                                 info = iInfo.decision[1,"Decision"],
+                                                 infoPC = iInfo.decision[1,"Decision.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = NA)
+         }
+     }
+                                         # }}}
+                                         # {{{ Analyze data at decision
+ 
+     ## ** finale
+     dFinal <- d
+     lmmF <- analyzeData(dFinal, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     out.final <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+         if(out.interim[[iMeth]]$decision == "stop"){
+             out.final[[iMeth]] <- data.frame(statistic = NA,
+                                              p.value_ML = NA,
+                                              lower_ML = NA,
+                                              upper_ML = NA,
+                                              estimate_ML = NA,
+                                              p.value_MUE = NA,
+                                              lower_MUE = NA,
+                                              upper_MUE = NA,
+                                              estimate_MUE = NA,
+                                              info = NA,
+                                              infoPC = NA,
+                                              ck = NA,
+                                              decision = NA)
+ 
+         }else{
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmF, trace = FALSE)
+ 
+             ## plot(test)
+             ## summary(test)
+             iConfint.final <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.final <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.final <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.final  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.final[[iMeth]] <- data.frame(statistic = iConfint.final[1,"statistic"],
+                                              p.value_ML = iConfint.final[iConfint.final$method == "ML","p.value"],
+                                              lower_ML = iConfint.final[iConfint.final$method == "ML","lower"],
+                                              upper_ML = iConfint.final[iConfint.final$method == "ML","upper"],
+                                              estimate_ML = iConfint.final[iConfint.final$method == "ML","estimate"],
+                                              p.value_MUE = iConfint.final[iConfint.final$method == "MUE","p.value"],
+                                              lower_MUE = iConfint.final[iConfint.final$method == "MUE","lower"],
+                                              upper_MUE = iConfint.final[iConfint.final$method == "MUE","upper"],
+                                              estimate_MUE = iConfint.final[iConfint.final$method == "MUE","estimate"],
+                                              info = iInfo.final[1,"Interim"],
+                                              infoPC = iInfo.final[1,"Interim.pc"],
+                                              ck = iBoundary.final[1,"Cbound"],
+                                              decision = unname(coef(currentGSD[[iMeth]], type = "decision")["decision","stage 2"])
+                                              )
+         }
+     }
+                                         # }}}
+ 
+     stopComp <- Sys.time()
+                                         # {{{ Save results
+ 
+     outMerge <- do.call(rbind,lapply(method, function(iMeth){
+         iNames <- unique(c(names(out.interim[[iMeth]]),names(out.decision[[iMeth]]),names(out.final[[iMeth]])))
+         iMerge <- data.frame(matrix(NA, ncol = length(iNames)+3, nrow = 3, dimnames = list(NULL, c("method", "stage", "type", iNames))))
+         iMerge[1,c("method","stage","type",names(out.interim[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "interim", out.interim[[iMeth]]) 
+         iMerge[2,c("method","stage","type",names(out.decision[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "decision", out.decision[[iMeth]]) 
+         iMerge[3,c("method","stage","type",names(out.final[[iMeth]]))] <- data.frame(method = iMeth, stage = 2, type = "final", out.final[[iMeth]])
+         return(iMerge)
+     }))
+ 
+     ## outMerge[outMerge$method==3,]
+ 
+     out <- cbind(
+         ## results
+         outMerge,
+         ## simulation details
+         time.interim = thet,
+         seed=myseedi,             
+         nX1.interim = sum(!is.na(di$X1)),
+         nX2.interim = sum(!is.na(di$X2)),
+         nX3.interim = sum(!is.na(di$X3)),
+         ## computation time
+         computation.time=as.double(round(difftime(stopComp,startComp,units="secs"),3))
+     )
+     ## names(out) <- myColNames
+     RES <- rbind(RES,out)
+     save(RES,file=paste0(path.res,name,"(tempo)-",iter_sim,".rda"))
+                                         # }}}
+ }
[1] "seed 12935 for j=1 out of 250 (i.e. j=6251 in [6251;6500], as job id is i=26)"
Loading required namespace: nlme
[1] "seed 56870 for j=2 out of 250 (i.e. j=6252 in [6251;6500], as job id is i=26)"
[1] "seed 80280 for j=3 out of 250 (i.e. j=6253 in [6251;6500], as job id is i=26)"
[1] "seed 93491 for j=4 out of 250 (i.e. j=6254 in [6251;6500], as job id is i=26)"
[1] "seed 46118 for j=5 out of 250 (i.e. j=6255 in [6251;6500], as job id is i=26)"
[1] "seed 97293 for j=6 out of 250 (i.e. j=6256 in [6251;6500], as job id is i=26)"
[1] "seed 79724 for j=7 out of 250 (i.e. j=6257 in [6251;6500], as job id is i=26)"
[1] "seed 30878 for j=8 out of 250 (i.e. j=6258 in [6251;6500], as job id is i=26)"
[1] "seed 38160 for j=9 out of 250 (i.e. j=6259 in [6251;6500], as job id is i=26)"
[1] "seed 97470 for j=10 out of 250 (i.e. j=6260 in [6251;6500], as job id is i=26)"
[1] "seed 15989 for j=11 out of 250 (i.e. j=6261 in [6251;6500], as job id is i=26)"
[1] "seed 22083 for j=12 out of 250 (i.e. j=6262 in [6251;6500], as job id is i=26)"
[1] "seed 67361 for j=13 out of 250 (i.e. j=6263 in [6251;6500], as job id is i=26)"
[1] "seed 10511 for j=14 out of 250 (i.e. j=6264 in [6251;6500], as job id is i=26)"
[1] "seed 84554 for j=15 out of 250 (i.e. j=6265 in [6251;6500], as job id is i=26)"
[1] "seed 27589 for j=16 out of 250 (i.e. j=6266 in [6251;6500], as job id is i=26)"
[1] "seed 36495 for j=17 out of 250 (i.e. j=6267 in [6251;6500], as job id is i=26)"
[1] "seed 28370 for j=18 out of 250 (i.e. j=6268 in [6251;6500], as job id is i=26)"
[1] "seed 84053 for j=19 out of 250 (i.e. j=6269 in [6251;6500], as job id is i=26)"
[1] "seed 65592 for j=20 out of 250 (i.e. j=6270 in [6251;6500], as job id is i=26)"
[1] "seed 27277 for j=21 out of 250 (i.e. j=6271 in [6251;6500], as job id is i=26)"
[1] "seed 6754 for j=22 out of 250 (i.e. j=6272 in [6251;6500], as job id is i=26)"
[1] "seed 70158 for j=23 out of 250 (i.e. j=6273 in [6251;6500], as job id is i=26)"
[1] "seed 38265 for j=24 out of 250 (i.e. j=6274 in [6251;6500], as job id is i=26)"
[1] "seed 49487 for j=25 out of 250 (i.e. j=6275 in [6251;6500], as job id is i=26)"
[1] "seed 97113 for j=26 out of 250 (i.e. j=6276 in [6251;6500], as job id is i=26)"
[1] "seed 89391 for j=27 out of 250 (i.e. j=6277 in [6251;6500], as job id is i=26)"
[1] "seed 46893 for j=28 out of 250 (i.e. j=6278 in [6251;6500], as job id is i=26)"
[1] "seed 66291 for j=29 out of 250 (i.e. j=6279 in [6251;6500], as job id is i=26)"
[1] "seed 286 for j=30 out of 250 (i.e. j=6280 in [6251;6500], as job id is i=26)"
[1] "seed 37528 for j=31 out of 250 (i.e. j=6281 in [6251;6500], as job id is i=26)"
[1] "seed 39188 for j=32 out of 250 (i.e. j=6282 in [6251;6500], as job id is i=26)"
[1] "seed 84931 for j=33 out of 250 (i.e. j=6283 in [6251;6500], as job id is i=26)"
[1] "seed 63214 for j=34 out of 250 (i.e. j=6284 in [6251;6500], as job id is i=26)"
[1] "seed 88211 for j=35 out of 250 (i.e. j=6285 in [6251;6500], as job id is i=26)"
[1] "seed 41986 for j=36 out of 250 (i.e. j=6286 in [6251;6500], as job id is i=26)"
[1] "seed 16439 for j=37 out of 250 (i.e. j=6287 in [6251;6500], as job id is i=26)"
[1] "seed 21308 for j=38 out of 250 (i.e. j=6288 in [6251;6500], as job id is i=26)"
[1] "seed 2180 for j=39 out of 250 (i.e. j=6289 in [6251;6500], as job id is i=26)"
[1] "seed 65777 for j=40 out of 250 (i.e. j=6290 in [6251;6500], as job id is i=26)"
[1] "seed 61193 for j=41 out of 250 (i.e. j=6291 in [6251;6500], as job id is i=26)"
[1] "seed 48337 for j=42 out of 250 (i.e. j=6292 in [6251;6500], as job id is i=26)"
[1] "seed 12374 for j=43 out of 250 (i.e. j=6293 in [6251;6500], as job id is i=26)"
[1] "seed 41954 for j=44 out of 250 (i.e. j=6294 in [6251;6500], as job id is i=26)"
[1] "seed 6273 for j=45 out of 250 (i.e. j=6295 in [6251;6500], as job id is i=26)"
[1] "seed 37176 for j=46 out of 250 (i.e. j=6296 in [6251;6500], as job id is i=26)"
[1] "seed 48422 for j=47 out of 250 (i.e. j=6297 in [6251;6500], as job id is i=26)"
[1] "seed 42719 for j=48 out of 250 (i.e. j=6298 in [6251;6500], as job id is i=26)"
[1] "seed 71939 for j=49 out of 250 (i.e. j=6299 in [6251;6500], as job id is i=26)"
[1] "seed 86169 for j=50 out of 250 (i.e. j=6300 in [6251;6500], as job id is i=26)"
[1] "seed 67911 for j=51 out of 250 (i.e. j=6301 in [6251;6500], as job id is i=26)"
[1] "seed 6344 for j=52 out of 250 (i.e. j=6302 in [6251;6500], as job id is i=26)"
[1] "seed 67503 for j=53 out of 250 (i.e. j=6303 in [6251;6500], as job id is i=26)"
[1] "seed 75594 for j=54 out of 250 (i.e. j=6304 in [6251;6500], as job id is i=26)"
[1] "seed 23127 for j=55 out of 250 (i.e. j=6305 in [6251;6500], as job id is i=26)"
[1] "seed 86774 for j=56 out of 250 (i.e. j=6306 in [6251;6500], as job id is i=26)"
[1] "seed 90144 for j=57 out of 250 (i.e. j=6307 in [6251;6500], as job id is i=26)"
[1] "seed 8552 for j=58 out of 250 (i.e. j=6308 in [6251;6500], as job id is i=26)"
[1] "seed 29891 for j=59 out of 250 (i.e. j=6309 in [6251;6500], as job id is i=26)"
[1] "seed 35476 for j=60 out of 250 (i.e. j=6310 in [6251;6500], as job id is i=26)"
[1] "seed 83253 for j=61 out of 250 (i.e. j=6311 in [6251;6500], as job id is i=26)"
[1] "seed 68423 for j=62 out of 250 (i.e. j=6312 in [6251;6500], as job id is i=26)"
[1] "seed 17719 for j=63 out of 250 (i.e. j=6313 in [6251;6500], as job id is i=26)"
[1] "seed 78173 for j=64 out of 250 (i.e. j=6314 in [6251;6500], as job id is i=26)"
[1] "seed 77401 for j=65 out of 250 (i.e. j=6315 in [6251;6500], as job id is i=26)"
[1] "seed 74062 for j=66 out of 250 (i.e. j=6316 in [6251;6500], as job id is i=26)"
[1] "seed 50499 for j=67 out of 250 (i.e. j=6317 in [6251;6500], as job id is i=26)"
[1] "seed 60247 for j=68 out of 250 (i.e. j=6318 in [6251;6500], as job id is i=26)"
[1] "seed 16420 for j=69 out of 250 (i.e. j=6319 in [6251;6500], as job id is i=26)"
[1] "seed 20743 for j=70 out of 250 (i.e. j=6320 in [6251;6500], as job id is i=26)"
[1] "seed 46714 for j=71 out of 250 (i.e. j=6321 in [6251;6500], as job id is i=26)"
[1] "seed 62473 for j=72 out of 250 (i.e. j=6322 in [6251;6500], as job id is i=26)"
[1] "seed 41552 for j=73 out of 250 (i.e. j=6323 in [6251;6500], as job id is i=26)"
[1] "seed 49155 for j=74 out of 250 (i.e. j=6324 in [6251;6500], as job id is i=26)"
[1] "seed 47074 for j=75 out of 250 (i.e. j=6325 in [6251;6500], as job id is i=26)"
[1] "seed 88643 for j=76 out of 250 (i.e. j=6326 in [6251;6500], as job id is i=26)"
[1] "seed 18874 for j=77 out of 250 (i.e. j=6327 in [6251;6500], as job id is i=26)"
[1] "seed 86232 for j=78 out of 250 (i.e. j=6328 in [6251;6500], as job id is i=26)"
[1] "seed 34214 for j=79 out of 250 (i.e. j=6329 in [6251;6500], as job id is i=26)"
[1] "seed 59846 for j=80 out of 250 (i.e. j=6330 in [6251;6500], as job id is i=26)"
[1] "seed 31820 for j=81 out of 250 (i.e. j=6331 in [6251;6500], as job id is i=26)"
[1] "seed 85927 for j=82 out of 250 (i.e. j=6332 in [6251;6500], as job id is i=26)"
[1] "seed 21751 for j=83 out of 250 (i.e. j=6333 in [6251;6500], as job id is i=26)"
[1] "seed 36023 for j=84 out of 250 (i.e. j=6334 in [6251;6500], as job id is i=26)"
[1] "seed 74638 for j=85 out of 250 (i.e. j=6335 in [6251;6500], as job id is i=26)"
[1] "seed 34936 for j=86 out of 250 (i.e. j=6336 in [6251;6500], as job id is i=26)"
[1] "seed 54043 for j=87 out of 250 (i.e. j=6337 in [6251;6500], as job id is i=26)"
[1] "seed 9445 for j=88 out of 250 (i.e. j=6338 in [6251;6500], as job id is i=26)"
[1] "seed 10193 for j=89 out of 250 (i.e. j=6339 in [6251;6500], as job id is i=26)"
[1] "seed 30182 for j=90 out of 250 (i.e. j=6340 in [6251;6500], as job id is i=26)"
[1] "seed 90232 for j=91 out of 250 (i.e. j=6341 in [6251;6500], as job id is i=26)"
[1] "seed 99373 for j=92 out of 250 (i.e. j=6342 in [6251;6500], as job id is i=26)"
[1] "seed 81413 for j=93 out of 250 (i.e. j=6343 in [6251;6500], as job id is i=26)"
[1] "seed 52148 for j=94 out of 250 (i.e. j=6344 in [6251;6500], as job id is i=26)"
[1] "seed 18377 for j=95 out of 250 (i.e. j=6345 in [6251;6500], as job id is i=26)"
[1] "seed 4772 for j=96 out of 250 (i.e. j=6346 in [6251;6500], as job id is i=26)"
[1] "seed 69494 for j=97 out of 250 (i.e. j=6347 in [6251;6500], as job id is i=26)"
[1] "seed 8969 for j=98 out of 250 (i.e. j=6348 in [6251;6500], as job id is i=26)"
[1] "seed 29883 for j=99 out of 250 (i.e. j=6349 in [6251;6500], as job id is i=26)"
[1] "seed 86516 for j=100 out of 250 (i.e. j=6350 in [6251;6500], as job id is i=26)"
[1] "seed 6564 for j=101 out of 250 (i.e. j=6351 in [6251;6500], as job id is i=26)"
[1] "seed 64856 for j=102 out of 250 (i.e. j=6352 in [6251;6500], as job id is i=26)"
[1] "seed 25563 for j=103 out of 250 (i.e. j=6353 in [6251;6500], as job id is i=26)"
[1] "seed 79201 for j=104 out of 250 (i.e. j=6354 in [6251;6500], as job id is i=26)"
[1] "seed 89793 for j=105 out of 250 (i.e. j=6355 in [6251;6500], as job id is i=26)"
[1] "seed 963 for j=106 out of 250 (i.e. j=6356 in [6251;6500], as job id is i=26)"
[1] "seed 99858 for j=107 out of 250 (i.e. j=6357 in [6251;6500], as job id is i=26)"
[1] "seed 47278 for j=108 out of 250 (i.e. j=6358 in [6251;6500], as job id is i=26)"
[1] "seed 39473 for j=109 out of 250 (i.e. j=6359 in [6251;6500], as job id is i=26)"
[1] "seed 95875 for j=110 out of 250 (i.e. j=6360 in [6251;6500], as job id is i=26)"
[1] "seed 67098 for j=111 out of 250 (i.e. j=6361 in [6251;6500], as job id is i=26)"
[1] "seed 50579 for j=112 out of 250 (i.e. j=6362 in [6251;6500], as job id is i=26)"
[1] "seed 58690 for j=113 out of 250 (i.e. j=6363 in [6251;6500], as job id is i=26)"
[1] "seed 28590 for j=114 out of 250 (i.e. j=6364 in [6251;6500], as job id is i=26)"
[1] "seed 76591 for j=115 out of 250 (i.e. j=6365 in [6251;6500], as job id is i=26)"
[1] "seed 395 for j=116 out of 250 (i.e. j=6366 in [6251;6500], as job id is i=26)"
[1] "seed 15156 for j=117 out of 250 (i.e. j=6367 in [6251;6500], as job id is i=26)"
[1] "seed 44014 for j=118 out of 250 (i.e. j=6368 in [6251;6500], as job id is i=26)"
[1] "seed 55183 for j=119 out of 250 (i.e. j=6369 in [6251;6500], as job id is i=26)"
[1] "seed 73764 for j=120 out of 250 (i.e. j=6370 in [6251;6500], as job id is i=26)"
[1] "seed 40809 for j=121 out of 250 (i.e. j=6371 in [6251;6500], as job id is i=26)"
[1] "seed 86929 for j=122 out of 250 (i.e. j=6372 in [6251;6500], as job id is i=26)"
[1] "seed 64705 for j=123 out of 250 (i.e. j=6373 in [6251;6500], as job id is i=26)"
[1] "seed 22638 for j=124 out of 250 (i.e. j=6374 in [6251;6500], as job id is i=26)"
[1] "seed 45865 for j=125 out of 250 (i.e. j=6375 in [6251;6500], as job id is i=26)"
[1] "seed 88474 for j=126 out of 250 (i.e. j=6376 in [6251;6500], as job id is i=26)"
[1] "seed 24271 for j=127 out of 250 (i.e. j=6377 in [6251;6500], as job id is i=26)"
[1] "seed 99352 for j=128 out of 250 (i.e. j=6378 in [6251;6500], as job id is i=26)"
[1] "seed 13961 for j=129 out of 250 (i.e. j=6379 in [6251;6500], as job id is i=26)"
[1] "seed 280 for j=130 out of 250 (i.e. j=6380 in [6251;6500], as job id is i=26)"
[1] "seed 33398 for j=131 out of 250 (i.e. j=6381 in [6251;6500], as job id is i=26)"
[1] "seed 85119 for j=132 out of 250 (i.e. j=6382 in [6251;6500], as job id is i=26)"
[1] "seed 82164 for j=133 out of 250 (i.e. j=6383 in [6251;6500], as job id is i=26)"
[1] "seed 26206 for j=134 out of 250 (i.e. j=6384 in [6251;6500], as job id is i=26)"
[1] "seed 88820 for j=135 out of 250 (i.e. j=6385 in [6251;6500], as job id is i=26)"
[1] "seed 67196 for j=136 out of 250 (i.e. j=6386 in [6251;6500], as job id is i=26)"
[1] "seed 50834 for j=137 out of 250 (i.e. j=6387 in [6251;6500], as job id is i=26)"
[1] "seed 15533 for j=138 out of 250 (i.e. j=6388 in [6251;6500], as job id is i=26)"
[1] "seed 1654 for j=139 out of 250 (i.e. j=6389 in [6251;6500], as job id is i=26)"
[1] "seed 67892 for j=140 out of 250 (i.e. j=6390 in [6251;6500], as job id is i=26)"
[1] "seed 35238 for j=141 out of 250 (i.e. j=6391 in [6251;6500], as job id is i=26)"
[1] "seed 94054 for j=142 out of 250 (i.e. j=6392 in [6251;6500], as job id is i=26)"
[1] "seed 63513 for j=143 out of 250 (i.e. j=6393 in [6251;6500], as job id is i=26)"
[1] "seed 53009 for j=144 out of 250 (i.e. j=6394 in [6251;6500], as job id is i=26)"
[1] "seed 78605 for j=145 out of 250 (i.e. j=6395 in [6251;6500], as job id is i=26)"
[1] "seed 7179 for j=146 out of 250 (i.e. j=6396 in [6251;6500], as job id is i=26)"
[1] "seed 78944 for j=147 out of 250 (i.e. j=6397 in [6251;6500], as job id is i=26)"
[1] "seed 2454 for j=148 out of 250 (i.e. j=6398 in [6251;6500], as job id is i=26)"
[1] "seed 46340 for j=149 out of 250 (i.e. j=6399 in [6251;6500], as job id is i=26)"
[1] "seed 26479 for j=150 out of 250 (i.e. j=6400 in [6251;6500], as job id is i=26)"
[1] "seed 78417 for j=151 out of 250 (i.e. j=6401 in [6251;6500], as job id is i=26)"
[1] "seed 65837 for j=152 out of 250 (i.e. j=6402 in [6251;6500], as job id is i=26)"
[1] "seed 55032 for j=153 out of 250 (i.e. j=6403 in [6251;6500], as job id is i=26)"
[1] "seed 69734 for j=154 out of 250 (i.e. j=6404 in [6251;6500], as job id is i=26)"
[1] "seed 4704 for j=155 out of 250 (i.e. j=6405 in [6251;6500], as job id is i=26)"
[1] "seed 55363 for j=156 out of 250 (i.e. j=6406 in [6251;6500], as job id is i=26)"
[1] "seed 99091 for j=157 out of 250 (i.e. j=6407 in [6251;6500], as job id is i=26)"
[1] "seed 54045 for j=158 out of 250 (i.e. j=6408 in [6251;6500], as job id is i=26)"
[1] "seed 26038 for j=159 out of 250 (i.e. j=6409 in [6251;6500], as job id is i=26)"
[1] "seed 88111 for j=160 out of 250 (i.e. j=6410 in [6251;6500], as job id is i=26)"
[1] "seed 18875 for j=161 out of 250 (i.e. j=6411 in [6251;6500], as job id is i=26)"
[1] "seed 99972 for j=162 out of 250 (i.e. j=6412 in [6251;6500], as job id is i=26)"
[1] "seed 27113 for j=163 out of 250 (i.e. j=6413 in [6251;6500], as job id is i=26)"
[1] "seed 74990 for j=164 out of 250 (i.e. j=6414 in [6251;6500], as job id is i=26)"
[1] "seed 19224 for j=165 out of 250 (i.e. j=6415 in [6251;6500], as job id is i=26)"
[1] "seed 66026 for j=166 out of 250 (i.e. j=6416 in [6251;6500], as job id is i=26)"
[1] "seed 24427 for j=167 out of 250 (i.e. j=6417 in [6251;6500], as job id is i=26)"
[1] "seed 16088 for j=168 out of 250 (i.e. j=6418 in [6251;6500], as job id is i=26)"
[1] "seed 74973 for j=169 out of 250 (i.e. j=6419 in [6251;6500], as job id is i=26)"
[1] "seed 99228 for j=170 out of 250 (i.e. j=6420 in [6251;6500], as job id is i=26)"
[1] "seed 98510 for j=171 out of 250 (i.e. j=6421 in [6251;6500], as job id is i=26)"
[1] "seed 3736 for j=172 out of 250 (i.e. j=6422 in [6251;6500], as job id is i=26)"
[1] "seed 25304 for j=173 out of 250 (i.e. j=6423 in [6251;6500], as job id is i=26)"
[1] "seed 7724 for j=174 out of 250 (i.e. j=6424 in [6251;6500], as job id is i=26)"
[1] "seed 33845 for j=175 out of 250 (i.e. j=6425 in [6251;6500], as job id is i=26)"
[1] "seed 65838 for j=176 out of 250 (i.e. j=6426 in [6251;6500], as job id is i=26)"
[1] "seed 4773 for j=177 out of 250 (i.e. j=6427 in [6251;6500], as job id is i=26)"
[1] "seed 88297 for j=178 out of 250 (i.e. j=6428 in [6251;6500], as job id is i=26)"
[1] "seed 5413 for j=179 out of 250 (i.e. j=6429 in [6251;6500], as job id is i=26)"
[1] "seed 83154 for j=180 out of 250 (i.e. j=6430 in [6251;6500], as job id is i=26)"
[1] "seed 94770 for j=181 out of 250 (i.e. j=6431 in [6251;6500], as job id is i=26)"
[1] "seed 99246 for j=182 out of 250 (i.e. j=6432 in [6251;6500], as job id is i=26)"
[1] "seed 71114 for j=183 out of 250 (i.e. j=6433 in [6251;6500], as job id is i=26)"
[1] "seed 59218 for j=184 out of 250 (i.e. j=6434 in [6251;6500], as job id is i=26)"
[1] "seed 66554 for j=185 out of 250 (i.e. j=6435 in [6251;6500], as job id is i=26)"
[1] "seed 66317 for j=186 out of 250 (i.e. j=6436 in [6251;6500], as job id is i=26)"
[1] "seed 84915 for j=187 out of 250 (i.e. j=6437 in [6251;6500], as job id is i=26)"
[1] "seed 51811 for j=188 out of 250 (i.e. j=6438 in [6251;6500], as job id is i=26)"
[1] "seed 78517 for j=189 out of 250 (i.e. j=6439 in [6251;6500], as job id is i=26)"
[1] "seed 79881 for j=190 out of 250 (i.e. j=6440 in [6251;6500], as job id is i=26)"
[1] "seed 30843 for j=191 out of 250 (i.e. j=6441 in [6251;6500], as job id is i=26)"
[1] "seed 44117 for j=192 out of 250 (i.e. j=6442 in [6251;6500], as job id is i=26)"
[1] "seed 2578 for j=193 out of 250 (i.e. j=6443 in [6251;6500], as job id is i=26)"
[1] "seed 14819 for j=194 out of 250 (i.e. j=6444 in [6251;6500], as job id is i=26)"
[1] "seed 82245 for j=195 out of 250 (i.e. j=6445 in [6251;6500], as job id is i=26)"
[1] "seed 36122 for j=196 out of 250 (i.e. j=6446 in [6251;6500], as job id is i=26)"
[1] "seed 3378 for j=197 out of 250 (i.e. j=6447 in [6251;6500], as job id is i=26)"
[1] "seed 17933 for j=198 out of 250 (i.e. j=6448 in [6251;6500], as job id is i=26)"
[1] "seed 77380 for j=199 out of 250 (i.e. j=6449 in [6251;6500], as job id is i=26)"
[1] "seed 28606 for j=200 out of 250 (i.e. j=6450 in [6251;6500], as job id is i=26)"
[1] "seed 14288 for j=201 out of 250 (i.e. j=6451 in [6251;6500], as job id is i=26)"
[1] "seed 64091 for j=202 out of 250 (i.e. j=6452 in [6251;6500], as job id is i=26)"
[1] "seed 93577 for j=203 out of 250 (i.e. j=6453 in [6251;6500], as job id is i=26)"
[1] "seed 77437 for j=204 out of 250 (i.e. j=6454 in [6251;6500], as job id is i=26)"
[1] "seed 1788 for j=205 out of 250 (i.e. j=6455 in [6251;6500], as job id is i=26)"
[1] "seed 14922 for j=206 out of 250 (i.e. j=6456 in [6251;6500], as job id is i=26)"
[1] "seed 63673 for j=207 out of 250 (i.e. j=6457 in [6251;6500], as job id is i=26)"
[1] "seed 57097 for j=208 out of 250 (i.e. j=6458 in [6251;6500], as job id is i=26)"
[1] "seed 16292 for j=209 out of 250 (i.e. j=6459 in [6251;6500], as job id is i=26)"
[1] "seed 35710 for j=210 out of 250 (i.e. j=6460 in [6251;6500], as job id is i=26)"
[1] "seed 24367 for j=211 out of 250 (i.e. j=6461 in [6251;6500], as job id is i=26)"
[1] "seed 37782 for j=212 out of 250 (i.e. j=6462 in [6251;6500], as job id is i=26)"
[1] "seed 23012 for j=213 out of 250 (i.e. j=6463 in [6251;6500], as job id is i=26)"
[1] "seed 3964 for j=214 out of 250 (i.e. j=6464 in [6251;6500], as job id is i=26)"
[1] "seed 26553 for j=215 out of 250 (i.e. j=6465 in [6251;6500], as job id is i=26)"
[1] "seed 50746 for j=216 out of 250 (i.e. j=6466 in [6251;6500], as job id is i=26)"
[1] "seed 62973 for j=217 out of 250 (i.e. j=6467 in [6251;6500], as job id is i=26)"
[1] "seed 63364 for j=218 out of 250 (i.e. j=6468 in [6251;6500], as job id is i=26)"
[1] "seed 47283 for j=219 out of 250 (i.e. j=6469 in [6251;6500], as job id is i=26)"
[1] "seed 58271 for j=220 out of 250 (i.e. j=6470 in [6251;6500], as job id is i=26)"
[1] "seed 89762 for j=221 out of 250 (i.e. j=6471 in [6251;6500], as job id is i=26)"
[1] "seed 42546 for j=222 out of 250 (i.e. j=6472 in [6251;6500], as job id is i=26)"
[1] "seed 53745 for j=223 out of 250 (i.e. j=6473 in [6251;6500], as job id is i=26)"
[1] "seed 54188 for j=224 out of 250 (i.e. j=6474 in [6251;6500], as job id is i=26)"
[1] "seed 90495 for j=225 out of 250 (i.e. j=6475 in [6251;6500], as job id is i=26)"
[1] "seed 33550 for j=226 out of 250 (i.e. j=6476 in [6251;6500], as job id is i=26)"
[1] "seed 67613 for j=227 out of 250 (i.e. j=6477 in [6251;6500], as job id is i=26)"
[1] "seed 70731 for j=228 out of 250 (i.e. j=6478 in [6251;6500], as job id is i=26)"
[1] "seed 21817 for j=229 out of 250 (i.e. j=6479 in [6251;6500], as job id is i=26)"
[1] "seed 56032 for j=230 out of 250 (i.e. j=6480 in [6251;6500], as job id is i=26)"
[1] "seed 29737 for j=231 out of 250 (i.e. j=6481 in [6251;6500], as job id is i=26)"
[1] "seed 30590 for j=232 out of 250 (i.e. j=6482 in [6251;6500], as job id is i=26)"
[1] "seed 82217 for j=233 out of 250 (i.e. j=6483 in [6251;6500], as job id is i=26)"
[1] "seed 43912 for j=234 out of 250 (i.e. j=6484 in [6251;6500], as job id is i=26)"
[1] "seed 37877 for j=235 out of 250 (i.e. j=6485 in [6251;6500], as job id is i=26)"
[1] "seed 7952 for j=236 out of 250 (i.e. j=6486 in [6251;6500], as job id is i=26)"
[1] "seed 54766 for j=237 out of 250 (i.e. j=6487 in [6251;6500], as job id is i=26)"
[1] "seed 43990 for j=238 out of 250 (i.e. j=6488 in [6251;6500], as job id is i=26)"
[1] "seed 12355 for j=239 out of 250 (i.e. j=6489 in [6251;6500], as job id is i=26)"
[1] "seed 35930 for j=240 out of 250 (i.e. j=6490 in [6251;6500], as job id is i=26)"
[1] "seed 87913 for j=241 out of 250 (i.e. j=6491 in [6251;6500], as job id is i=26)"
[1] "seed 84547 for j=242 out of 250 (i.e. j=6492 in [6251;6500], as job id is i=26)"
[1] "seed 56195 for j=243 out of 250 (i.e. j=6493 in [6251;6500], as job id is i=26)"
[1] "seed 53990 for j=244 out of 250 (i.e. j=6494 in [6251;6500], as job id is i=26)"
[1] "seed 8031 for j=245 out of 250 (i.e. j=6495 in [6251;6500], as job id is i=26)"
[1] "seed 73625 for j=246 out of 250 (i.e. j=6496 in [6251;6500], as job id is i=26)"
[1] "seed 47394 for j=247 out of 250 (i.e. j=6497 in [6251;6500], as job id is i=26)"
[1] "seed 16517 for j=248 out of 250 (i.e. j=6498 in [6251;6500], as job id is i=26)"
[1] "seed 73292 for j=249 out of 250 (i.e. j=6499 in [6251;6500], as job id is i=26)"
[1] "seed 98409 for j=250 out of 250 (i.e. j=6500 in [6251;6500], as job id is i=26)"
There were 28 warnings (use warnings() to see them)
> rownames(RES) <- NULL
> save(RES,file=paste0(path.res,name,"-",iter_sim,".rda"))
> 
> ## * Summary results
> sessionInfo()
R version 4.1.2 (2021-11-01)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Red Hat Enterprise Linux 8.5 (Ootpa)

Matrix products: default
BLAS:   /opt/software/R/4.1.2/lib64/R/lib/libRblas.so
LAPACK: /opt/software/R/4.1.2/lib64/R/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] mvtnorm_1.1-3    DelayedGSD_0.0.3

loaded via a namespace (and not attached):
 [1] BB_2019.10-1     magrittr_2.0.3   tidyselect_1.1.2 munsell_0.5.0   
 [5] lattice_0.20-45  colorspace_2.0-3 xtable_1.8-4     R6_2.5.1        
 [9] quadprog_1.5-8   rlang_1.0.3      fansi_1.0.3      dplyr_1.0.9     
[13] grid_4.1.2       nlme_3.1-153     gtable_0.3.0     gsDesign_3.3.0  
[17] utf8_1.2.2       cli_3.3.0        ellipsis_0.3.2   tibble_3.1.7    
[21] lifecycle_1.0.1  crayon_1.5.1     purrr_0.3.4      ggplot2_3.3.6   
[25] tidyr_1.2.0      vctrs_0.4.1      glue_1.6.2       compiler_4.1.2  
[29] pillar_1.7.0     generics_0.1.3   scales_1.2.0     pkgconfig_2.0.3 
> summary(RES)
     method        stage           type             statistic     
 Min.   :1.0   Min.   :1.000   Length:1500        Min.   :0.0455  
 1st Qu.:1.0   1st Qu.:1.000   Class :character   1st Qu.:1.7323  
 Median :1.5   Median :1.000   Mode  :character   Median :2.4246  
 Mean   :1.5   Mean   :1.333                      Mean   :2.3584  
 3rd Qu.:2.0   3rd Qu.:2.000                      3rd Qu.:3.0499  
 Max.   :2.0   Max.   :2.000                      Max.   :4.8058  
                                                  NA's   :500     
  estimate_ML          se_ML             info           infoPC      
 Min.   :-0.2556   Min.   :0.3337   Min.   :3.973   Min.   :0.3105  
 1st Qu.: 0.6075   1st Qu.:0.3846   1st Qu.:5.730   1st Qu.:0.4477  
 Median : 0.8246   Median :0.4033   Median :6.233   Median :0.4871  
 Mean   : 0.8354   Mean   :0.4029   Mean   :6.309   Mean   :0.4930  
 3rd Qu.: 1.0998   3rd Qu.:0.4191   3rd Qu.:6.823   3rd Qu.:0.5331  
 Max.   : 1.9269   Max.   :0.5017   Max.   :8.979   Max.   :0.7016  
 NA's   :500       NA's   :1000     NA's   :168     NA's   :168     
   info.pred      infoPC.pred           uk              lk         
 Min.   :4.199   Min.   :0.3281   Min.   :2.247   Min.   :-0.4742  
 1st Qu.:6.016   1st Qu.:0.4701   1st Qu.:2.458   1st Qu.: 0.1537  
 Median :6.514   Median :0.5090   Median :2.526   Median : 0.3007  
 Mean   :6.623   Mean   :0.5175   Mean   :2.520   Mean   : 0.3204  
 3rd Qu.:7.172   3rd Qu.:0.5605   3rd Qu.:2.579   3rd Qu.: 0.4893  
 Max.   :9.634   Max.   :0.7528   Max.   :2.819   Max.   : 1.1078  
 NA's   :1000    NA's   :1000     NA's   :1000    NA's   :1000     
   decision            reason            p.value_ML        lower_ML      
 Length:1500        Length:1500        Min.   :0.0000   Min.   :-0.9311  
 Class :character   Class :character   1st Qu.:0.0012   1st Qu.:-0.0098  
 Mode  :character   Mode  :character   Median :0.0060   Median : 0.1555  
                                       Mean   :0.0518   Mean   : 0.1529  
                                       3rd Qu.:0.0273   3rd Qu.: 0.3455  
                                       Max.   :0.9637   Max.   : 1.0232  
                                       NA's   :1000     NA's   :1000     
    upper_ML      p.value_MUE       lower_MUE         upper_MUE     
 Min.   :0.782   Min.   :0.0000   Min.   :-0.9264   Min.   :0.7885  
 1st Qu.:1.295   1st Qu.:0.0019   1st Qu.:-0.0071   1st Qu.:1.2844  
 Median :1.506   Median :0.0066   Median : 0.0908   Median :1.4807  
 Mean   :1.589   Mean   :0.0360   Mean   : 0.1124   Mean   :1.5825  
 3rd Qu.:1.876   3rd Qu.:0.0164   3rd Qu.: 0.2469   3rd Qu.:1.8855  
 Max.   :2.830   Max.   :0.8241   Max.   : 1.5771   Max.   :2.9821  
 NA's   :1000    NA's   :1000     NA's   :1000      NA's   :1000    
  estimate_MUE           ck           time.interim      seed      
 Min.   :-0.0689   Min.   :-0.0657   Min.   :504   Min.   :  280  
 1st Qu.: 0.6398   1st Qu.: 1.3959   1st Qu.:581   1st Qu.:25563  
 Median : 0.8239   Median : 1.4468   Median :599   Median :50539  
 Mean   : 0.8636   Mean   : 1.4024   Mean   :599   Mean   :50083  
 3rd Qu.: 1.0879   3rd Qu.: 1.5067   3rd Qu.:618   3rd Qu.:74990  
 Max.   : 2.1792   Max.   : 1.7344   Max.   :670   Max.   :99972  
 NA's   :1000      NA's   :668                                    
  nX1.interim     nX2.interim     nX3.interim    computation.time
 Min.   :146.0   Min.   :131.0   Min.   :120.0   Min.   :0.656   
 1st Qu.:147.0   1st Qu.:135.0   1st Qu.:125.0   1st Qu.:0.922   
 Median :149.0   Median :136.0   Median :127.0   Median :1.008   
 Mean   :148.7   Mean   :136.5   Mean   :127.1   Mean   :1.032   
 3rd Qu.:150.0   3rd Qu.:138.0   3rd Qu.:129.0   3rd Qu.:1.150   
 Max.   :154.0   Max.   :143.0   Max.   :134.0   Max.   :3.757   
                                                                 
> 
> #----------------------------------------------------------------------
> ### BATCH_simuMain.R ends here
> 
> proc.time()
   user  system elapsed 
260.794   0.407 272.009 
