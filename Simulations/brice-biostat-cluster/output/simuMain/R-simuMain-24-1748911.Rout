
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### BATCH_simuMain.R --- 
> #----------------------------------------------------------------------
> ## Author: Paul Blanche
> ## Created: Mar  5 2021 (10:56) 
> ## Version: 
> ## Last-Updated: jul  7 2022 (13:56) 
> ##           By: Brice Ozenne
> ##     Update #: 518
> #----------------------------------------------------------------------
> ## 
> ### Commentary: 
> ## 
> ### Change Log:
> #----------------------------------------------------------------------
> ## 
> ### Code:
> 
> ## ** BATCH loop
> ## cd /projects/biostat01/people/hpl802/DelayedGSD/
> ## for ITER in `seq 1 10`;
> ## do
> ## eval 'R CMD BATCH --vanilla "--args iter_sim='$ITER' n.iter_sim=10" BATCH_simuMain.R output/R-simuMain-'$ITER'.Rout &'
> ## done
> 
> ## [1] 1186669
> ## [2] 1186670
> ## [3] 1186671
> ## [4] 1186672
> ## [5] 1186673
> ## [6] 1186674
> ## [7] 1186675
> ## [8] 1186676
> ## [9] 1186677
> ## [10] 1186678
> 
> rm(list=ls())
>                                    # {{{ parameters
> ## * parameters
> name <- "ScenarioName" # To save the results
> method <- 1:2 # methods used to compute the boundaries
>                                         #---
> myseed <- 140786598
>                                         #--- to plan the trial ----
> NMC <- 250 # number of sequential simulations to run in parallel. Eg. with 250, then we can run 40 scripts in paralell to get N=10,000 runs in total.
> kMax <- 2  #max number of analyses (including final)
> alpha <- 0.025  #type I error (one sided)
> beta <- 0.2  #type II error
> informationRates <- c(0.5,1)  #planned  information rates
> rho_alpha <- 2  # rho parameter for alpha error spending function
> rho_beta <- 2  # rho parameter for beta error spending function
> ## deltaPower <- 0.75 # just to try another value when Id > Imax
> Id <- 0.55  #(expected) information rate at each decision analysis
> binding <- TRUE
>                                         #
>                                         #---- to generate data -----------
>                                         #
> block <- c(1,1,0,0) 
> allsd <- c(2.5,2.1,2.4) # sd, first from baseline measurement, then the two changes from baseline
> mean0 <- c(10,0,0) # mean placebo group (again, first is absolute value, then change from baseline)
> delta <- c(0,0.6,0.8) # treatment effect
> ar <- (0.86*2)*2 # orginial accrual rate from data from Corine is 0.86 per week, hence we multiply by 2 for by 14 days. As to low, we further multiply by 2
> cor011 <- -0.15 # ~ from data from Corine
> corij1 <- 0.68  # ~ from data from Corine
> cor0j1 <- -0.27  # ~ from data from Corine
> Miss11 <- 5/104 # miss both V1 and V2
> Miss12 <- 1/104 # miss V1 and but not V2
> Miss21 <- 6/104 # do not miss V1 and but miss V2
> Miss22 <- 92/104 # miss none
> PropForInterim <- 0.5 # Decide to have interim analysiz when PropForInterim % of all subjects have had the chance to have one follow-up measuement recorded in the data to be available for analysis.
> theDelta.t <- 1.50001 # time lag to process the data and make them ready to analyze after collecting them (unit is time between two follow-up visits)
> TimeFactor <- 14 ## number of days between two visits
>                                         #
>                                         #--- actually for both planing the trial  and generating data-----
>                                         #
>                                         #
> deltaPower <- abs(delta[3]) # effect (NOT Z-scale/unit, but outcome scale/unit!) that the study is powered for: should we choose ourselves or compute from other numbers above ???
> n <- ceiling(2*2*((allsd[3]/deltaPower)^2)*(qnorm(1-beta)-qnorm(alpha))^2) #104 with Corine's data # should we choose ourselves or compute from the above numbers ???
>                                         # inflate SS as required for interim
> 
>                                         # {{{ Set seeds for parallel computing and reproducibility
> ## * Seed
> args <- commandArgs(TRUE) ## BATCH MODE
> if(length(args)>0){
+     for (arg in args){
+         eval(parse(text=arg))
+     }
+ }else{ ## SLUMR
+     iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_ID"))
+     n.iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_COUNT"))
+ } ## interactive
> if(is.na(iter_sim)){iter_sim <- 1}
> if(is.na(n.iter_sim)){n.iter_sim <- 40}
> 
> set.seed(140786598)
> allseeds <- sample.int(n = 10*n.iter_sim*NMC, size = n.iter_sim*NMC, replace=FALSE) #x=1:(.Machine$integer.max) seems to be maximal possible
> # }}}
> 
> # {{{ set path to load and save and othe machine specific variables
> ## * path
> path <- "."
> path.res <- file.path(path,"Results","simuMain")
> if(dir.exists(path.res)==FALSE){
+     if(dir.exists(file.path(path,"Results"))==FALSE){
+     dir.create(file.path(path,"Results"))
+     }
+     dir.create(path.res)
+ }
> path.output <- file.path(path,"output","simuMain")
> if(dir.exists(path.output)==FALSE){
+     if(dir.exists(file.path(path,"output"))==FALSE){
+     dir.create(file.path(path,"output"))
+     }
+     dir.create(path.output)
+ }
> # }}}
> 
> 
> ## * libraries and functions
> library(DelayedGSD)
DelayedGSD version 0.0.3
> ## sourceDir <- function(path, trace = TRUE, ...) {
> ##     for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
> ##         if(trace) cat(nm,":")
> ##         source(file.path(path, nm), ...)
> ##         if(trace) cat("\n")
> ##     }
> ## }
> ## sourceDir(pathToLoad)
>     
> 
> ## * Compute inflation factor and sample size
> plannedB <- vector(mode = "list", length = 3)
> for(iMeth in method){ ## iMeth <- 1
+     plannedB[[iMeth]] <- CalcBoundaries(kMax=kMax,  
+                                         alpha=alpha, 
+                                         beta=beta,  
+                                         InfoR.i=informationRates,  
+                                         InfoR.d=c(Id,1),  
+                                         rho_alpha=rho_alpha,  
+                                         rho_beta=rho_beta,  
+                                         method=iMeth,  
+                                         cNotBelowFixedc=FALSE,
+                                         bindingFutility=binding,
+                                         delta=tail(delta,1))
+     ## summary(plannedB[[1]])
+     ## coef(plannedB[[iMeth]], type = "information")
+ }
Loading required namespace: gsDesign
Loading required package: mvtnorm
Loading required namespace: BB
> inflationFactor <- unlist(lapply(plannedB,function(iP){iP$planned$InflationFactor}))
> nGSD <- ceiling(n*inflationFactor)
> ##  plot(plannedB[[1]])
> 
> #
> # --- just to check---
> ## n
> ## InfoFixed <- ((qnorm(1-beta)-qnorm(alpha))/(deltaPower))^2
> ## InfoFixed
> ## n/(4*(allsd[3])^2)
> #---
> # }}}
> 
> 
> 
> 
> # {{{ technical details to loop
> RES <- NULL # initialize results to save
> allj <- ((iter_sim-1)*NMC + 1):(iter_sim*NMC) # indices of all iterations (replicates) for this job, accountng for the other jobs running in parallel
> # }}}
> 
> ## * Loop
> for(j in allj){ ## j <- 51 ## 5
+     startComp <- Sys.time()
+     myseedi <- allseeds[j]
+     # {{{ TRACE info (e.g. to check the Rout)
+     print(paste0("seed ",myseedi," for ","j=",which(j==allj)," out of ",NMC, " (i.e. j=",j," in [",(iter_sim-1)*NMC + 1,";",iter_sim*NMC,"], as job id is i=",iter_sim,")"))
+     # }}}
+     # {{{ Missing probabilities
+     MyMissProb <- matrix(c(Miss11,Miss12,Miss21,Miss22),ncol=2,nrow=2,byrow=TRUE) # to additionnally remove 1 more because some FASFL=N
+     colnames(MyMissProb) <- c("V2 missing","V2 not missing")
+     rownames(MyMissProb) <- c("V1 missing","V1 not missing")
+     # }}}
+ 
+                                         # {{{ generate data
+     ## ** simulate
+     res <- GenData(n=n, 
+                    N.fw=2,
+                    rand.block=block,
+                    allsd=allsd,
+                    mean0=mean0,
+                    delta=delta,
+                    ar=ar,
+                    cor.01.1=cor011,
+                    cor.ij.1=corij1,
+                    cor.0j.1=cor0j1,
+                    seed=myseedi,
+                    MissProb=MyMissProb,
+                    DigitsOutcome=2,
+                    TimeFactor=TimeFactor,
+                    DigitsTime=0
+                    )
+     d <- res$d
+     ## head(d,n=20)
+                                         # }}}
+                                         # {{{ reformat data like those of Corine
+     ## Make data long format
+     ## dd <- FormatAsCase(d)
+     ## head(dd)
+     ## summary(dd)
+                                         # }}}
+    
+                                         # {{{ make data available at interim
+                                         # Here we stop inclusion data collection for the interim analysis as soon as
+                                         # half of the participants have completed (or had the opportunity to complete) the follow-up 
+     thet <- d$t3[ceiling(n*PropForInterim)]
+     di <- SelectData(d,t=thet)
+     ## ddi <- FormatAsCase(di) # needed ????
+     ## head(d[d$id==52,])
+                                         # }}}
+     ## {{{ analyze data at at interim
+     ## ** interim
+     lmmI <- analyzeData(di, ddf = "nlme", data.decision = sum(d$t1 <= thet + theDelta.t*TimeFactor), getinfo = TRUE, trace = TRUE)
+     ## lmmI <- analyzeData(di, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     currentGSD <- vector(mode = "list", length = 3)
+     out.interim <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+ 
+         currentGSD[[iMeth]] <- update(plannedB[[iMeth]], delta = lmmI, trace = FALSE)
+ 
+         iConfint.interim <- confint(currentGSD[[iMeth]])
+         iInfo.interim <- coef(currentGSD[[iMeth]], type = "information")
+         iBoundary.interim <- coef(currentGSD[[iMeth]], type = "boundary")
+         iDecision.interim <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+         out.interim[[iMeth]] <-  data.frame(statistic = iConfint.interim[1,"statistic"],
+                                             estimate_ML = iConfint.interim[1,"estimate"],
+                                             se_ML = iConfint.interim[1,"se"],
+                                             info = iInfo.interim[1,"Interim"],
+                                             infoPC = iInfo.interim[1,"Interim.pc"],
+                                             info.pred = iInfo.interim[1,"Decision"],
+                                             infoPC.pred = iInfo.interim[1,"Decision.pc"],
+                                             uk = iBoundary.interim[1,"Ebound"],
+                                             lk = iBoundary.interim[1,"Fbound"],
+                                             decision = iDecision.interim["decision","stage 1"],
+                                             reason = iDecision.interim["reason.interim","stage 1"])
+     }
+     ## currentGSD[[1]]
+     ## plot(currentGSD[[1]])
+ 
+     ## ** decision
+     dDecision <- d[which(d$t1 <= thet + theDelta.t*TimeFactor),]
+     lmmD <- analyzeData(dDecision, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+     
+     out.decision <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+           
+         if(out.interim[[iMeth]]$decision == "stop"){
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, trace = FALSE)
+             ## plot(currentGSD[[iMeth]])
+ 
+             iConfint.decision <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.decision  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = iConfint.decision[1,"statistic"],
+                                                 p.value_ML = iConfint.decision[iConfint.decision$method == "ML","p.value"],
+                                                 lower_ML = iConfint.decision[iConfint.decision$method == "ML","lower"],
+                                                 upper_ML = iConfint.decision[iConfint.decision$method == "ML","upper"],
+                                                 estimate_ML = iConfint.decision[iConfint.decision$method == "ML","estimate"],
+                                                 p.value_MUE = iConfint.decision[iConfint.decision$method == "MUE","p.value"],
+                                                 lower_MUE = iConfint.decision[iConfint.decision$method == "MUE","lower"],
+                                                 upper_MUE = iConfint.decision[iConfint.decision$method == "MUE","upper"],
+                                                 estimate_MUE = iConfint.decision[iConfint.decision$method == "MUE","estimate"],
+                                                 info = iInfo.decision[1,"Interim"],
+                                                 infoPC = iInfo.decision[1,"Interim.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = unname(iDecision.decision["decision","stage 2"])
+                                                 )
+ 
+         }else{
+             ## update information
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, k = 1, type.k = "decision", trace = FALSE)
+ 
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = NA,
+                                                 p.value_ML = NA,
+                                                 lower_ML = NA,
+                                                 upper_ML = NA,
+                                                 estimate_ML = NA,
+                                                 p.value_MUE = NA,
+                                                 lower_MUE = NA,
+                                                 upper_MUE = NA,
+                                                 estimate_MUE = NA,
+                                                 info = iInfo.decision[1,"Decision"],
+                                                 infoPC = iInfo.decision[1,"Decision.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = NA)
+         }
+     }
+                                         # }}}
+                                         # {{{ Analyze data at decision
+ 
+     ## ** finale
+     dFinal <- d
+     lmmF <- analyzeData(dFinal, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     out.final <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+         if(out.interim[[iMeth]]$decision == "stop"){
+             out.final[[iMeth]] <- data.frame(statistic = NA,
+                                              p.value_ML = NA,
+                                              lower_ML = NA,
+                                              upper_ML = NA,
+                                              estimate_ML = NA,
+                                              p.value_MUE = NA,
+                                              lower_MUE = NA,
+                                              upper_MUE = NA,
+                                              estimate_MUE = NA,
+                                              info = NA,
+                                              infoPC = NA,
+                                              ck = NA,
+                                              decision = NA)
+ 
+         }else{
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmF, trace = FALSE)
+ 
+             ## plot(test)
+             ## summary(test)
+             iConfint.final <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.final <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.final <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.final  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.final[[iMeth]] <- data.frame(statistic = iConfint.final[1,"statistic"],
+                                              p.value_ML = iConfint.final[iConfint.final$method == "ML","p.value"],
+                                              lower_ML = iConfint.final[iConfint.final$method == "ML","lower"],
+                                              upper_ML = iConfint.final[iConfint.final$method == "ML","upper"],
+                                              estimate_ML = iConfint.final[iConfint.final$method == "ML","estimate"],
+                                              p.value_MUE = iConfint.final[iConfint.final$method == "MUE","p.value"],
+                                              lower_MUE = iConfint.final[iConfint.final$method == "MUE","lower"],
+                                              upper_MUE = iConfint.final[iConfint.final$method == "MUE","upper"],
+                                              estimate_MUE = iConfint.final[iConfint.final$method == "MUE","estimate"],
+                                              info = iInfo.final[1,"Interim"],
+                                              infoPC = iInfo.final[1,"Interim.pc"],
+                                              ck = iBoundary.final[1,"Cbound"],
+                                              decision = unname(coef(currentGSD[[iMeth]], type = "decision")["decision","stage 2"])
+                                              )
+         }
+     }
+                                         # }}}
+ 
+     stopComp <- Sys.time()
+                                         # {{{ Save results
+ 
+     outMerge <- do.call(rbind,lapply(method, function(iMeth){
+         iNames <- unique(c(names(out.interim[[iMeth]]),names(out.decision[[iMeth]]),names(out.final[[iMeth]])))
+         iMerge <- data.frame(matrix(NA, ncol = length(iNames)+3, nrow = 3, dimnames = list(NULL, c("method", "stage", "type", iNames))))
+         iMerge[1,c("method","stage","type",names(out.interim[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "interim", out.interim[[iMeth]]) 
+         iMerge[2,c("method","stage","type",names(out.decision[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "decision", out.decision[[iMeth]]) 
+         iMerge[3,c("method","stage","type",names(out.final[[iMeth]]))] <- data.frame(method = iMeth, stage = 2, type = "final", out.final[[iMeth]])
+         return(iMerge)
+     }))
+ 
+     ## outMerge[outMerge$method==3,]
+ 
+     out <- cbind(
+         ## results
+         outMerge,
+         ## simulation details
+         time.interim = thet,
+         seed=myseedi,             
+         nX1.interim = sum(!is.na(di$X1)),
+         nX2.interim = sum(!is.na(di$X2)),
+         nX3.interim = sum(!is.na(di$X3)),
+         ## computation time
+         computation.time=as.double(round(difftime(stopComp,startComp,units="secs"),3))
+     )
+     ## names(out) <- myColNames
+     RES <- rbind(RES,out)
+     save(RES,file=paste0(path.res,name,"(tempo)-",iter_sim,".rda"))
+                                         # }}}
+ }
[1] "seed 21557 for j=1 out of 250 (i.e. j=5751 in [5751;6000], as job id is i=24)"
Loading required namespace: nlme
[1] "seed 66229 for j=2 out of 250 (i.e. j=5752 in [5751;6000], as job id is i=24)"
[1] "seed 10232 for j=3 out of 250 (i.e. j=5753 in [5751;6000], as job id is i=24)"
[1] "seed 20961 for j=4 out of 250 (i.e. j=5754 in [5751;6000], as job id is i=24)"
[1] "seed 25486 for j=5 out of 250 (i.e. j=5755 in [5751;6000], as job id is i=24)"
[1] "seed 32616 for j=6 out of 250 (i.e. j=5756 in [5751;6000], as job id is i=24)"
[1] "seed 37747 for j=7 out of 250 (i.e. j=5757 in [5751;6000], as job id is i=24)"
[1] "seed 92141 for j=8 out of 250 (i.e. j=5758 in [5751;6000], as job id is i=24)"
[1] "seed 94519 for j=9 out of 250 (i.e. j=5759 in [5751;6000], as job id is i=24)"
[1] "seed 78195 for j=10 out of 250 (i.e. j=5760 in [5751;6000], as job id is i=24)"
[1] "seed 47424 for j=11 out of 250 (i.e. j=5761 in [5751;6000], as job id is i=24)"
[1] "seed 98122 for j=12 out of 250 (i.e. j=5762 in [5751;6000], as job id is i=24)"
[1] "seed 63161 for j=13 out of 250 (i.e. j=5763 in [5751;6000], as job id is i=24)"
[1] "seed 67658 for j=14 out of 250 (i.e. j=5764 in [5751;6000], as job id is i=24)"
[1] "seed 22222 for j=15 out of 250 (i.e. j=5765 in [5751;6000], as job id is i=24)"
[1] "seed 74848 for j=16 out of 250 (i.e. j=5766 in [5751;6000], as job id is i=24)"
[1] "seed 57267 for j=17 out of 250 (i.e. j=5767 in [5751;6000], as job id is i=24)"
[1] "seed 83545 for j=18 out of 250 (i.e. j=5768 in [5751;6000], as job id is i=24)"
[1] "seed 71787 for j=19 out of 250 (i.e. j=5769 in [5751;6000], as job id is i=24)"
[1] "seed 36801 for j=20 out of 250 (i.e. j=5770 in [5751;6000], as job id is i=24)"
[1] "seed 269 for j=21 out of 250 (i.e. j=5771 in [5751;6000], as job id is i=24)"
[1] "seed 99520 for j=22 out of 250 (i.e. j=5772 in [5751;6000], as job id is i=24)"
[1] "seed 94168 for j=23 out of 250 (i.e. j=5773 in [5751;6000], as job id is i=24)"
[1] "seed 59217 for j=24 out of 250 (i.e. j=5774 in [5751;6000], as job id is i=24)"
[1] "seed 48556 for j=25 out of 250 (i.e. j=5775 in [5751;6000], as job id is i=24)"
[1] "seed 40486 for j=26 out of 250 (i.e. j=5776 in [5751;6000], as job id is i=24)"
[1] "seed 29011 for j=27 out of 250 (i.e. j=5777 in [5751;6000], as job id is i=24)"
[1] "seed 58194 for j=28 out of 250 (i.e. j=5778 in [5751;6000], as job id is i=24)"
[1] "seed 47202 for j=29 out of 250 (i.e. j=5779 in [5751;6000], as job id is i=24)"
[1] "seed 9388 for j=30 out of 250 (i.e. j=5780 in [5751;6000], as job id is i=24)"
[1] "seed 5889 for j=31 out of 250 (i.e. j=5781 in [5751;6000], as job id is i=24)"
[1] "seed 22933 for j=32 out of 250 (i.e. j=5782 in [5751;6000], as job id is i=24)"
[1] "seed 18574 for j=33 out of 250 (i.e. j=5783 in [5751;6000], as job id is i=24)"
[1] "seed 66166 for j=34 out of 250 (i.e. j=5784 in [5751;6000], as job id is i=24)"
[1] "seed 37940 for j=35 out of 250 (i.e. j=5785 in [5751;6000], as job id is i=24)"
[1] "seed 87129 for j=36 out of 250 (i.e. j=5786 in [5751;6000], as job id is i=24)"
[1] "seed 38493 for j=37 out of 250 (i.e. j=5787 in [5751;6000], as job id is i=24)"
[1] "seed 50689 for j=38 out of 250 (i.e. j=5788 in [5751;6000], as job id is i=24)"
[1] "seed 86555 for j=39 out of 250 (i.e. j=5789 in [5751;6000], as job id is i=24)"
[1] "seed 96762 for j=40 out of 250 (i.e. j=5790 in [5751;6000], as job id is i=24)"
[1] "seed 80015 for j=41 out of 250 (i.e. j=5791 in [5751;6000], as job id is i=24)"
[1] "seed 74394 for j=42 out of 250 (i.e. j=5792 in [5751;6000], as job id is i=24)"
[1] "seed 9262 for j=43 out of 250 (i.e. j=5793 in [5751;6000], as job id is i=24)"
[1] "seed 27638 for j=44 out of 250 (i.e. j=5794 in [5751;6000], as job id is i=24)"
[1] "seed 26731 for j=45 out of 250 (i.e. j=5795 in [5751;6000], as job id is i=24)"
[1] "seed 96509 for j=46 out of 250 (i.e. j=5796 in [5751;6000], as job id is i=24)"
[1] "seed 20042 for j=47 out of 250 (i.e. j=5797 in [5751;6000], as job id is i=24)"
[1] "seed 27969 for j=48 out of 250 (i.e. j=5798 in [5751;6000], as job id is i=24)"
[1] "seed 28551 for j=49 out of 250 (i.e. j=5799 in [5751;6000], as job id is i=24)"
[1] "seed 36838 for j=50 out of 250 (i.e. j=5800 in [5751;6000], as job id is i=24)"
[1] "seed 78358 for j=51 out of 250 (i.e. j=5801 in [5751;6000], as job id is i=24)"
[1] "seed 19487 for j=52 out of 250 (i.e. j=5802 in [5751;6000], as job id is i=24)"
[1] "seed 67055 for j=53 out of 250 (i.e. j=5803 in [5751;6000], as job id is i=24)"
[1] "seed 66394 for j=54 out of 250 (i.e. j=5804 in [5751;6000], as job id is i=24)"
[1] "seed 10234 for j=55 out of 250 (i.e. j=5805 in [5751;6000], as job id is i=24)"
[1] "seed 70279 for j=56 out of 250 (i.e. j=5806 in [5751;6000], as job id is i=24)"
[1] "seed 56198 for j=57 out of 250 (i.e. j=5807 in [5751;6000], as job id is i=24)"
[1] "seed 36863 for j=58 out of 250 (i.e. j=5808 in [5751;6000], as job id is i=24)"
[1] "seed 26615 for j=59 out of 250 (i.e. j=5809 in [5751;6000], as job id is i=24)"
[1] "seed 75321 for j=60 out of 250 (i.e. j=5810 in [5751;6000], as job id is i=24)"
[1] "seed 38566 for j=61 out of 250 (i.e. j=5811 in [5751;6000], as job id is i=24)"
[1] "seed 72836 for j=62 out of 250 (i.e. j=5812 in [5751;6000], as job id is i=24)"
[1] "seed 10924 for j=63 out of 250 (i.e. j=5813 in [5751;6000], as job id is i=24)"
[1] "seed 25812 for j=64 out of 250 (i.e. j=5814 in [5751;6000], as job id is i=24)"
[1] "seed 58804 for j=65 out of 250 (i.e. j=5815 in [5751;6000], as job id is i=24)"
[1] "seed 58034 for j=66 out of 250 (i.e. j=5816 in [5751;6000], as job id is i=24)"
[1] "seed 95427 for j=67 out of 250 (i.e. j=5817 in [5751;6000], as job id is i=24)"
[1] "seed 60841 for j=68 out of 250 (i.e. j=5818 in [5751;6000], as job id is i=24)"
[1] "seed 79135 for j=69 out of 250 (i.e. j=5819 in [5751;6000], as job id is i=24)"
[1] "seed 52281 for j=70 out of 250 (i.e. j=5820 in [5751;6000], as job id is i=24)"
[1] "seed 61979 for j=71 out of 250 (i.e. j=5821 in [5751;6000], as job id is i=24)"
[1] "seed 82441 for j=72 out of 250 (i.e. j=5822 in [5751;6000], as job id is i=24)"
[1] "seed 51896 for j=73 out of 250 (i.e. j=5823 in [5751;6000], as job id is i=24)"
[1] "seed 95529 for j=74 out of 250 (i.e. j=5824 in [5751;6000], as job id is i=24)"
[1] "seed 25199 for j=75 out of 250 (i.e. j=5825 in [5751;6000], as job id is i=24)"
[1] "seed 38771 for j=76 out of 250 (i.e. j=5826 in [5751;6000], as job id is i=24)"
[1] "seed 96435 for j=77 out of 250 (i.e. j=5827 in [5751;6000], as job id is i=24)"
[1] "seed 78828 for j=78 out of 250 (i.e. j=5828 in [5751;6000], as job id is i=24)"
[1] "seed 69934 for j=79 out of 250 (i.e. j=5829 in [5751;6000], as job id is i=24)"
[1] "seed 96239 for j=80 out of 250 (i.e. j=5830 in [5751;6000], as job id is i=24)"
[1] "seed 23204 for j=81 out of 250 (i.e. j=5831 in [5751;6000], as job id is i=24)"
[1] "seed 97844 for j=82 out of 250 (i.e. j=5832 in [5751;6000], as job id is i=24)"
[1] "seed 21540 for j=83 out of 250 (i.e. j=5833 in [5751;6000], as job id is i=24)"
[1] "seed 66778 for j=84 out of 250 (i.e. j=5834 in [5751;6000], as job id is i=24)"
[1] "seed 94996 for j=85 out of 250 (i.e. j=5835 in [5751;6000], as job id is i=24)"
[1] "seed 49201 for j=86 out of 250 (i.e. j=5836 in [5751;6000], as job id is i=24)"
[1] "seed 63111 for j=87 out of 250 (i.e. j=5837 in [5751;6000], as job id is i=24)"
[1] "seed 78637 for j=88 out of 250 (i.e. j=5838 in [5751;6000], as job id is i=24)"
[1] "seed 28928 for j=89 out of 250 (i.e. j=5839 in [5751;6000], as job id is i=24)"
[1] "seed 73266 for j=90 out of 250 (i.e. j=5840 in [5751;6000], as job id is i=24)"
[1] "seed 23809 for j=91 out of 250 (i.e. j=5841 in [5751;6000], as job id is i=24)"
[1] "seed 16293 for j=92 out of 250 (i.e. j=5842 in [5751;6000], as job id is i=24)"
[1] "seed 46495 for j=93 out of 250 (i.e. j=5843 in [5751;6000], as job id is i=24)"
[1] "seed 64255 for j=94 out of 250 (i.e. j=5844 in [5751;6000], as job id is i=24)"
[1] "seed 31054 for j=95 out of 250 (i.e. j=5845 in [5751;6000], as job id is i=24)"
[1] "seed 86538 for j=96 out of 250 (i.e. j=5846 in [5751;6000], as job id is i=24)"
[1] "seed 43613 for j=97 out of 250 (i.e. j=5847 in [5751;6000], as job id is i=24)"
[1] "seed 63700 for j=98 out of 250 (i.e. j=5848 in [5751;6000], as job id is i=24)"
[1] "seed 26315 for j=99 out of 250 (i.e. j=5849 in [5751;6000], as job id is i=24)"
[1] "seed 10820 for j=100 out of 250 (i.e. j=5850 in [5751;6000], as job id is i=24)"
[1] "seed 66336 for j=101 out of 250 (i.e. j=5851 in [5751;6000], as job id is i=24)"
[1] "seed 10309 for j=102 out of 250 (i.e. j=5852 in [5751;6000], as job id is i=24)"
[1] "seed 87378 for j=103 out of 250 (i.e. j=5853 in [5751;6000], as job id is i=24)"
[1] "seed 49810 for j=104 out of 250 (i.e. j=5854 in [5751;6000], as job id is i=24)"
[1] "seed 64910 for j=105 out of 250 (i.e. j=5855 in [5751;6000], as job id is i=24)"
[1] "seed 71 for j=106 out of 250 (i.e. j=5856 in [5751;6000], as job id is i=24)"
[1] "seed 3111 for j=107 out of 250 (i.e. j=5857 in [5751;6000], as job id is i=24)"
[1] "seed 98789 for j=108 out of 250 (i.e. j=5858 in [5751;6000], as job id is i=24)"
[1] "seed 67440 for j=109 out of 250 (i.e. j=5859 in [5751;6000], as job id is i=24)"
[1] "seed 5404 for j=110 out of 250 (i.e. j=5860 in [5751;6000], as job id is i=24)"
[1] "seed 65514 for j=111 out of 250 (i.e. j=5861 in [5751;6000], as job id is i=24)"
[1] "seed 53616 for j=112 out of 250 (i.e. j=5862 in [5751;6000], as job id is i=24)"
[1] "seed 91292 for j=113 out of 250 (i.e. j=5863 in [5751;6000], as job id is i=24)"
[1] "seed 5348 for j=114 out of 250 (i.e. j=5864 in [5751;6000], as job id is i=24)"
[1] "seed 15839 for j=115 out of 250 (i.e. j=5865 in [5751;6000], as job id is i=24)"
[1] "seed 39878 for j=116 out of 250 (i.e. j=5866 in [5751;6000], as job id is i=24)"
[1] "seed 38306 for j=117 out of 250 (i.e. j=5867 in [5751;6000], as job id is i=24)"
[1] "seed 61073 for j=118 out of 250 (i.e. j=5868 in [5751;6000], as job id is i=24)"
[1] "seed 95557 for j=119 out of 250 (i.e. j=5869 in [5751;6000], as job id is i=24)"
[1] "seed 70736 for j=120 out of 250 (i.e. j=5870 in [5751;6000], as job id is i=24)"
[1] "seed 77492 for j=121 out of 250 (i.e. j=5871 in [5751;6000], as job id is i=24)"
[1] "seed 93258 for j=122 out of 250 (i.e. j=5872 in [5751;6000], as job id is i=24)"
[1] "seed 88818 for j=123 out of 250 (i.e. j=5873 in [5751;6000], as job id is i=24)"
[1] "seed 3589 for j=124 out of 250 (i.e. j=5874 in [5751;6000], as job id is i=24)"
[1] "seed 27253 for j=125 out of 250 (i.e. j=5875 in [5751;6000], as job id is i=24)"
[1] "seed 21891 for j=126 out of 250 (i.e. j=5876 in [5751;6000], as job id is i=24)"
[1] "seed 94882 for j=127 out of 250 (i.e. j=5877 in [5751;6000], as job id is i=24)"
[1] "seed 19869 for j=128 out of 250 (i.e. j=5878 in [5751;6000], as job id is i=24)"
[1] "seed 41432 for j=129 out of 250 (i.e. j=5879 in [5751;6000], as job id is i=24)"
[1] "seed 3107 for j=130 out of 250 (i.e. j=5880 in [5751;6000], as job id is i=24)"
[1] "seed 78988 for j=131 out of 250 (i.e. j=5881 in [5751;6000], as job id is i=24)"
[1] "seed 20081 for j=132 out of 250 (i.e. j=5882 in [5751;6000], as job id is i=24)"
[1] "seed 7330 for j=133 out of 250 (i.e. j=5883 in [5751;6000], as job id is i=24)"
[1] "seed 7777 for j=134 out of 250 (i.e. j=5884 in [5751;6000], as job id is i=24)"
[1] "seed 8082 for j=135 out of 250 (i.e. j=5885 in [5751;6000], as job id is i=24)"
[1] "seed 28846 for j=136 out of 250 (i.e. j=5886 in [5751;6000], as job id is i=24)"
[1] "seed 39781 for j=137 out of 250 (i.e. j=5887 in [5751;6000], as job id is i=24)"
[1] "seed 22332 for j=138 out of 250 (i.e. j=5888 in [5751;6000], as job id is i=24)"
[1] "seed 27338 for j=139 out of 250 (i.e. j=5889 in [5751;6000], as job id is i=24)"
[1] "seed 19274 for j=140 out of 250 (i.e. j=5890 in [5751;6000], as job id is i=24)"
[1] "seed 34821 for j=141 out of 250 (i.e. j=5891 in [5751;6000], as job id is i=24)"
[1] "seed 96699 for j=142 out of 250 (i.e. j=5892 in [5751;6000], as job id is i=24)"
[1] "seed 85048 for j=143 out of 250 (i.e. j=5893 in [5751;6000], as job id is i=24)"
[1] "seed 67378 for j=144 out of 250 (i.e. j=5894 in [5751;6000], as job id is i=24)"
[1] "seed 64264 for j=145 out of 250 (i.e. j=5895 in [5751;6000], as job id is i=24)"
[1] "seed 14755 for j=146 out of 250 (i.e. j=5896 in [5751;6000], as job id is i=24)"
[1] "seed 25975 for j=147 out of 250 (i.e. j=5897 in [5751;6000], as job id is i=24)"
[1] "seed 76236 for j=148 out of 250 (i.e. j=5898 in [5751;6000], as job id is i=24)"
[1] "seed 69994 for j=149 out of 250 (i.e. j=5899 in [5751;6000], as job id is i=24)"
[1] "seed 78888 for j=150 out of 250 (i.e. j=5900 in [5751;6000], as job id is i=24)"
[1] "seed 10002 for j=151 out of 250 (i.e. j=5901 in [5751;6000], as job id is i=24)"
[1] "seed 54267 for j=152 out of 250 (i.e. j=5902 in [5751;6000], as job id is i=24)"
[1] "seed 26604 for j=153 out of 250 (i.e. j=5903 in [5751;6000], as job id is i=24)"
[1] "seed 41668 for j=154 out of 250 (i.e. j=5904 in [5751;6000], as job id is i=24)"
[1] "seed 66951 for j=155 out of 250 (i.e. j=5905 in [5751;6000], as job id is i=24)"
[1] "seed 45689 for j=156 out of 250 (i.e. j=5906 in [5751;6000], as job id is i=24)"
[1] "seed 41831 for j=157 out of 250 (i.e. j=5907 in [5751;6000], as job id is i=24)"
[1] "seed 23403 for j=158 out of 250 (i.e. j=5908 in [5751;6000], as job id is i=24)"
[1] "seed 76027 for j=159 out of 250 (i.e. j=5909 in [5751;6000], as job id is i=24)"
[1] "seed 12106 for j=160 out of 250 (i.e. j=5910 in [5751;6000], as job id is i=24)"
[1] "seed 36384 for j=161 out of 250 (i.e. j=5911 in [5751;6000], as job id is i=24)"
[1] "seed 51599 for j=162 out of 250 (i.e. j=5912 in [5751;6000], as job id is i=24)"
[1] "seed 42735 for j=163 out of 250 (i.e. j=5913 in [5751;6000], as job id is i=24)"
[1] "seed 92405 for j=164 out of 250 (i.e. j=5914 in [5751;6000], as job id is i=24)"
[1] "seed 44461 for j=165 out of 250 (i.e. j=5915 in [5751;6000], as job id is i=24)"
[1] "seed 4833 for j=166 out of 250 (i.e. j=5916 in [5751;6000], as job id is i=24)"
[1] "seed 27084 for j=167 out of 250 (i.e. j=5917 in [5751;6000], as job id is i=24)"
[1] "seed 20668 for j=168 out of 250 (i.e. j=5918 in [5751;6000], as job id is i=24)"
[1] "seed 23721 for j=169 out of 250 (i.e. j=5919 in [5751;6000], as job id is i=24)"
[1] "seed 2968 for j=170 out of 250 (i.e. j=5920 in [5751;6000], as job id is i=24)"
[1] "seed 26111 for j=171 out of 250 (i.e. j=5921 in [5751;6000], as job id is i=24)"
[1] "seed 7793 for j=172 out of 250 (i.e. j=5922 in [5751;6000], as job id is i=24)"
[1] "seed 5830 for j=173 out of 250 (i.e. j=5923 in [5751;6000], as job id is i=24)"
[1] "seed 73868 for j=174 out of 250 (i.e. j=5924 in [5751;6000], as job id is i=24)"
[1] "seed 39656 for j=175 out of 250 (i.e. j=5925 in [5751;6000], as job id is i=24)"
[1] "seed 55433 for j=176 out of 250 (i.e. j=5926 in [5751;6000], as job id is i=24)"
[1] "seed 73034 for j=177 out of 250 (i.e. j=5927 in [5751;6000], as job id is i=24)"
[1] "seed 39752 for j=178 out of 250 (i.e. j=5928 in [5751;6000], as job id is i=24)"
[1] "seed 9337 for j=179 out of 250 (i.e. j=5929 in [5751;6000], as job id is i=24)"
[1] "seed 4245 for j=180 out of 250 (i.e. j=5930 in [5751;6000], as job id is i=24)"
[1] "seed 99239 for j=181 out of 250 (i.e. j=5931 in [5751;6000], as job id is i=24)"
[1] "seed 16433 for j=182 out of 250 (i.e. j=5932 in [5751;6000], as job id is i=24)"
[1] "seed 10415 for j=183 out of 250 (i.e. j=5933 in [5751;6000], as job id is i=24)"
[1] "seed 78665 for j=184 out of 250 (i.e. j=5934 in [5751;6000], as job id is i=24)"
[1] "seed 85557 for j=185 out of 250 (i.e. j=5935 in [5751;6000], as job id is i=24)"
[1] "seed 54687 for j=186 out of 250 (i.e. j=5936 in [5751;6000], as job id is i=24)"
[1] "seed 19765 for j=187 out of 250 (i.e. j=5937 in [5751;6000], as job id is i=24)"
[1] "seed 41132 for j=188 out of 250 (i.e. j=5938 in [5751;6000], as job id is i=24)"
[1] "seed 49749 for j=189 out of 250 (i.e. j=5939 in [5751;6000], as job id is i=24)"
[1] "seed 77998 for j=190 out of 250 (i.e. j=5940 in [5751;6000], as job id is i=24)"
[1] "seed 75237 for j=191 out of 250 (i.e. j=5941 in [5751;6000], as job id is i=24)"
[1] "seed 72305 for j=192 out of 250 (i.e. j=5942 in [5751;6000], as job id is i=24)"
[1] "seed 81989 for j=193 out of 250 (i.e. j=5943 in [5751;6000], as job id is i=24)"
[1] "seed 5794 for j=194 out of 250 (i.e. j=5944 in [5751;6000], as job id is i=24)"
[1] "seed 44885 for j=195 out of 250 (i.e. j=5945 in [5751;6000], as job id is i=24)"
[1] "seed 59201 for j=196 out of 250 (i.e. j=5946 in [5751;6000], as job id is i=24)"
[1] "seed 47556 for j=197 out of 250 (i.e. j=5947 in [5751;6000], as job id is i=24)"
[1] "seed 44090 for j=198 out of 250 (i.e. j=5948 in [5751;6000], as job id is i=24)"
[1] "seed 30231 for j=199 out of 250 (i.e. j=5949 in [5751;6000], as job id is i=24)"
[1] "seed 17727 for j=200 out of 250 (i.e. j=5950 in [5751;6000], as job id is i=24)"
[1] "seed 68779 for j=201 out of 250 (i.e. j=5951 in [5751;6000], as job id is i=24)"
[1] "seed 89954 for j=202 out of 250 (i.e. j=5952 in [5751;6000], as job id is i=24)"
[1] "seed 93976 for j=203 out of 250 (i.e. j=5953 in [5751;6000], as job id is i=24)"
[1] "seed 22873 for j=204 out of 250 (i.e. j=5954 in [5751;6000], as job id is i=24)"
[1] "seed 37537 for j=205 out of 250 (i.e. j=5955 in [5751;6000], as job id is i=24)"
[1] "seed 83201 for j=206 out of 250 (i.e. j=5956 in [5751;6000], as job id is i=24)"
[1] "seed 86913 for j=207 out of 250 (i.e. j=5957 in [5751;6000], as job id is i=24)"
[1] "seed 37273 for j=208 out of 250 (i.e. j=5958 in [5751;6000], as job id is i=24)"
[1] "seed 24102 for j=209 out of 250 (i.e. j=5959 in [5751;6000], as job id is i=24)"
[1] "seed 59905 for j=210 out of 250 (i.e. j=5960 in [5751;6000], as job id is i=24)"
[1] "seed 96876 for j=211 out of 250 (i.e. j=5961 in [5751;6000], as job id is i=24)"
[1] "seed 44408 for j=212 out of 250 (i.e. j=5962 in [5751;6000], as job id is i=24)"
[1] "seed 66849 for j=213 out of 250 (i.e. j=5963 in [5751;6000], as job id is i=24)"
[1] "seed 27631 for j=214 out of 250 (i.e. j=5964 in [5751;6000], as job id is i=24)"
[1] "seed 90402 for j=215 out of 250 (i.e. j=5965 in [5751;6000], as job id is i=24)"
[1] "seed 38913 for j=216 out of 250 (i.e. j=5966 in [5751;6000], as job id is i=24)"
[1] "seed 51454 for j=217 out of 250 (i.e. j=5967 in [5751;6000], as job id is i=24)"
[1] "seed 93514 for j=218 out of 250 (i.e. j=5968 in [5751;6000], as job id is i=24)"
[1] "seed 68454 for j=219 out of 250 (i.e. j=5969 in [5751;6000], as job id is i=24)"
[1] "seed 51046 for j=220 out of 250 (i.e. j=5970 in [5751;6000], as job id is i=24)"
[1] "seed 48847 for j=221 out of 250 (i.e. j=5971 in [5751;6000], as job id is i=24)"
[1] "seed 16185 for j=222 out of 250 (i.e. j=5972 in [5751;6000], as job id is i=24)"
[1] "seed 60182 for j=223 out of 250 (i.e. j=5973 in [5751;6000], as job id is i=24)"
[1] "seed 94677 for j=224 out of 250 (i.e. j=5974 in [5751;6000], as job id is i=24)"
[1] "seed 86834 for j=225 out of 250 (i.e. j=5975 in [5751;6000], as job id is i=24)"
[1] "seed 39432 for j=226 out of 250 (i.e. j=5976 in [5751;6000], as job id is i=24)"
[1] "seed 78339 for j=227 out of 250 (i.e. j=5977 in [5751;6000], as job id is i=24)"
[1] "seed 47957 for j=228 out of 250 (i.e. j=5978 in [5751;6000], as job id is i=24)"
[1] "seed 46620 for j=229 out of 250 (i.e. j=5979 in [5751;6000], as job id is i=24)"
[1] "seed 44935 for j=230 out of 250 (i.e. j=5980 in [5751;6000], as job id is i=24)"
[1] "seed 57758 for j=231 out of 250 (i.e. j=5981 in [5751;6000], as job id is i=24)"
[1] "seed 43972 for j=232 out of 250 (i.e. j=5982 in [5751;6000], as job id is i=24)"
[1] "seed 20029 for j=233 out of 250 (i.e. j=5983 in [5751;6000], as job id is i=24)"
[1] "seed 92410 for j=234 out of 250 (i.e. j=5984 in [5751;6000], as job id is i=24)"
[1] "seed 91249 for j=235 out of 250 (i.e. j=5985 in [5751;6000], as job id is i=24)"
[1] "seed 16735 for j=236 out of 250 (i.e. j=5986 in [5751;6000], as job id is i=24)"
[1] "seed 74682 for j=237 out of 250 (i.e. j=5987 in [5751;6000], as job id is i=24)"
[1] "seed 90999 for j=238 out of 250 (i.e. j=5988 in [5751;6000], as job id is i=24)"
[1] "seed 24464 for j=239 out of 250 (i.e. j=5989 in [5751;6000], as job id is i=24)"
[1] "seed 19820 for j=240 out of 250 (i.e. j=5990 in [5751;6000], as job id is i=24)"
[1] "seed 39887 for j=241 out of 250 (i.e. j=5991 in [5751;6000], as job id is i=24)"
[1] "seed 32450 for j=242 out of 250 (i.e. j=5992 in [5751;6000], as job id is i=24)"
[1] "seed 27102 for j=243 out of 250 (i.e. j=5993 in [5751;6000], as job id is i=24)"
[1] "seed 81869 for j=244 out of 250 (i.e. j=5994 in [5751;6000], as job id is i=24)"
[1] "seed 65063 for j=245 out of 250 (i.e. j=5995 in [5751;6000], as job id is i=24)"
[1] "seed 4205 for j=246 out of 250 (i.e. j=5996 in [5751;6000], as job id is i=24)"
[1] "seed 33762 for j=247 out of 250 (i.e. j=5997 in [5751;6000], as job id is i=24)"
[1] "seed 10246 for j=248 out of 250 (i.e. j=5998 in [5751;6000], as job id is i=24)"
[1] "seed 64247 for j=249 out of 250 (i.e. j=5999 in [5751;6000], as job id is i=24)"
[1] "seed 81066 for j=250 out of 250 (i.e. j=6000 in [5751;6000], as job id is i=24)"
There were 22 warnings (use warnings() to see them)
> rownames(RES) <- NULL
> save(RES,file=paste0(path.res,name,"-",iter_sim,".rda"))
> 
> ## * Summary results
> sessionInfo()
R version 4.1.2 (2021-11-01)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Red Hat Enterprise Linux 8.5 (Ootpa)

Matrix products: default
BLAS:   /opt/software/R/4.1.2/lib64/R/lib/libRblas.so
LAPACK: /opt/software/R/4.1.2/lib64/R/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] mvtnorm_1.1-3    DelayedGSD_0.0.3

loaded via a namespace (and not attached):
 [1] BB_2019.10-1     magrittr_2.0.3   tidyselect_1.1.2 munsell_0.5.0   
 [5] lattice_0.20-45  colorspace_2.0-3 xtable_1.8-4     R6_2.5.1        
 [9] quadprog_1.5-8   rlang_1.0.3      fansi_1.0.3      dplyr_1.0.9     
[13] grid_4.1.2       nlme_3.1-153     gtable_0.3.0     gsDesign_3.3.0  
[17] utf8_1.2.2       cli_3.3.0        ellipsis_0.3.2   tibble_3.1.7    
[21] lifecycle_1.0.1  crayon_1.5.1     purrr_0.3.4      ggplot2_3.3.6   
[25] tidyr_1.2.0      vctrs_0.4.1      glue_1.6.2       compiler_4.1.2  
[29] pillar_1.7.0     generics_0.1.3   scales_1.2.0     pkgconfig_2.0.3 
> summary(RES)
     method        stage           type             statistic     
 Min.   :1.0   Min.   :1.000   Length:1500        Min.   :0.0223  
 1st Qu.:1.0   1st Qu.:1.000   Class :character   1st Qu.:1.5076  
 Median :1.5   Median :1.000   Mode  :character   Median :2.2491  
 Mean   :1.5   Mean   :1.333                      Mean   :2.2631  
 3rd Qu.:2.0   3rd Qu.:2.000                      3rd Qu.:3.1355  
 Max.   :2.0   Max.   :2.000                      Max.   :4.8078  
                                                  NA's   :500     
  estimate_ML          se_ML             info           infoPC      
 Min.   :-0.2162   Min.   :0.3304   Min.   :4.647   Min.   :0.3631  
 1st Qu.: 0.5301   1st Qu.:0.3856   1st Qu.:5.790   1st Qu.:0.4524  
 Median : 0.7885   Median :0.4028   Median :6.246   Median :0.4880  
 Mean   : 0.7953   Mean   :0.4023   Mean   :6.327   Mean   :0.4944  
 3rd Qu.: 1.0704   3rd Qu.:0.4193   3rd Qu.:6.807   3rd Qu.:0.5319  
 Max.   : 1.7964   Max.   :0.4639   Max.   :9.163   Max.   :0.7160  
 NA's   :500       NA's   :1000     NA's   :162     NA's   :162     
   info.pred      infoPC.pred           uk              lk         
 Min.   :4.921   Min.   :0.3846   Min.   :2.232   Min.   :-0.2126  
 1st Qu.:6.050   1st Qu.:0.4727   1st Qu.:2.462   1st Qu.: 0.1513  
 Median :6.546   Median :0.5115   Median :2.524   Median : 0.3048  
 Mean   :6.646   Mean   :0.5193   Mean   :2.518   Mean   : 0.3247  
 3rd Qu.:7.133   3rd Qu.:0.5574   3rd Qu.:2.580   3rd Qu.: 0.4783  
 Max.   :9.564   Max.   :0.7474   Max.   :2.717   Max.   : 1.1544  
 NA's   :1000    NA's   :1000     NA's   :1000    NA's   :1000     
   decision            reason            p.value_ML        lower_ML      
 Length:1500        Length:1500        Min.   :0.0000   Min.   :-1.0707  
 Class :character   Class :character   1st Qu.:0.0010   1st Qu.:-0.0849  
 Mode  :character   Mode  :character   Median :0.0068   Median : 0.1480  
                                       Mean   :0.0852   Mean   : 0.1048  
                                       3rd Qu.:0.0513   3rd Qu.: 0.3478  
                                       Max.   :0.9746   Max.   : 0.9431  
                                       NA's   :1000     NA's   :1000     
    upper_ML       p.value_MUE       lower_MUE         upper_MUE     
 Min.   :0.7229   Min.   :0.0000   Min.   :-1.0670   Min.   :0.7186  
 1st Qu.:1.2279   1st Qu.:0.0030   1st Qu.:-0.0830   1st Qu.:1.2146  
 Median :1.4761   Median :0.0074   Median : 0.0706   Median :1.4438  
 Mean   :1.5337   Mean   :0.0551   Mean   : 0.0637   Mean   :1.5315  
 3rd Qu.:1.8550   3rd Qu.:0.0270   3rd Qu.: 0.1919   3rd Qu.:1.8259  
 Max.   :2.6496   Max.   :0.7461   Max.   : 1.3578   Max.   :2.6450  
 NA's   :1000     NA's   :1000     NA's   :1000      NA's   :1000    
  estimate_MUE           ck          time.interim        seed      
 Min.   :-0.1503   Min.   :0.3005   Min.   :529.0   Min.   :   71  
 1st Qu.: 0.5754   1st Qu.:1.3965   1st Qu.:586.0   1st Qu.:25486  
 Median : 0.7966   Median :1.4516   Median :608.0   Median :47756  
 Mean   : 0.8081   Mean   :1.4198   Mean   :605.6   Mean   :49976  
 3rd Qu.: 1.0466   3rd Qu.:1.5037   3rd Qu.:624.0   3rd Qu.:74682  
 Max.   : 1.8863   Max.   :1.7184   Max.   :679.0   Max.   :99520  
 NA's   :1000      NA's   :662                                     
  nX1.interim     nX2.interim     nX3.interim    computation.time
 Min.   :146.0   Min.   :131.0   Min.   :121.0   Min.   :0.6950  
 1st Qu.:148.0   1st Qu.:135.0   1st Qu.:125.0   1st Qu.:0.9060  
 Median :149.0   Median :136.0   Median :127.0   Median :0.9945  
 Mean   :148.7   Mean   :136.6   Mean   :126.8   Mean   :1.0311  
 3rd Qu.:150.0   3rd Qu.:138.0   3rd Qu.:129.0   3rd Qu.:1.1570  
 Max.   :155.0   Max.   :145.0   Max.   :133.0   Max.   :3.7830  
                                                                 
> 
> #----------------------------------------------------------------------
> ### BATCH_simuMain.R ends here
> 
> proc.time()
   user  system elapsed 
260.324   0.418 271.476 
