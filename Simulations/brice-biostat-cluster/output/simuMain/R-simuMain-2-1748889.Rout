
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### BATCH_simuMain.R --- 
> #----------------------------------------------------------------------
> ## Author: Paul Blanche
> ## Created: Mar  5 2021 (10:56) 
> ## Version: 
> ## Last-Updated: jul  7 2022 (13:56) 
> ##           By: Brice Ozenne
> ##     Update #: 518
> #----------------------------------------------------------------------
> ## 
> ### Commentary: 
> ## 
> ### Change Log:
> #----------------------------------------------------------------------
> ## 
> ### Code:
> 
> ## ** BATCH loop
> ## cd /projects/biostat01/people/hpl802/DelayedGSD/
> ## for ITER in `seq 1 10`;
> ## do
> ## eval 'R CMD BATCH --vanilla "--args iter_sim='$ITER' n.iter_sim=10" BATCH_simuMain.R output/R-simuMain-'$ITER'.Rout &'
> ## done
> 
> ## [1] 1186669
> ## [2] 1186670
> ## [3] 1186671
> ## [4] 1186672
> ## [5] 1186673
> ## [6] 1186674
> ## [7] 1186675
> ## [8] 1186676
> ## [9] 1186677
> ## [10] 1186678
> 
> rm(list=ls())
>                                    # {{{ parameters
> ## * parameters
> name <- "ScenarioName" # To save the results
> method <- 1:2 # methods used to compute the boundaries
>                                         #---
> myseed <- 140786598
>                                         #--- to plan the trial ----
> NMC <- 250 # number of sequential simulations to run in parallel. Eg. with 250, then we can run 40 scripts in paralell to get N=10,000 runs in total.
> kMax <- 2  #max number of analyses (including final)
> alpha <- 0.025  #type I error (one sided)
> beta <- 0.2  #type II error
> informationRates <- c(0.5,1)  #planned  information rates
> rho_alpha <- 2  # rho parameter for alpha error spending function
> rho_beta <- 2  # rho parameter for beta error spending function
> ## deltaPower <- 0.75 # just to try another value when Id > Imax
> Id <- 0.55  #(expected) information rate at each decision analysis
> binding <- TRUE
>                                         #
>                                         #---- to generate data -----------
>                                         #
> block <- c(1,1,0,0) 
> allsd <- c(2.5,2.1,2.4) # sd, first from baseline measurement, then the two changes from baseline
> mean0 <- c(10,0,0) # mean placebo group (again, first is absolute value, then change from baseline)
> delta <- c(0,0.6,0.8) # treatment effect
> ar <- (0.86*2)*2 # orginial accrual rate from data from Corine is 0.86 per week, hence we multiply by 2 for by 14 days. As to low, we further multiply by 2
> cor011 <- -0.15 # ~ from data from Corine
> corij1 <- 0.68  # ~ from data from Corine
> cor0j1 <- -0.27  # ~ from data from Corine
> Miss11 <- 5/104 # miss both V1 and V2
> Miss12 <- 1/104 # miss V1 and but not V2
> Miss21 <- 6/104 # do not miss V1 and but miss V2
> Miss22 <- 92/104 # miss none
> PropForInterim <- 0.5 # Decide to have interim analysiz when PropForInterim % of all subjects have had the chance to have one follow-up measuement recorded in the data to be available for analysis.
> theDelta.t <- 1.50001 # time lag to process the data and make them ready to analyze after collecting them (unit is time between two follow-up visits)
> TimeFactor <- 14 ## number of days between two visits
>                                         #
>                                         #--- actually for both planing the trial  and generating data-----
>                                         #
>                                         #
> deltaPower <- abs(delta[3]) # effect (NOT Z-scale/unit, but outcome scale/unit!) that the study is powered for: should we choose ourselves or compute from other numbers above ???
> n <- ceiling(2*2*((allsd[3]/deltaPower)^2)*(qnorm(1-beta)-qnorm(alpha))^2) #104 with Corine's data # should we choose ourselves or compute from the above numbers ???
>                                         # inflate SS as required for interim
> 
>                                         # {{{ Set seeds for parallel computing and reproducibility
> ## * Seed
> args <- commandArgs(TRUE) ## BATCH MODE
> if(length(args)>0){
+     for (arg in args){
+         eval(parse(text=arg))
+     }
+ }else{ ## SLUMR
+     iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_ID"))
+     n.iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_COUNT"))
+ } ## interactive
> if(is.na(iter_sim)){iter_sim <- 1}
> if(is.na(n.iter_sim)){n.iter_sim <- 40}
> 
> set.seed(140786598)
> allseeds <- sample.int(n = 10*n.iter_sim*NMC, size = n.iter_sim*NMC, replace=FALSE) #x=1:(.Machine$integer.max) seems to be maximal possible
> # }}}
> 
> # {{{ set path to load and save and othe machine specific variables
> ## * path
> path <- "."
> path.res <- file.path(path,"Results","simuMain")
> if(dir.exists(path.res)==FALSE){
+     if(dir.exists(file.path(path,"Results"))==FALSE){
+     dir.create(file.path(path,"Results"))
+     }
+     dir.create(path.res)
+ }
> path.output <- file.path(path,"output","simuMain")
> if(dir.exists(path.output)==FALSE){
+     if(dir.exists(file.path(path,"output"))==FALSE){
+     dir.create(file.path(path,"output"))
+     }
+     dir.create(path.output)
+ }
> # }}}
> 
> 
> ## * libraries and functions
> library(DelayedGSD)
DelayedGSD version 0.0.3
> ## sourceDir <- function(path, trace = TRUE, ...) {
> ##     for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
> ##         if(trace) cat(nm,":")
> ##         source(file.path(path, nm), ...)
> ##         if(trace) cat("\n")
> ##     }
> ## }
> ## sourceDir(pathToLoad)
>     
> 
> ## * Compute inflation factor and sample size
> plannedB <- vector(mode = "list", length = 3)
> for(iMeth in method){ ## iMeth <- 1
+     plannedB[[iMeth]] <- CalcBoundaries(kMax=kMax,  
+                                         alpha=alpha, 
+                                         beta=beta,  
+                                         InfoR.i=informationRates,  
+                                         InfoR.d=c(Id,1),  
+                                         rho_alpha=rho_alpha,  
+                                         rho_beta=rho_beta,  
+                                         method=iMeth,  
+                                         cNotBelowFixedc=FALSE,
+                                         bindingFutility=binding,
+                                         delta=tail(delta,1))
+     ## summary(plannedB[[1]])
+     ## coef(plannedB[[iMeth]], type = "information")
+ }
Loading required namespace: gsDesign
Loading required package: mvtnorm
Loading required namespace: BB
> inflationFactor <- unlist(lapply(plannedB,function(iP){iP$planned$InflationFactor}))
> nGSD <- ceiling(n*inflationFactor)
> ##  plot(plannedB[[1]])
> 
> #
> # --- just to check---
> ## n
> ## InfoFixed <- ((qnorm(1-beta)-qnorm(alpha))/(deltaPower))^2
> ## InfoFixed
> ## n/(4*(allsd[3])^2)
> #---
> # }}}
> 
> 
> 
> 
> # {{{ technical details to loop
> RES <- NULL # initialize results to save
> allj <- ((iter_sim-1)*NMC + 1):(iter_sim*NMC) # indices of all iterations (replicates) for this job, accountng for the other jobs running in parallel
> # }}}
> 
> ## * Loop
> for(j in allj){ ## j <- 51 ## 5
+     startComp <- Sys.time()
+     myseedi <- allseeds[j]
+     # {{{ TRACE info (e.g. to check the Rout)
+     print(paste0("seed ",myseedi," for ","j=",which(j==allj)," out of ",NMC, " (i.e. j=",j," in [",(iter_sim-1)*NMC + 1,";",iter_sim*NMC,"], as job id is i=",iter_sim,")"))
+     # }}}
+     # {{{ Missing probabilities
+     MyMissProb <- matrix(c(Miss11,Miss12,Miss21,Miss22),ncol=2,nrow=2,byrow=TRUE) # to additionnally remove 1 more because some FASFL=N
+     colnames(MyMissProb) <- c("V2 missing","V2 not missing")
+     rownames(MyMissProb) <- c("V1 missing","V1 not missing")
+     # }}}
+ 
+                                         # {{{ generate data
+     ## ** simulate
+     res <- GenData(n=n, 
+                    N.fw=2,
+                    rand.block=block,
+                    allsd=allsd,
+                    mean0=mean0,
+                    delta=delta,
+                    ar=ar,
+                    cor.01.1=cor011,
+                    cor.ij.1=corij1,
+                    cor.0j.1=cor0j1,
+                    seed=myseedi,
+                    MissProb=MyMissProb,
+                    DigitsOutcome=2,
+                    TimeFactor=TimeFactor,
+                    DigitsTime=0
+                    )
+     d <- res$d
+     ## head(d,n=20)
+                                         # }}}
+                                         # {{{ reformat data like those of Corine
+     ## Make data long format
+     ## dd <- FormatAsCase(d)
+     ## head(dd)
+     ## summary(dd)
+                                         # }}}
+    
+                                         # {{{ make data available at interim
+                                         # Here we stop inclusion data collection for the interim analysis as soon as
+                                         # half of the participants have completed (or had the opportunity to complete) the follow-up 
+     thet <- d$t3[ceiling(n*PropForInterim)]
+     di <- SelectData(d,t=thet)
+     ## ddi <- FormatAsCase(di) # needed ????
+     ## head(d[d$id==52,])
+                                         # }}}
+     ## {{{ analyze data at at interim
+     ## ** interim
+     lmmI <- analyzeData(di, ddf = "nlme", data.decision = sum(d$t1 <= thet + theDelta.t*TimeFactor), getinfo = TRUE, trace = TRUE)
+     ## lmmI <- analyzeData(di, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     currentGSD <- vector(mode = "list", length = 3)
+     out.interim <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+ 
+         currentGSD[[iMeth]] <- update(plannedB[[iMeth]], delta = lmmI, trace = FALSE)
+ 
+         iConfint.interim <- confint(currentGSD[[iMeth]])
+         iInfo.interim <- coef(currentGSD[[iMeth]], type = "information")
+         iBoundary.interim <- coef(currentGSD[[iMeth]], type = "boundary")
+         iDecision.interim <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+         out.interim[[iMeth]] <-  data.frame(statistic = iConfint.interim[1,"statistic"],
+                                             estimate_ML = iConfint.interim[1,"estimate"],
+                                             se_ML = iConfint.interim[1,"se"],
+                                             info = iInfo.interim[1,"Interim"],
+                                             infoPC = iInfo.interim[1,"Interim.pc"],
+                                             info.pred = iInfo.interim[1,"Decision"],
+                                             infoPC.pred = iInfo.interim[1,"Decision.pc"],
+                                             uk = iBoundary.interim[1,"Ebound"],
+                                             lk = iBoundary.interim[1,"Fbound"],
+                                             decision = iDecision.interim["decision","stage 1"],
+                                             reason = iDecision.interim["reason.interim","stage 1"])
+     }
+     ## currentGSD[[1]]
+     ## plot(currentGSD[[1]])
+ 
+     ## ** decision
+     dDecision <- d[which(d$t1 <= thet + theDelta.t*TimeFactor),]
+     lmmD <- analyzeData(dDecision, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+     
+     out.decision <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+           
+         if(out.interim[[iMeth]]$decision == "stop"){
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, trace = FALSE)
+             ## plot(currentGSD[[iMeth]])
+ 
+             iConfint.decision <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.decision  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = iConfint.decision[1,"statistic"],
+                                                 p.value_ML = iConfint.decision[iConfint.decision$method == "ML","p.value"],
+                                                 lower_ML = iConfint.decision[iConfint.decision$method == "ML","lower"],
+                                                 upper_ML = iConfint.decision[iConfint.decision$method == "ML","upper"],
+                                                 estimate_ML = iConfint.decision[iConfint.decision$method == "ML","estimate"],
+                                                 p.value_MUE = iConfint.decision[iConfint.decision$method == "MUE","p.value"],
+                                                 lower_MUE = iConfint.decision[iConfint.decision$method == "MUE","lower"],
+                                                 upper_MUE = iConfint.decision[iConfint.decision$method == "MUE","upper"],
+                                                 estimate_MUE = iConfint.decision[iConfint.decision$method == "MUE","estimate"],
+                                                 info = iInfo.decision[1,"Interim"],
+                                                 infoPC = iInfo.decision[1,"Interim.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = unname(iDecision.decision["decision","stage 2"])
+                                                 )
+ 
+         }else{
+             ## update information
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, k = 1, type.k = "decision", trace = FALSE)
+ 
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = NA,
+                                                 p.value_ML = NA,
+                                                 lower_ML = NA,
+                                                 upper_ML = NA,
+                                                 estimate_ML = NA,
+                                                 p.value_MUE = NA,
+                                                 lower_MUE = NA,
+                                                 upper_MUE = NA,
+                                                 estimate_MUE = NA,
+                                                 info = iInfo.decision[1,"Decision"],
+                                                 infoPC = iInfo.decision[1,"Decision.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = NA)
+         }
+     }
+                                         # }}}
+                                         # {{{ Analyze data at decision
+ 
+     ## ** finale
+     dFinal <- d
+     lmmF <- analyzeData(dFinal, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     out.final <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+         if(out.interim[[iMeth]]$decision == "stop"){
+             out.final[[iMeth]] <- data.frame(statistic = NA,
+                                              p.value_ML = NA,
+                                              lower_ML = NA,
+                                              upper_ML = NA,
+                                              estimate_ML = NA,
+                                              p.value_MUE = NA,
+                                              lower_MUE = NA,
+                                              upper_MUE = NA,
+                                              estimate_MUE = NA,
+                                              info = NA,
+                                              infoPC = NA,
+                                              ck = NA,
+                                              decision = NA)
+ 
+         }else{
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmF, trace = FALSE)
+ 
+             ## plot(test)
+             ## summary(test)
+             iConfint.final <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.final <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.final <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.final  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.final[[iMeth]] <- data.frame(statistic = iConfint.final[1,"statistic"],
+                                              p.value_ML = iConfint.final[iConfint.final$method == "ML","p.value"],
+                                              lower_ML = iConfint.final[iConfint.final$method == "ML","lower"],
+                                              upper_ML = iConfint.final[iConfint.final$method == "ML","upper"],
+                                              estimate_ML = iConfint.final[iConfint.final$method == "ML","estimate"],
+                                              p.value_MUE = iConfint.final[iConfint.final$method == "MUE","p.value"],
+                                              lower_MUE = iConfint.final[iConfint.final$method == "MUE","lower"],
+                                              upper_MUE = iConfint.final[iConfint.final$method == "MUE","upper"],
+                                              estimate_MUE = iConfint.final[iConfint.final$method == "MUE","estimate"],
+                                              info = iInfo.final[1,"Interim"],
+                                              infoPC = iInfo.final[1,"Interim.pc"],
+                                              ck = iBoundary.final[1,"Cbound"],
+                                              decision = unname(coef(currentGSD[[iMeth]], type = "decision")["decision","stage 2"])
+                                              )
+         }
+     }
+                                         # }}}
+ 
+     stopComp <- Sys.time()
+                                         # {{{ Save results
+ 
+     outMerge <- do.call(rbind,lapply(method, function(iMeth){
+         iNames <- unique(c(names(out.interim[[iMeth]]),names(out.decision[[iMeth]]),names(out.final[[iMeth]])))
+         iMerge <- data.frame(matrix(NA, ncol = length(iNames)+3, nrow = 3, dimnames = list(NULL, c("method", "stage", "type", iNames))))
+         iMerge[1,c("method","stage","type",names(out.interim[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "interim", out.interim[[iMeth]]) 
+         iMerge[2,c("method","stage","type",names(out.decision[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "decision", out.decision[[iMeth]]) 
+         iMerge[3,c("method","stage","type",names(out.final[[iMeth]]))] <- data.frame(method = iMeth, stage = 2, type = "final", out.final[[iMeth]])
+         return(iMerge)
+     }))
+ 
+     ## outMerge[outMerge$method==3,]
+ 
+     out <- cbind(
+         ## results
+         outMerge,
+         ## simulation details
+         time.interim = thet,
+         seed=myseedi,             
+         nX1.interim = sum(!is.na(di$X1)),
+         nX2.interim = sum(!is.na(di$X2)),
+         nX3.interim = sum(!is.na(di$X3)),
+         ## computation time
+         computation.time=as.double(round(difftime(stopComp,startComp,units="secs"),3))
+     )
+     ## names(out) <- myColNames
+     RES <- rbind(RES,out)
+     save(RES,file=paste0(path.res,name,"(tempo)-",iter_sim,".rda"))
+                                         # }}}
+ }
[1] "seed 5661 for j=1 out of 250 (i.e. j=251 in [251;500], as job id is i=2)"
Loading required namespace: nlme
[1] "seed 6889 for j=2 out of 250 (i.e. j=252 in [251;500], as job id is i=2)"
[1] "seed 76616 for j=3 out of 250 (i.e. j=253 in [251;500], as job id is i=2)"
[1] "seed 58004 for j=4 out of 250 (i.e. j=254 in [251;500], as job id is i=2)"
[1] "seed 73471 for j=5 out of 250 (i.e. j=255 in [251;500], as job id is i=2)"
[1] "seed 89739 for j=6 out of 250 (i.e. j=256 in [251;500], as job id is i=2)"
[1] "seed 4170 for j=7 out of 250 (i.e. j=257 in [251;500], as job id is i=2)"
[1] "seed 86609 for j=8 out of 250 (i.e. j=258 in [251;500], as job id is i=2)"
[1] "seed 71119 for j=9 out of 250 (i.e. j=259 in [251;500], as job id is i=2)"
[1] "seed 17467 for j=10 out of 250 (i.e. j=260 in [251;500], as job id is i=2)"
[1] "seed 30858 for j=11 out of 250 (i.e. j=261 in [251;500], as job id is i=2)"
[1] "seed 20852 for j=12 out of 250 (i.e. j=262 in [251;500], as job id is i=2)"
[1] "seed 64684 for j=13 out of 250 (i.e. j=263 in [251;500], as job id is i=2)"
[1] "seed 26720 for j=14 out of 250 (i.e. j=264 in [251;500], as job id is i=2)"
[1] "seed 95119 for j=15 out of 250 (i.e. j=265 in [251;500], as job id is i=2)"
[1] "seed 78468 for j=16 out of 250 (i.e. j=266 in [251;500], as job id is i=2)"
[1] "seed 76286 for j=17 out of 250 (i.e. j=267 in [251;500], as job id is i=2)"
[1] "seed 44619 for j=18 out of 250 (i.e. j=268 in [251;500], as job id is i=2)"
[1] "seed 30484 for j=19 out of 250 (i.e. j=269 in [251;500], as job id is i=2)"
[1] "seed 26788 for j=20 out of 250 (i.e. j=270 in [251;500], as job id is i=2)"
[1] "seed 82622 for j=21 out of 250 (i.e. j=271 in [251;500], as job id is i=2)"
[1] "seed 58102 for j=22 out of 250 (i.e. j=272 in [251;500], as job id is i=2)"
[1] "seed 66703 for j=23 out of 250 (i.e. j=273 in [251;500], as job id is i=2)"
[1] "seed 95713 for j=24 out of 250 (i.e. j=274 in [251;500], as job id is i=2)"
[1] "seed 83880 for j=25 out of 250 (i.e. j=275 in [251;500], as job id is i=2)"
[1] "seed 18335 for j=26 out of 250 (i.e. j=276 in [251;500], as job id is i=2)"
[1] "seed 81903 for j=27 out of 250 (i.e. j=277 in [251;500], as job id is i=2)"
[1] "seed 36518 for j=28 out of 250 (i.e. j=278 in [251;500], as job id is i=2)"
[1] "seed 24864 for j=29 out of 250 (i.e. j=279 in [251;500], as job id is i=2)"
[1] "seed 26614 for j=30 out of 250 (i.e. j=280 in [251;500], as job id is i=2)"
[1] "seed 21786 for j=31 out of 250 (i.e. j=281 in [251;500], as job id is i=2)"
[1] "seed 28688 for j=32 out of 250 (i.e. j=282 in [251;500], as job id is i=2)"
[1] "seed 54245 for j=33 out of 250 (i.e. j=283 in [251;500], as job id is i=2)"
[1] "seed 6461 for j=34 out of 250 (i.e. j=284 in [251;500], as job id is i=2)"
[1] "seed 32295 for j=35 out of 250 (i.e. j=285 in [251;500], as job id is i=2)"
[1] "seed 50732 for j=36 out of 250 (i.e. j=286 in [251;500], as job id is i=2)"
[1] "seed 91311 for j=37 out of 250 (i.e. j=287 in [251;500], as job id is i=2)"
[1] "seed 67695 for j=38 out of 250 (i.e. j=288 in [251;500], as job id is i=2)"
[1] "seed 81125 for j=39 out of 250 (i.e. j=289 in [251;500], as job id is i=2)"
[1] "seed 5285 for j=40 out of 250 (i.e. j=290 in [251;500], as job id is i=2)"
[1] "seed 65350 for j=41 out of 250 (i.e. j=291 in [251;500], as job id is i=2)"
[1] "seed 39514 for j=42 out of 250 (i.e. j=292 in [251;500], as job id is i=2)"
[1] "seed 73362 for j=43 out of 250 (i.e. j=293 in [251;500], as job id is i=2)"
[1] "seed 29621 for j=44 out of 250 (i.e. j=294 in [251;500], as job id is i=2)"
[1] "seed 78188 for j=45 out of 250 (i.e. j=295 in [251;500], as job id is i=2)"
[1] "seed 40335 for j=46 out of 250 (i.e. j=296 in [251;500], as job id is i=2)"
[1] "seed 82220 for j=47 out of 250 (i.e. j=297 in [251;500], as job id is i=2)"
[1] "seed 41102 for j=48 out of 250 (i.e. j=298 in [251;500], as job id is i=2)"
[1] "seed 21209 for j=49 out of 250 (i.e. j=299 in [251;500], as job id is i=2)"
[1] "seed 44617 for j=50 out of 250 (i.e. j=300 in [251;500], as job id is i=2)"
[1] "seed 51292 for j=51 out of 250 (i.e. j=301 in [251;500], as job id is i=2)"
[1] "seed 85138 for j=52 out of 250 (i.e. j=302 in [251;500], as job id is i=2)"
[1] "seed 81068 for j=53 out of 250 (i.e. j=303 in [251;500], as job id is i=2)"
[1] "seed 40200 for j=54 out of 250 (i.e. j=304 in [251;500], as job id is i=2)"
[1] "seed 73390 for j=55 out of 250 (i.e. j=305 in [251;500], as job id is i=2)"
[1] "seed 30223 for j=56 out of 250 (i.e. j=306 in [251;500], as job id is i=2)"
[1] "seed 11113 for j=57 out of 250 (i.e. j=307 in [251;500], as job id is i=2)"
[1] "seed 49312 for j=58 out of 250 (i.e. j=308 in [251;500], as job id is i=2)"
[1] "seed 968 for j=59 out of 250 (i.e. j=309 in [251;500], as job id is i=2)"
[1] "seed 8612 for j=60 out of 250 (i.e. j=310 in [251;500], as job id is i=2)"
[1] "seed 84046 for j=61 out of 250 (i.e. j=311 in [251;500], as job id is i=2)"
[1] "seed 19891 for j=62 out of 250 (i.e. j=312 in [251;500], as job id is i=2)"
[1] "seed 67182 for j=63 out of 250 (i.e. j=313 in [251;500], as job id is i=2)"
[1] "seed 45305 for j=64 out of 250 (i.e. j=314 in [251;500], as job id is i=2)"
[1] "seed 64665 for j=65 out of 250 (i.e. j=315 in [251;500], as job id is i=2)"
[1] "seed 65675 for j=66 out of 250 (i.e. j=316 in [251;500], as job id is i=2)"
[1] "seed 30428 for j=67 out of 250 (i.e. j=317 in [251;500], as job id is i=2)"
[1] "seed 7285 for j=68 out of 250 (i.e. j=318 in [251;500], as job id is i=2)"
[1] "seed 84994 for j=69 out of 250 (i.e. j=319 in [251;500], as job id is i=2)"
[1] "seed 70641 for j=70 out of 250 (i.e. j=320 in [251;500], as job id is i=2)"
[1] "seed 13711 for j=71 out of 250 (i.e. j=321 in [251;500], as job id is i=2)"
[1] "seed 23763 for j=72 out of 250 (i.e. j=322 in [251;500], as job id is i=2)"
[1] "seed 91861 for j=73 out of 250 (i.e. j=323 in [251;500], as job id is i=2)"
[1] "seed 31686 for j=74 out of 250 (i.e. j=324 in [251;500], as job id is i=2)"
[1] "seed 16391 for j=75 out of 250 (i.e. j=325 in [251;500], as job id is i=2)"
[1] "seed 97257 for j=76 out of 250 (i.e. j=326 in [251;500], as job id is i=2)"
[1] "seed 45976 for j=77 out of 250 (i.e. j=327 in [251;500], as job id is i=2)"
[1] "seed 77182 for j=78 out of 250 (i.e. j=328 in [251;500], as job id is i=2)"
[1] "seed 92977 for j=79 out of 250 (i.e. j=329 in [251;500], as job id is i=2)"
[1] "seed 47898 for j=80 out of 250 (i.e. j=330 in [251;500], as job id is i=2)"
[1] "seed 45781 for j=81 out of 250 (i.e. j=331 in [251;500], as job id is i=2)"
[1] "seed 45927 for j=82 out of 250 (i.e. j=332 in [251;500], as job id is i=2)"
[1] "seed 64591 for j=83 out of 250 (i.e. j=333 in [251;500], as job id is i=2)"
[1] "seed 55905 for j=84 out of 250 (i.e. j=334 in [251;500], as job id is i=2)"
[1] "seed 94400 for j=85 out of 250 (i.e. j=335 in [251;500], as job id is i=2)"
[1] "seed 27826 for j=86 out of 250 (i.e. j=336 in [251;500], as job id is i=2)"
[1] "seed 22671 for j=87 out of 250 (i.e. j=337 in [251;500], as job id is i=2)"
[1] "seed 59202 for j=88 out of 250 (i.e. j=338 in [251;500], as job id is i=2)"
[1] "seed 26371 for j=89 out of 250 (i.e. j=339 in [251;500], as job id is i=2)"
[1] "seed 70029 for j=90 out of 250 (i.e. j=340 in [251;500], as job id is i=2)"
[1] "seed 84020 for j=91 out of 250 (i.e. j=341 in [251;500], as job id is i=2)"
[1] "seed 90782 for j=92 out of 250 (i.e. j=342 in [251;500], as job id is i=2)"
[1] "seed 15182 for j=93 out of 250 (i.e. j=343 in [251;500], as job id is i=2)"
[1] "seed 55590 for j=94 out of 250 (i.e. j=344 in [251;500], as job id is i=2)"
[1] "seed 77450 for j=95 out of 250 (i.e. j=345 in [251;500], as job id is i=2)"
[1] "seed 34275 for j=96 out of 250 (i.e. j=346 in [251;500], as job id is i=2)"
[1] "seed 18510 for j=97 out of 250 (i.e. j=347 in [251;500], as job id is i=2)"
[1] "seed 9967 for j=98 out of 250 (i.e. j=348 in [251;500], as job id is i=2)"
[1] "seed 61419 for j=99 out of 250 (i.e. j=349 in [251;500], as job id is i=2)"
[1] "seed 19270 for j=100 out of 250 (i.e. j=350 in [251;500], as job id is i=2)"
[1] "seed 15177 for j=101 out of 250 (i.e. j=351 in [251;500], as job id is i=2)"
[1] "seed 93939 for j=102 out of 250 (i.e. j=352 in [251;500], as job id is i=2)"
[1] "seed 63846 for j=103 out of 250 (i.e. j=353 in [251;500], as job id is i=2)"
[1] "seed 98566 for j=104 out of 250 (i.e. j=354 in [251;500], as job id is i=2)"
[1] "seed 57910 for j=105 out of 250 (i.e. j=355 in [251;500], as job id is i=2)"
[1] "seed 52947 for j=106 out of 250 (i.e. j=356 in [251;500], as job id is i=2)"
[1] "seed 61775 for j=107 out of 250 (i.e. j=357 in [251;500], as job id is i=2)"
[1] "seed 8461 for j=108 out of 250 (i.e. j=358 in [251;500], as job id is i=2)"
[1] "seed 89592 for j=109 out of 250 (i.e. j=359 in [251;500], as job id is i=2)"
[1] "seed 6010 for j=110 out of 250 (i.e. j=360 in [251;500], as job id is i=2)"
[1] "seed 10957 for j=111 out of 250 (i.e. j=361 in [251;500], as job id is i=2)"
[1] "seed 69261 for j=112 out of 250 (i.e. j=362 in [251;500], as job id is i=2)"
[1] "seed 21287 for j=113 out of 250 (i.e. j=363 in [251;500], as job id is i=2)"
[1] "seed 84617 for j=114 out of 250 (i.e. j=364 in [251;500], as job id is i=2)"
[1] "seed 85715 for j=115 out of 250 (i.e. j=365 in [251;500], as job id is i=2)"
[1] "seed 19116 for j=116 out of 250 (i.e. j=366 in [251;500], as job id is i=2)"
[1] "seed 36830 for j=117 out of 250 (i.e. j=367 in [251;500], as job id is i=2)"
[1] "seed 71312 for j=118 out of 250 (i.e. j=368 in [251;500], as job id is i=2)"
[1] "seed 49194 for j=119 out of 250 (i.e. j=369 in [251;500], as job id is i=2)"
[1] "seed 65280 for j=120 out of 250 (i.e. j=370 in [251;500], as job id is i=2)"
[1] "seed 25539 for j=121 out of 250 (i.e. j=371 in [251;500], as job id is i=2)"
[1] "seed 78753 for j=122 out of 250 (i.e. j=372 in [251;500], as job id is i=2)"
[1] "seed 70370 for j=123 out of 250 (i.e. j=373 in [251;500], as job id is i=2)"
[1] "seed 79000 for j=124 out of 250 (i.e. j=374 in [251;500], as job id is i=2)"
[1] "seed 18901 for j=125 out of 250 (i.e. j=375 in [251;500], as job id is i=2)"
[1] "seed 87743 for j=126 out of 250 (i.e. j=376 in [251;500], as job id is i=2)"
[1] "seed 27918 for j=127 out of 250 (i.e. j=377 in [251;500], as job id is i=2)"
[1] "seed 99628 for j=128 out of 250 (i.e. j=378 in [251;500], as job id is i=2)"
[1] "seed 23887 for j=129 out of 250 (i.e. j=379 in [251;500], as job id is i=2)"
[1] "seed 18788 for j=130 out of 250 (i.e. j=380 in [251;500], as job id is i=2)"
[1] "seed 76898 for j=131 out of 250 (i.e. j=381 in [251;500], as job id is i=2)"
[1] "seed 72774 for j=132 out of 250 (i.e. j=382 in [251;500], as job id is i=2)"
[1] "seed 23620 for j=133 out of 250 (i.e. j=383 in [251;500], as job id is i=2)"
[1] "seed 7821 for j=134 out of 250 (i.e. j=384 in [251;500], as job id is i=2)"
[1] "seed 9365 for j=135 out of 250 (i.e. j=385 in [251;500], as job id is i=2)"
[1] "seed 42238 for j=136 out of 250 (i.e. j=386 in [251;500], as job id is i=2)"
[1] "seed 75631 for j=137 out of 250 (i.e. j=387 in [251;500], as job id is i=2)"
[1] "seed 81971 for j=138 out of 250 (i.e. j=388 in [251;500], as job id is i=2)"
[1] "seed 22461 for j=139 out of 250 (i.e. j=389 in [251;500], as job id is i=2)"
[1] "seed 76063 for j=140 out of 250 (i.e. j=390 in [251;500], as job id is i=2)"
[1] "seed 52960 for j=141 out of 250 (i.e. j=391 in [251;500], as job id is i=2)"
[1] "seed 45232 for j=142 out of 250 (i.e. j=392 in [251;500], as job id is i=2)"
[1] "seed 19552 for j=143 out of 250 (i.e. j=393 in [251;500], as job id is i=2)"
[1] "seed 17879 for j=144 out of 250 (i.e. j=394 in [251;500], as job id is i=2)"
[1] "seed 75153 for j=145 out of 250 (i.e. j=395 in [251;500], as job id is i=2)"
[1] "seed 33850 for j=146 out of 250 (i.e. j=396 in [251;500], as job id is i=2)"
[1] "seed 64755 for j=147 out of 250 (i.e. j=397 in [251;500], as job id is i=2)"
[1] "seed 38745 for j=148 out of 250 (i.e. j=398 in [251;500], as job id is i=2)"
[1] "seed 82086 for j=149 out of 250 (i.e. j=399 in [251;500], as job id is i=2)"
[1] "seed 64650 for j=150 out of 250 (i.e. j=400 in [251;500], as job id is i=2)"
[1] "seed 23045 for j=151 out of 250 (i.e. j=401 in [251;500], as job id is i=2)"
[1] "seed 95022 for j=152 out of 250 (i.e. j=402 in [251;500], as job id is i=2)"
[1] "seed 78198 for j=153 out of 250 (i.e. j=403 in [251;500], as job id is i=2)"
[1] "seed 41601 for j=154 out of 250 (i.e. j=404 in [251;500], as job id is i=2)"
[1] "seed 57770 for j=155 out of 250 (i.e. j=405 in [251;500], as job id is i=2)"
[1] "seed 20966 for j=156 out of 250 (i.e. j=406 in [251;500], as job id is i=2)"
[1] "seed 8072 for j=157 out of 250 (i.e. j=407 in [251;500], as job id is i=2)"
[1] "seed 98294 for j=158 out of 250 (i.e. j=408 in [251;500], as job id is i=2)"
[1] "seed 11544 for j=159 out of 250 (i.e. j=409 in [251;500], as job id is i=2)"
[1] "seed 51914 for j=160 out of 250 (i.e. j=410 in [251;500], as job id is i=2)"
[1] "seed 83454 for j=161 out of 250 (i.e. j=411 in [251;500], as job id is i=2)"
[1] "seed 24272 for j=162 out of 250 (i.e. j=412 in [251;500], as job id is i=2)"
[1] "seed 13221 for j=163 out of 250 (i.e. j=413 in [251;500], as job id is i=2)"
[1] "seed 23494 for j=164 out of 250 (i.e. j=414 in [251;500], as job id is i=2)"
[1] "seed 22681 for j=165 out of 250 (i.e. j=415 in [251;500], as job id is i=2)"
[1] "seed 63883 for j=166 out of 250 (i.e. j=416 in [251;500], as job id is i=2)"
[1] "seed 87564 for j=167 out of 250 (i.e. j=417 in [251;500], as job id is i=2)"
[1] "seed 47492 for j=168 out of 250 (i.e. j=418 in [251;500], as job id is i=2)"
[1] "seed 6109 for j=169 out of 250 (i.e. j=419 in [251;500], as job id is i=2)"
[1] "seed 41013 for j=170 out of 250 (i.e. j=420 in [251;500], as job id is i=2)"
[1] "seed 85598 for j=171 out of 250 (i.e. j=421 in [251;500], as job id is i=2)"
[1] "seed 53050 for j=172 out of 250 (i.e. j=422 in [251;500], as job id is i=2)"
[1] "seed 64835 for j=173 out of 250 (i.e. j=423 in [251;500], as job id is i=2)"
[1] "seed 38290 for j=174 out of 250 (i.e. j=424 in [251;500], as job id is i=2)"
[1] "seed 8418 for j=175 out of 250 (i.e. j=425 in [251;500], as job id is i=2)"
[1] "seed 95802 for j=176 out of 250 (i.e. j=426 in [251;500], as job id is i=2)"
[1] "seed 4330 for j=177 out of 250 (i.e. j=427 in [251;500], as job id is i=2)"
[1] "seed 61466 for j=178 out of 250 (i.e. j=428 in [251;500], as job id is i=2)"
[1] "seed 29015 for j=179 out of 250 (i.e. j=429 in [251;500], as job id is i=2)"
[1] "seed 59841 for j=180 out of 250 (i.e. j=430 in [251;500], as job id is i=2)"
[1] "seed 15207 for j=181 out of 250 (i.e. j=431 in [251;500], as job id is i=2)"
[1] "seed 91451 for j=182 out of 250 (i.e. j=432 in [251;500], as job id is i=2)"
[1] "seed 30190 for j=183 out of 250 (i.e. j=433 in [251;500], as job id is i=2)"
[1] "seed 12470 for j=184 out of 250 (i.e. j=434 in [251;500], as job id is i=2)"
[1] "seed 12442 for j=185 out of 250 (i.e. j=435 in [251;500], as job id is i=2)"
[1] "seed 80510 for j=186 out of 250 (i.e. j=436 in [251;500], as job id is i=2)"
[1] "seed 20987 for j=187 out of 250 (i.e. j=437 in [251;500], as job id is i=2)"
[1] "seed 90314 for j=188 out of 250 (i.e. j=438 in [251;500], as job id is i=2)"
[1] "seed 919 for j=189 out of 250 (i.e. j=439 in [251;500], as job id is i=2)"
[1] "seed 67360 for j=190 out of 250 (i.e. j=440 in [251;500], as job id is i=2)"
[1] "seed 75146 for j=191 out of 250 (i.e. j=441 in [251;500], as job id is i=2)"
[1] "seed 55280 for j=192 out of 250 (i.e. j=442 in [251;500], as job id is i=2)"
[1] "seed 33104 for j=193 out of 250 (i.e. j=443 in [251;500], as job id is i=2)"
[1] "seed 95616 for j=194 out of 250 (i.e. j=444 in [251;500], as job id is i=2)"
[1] "seed 67710 for j=195 out of 250 (i.e. j=445 in [251;500], as job id is i=2)"
[1] "seed 30889 for j=196 out of 250 (i.e. j=446 in [251;500], as job id is i=2)"
[1] "seed 41278 for j=197 out of 250 (i.e. j=447 in [251;500], as job id is i=2)"
[1] "seed 75707 for j=198 out of 250 (i.e. j=448 in [251;500], as job id is i=2)"
[1] "seed 2751 for j=199 out of 250 (i.e. j=449 in [251;500], as job id is i=2)"
[1] "seed 34211 for j=200 out of 250 (i.e. j=450 in [251;500], as job id is i=2)"
[1] "seed 82061 for j=201 out of 250 (i.e. j=451 in [251;500], as job id is i=2)"
[1] "seed 41210 for j=202 out of 250 (i.e. j=452 in [251;500], as job id is i=2)"
[1] "seed 76759 for j=203 out of 250 (i.e. j=453 in [251;500], as job id is i=2)"
[1] "seed 94367 for j=204 out of 250 (i.e. j=454 in [251;500], as job id is i=2)"
[1] "seed 51978 for j=205 out of 250 (i.e. j=455 in [251;500], as job id is i=2)"
[1] "seed 22326 for j=206 out of 250 (i.e. j=456 in [251;500], as job id is i=2)"
[1] "seed 46471 for j=207 out of 250 (i.e. j=457 in [251;500], as job id is i=2)"
[1] "seed 7822 for j=208 out of 250 (i.e. j=458 in [251;500], as job id is i=2)"
[1] "seed 27585 for j=209 out of 250 (i.e. j=459 in [251;500], as job id is i=2)"
[1] "seed 16095 for j=210 out of 250 (i.e. j=460 in [251;500], as job id is i=2)"
[1] "seed 48038 for j=211 out of 250 (i.e. j=461 in [251;500], as job id is i=2)"
[1] "seed 87924 for j=212 out of 250 (i.e. j=462 in [251;500], as job id is i=2)"
[1] "seed 56631 for j=213 out of 250 (i.e. j=463 in [251;500], as job id is i=2)"
[1] "seed 21354 for j=214 out of 250 (i.e. j=464 in [251;500], as job id is i=2)"
[1] "seed 40258 for j=215 out of 250 (i.e. j=465 in [251;500], as job id is i=2)"
[1] "seed 7749 for j=216 out of 250 (i.e. j=466 in [251;500], as job id is i=2)"
[1] "seed 37038 for j=217 out of 250 (i.e. j=467 in [251;500], as job id is i=2)"
[1] "seed 73356 for j=218 out of 250 (i.e. j=468 in [251;500], as job id is i=2)"
[1] "seed 26624 for j=219 out of 250 (i.e. j=469 in [251;500], as job id is i=2)"
[1] "seed 66422 for j=220 out of 250 (i.e. j=470 in [251;500], as job id is i=2)"
[1] "seed 26920 for j=221 out of 250 (i.e. j=471 in [251;500], as job id is i=2)"
[1] "seed 88846 for j=222 out of 250 (i.e. j=472 in [251;500], as job id is i=2)"
[1] "seed 86760 for j=223 out of 250 (i.e. j=473 in [251;500], as job id is i=2)"
[1] "seed 18917 for j=224 out of 250 (i.e. j=474 in [251;500], as job id is i=2)"
[1] "seed 77679 for j=225 out of 250 (i.e. j=475 in [251;500], as job id is i=2)"
[1] "seed 92708 for j=226 out of 250 (i.e. j=476 in [251;500], as job id is i=2)"
[1] "seed 30305 for j=227 out of 250 (i.e. j=477 in [251;500], as job id is i=2)"
[1] "seed 36769 for j=228 out of 250 (i.e. j=478 in [251;500], as job id is i=2)"
[1] "seed 3981 for j=229 out of 250 (i.e. j=479 in [251;500], as job id is i=2)"
[1] "seed 32734 for j=230 out of 250 (i.e. j=480 in [251;500], as job id is i=2)"
[1] "seed 92504 for j=231 out of 250 (i.e. j=481 in [251;500], as job id is i=2)"
[1] "seed 76767 for j=232 out of 250 (i.e. j=482 in [251;500], as job id is i=2)"
[1] "seed 26458 for j=233 out of 250 (i.e. j=483 in [251;500], as job id is i=2)"
[1] "seed 53432 for j=234 out of 250 (i.e. j=484 in [251;500], as job id is i=2)"
[1] "seed 22640 for j=235 out of 250 (i.e. j=485 in [251;500], as job id is i=2)"
[1] "seed 96408 for j=236 out of 250 (i.e. j=486 in [251;500], as job id is i=2)"
[1] "seed 15646 for j=237 out of 250 (i.e. j=487 in [251;500], as job id is i=2)"
[1] "seed 7422 for j=238 out of 250 (i.e. j=488 in [251;500], as job id is i=2)"
[1] "seed 56159 for j=239 out of 250 (i.e. j=489 in [251;500], as job id is i=2)"
[1] "seed 9528 for j=240 out of 250 (i.e. j=490 in [251;500], as job id is i=2)"
[1] "seed 31343 for j=241 out of 250 (i.e. j=491 in [251;500], as job id is i=2)"
[1] "seed 84714 for j=242 out of 250 (i.e. j=492 in [251;500], as job id is i=2)"
[1] "seed 54197 for j=243 out of 250 (i.e. j=493 in [251;500], as job id is i=2)"
[1] "seed 84354 for j=244 out of 250 (i.e. j=494 in [251;500], as job id is i=2)"
[1] "seed 78759 for j=245 out of 250 (i.e. j=495 in [251;500], as job id is i=2)"
[1] "seed 79338 for j=246 out of 250 (i.e. j=496 in [251;500], as job id is i=2)"
[1] "seed 36778 for j=247 out of 250 (i.e. j=497 in [251;500], as job id is i=2)"
[1] "seed 81104 for j=248 out of 250 (i.e. j=498 in [251;500], as job id is i=2)"
[1] "seed 32574 for j=249 out of 250 (i.e. j=499 in [251;500], as job id is i=2)"
[1] "seed 44078 for j=250 out of 250 (i.e. j=500 in [251;500], as job id is i=2)"
There were 12 warnings (use warnings() to see them)
> rownames(RES) <- NULL
> save(RES,file=paste0(path.res,name,"-",iter_sim,".rda"))
> 
> ## * Summary results
> sessionInfo()
R version 4.1.2 (2021-11-01)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Red Hat Enterprise Linux 8.5 (Ootpa)

Matrix products: default
BLAS:   /opt/software/R/4.1.2/lib64/R/lib/libRblas.so
LAPACK: /opt/software/R/4.1.2/lib64/R/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] mvtnorm_1.1-3    DelayedGSD_0.0.3

loaded via a namespace (and not attached):
 [1] BB_2019.10-1     magrittr_2.0.3   tidyselect_1.1.2 munsell_0.5.0   
 [5] lattice_0.20-45  colorspace_2.0-3 xtable_1.8-4     R6_2.5.1        
 [9] quadprog_1.5-8   rlang_1.0.3      fansi_1.0.3      dplyr_1.0.9     
[13] grid_4.1.2       nlme_3.1-153     gtable_0.3.0     gsDesign_3.3.0  
[17] utf8_1.2.2       cli_3.3.0        ellipsis_0.3.2   tibble_3.1.7    
[21] lifecycle_1.0.1  crayon_1.5.1     purrr_0.3.4      ggplot2_3.3.6   
[25] tidyr_1.2.0      vctrs_0.4.1      glue_1.6.2       compiler_4.1.2  
[29] pillar_1.7.0     generics_0.1.3   scales_1.2.0     pkgconfig_2.0.3 
> summary(RES)
     method        stage           type             statistic     
 Min.   :1.0   Min.   :1.000   Length:1500        Min.   :0.0014  
 1st Qu.:1.0   1st Qu.:1.000   Class :character   1st Qu.:1.5378  
 Median :1.5   Median :1.000   Mode  :character   Median :2.2144  
 Mean   :1.5   Mean   :1.333                      Mean   :2.1690  
 3rd Qu.:2.0   3rd Qu.:2.000                      3rd Qu.:2.8647  
 Max.   :2.0   Max.   :2.000                      Max.   :4.4167  
                                                  NA's   :500     
  estimate_ML          se_ML             info           infoPC      
 Min.   :-0.6666   Min.   :0.3385   Min.   :4.023   Min.   :0.3143  
 1st Qu.: 0.5296   1st Qu.:0.3878   1st Qu.:5.690   1st Qu.:0.4446  
 Median : 0.7588   Median :0.4042   Median :6.205   Median :0.4849  
 Mean   : 0.7571   Mean   :0.4054   Mean   :6.255   Mean   :0.4887  
 3rd Qu.: 0.9996   3rd Qu.:0.4210   3rd Qu.:6.746   3rd Qu.:0.5272  
 Max.   : 1.8709   Max.   :0.4986   Max.   :8.730   Max.   :0.6821  
 NA's   :500       NA's   :1000     NA's   :134     NA's   :134     
   info.pred      infoPC.pred           uk              lk         
 Min.   :4.201   Min.   :0.3283   Min.   :2.269   Min.   :-0.4542  
 1st Qu.:5.955   1st Qu.:0.4654   1st Qu.:2.470   1st Qu.: 0.1361  
 Median :6.483   Median :0.5066   Median :2.529   Median : 0.2922  
 Mean   :6.536   Mean   :0.5107   Mean   :2.529   Mean   : 0.2949  
 3rd Qu.:7.064   3rd Qu.:0.5520   3rd Qu.:2.586   3rd Qu.: 0.4554  
 Max.   :9.172   Max.   :0.7167   Max.   :2.811   Max.   : 1.0416  
 NA's   :1000    NA's   :1000     NA's   :1000    NA's   :1000     
   decision            reason            p.value_ML        lower_ML      
 Length:1500        Length:1500        Min.   :0.0000   Min.   :-1.0129  
 Class :character   Class :character   1st Qu.:0.0019   1st Qu.:-0.0745  
 Mode  :character   Mode  :character   Median :0.0087   Median : 0.1203  
                                       Mean   :0.0856   Mean   : 0.0754  
                                       3rd Qu.:0.0468   3rd Qu.: 0.2811  
                                       Max.   :0.9924   Max.   : 0.8324  
                                       NA's   :1000     NA's   :1000     
    upper_ML       p.value_MUE       lower_MUE         upper_MUE     
 Min.   :0.5935   Min.   :0.0000   Min.   :-1.0087   Min.   :0.5393  
 1st Qu.:1.2386   1st Qu.:0.0048   1st Qu.:-0.0739   1st Qu.:1.2298  
 Median :1.4327   Median :0.0085   Median : 0.0529   Median :1.4077  
 Mean   :1.4937   Mean   :0.0577   Mean   : 0.0183   Mean   :1.4901  
 3rd Qu.:1.7202   3rd Qu.:0.0246   3rd Qu.: 0.1446   3rd Qu.:1.6713  
 Max.   :2.6723   Max.   :0.8911   Max.   : 0.8375   Max.   :2.6672  
 NA's   :1000     NA's   :1000     NA's   :1000      NA's   :1000    
  estimate_MUE           ck          time.interim      seed      
 Min.   :-0.2097   Min.   :0.0269   Min.   :503   Min.   :  919  
 1st Qu.: 0.5875   1st Qu.:1.3936   1st Qu.:582   1st Qu.:23620  
 Median : 0.7533   Median :1.4496   Median :601   Median :47968  
 Mean   : 0.7625   Mean   :1.4240   Mean   :601   Mean   :49624  
 3rd Qu.: 0.9620   3rd Qu.:1.5018   3rd Qu.:622   3rd Qu.:76759  
 Max.   : 1.7524   Max.   :1.7133   Max.   :697   Max.   :99628  
 NA's   :1000      NA's   :634                                   
  nX1.interim     nX2.interim     nX3.interim    computation.time
 Min.   :145.0   Min.   :131.0   Min.   :121.0   Min.   :0.690   
 1st Qu.:148.0   1st Qu.:135.0   1st Qu.:125.0   1st Qu.:0.917   
 Median :149.0   Median :137.0   Median :127.0   Median :1.000   
 Mean   :148.7   Mean   :136.7   Mean   :127.2   Mean   :1.025   
 3rd Qu.:150.0   3rd Qu.:138.0   3rd Qu.:129.0   3rd Qu.:1.139   
 Max.   :154.0   Max.   :143.0   Max.   :133.0   Max.   :3.757   
                                                                 
> 
> #----------------------------------------------------------------------
> ### BATCH_simuMain.R ends here
> 
> proc.time()
   user  system elapsed 
259.158   0.426 270.535 
