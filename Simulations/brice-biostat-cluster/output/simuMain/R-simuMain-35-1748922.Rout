
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### BATCH_simuMain.R --- 
> #----------------------------------------------------------------------
> ## Author: Paul Blanche
> ## Created: Mar  5 2021 (10:56) 
> ## Version: 
> ## Last-Updated: jul  7 2022 (13:56) 
> ##           By: Brice Ozenne
> ##     Update #: 518
> #----------------------------------------------------------------------
> ## 
> ### Commentary: 
> ## 
> ### Change Log:
> #----------------------------------------------------------------------
> ## 
> ### Code:
> 
> ## ** BATCH loop
> ## cd /projects/biostat01/people/hpl802/DelayedGSD/
> ## for ITER in `seq 1 10`;
> ## do
> ## eval 'R CMD BATCH --vanilla "--args iter_sim='$ITER' n.iter_sim=10" BATCH_simuMain.R output/R-simuMain-'$ITER'.Rout &'
> ## done
> 
> ## [1] 1186669
> ## [2] 1186670
> ## [3] 1186671
> ## [4] 1186672
> ## [5] 1186673
> ## [6] 1186674
> ## [7] 1186675
> ## [8] 1186676
> ## [9] 1186677
> ## [10] 1186678
> 
> rm(list=ls())
>                                    # {{{ parameters
> ## * parameters
> name <- "ScenarioName" # To save the results
> method <- 1:2 # methods used to compute the boundaries
>                                         #---
> myseed <- 140786598
>                                         #--- to plan the trial ----
> NMC <- 250 # number of sequential simulations to run in parallel. Eg. with 250, then we can run 40 scripts in paralell to get N=10,000 runs in total.
> kMax <- 2  #max number of analyses (including final)
> alpha <- 0.025  #type I error (one sided)
> beta <- 0.2  #type II error
> informationRates <- c(0.5,1)  #planned  information rates
> rho_alpha <- 2  # rho parameter for alpha error spending function
> rho_beta <- 2  # rho parameter for beta error spending function
> ## deltaPower <- 0.75 # just to try another value when Id > Imax
> Id <- 0.55  #(expected) information rate at each decision analysis
> binding <- TRUE
>                                         #
>                                         #---- to generate data -----------
>                                         #
> block <- c(1,1,0,0) 
> allsd <- c(2.5,2.1,2.4) # sd, first from baseline measurement, then the two changes from baseline
> mean0 <- c(10,0,0) # mean placebo group (again, first is absolute value, then change from baseline)
> delta <- c(0,0.6,0.8) # treatment effect
> ar <- (0.86*2)*2 # orginial accrual rate from data from Corine is 0.86 per week, hence we multiply by 2 for by 14 days. As to low, we further multiply by 2
> cor011 <- -0.15 # ~ from data from Corine
> corij1 <- 0.68  # ~ from data from Corine
> cor0j1 <- -0.27  # ~ from data from Corine
> Miss11 <- 5/104 # miss both V1 and V2
> Miss12 <- 1/104 # miss V1 and but not V2
> Miss21 <- 6/104 # do not miss V1 and but miss V2
> Miss22 <- 92/104 # miss none
> PropForInterim <- 0.5 # Decide to have interim analysiz when PropForInterim % of all subjects have had the chance to have one follow-up measuement recorded in the data to be available for analysis.
> theDelta.t <- 1.50001 # time lag to process the data and make them ready to analyze after collecting them (unit is time between two follow-up visits)
> TimeFactor <- 14 ## number of days between two visits
>                                         #
>                                         #--- actually for both planing the trial  and generating data-----
>                                         #
>                                         #
> deltaPower <- abs(delta[3]) # effect (NOT Z-scale/unit, but outcome scale/unit!) that the study is powered for: should we choose ourselves or compute from other numbers above ???
> n <- ceiling(2*2*((allsd[3]/deltaPower)^2)*(qnorm(1-beta)-qnorm(alpha))^2) #104 with Corine's data # should we choose ourselves or compute from the above numbers ???
>                                         # inflate SS as required for interim
> 
>                                         # {{{ Set seeds for parallel computing and reproducibility
> ## * Seed
> args <- commandArgs(TRUE) ## BATCH MODE
> if(length(args)>0){
+     for (arg in args){
+         eval(parse(text=arg))
+     }
+ }else{ ## SLUMR
+     iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_ID"))
+     n.iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_COUNT"))
+ } ## interactive
> if(is.na(iter_sim)){iter_sim <- 1}
> if(is.na(n.iter_sim)){n.iter_sim <- 40}
> 
> set.seed(140786598)
> allseeds <- sample.int(n = 10*n.iter_sim*NMC, size = n.iter_sim*NMC, replace=FALSE) #x=1:(.Machine$integer.max) seems to be maximal possible
> # }}}
> 
> # {{{ set path to load and save and othe machine specific variables
> ## * path
> path <- "."
> path.res <- file.path(path,"Results","simuMain")
> if(dir.exists(path.res)==FALSE){
+     if(dir.exists(file.path(path,"Results"))==FALSE){
+     dir.create(file.path(path,"Results"))
+     }
+     dir.create(path.res)
+ }
> path.output <- file.path(path,"output","simuMain")
> if(dir.exists(path.output)==FALSE){
+     if(dir.exists(file.path(path,"output"))==FALSE){
+     dir.create(file.path(path,"output"))
+     }
+     dir.create(path.output)
+ }
> # }}}
> 
> 
> ## * libraries and functions
> library(DelayedGSD)
DelayedGSD version 0.0.3
> ## sourceDir <- function(path, trace = TRUE, ...) {
> ##     for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
> ##         if(trace) cat(nm,":")
> ##         source(file.path(path, nm), ...)
> ##         if(trace) cat("\n")
> ##     }
> ## }
> ## sourceDir(pathToLoad)
>     
> 
> ## * Compute inflation factor and sample size
> plannedB <- vector(mode = "list", length = 3)
> for(iMeth in method){ ## iMeth <- 1
+     plannedB[[iMeth]] <- CalcBoundaries(kMax=kMax,  
+                                         alpha=alpha, 
+                                         beta=beta,  
+                                         InfoR.i=informationRates,  
+                                         InfoR.d=c(Id,1),  
+                                         rho_alpha=rho_alpha,  
+                                         rho_beta=rho_beta,  
+                                         method=iMeth,  
+                                         cNotBelowFixedc=FALSE,
+                                         bindingFutility=binding,
+                                         delta=tail(delta,1))
+     ## summary(plannedB[[1]])
+     ## coef(plannedB[[iMeth]], type = "information")
+ }
Loading required namespace: gsDesign
Loading required package: mvtnorm
Loading required namespace: BB
> inflationFactor <- unlist(lapply(plannedB,function(iP){iP$planned$InflationFactor}))
> nGSD <- ceiling(n*inflationFactor)
> ##  plot(plannedB[[1]])
> 
> #
> # --- just to check---
> ## n
> ## InfoFixed <- ((qnorm(1-beta)-qnorm(alpha))/(deltaPower))^2
> ## InfoFixed
> ## n/(4*(allsd[3])^2)
> #---
> # }}}
> 
> 
> 
> 
> # {{{ technical details to loop
> RES <- NULL # initialize results to save
> allj <- ((iter_sim-1)*NMC + 1):(iter_sim*NMC) # indices of all iterations (replicates) for this job, accountng for the other jobs running in parallel
> # }}}
> 
> ## * Loop
> for(j in allj){ ## j <- 51 ## 5
+     startComp <- Sys.time()
+     myseedi <- allseeds[j]
+     # {{{ TRACE info (e.g. to check the Rout)
+     print(paste0("seed ",myseedi," for ","j=",which(j==allj)," out of ",NMC, " (i.e. j=",j," in [",(iter_sim-1)*NMC + 1,";",iter_sim*NMC,"], as job id is i=",iter_sim,")"))
+     # }}}
+     # {{{ Missing probabilities
+     MyMissProb <- matrix(c(Miss11,Miss12,Miss21,Miss22),ncol=2,nrow=2,byrow=TRUE) # to additionnally remove 1 more because some FASFL=N
+     colnames(MyMissProb) <- c("V2 missing","V2 not missing")
+     rownames(MyMissProb) <- c("V1 missing","V1 not missing")
+     # }}}
+ 
+                                         # {{{ generate data
+     ## ** simulate
+     res <- GenData(n=n, 
+                    N.fw=2,
+                    rand.block=block,
+                    allsd=allsd,
+                    mean0=mean0,
+                    delta=delta,
+                    ar=ar,
+                    cor.01.1=cor011,
+                    cor.ij.1=corij1,
+                    cor.0j.1=cor0j1,
+                    seed=myseedi,
+                    MissProb=MyMissProb,
+                    DigitsOutcome=2,
+                    TimeFactor=TimeFactor,
+                    DigitsTime=0
+                    )
+     d <- res$d
+     ## head(d,n=20)
+                                         # }}}
+                                         # {{{ reformat data like those of Corine
+     ## Make data long format
+     ## dd <- FormatAsCase(d)
+     ## head(dd)
+     ## summary(dd)
+                                         # }}}
+    
+                                         # {{{ make data available at interim
+                                         # Here we stop inclusion data collection for the interim analysis as soon as
+                                         # half of the participants have completed (or had the opportunity to complete) the follow-up 
+     thet <- d$t3[ceiling(n*PropForInterim)]
+     di <- SelectData(d,t=thet)
+     ## ddi <- FormatAsCase(di) # needed ????
+     ## head(d[d$id==52,])
+                                         # }}}
+     ## {{{ analyze data at at interim
+     ## ** interim
+     lmmI <- analyzeData(di, ddf = "nlme", data.decision = sum(d$t1 <= thet + theDelta.t*TimeFactor), getinfo = TRUE, trace = TRUE)
+     ## lmmI <- analyzeData(di, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     currentGSD <- vector(mode = "list", length = 3)
+     out.interim <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+ 
+         currentGSD[[iMeth]] <- update(plannedB[[iMeth]], delta = lmmI, trace = FALSE)
+ 
+         iConfint.interim <- confint(currentGSD[[iMeth]])
+         iInfo.interim <- coef(currentGSD[[iMeth]], type = "information")
+         iBoundary.interim <- coef(currentGSD[[iMeth]], type = "boundary")
+         iDecision.interim <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+         out.interim[[iMeth]] <-  data.frame(statistic = iConfint.interim[1,"statistic"],
+                                             estimate_ML = iConfint.interim[1,"estimate"],
+                                             se_ML = iConfint.interim[1,"se"],
+                                             info = iInfo.interim[1,"Interim"],
+                                             infoPC = iInfo.interim[1,"Interim.pc"],
+                                             info.pred = iInfo.interim[1,"Decision"],
+                                             infoPC.pred = iInfo.interim[1,"Decision.pc"],
+                                             uk = iBoundary.interim[1,"Ebound"],
+                                             lk = iBoundary.interim[1,"Fbound"],
+                                             decision = iDecision.interim["decision","stage 1"],
+                                             reason = iDecision.interim["reason.interim","stage 1"])
+     }
+     ## currentGSD[[1]]
+     ## plot(currentGSD[[1]])
+ 
+     ## ** decision
+     dDecision <- d[which(d$t1 <= thet + theDelta.t*TimeFactor),]
+     lmmD <- analyzeData(dDecision, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+     
+     out.decision <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+           
+         if(out.interim[[iMeth]]$decision == "stop"){
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, trace = FALSE)
+             ## plot(currentGSD[[iMeth]])
+ 
+             iConfint.decision <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.decision  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = iConfint.decision[1,"statistic"],
+                                                 p.value_ML = iConfint.decision[iConfint.decision$method == "ML","p.value"],
+                                                 lower_ML = iConfint.decision[iConfint.decision$method == "ML","lower"],
+                                                 upper_ML = iConfint.decision[iConfint.decision$method == "ML","upper"],
+                                                 estimate_ML = iConfint.decision[iConfint.decision$method == "ML","estimate"],
+                                                 p.value_MUE = iConfint.decision[iConfint.decision$method == "MUE","p.value"],
+                                                 lower_MUE = iConfint.decision[iConfint.decision$method == "MUE","lower"],
+                                                 upper_MUE = iConfint.decision[iConfint.decision$method == "MUE","upper"],
+                                                 estimate_MUE = iConfint.decision[iConfint.decision$method == "MUE","estimate"],
+                                                 info = iInfo.decision[1,"Interim"],
+                                                 infoPC = iInfo.decision[1,"Interim.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = unname(iDecision.decision["decision","stage 2"])
+                                                 )
+ 
+         }else{
+             ## update information
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, k = 1, type.k = "decision", trace = FALSE)
+ 
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = NA,
+                                                 p.value_ML = NA,
+                                                 lower_ML = NA,
+                                                 upper_ML = NA,
+                                                 estimate_ML = NA,
+                                                 p.value_MUE = NA,
+                                                 lower_MUE = NA,
+                                                 upper_MUE = NA,
+                                                 estimate_MUE = NA,
+                                                 info = iInfo.decision[1,"Decision"],
+                                                 infoPC = iInfo.decision[1,"Decision.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = NA)
+         }
+     }
+                                         # }}}
+                                         # {{{ Analyze data at decision
+ 
+     ## ** finale
+     dFinal <- d
+     lmmF <- analyzeData(dFinal, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     out.final <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+         if(out.interim[[iMeth]]$decision == "stop"){
+             out.final[[iMeth]] <- data.frame(statistic = NA,
+                                              p.value_ML = NA,
+                                              lower_ML = NA,
+                                              upper_ML = NA,
+                                              estimate_ML = NA,
+                                              p.value_MUE = NA,
+                                              lower_MUE = NA,
+                                              upper_MUE = NA,
+                                              estimate_MUE = NA,
+                                              info = NA,
+                                              infoPC = NA,
+                                              ck = NA,
+                                              decision = NA)
+ 
+         }else{
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmF, trace = FALSE)
+ 
+             ## plot(test)
+             ## summary(test)
+             iConfint.final <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.final <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.final <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.final  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.final[[iMeth]] <- data.frame(statistic = iConfint.final[1,"statistic"],
+                                              p.value_ML = iConfint.final[iConfint.final$method == "ML","p.value"],
+                                              lower_ML = iConfint.final[iConfint.final$method == "ML","lower"],
+                                              upper_ML = iConfint.final[iConfint.final$method == "ML","upper"],
+                                              estimate_ML = iConfint.final[iConfint.final$method == "ML","estimate"],
+                                              p.value_MUE = iConfint.final[iConfint.final$method == "MUE","p.value"],
+                                              lower_MUE = iConfint.final[iConfint.final$method == "MUE","lower"],
+                                              upper_MUE = iConfint.final[iConfint.final$method == "MUE","upper"],
+                                              estimate_MUE = iConfint.final[iConfint.final$method == "MUE","estimate"],
+                                              info = iInfo.final[1,"Interim"],
+                                              infoPC = iInfo.final[1,"Interim.pc"],
+                                              ck = iBoundary.final[1,"Cbound"],
+                                              decision = unname(coef(currentGSD[[iMeth]], type = "decision")["decision","stage 2"])
+                                              )
+         }
+     }
+                                         # }}}
+ 
+     stopComp <- Sys.time()
+                                         # {{{ Save results
+ 
+     outMerge <- do.call(rbind,lapply(method, function(iMeth){
+         iNames <- unique(c(names(out.interim[[iMeth]]),names(out.decision[[iMeth]]),names(out.final[[iMeth]])))
+         iMerge <- data.frame(matrix(NA, ncol = length(iNames)+3, nrow = 3, dimnames = list(NULL, c("method", "stage", "type", iNames))))
+         iMerge[1,c("method","stage","type",names(out.interim[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "interim", out.interim[[iMeth]]) 
+         iMerge[2,c("method","stage","type",names(out.decision[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "decision", out.decision[[iMeth]]) 
+         iMerge[3,c("method","stage","type",names(out.final[[iMeth]]))] <- data.frame(method = iMeth, stage = 2, type = "final", out.final[[iMeth]])
+         return(iMerge)
+     }))
+ 
+     ## outMerge[outMerge$method==3,]
+ 
+     out <- cbind(
+         ## results
+         outMerge,
+         ## simulation details
+         time.interim = thet,
+         seed=myseedi,             
+         nX1.interim = sum(!is.na(di$X1)),
+         nX2.interim = sum(!is.na(di$X2)),
+         nX3.interim = sum(!is.na(di$X3)),
+         ## computation time
+         computation.time=as.double(round(difftime(stopComp,startComp,units="secs"),3))
+     )
+     ## names(out) <- myColNames
+     RES <- rbind(RES,out)
+     save(RES,file=paste0(path.res,name,"(tempo)-",iter_sim,".rda"))
+                                         # }}}
+ }
[1] "seed 69505 for j=1 out of 250 (i.e. j=8501 in [8501;8750], as job id is i=35)"
Loading required namespace: nlme
[1] "seed 16219 for j=2 out of 250 (i.e. j=8502 in [8501;8750], as job id is i=35)"
[1] "seed 34968 for j=3 out of 250 (i.e. j=8503 in [8501;8750], as job id is i=35)"
[1] "seed 69268 for j=4 out of 250 (i.e. j=8504 in [8501;8750], as job id is i=35)"
[1] "seed 65690 for j=5 out of 250 (i.e. j=8505 in [8501;8750], as job id is i=35)"
[1] "seed 7233 for j=6 out of 250 (i.e. j=8506 in [8501;8750], as job id is i=35)"
[1] "seed 14211 for j=7 out of 250 (i.e. j=8507 in [8501;8750], as job id is i=35)"
[1] "seed 70563 for j=8 out of 250 (i.e. j=8508 in [8501;8750], as job id is i=35)"
[1] "seed 2409 for j=9 out of 250 (i.e. j=8509 in [8501;8750], as job id is i=35)"
[1] "seed 45699 for j=10 out of 250 (i.e. j=8510 in [8501;8750], as job id is i=35)"
[1] "seed 20685 for j=11 out of 250 (i.e. j=8511 in [8501;8750], as job id is i=35)"
[1] "seed 85834 for j=12 out of 250 (i.e. j=8512 in [8501;8750], as job id is i=35)"
[1] "seed 98309 for j=13 out of 250 (i.e. j=8513 in [8501;8750], as job id is i=35)"
[1] "seed 51571 for j=14 out of 250 (i.e. j=8514 in [8501;8750], as job id is i=35)"
[1] "seed 30985 for j=15 out of 250 (i.e. j=8515 in [8501;8750], as job id is i=35)"
[1] "seed 13012 for j=16 out of 250 (i.e. j=8516 in [8501;8750], as job id is i=35)"
[1] "seed 31898 for j=17 out of 250 (i.e. j=8517 in [8501;8750], as job id is i=35)"
[1] "seed 46574 for j=18 out of 250 (i.e. j=8518 in [8501;8750], as job id is i=35)"
[1] "seed 46571 for j=19 out of 250 (i.e. j=8519 in [8501;8750], as job id is i=35)"
[1] "seed 6149 for j=20 out of 250 (i.e. j=8520 in [8501;8750], as job id is i=35)"
[1] "seed 24927 for j=21 out of 250 (i.e. j=8521 in [8501;8750], as job id is i=35)"
[1] "seed 92431 for j=22 out of 250 (i.e. j=8522 in [8501;8750], as job id is i=35)"
[1] "seed 61678 for j=23 out of 250 (i.e. j=8523 in [8501;8750], as job id is i=35)"
[1] "seed 39496 for j=24 out of 250 (i.e. j=8524 in [8501;8750], as job id is i=35)"
[1] "seed 88063 for j=25 out of 250 (i.e. j=8525 in [8501;8750], as job id is i=35)"
[1] "seed 95033 for j=26 out of 250 (i.e. j=8526 in [8501;8750], as job id is i=35)"
[1] "seed 56639 for j=27 out of 250 (i.e. j=8527 in [8501;8750], as job id is i=35)"
[1] "seed 69314 for j=28 out of 250 (i.e. j=8528 in [8501;8750], as job id is i=35)"
[1] "seed 49869 for j=29 out of 250 (i.e. j=8529 in [8501;8750], as job id is i=35)"
[1] "seed 29548 for j=30 out of 250 (i.e. j=8530 in [8501;8750], as job id is i=35)"
[1] "seed 17863 for j=31 out of 250 (i.e. j=8531 in [8501;8750], as job id is i=35)"
[1] "seed 34313 for j=32 out of 250 (i.e. j=8532 in [8501;8750], as job id is i=35)"
[1] "seed 82835 for j=33 out of 250 (i.e. j=8533 in [8501;8750], as job id is i=35)"
[1] "seed 98494 for j=34 out of 250 (i.e. j=8534 in [8501;8750], as job id is i=35)"
[1] "seed 85997 for j=35 out of 250 (i.e. j=8535 in [8501;8750], as job id is i=35)"
[1] "seed 7414 for j=36 out of 250 (i.e. j=8536 in [8501;8750], as job id is i=35)"
[1] "seed 71441 for j=37 out of 250 (i.e. j=8537 in [8501;8750], as job id is i=35)"
[1] "seed 90702 for j=38 out of 250 (i.e. j=8538 in [8501;8750], as job id is i=35)"
[1] "seed 76924 for j=39 out of 250 (i.e. j=8539 in [8501;8750], as job id is i=35)"
[1] "seed 31320 for j=40 out of 250 (i.e. j=8540 in [8501;8750], as job id is i=35)"
[1] "seed 84709 for j=41 out of 250 (i.e. j=8541 in [8501;8750], as job id is i=35)"
[1] "seed 2885 for j=42 out of 250 (i.e. j=8542 in [8501;8750], as job id is i=35)"
[1] "seed 86088 for j=43 out of 250 (i.e. j=8543 in [8501;8750], as job id is i=35)"
[1] "seed 48806 for j=44 out of 250 (i.e. j=8544 in [8501;8750], as job id is i=35)"
[1] "seed 82303 for j=45 out of 250 (i.e. j=8545 in [8501;8750], as job id is i=35)"
[1] "seed 41113 for j=46 out of 250 (i.e. j=8546 in [8501;8750], as job id is i=35)"
[1] "seed 33964 for j=47 out of 250 (i.e. j=8547 in [8501;8750], as job id is i=35)"
[1] "seed 62784 for j=48 out of 250 (i.e. j=8548 in [8501;8750], as job id is i=35)"
[1] "seed 94765 for j=49 out of 250 (i.e. j=8549 in [8501;8750], as job id is i=35)"
[1] "seed 62677 for j=50 out of 250 (i.e. j=8550 in [8501;8750], as job id is i=35)"
[1] "seed 70479 for j=51 out of 250 (i.e. j=8551 in [8501;8750], as job id is i=35)"
[1] "seed 19325 for j=52 out of 250 (i.e. j=8552 in [8501;8750], as job id is i=35)"
[1] "seed 95253 for j=53 out of 250 (i.e. j=8553 in [8501;8750], as job id is i=35)"
[1] "seed 70329 for j=54 out of 250 (i.e. j=8554 in [8501;8750], as job id is i=35)"
[1] "seed 58131 for j=55 out of 250 (i.e. j=8555 in [8501;8750], as job id is i=35)"
[1] "seed 4241 for j=56 out of 250 (i.e. j=8556 in [8501;8750], as job id is i=35)"
[1] "seed 41729 for j=57 out of 250 (i.e. j=8557 in [8501;8750], as job id is i=35)"
[1] "seed 32439 for j=58 out of 250 (i.e. j=8558 in [8501;8750], as job id is i=35)"
[1] "seed 26128 for j=59 out of 250 (i.e. j=8559 in [8501;8750], as job id is i=35)"
[1] "seed 68812 for j=60 out of 250 (i.e. j=8560 in [8501;8750], as job id is i=35)"
[1] "seed 14308 for j=61 out of 250 (i.e. j=8561 in [8501;8750], as job id is i=35)"
[1] "seed 25383 for j=62 out of 250 (i.e. j=8562 in [8501;8750], as job id is i=35)"
[1] "seed 31405 for j=63 out of 250 (i.e. j=8563 in [8501;8750], as job id is i=35)"
[1] "seed 82799 for j=64 out of 250 (i.e. j=8564 in [8501;8750], as job id is i=35)"
[1] "seed 39584 for j=65 out of 250 (i.e. j=8565 in [8501;8750], as job id is i=35)"
[1] "seed 69197 for j=66 out of 250 (i.e. j=8566 in [8501;8750], as job id is i=35)"
[1] "seed 52727 for j=67 out of 250 (i.e. j=8567 in [8501;8750], as job id is i=35)"
[1] "seed 28237 for j=68 out of 250 (i.e. j=8568 in [8501;8750], as job id is i=35)"
[1] "seed 96902 for j=69 out of 250 (i.e. j=8569 in [8501;8750], as job id is i=35)"
[1] "seed 5386 for j=70 out of 250 (i.e. j=8570 in [8501;8750], as job id is i=35)"
[1] "seed 58490 for j=71 out of 250 (i.e. j=8571 in [8501;8750], as job id is i=35)"
[1] "seed 42798 for j=72 out of 250 (i.e. j=8572 in [8501;8750], as job id is i=35)"
[1] "seed 7975 for j=73 out of 250 (i.e. j=8573 in [8501;8750], as job id is i=35)"
[1] "seed 17311 for j=74 out of 250 (i.e. j=8574 in [8501;8750], as job id is i=35)"
[1] "seed 32668 for j=75 out of 250 (i.e. j=8575 in [8501;8750], as job id is i=35)"
[1] "seed 72002 for j=76 out of 250 (i.e. j=8576 in [8501;8750], as job id is i=35)"
[1] "seed 72507 for j=77 out of 250 (i.e. j=8577 in [8501;8750], as job id is i=35)"
[1] "seed 81400 for j=78 out of 250 (i.e. j=8578 in [8501;8750], as job id is i=35)"
[1] "seed 73291 for j=79 out of 250 (i.e. j=8579 in [8501;8750], as job id is i=35)"
[1] "seed 6075 for j=80 out of 250 (i.e. j=8580 in [8501;8750], as job id is i=35)"
[1] "seed 73828 for j=81 out of 250 (i.e. j=8581 in [8501;8750], as job id is i=35)"
[1] "seed 58331 for j=82 out of 250 (i.e. j=8582 in [8501;8750], as job id is i=35)"
[1] "seed 62743 for j=83 out of 250 (i.e. j=8583 in [8501;8750], as job id is i=35)"
[1] "seed 84070 for j=84 out of 250 (i.e. j=8584 in [8501;8750], as job id is i=35)"
[1] "seed 42321 for j=85 out of 250 (i.e. j=8585 in [8501;8750], as job id is i=35)"
[1] "seed 59563 for j=86 out of 250 (i.e. j=8586 in [8501;8750], as job id is i=35)"
[1] "seed 81548 for j=87 out of 250 (i.e. j=8587 in [8501;8750], as job id is i=35)"
[1] "seed 59761 for j=88 out of 250 (i.e. j=8588 in [8501;8750], as job id is i=35)"
[1] "seed 51547 for j=89 out of 250 (i.e. j=8589 in [8501;8750], as job id is i=35)"
[1] "seed 33280 for j=90 out of 250 (i.e. j=8590 in [8501;8750], as job id is i=35)"
[1] "seed 21797 for j=91 out of 250 (i.e. j=8591 in [8501;8750], as job id is i=35)"
[1] "seed 78578 for j=92 out of 250 (i.e. j=8592 in [8501;8750], as job id is i=35)"
[1] "seed 13966 for j=93 out of 250 (i.e. j=8593 in [8501;8750], as job id is i=35)"
[1] "seed 14799 for j=94 out of 250 (i.e. j=8594 in [8501;8750], as job id is i=35)"
[1] "seed 63286 for j=95 out of 250 (i.e. j=8595 in [8501;8750], as job id is i=35)"
[1] "seed 67869 for j=96 out of 250 (i.e. j=8596 in [8501;8750], as job id is i=35)"
[1] "seed 18866 for j=97 out of 250 (i.e. j=8597 in [8501;8750], as job id is i=35)"
[1] "seed 7664 for j=98 out of 250 (i.e. j=8598 in [8501;8750], as job id is i=35)"
[1] "seed 89398 for j=99 out of 250 (i.e. j=8599 in [8501;8750], as job id is i=35)"
[1] "seed 15524 for j=100 out of 250 (i.e. j=8600 in [8501;8750], as job id is i=35)"
[1] "seed 99414 for j=101 out of 250 (i.e. j=8601 in [8501;8750], as job id is i=35)"
[1] "seed 99475 for j=102 out of 250 (i.e. j=8602 in [8501;8750], as job id is i=35)"
[1] "seed 92974 for j=103 out of 250 (i.e. j=8603 in [8501;8750], as job id is i=35)"
[1] "seed 36240 for j=104 out of 250 (i.e. j=8604 in [8501;8750], as job id is i=35)"
[1] "seed 99496 for j=105 out of 250 (i.e. j=8605 in [8501;8750], as job id is i=35)"
[1] "seed 13815 for j=106 out of 250 (i.e. j=8606 in [8501;8750], as job id is i=35)"
[1] "seed 27994 for j=107 out of 250 (i.e. j=8607 in [8501;8750], as job id is i=35)"
[1] "seed 15010 for j=108 out of 250 (i.e. j=8608 in [8501;8750], as job id is i=35)"
[1] "seed 84395 for j=109 out of 250 (i.e. j=8609 in [8501;8750], as job id is i=35)"
[1] "seed 10479 for j=110 out of 250 (i.e. j=8610 in [8501;8750], as job id is i=35)"
[1] "seed 69785 for j=111 out of 250 (i.e. j=8611 in [8501;8750], as job id is i=35)"
[1] "seed 98950 for j=112 out of 250 (i.e. j=8612 in [8501;8750], as job id is i=35)"
[1] "seed 77500 for j=113 out of 250 (i.e. j=8613 in [8501;8750], as job id is i=35)"
[1] "seed 68441 for j=114 out of 250 (i.e. j=8614 in [8501;8750], as job id is i=35)"
[1] "seed 41056 for j=115 out of 250 (i.e. j=8615 in [8501;8750], as job id is i=35)"
[1] "seed 51159 for j=116 out of 250 (i.e. j=8616 in [8501;8750], as job id is i=35)"
[1] "seed 20664 for j=117 out of 250 (i.e. j=8617 in [8501;8750], as job id is i=35)"
[1] "seed 20102 for j=118 out of 250 (i.e. j=8618 in [8501;8750], as job id is i=35)"
[1] "seed 42504 for j=119 out of 250 (i.e. j=8619 in [8501;8750], as job id is i=35)"
[1] "seed 8139 for j=120 out of 250 (i.e. j=8620 in [8501;8750], as job id is i=35)"
[1] "seed 87135 for j=121 out of 250 (i.e. j=8621 in [8501;8750], as job id is i=35)"
[1] "seed 49458 for j=122 out of 250 (i.e. j=8622 in [8501;8750], as job id is i=35)"
[1] "seed 79374 for j=123 out of 250 (i.e. j=8623 in [8501;8750], as job id is i=35)"
[1] "seed 83919 for j=124 out of 250 (i.e. j=8624 in [8501;8750], as job id is i=35)"
[1] "seed 24405 for j=125 out of 250 (i.e. j=8625 in [8501;8750], as job id is i=35)"
[1] "seed 17463 for j=126 out of 250 (i.e. j=8626 in [8501;8750], as job id is i=35)"
[1] "seed 33437 for j=127 out of 250 (i.e. j=8627 in [8501;8750], as job id is i=35)"
[1] "seed 97867 for j=128 out of 250 (i.e. j=8628 in [8501;8750], as job id is i=35)"
[1] "seed 36703 for j=129 out of 250 (i.e. j=8629 in [8501;8750], as job id is i=35)"
[1] "seed 3999 for j=130 out of 250 (i.e. j=8630 in [8501;8750], as job id is i=35)"
[1] "seed 94728 for j=131 out of 250 (i.e. j=8631 in [8501;8750], as job id is i=35)"
[1] "seed 12071 for j=132 out of 250 (i.e. j=8632 in [8501;8750], as job id is i=35)"
[1] "seed 66853 for j=133 out of 250 (i.e. j=8633 in [8501;8750], as job id is i=35)"
[1] "seed 14054 for j=134 out of 250 (i.e. j=8634 in [8501;8750], as job id is i=35)"
[1] "seed 1794 for j=135 out of 250 (i.e. j=8635 in [8501;8750], as job id is i=35)"
[1] "seed 60542 for j=136 out of 250 (i.e. j=8636 in [8501;8750], as job id is i=35)"
[1] "seed 44397 for j=137 out of 250 (i.e. j=8637 in [8501;8750], as job id is i=35)"
[1] "seed 2895 for j=138 out of 250 (i.e. j=8638 in [8501;8750], as job id is i=35)"
[1] "seed 25449 for j=139 out of 250 (i.e. j=8639 in [8501;8750], as job id is i=35)"
[1] "seed 22526 for j=140 out of 250 (i.e. j=8640 in [8501;8750], as job id is i=35)"
[1] "seed 28406 for j=141 out of 250 (i.e. j=8641 in [8501;8750], as job id is i=35)"
[1] "seed 94530 for j=142 out of 250 (i.e. j=8642 in [8501;8750], as job id is i=35)"
[1] "seed 87125 for j=143 out of 250 (i.e. j=8643 in [8501;8750], as job id is i=35)"
[1] "seed 59175 for j=144 out of 250 (i.e. j=8644 in [8501;8750], as job id is i=35)"
[1] "seed 73746 for j=145 out of 250 (i.e. j=8645 in [8501;8750], as job id is i=35)"
[1] "seed 54097 for j=146 out of 250 (i.e. j=8646 in [8501;8750], as job id is i=35)"
[1] "seed 50611 for j=147 out of 250 (i.e. j=8647 in [8501;8750], as job id is i=35)"
[1] "seed 53680 for j=148 out of 250 (i.e. j=8648 in [8501;8750], as job id is i=35)"
[1] "seed 61197 for j=149 out of 250 (i.e. j=8649 in [8501;8750], as job id is i=35)"
[1] "seed 68369 for j=150 out of 250 (i.e. j=8650 in [8501;8750], as job id is i=35)"
[1] "seed 14785 for j=151 out of 250 (i.e. j=8651 in [8501;8750], as job id is i=35)"
[1] "seed 62845 for j=152 out of 250 (i.e. j=8652 in [8501;8750], as job id is i=35)"
[1] "seed 31680 for j=153 out of 250 (i.e. j=8653 in [8501;8750], as job id is i=35)"
[1] "seed 48868 for j=154 out of 250 (i.e. j=8654 in [8501;8750], as job id is i=35)"
[1] "seed 94982 for j=155 out of 250 (i.e. j=8655 in [8501;8750], as job id is i=35)"
[1] "seed 53728 for j=156 out of 250 (i.e. j=8656 in [8501;8750], as job id is i=35)"
[1] "seed 77175 for j=157 out of 250 (i.e. j=8657 in [8501;8750], as job id is i=35)"
[1] "seed 89669 for j=158 out of 250 (i.e. j=8658 in [8501;8750], as job id is i=35)"
[1] "seed 83043 for j=159 out of 250 (i.e. j=8659 in [8501;8750], as job id is i=35)"
[1] "seed 43985 for j=160 out of 250 (i.e. j=8660 in [8501;8750], as job id is i=35)"
[1] "seed 21142 for j=161 out of 250 (i.e. j=8661 in [8501;8750], as job id is i=35)"
[1] "seed 89114 for j=162 out of 250 (i.e. j=8662 in [8501;8750], as job id is i=35)"
[1] "seed 20775 for j=163 out of 250 (i.e. j=8663 in [8501;8750], as job id is i=35)"
[1] "seed 11276 for j=164 out of 250 (i.e. j=8664 in [8501;8750], as job id is i=35)"
[1] "seed 54567 for j=165 out of 250 (i.e. j=8665 in [8501;8750], as job id is i=35)"
[1] "seed 86703 for j=166 out of 250 (i.e. j=8666 in [8501;8750], as job id is i=35)"
[1] "seed 20327 for j=167 out of 250 (i.e. j=8667 in [8501;8750], as job id is i=35)"
[1] "seed 7244 for j=168 out of 250 (i.e. j=8668 in [8501;8750], as job id is i=35)"
[1] "seed 32611 for j=169 out of 250 (i.e. j=8669 in [8501;8750], as job id is i=35)"
[1] "seed 1865 for j=170 out of 250 (i.e. j=8670 in [8501;8750], as job id is i=35)"
[1] "seed 91374 for j=171 out of 250 (i.e. j=8671 in [8501;8750], as job id is i=35)"
[1] "seed 85056 for j=172 out of 250 (i.e. j=8672 in [8501;8750], as job id is i=35)"
[1] "seed 19062 for j=173 out of 250 (i.e. j=8673 in [8501;8750], as job id is i=35)"
[1] "seed 22120 for j=174 out of 250 (i.e. j=8674 in [8501;8750], as job id is i=35)"
[1] "seed 43931 for j=175 out of 250 (i.e. j=8675 in [8501;8750], as job id is i=35)"
[1] "seed 7916 for j=176 out of 250 (i.e. j=8676 in [8501;8750], as job id is i=35)"
[1] "seed 84153 for j=177 out of 250 (i.e. j=8677 in [8501;8750], as job id is i=35)"
[1] "seed 13648 for j=178 out of 250 (i.e. j=8678 in [8501;8750], as job id is i=35)"
[1] "seed 4498 for j=179 out of 250 (i.e. j=8679 in [8501;8750], as job id is i=35)"
[1] "seed 53450 for j=180 out of 250 (i.e. j=8680 in [8501;8750], as job id is i=35)"
[1] "seed 11049 for j=181 out of 250 (i.e. j=8681 in [8501;8750], as job id is i=35)"
[1] "seed 68418 for j=182 out of 250 (i.e. j=8682 in [8501;8750], as job id is i=35)"
[1] "seed 79883 for j=183 out of 250 (i.e. j=8683 in [8501;8750], as job id is i=35)"
[1] "seed 9517 for j=184 out of 250 (i.e. j=8684 in [8501;8750], as job id is i=35)"
[1] "seed 64663 for j=185 out of 250 (i.e. j=8685 in [8501;8750], as job id is i=35)"
[1] "seed 75839 for j=186 out of 250 (i.e. j=8686 in [8501;8750], as job id is i=35)"
[1] "seed 7412 for j=187 out of 250 (i.e. j=8687 in [8501;8750], as job id is i=35)"
[1] "seed 67750 for j=188 out of 250 (i.e. j=8688 in [8501;8750], as job id is i=35)"
[1] "seed 20977 for j=189 out of 250 (i.e. j=8689 in [8501;8750], as job id is i=35)"
[1] "seed 7622 for j=190 out of 250 (i.e. j=8690 in [8501;8750], as job id is i=35)"
[1] "seed 90022 for j=191 out of 250 (i.e. j=8691 in [8501;8750], as job id is i=35)"
[1] "seed 38024 for j=192 out of 250 (i.e. j=8692 in [8501;8750], as job id is i=35)"
[1] "seed 58469 for j=193 out of 250 (i.e. j=8693 in [8501;8750], as job id is i=35)"
[1] "seed 74047 for j=194 out of 250 (i.e. j=8694 in [8501;8750], as job id is i=35)"
[1] "seed 7982 for j=195 out of 250 (i.e. j=8695 in [8501;8750], as job id is i=35)"
[1] "seed 82129 for j=196 out of 250 (i.e. j=8696 in [8501;8750], as job id is i=35)"
[1] "seed 93075 for j=197 out of 250 (i.e. j=8697 in [8501;8750], as job id is i=35)"
[1] "seed 63758 for j=198 out of 250 (i.e. j=8698 in [8501;8750], as job id is i=35)"
[1] "seed 89603 for j=199 out of 250 (i.e. j=8699 in [8501;8750], as job id is i=35)"
[1] "seed 93821 for j=200 out of 250 (i.e. j=8700 in [8501;8750], as job id is i=35)"
[1] "seed 96121 for j=201 out of 250 (i.e. j=8701 in [8501;8750], as job id is i=35)"
[1] "seed 40784 for j=202 out of 250 (i.e. j=8702 in [8501;8750], as job id is i=35)"
[1] "seed 77426 for j=203 out of 250 (i.e. j=8703 in [8501;8750], as job id is i=35)"
[1] "seed 3134 for j=204 out of 250 (i.e. j=8704 in [8501;8750], as job id is i=35)"
[1] "seed 68482 for j=205 out of 250 (i.e. j=8705 in [8501;8750], as job id is i=35)"
[1] "seed 33597 for j=206 out of 250 (i.e. j=8706 in [8501;8750], as job id is i=35)"
[1] "seed 35226 for j=207 out of 250 (i.e. j=8707 in [8501;8750], as job id is i=35)"
[1] "seed 11578 for j=208 out of 250 (i.e. j=8708 in [8501;8750], as job id is i=35)"
[1] "seed 83315 for j=209 out of 250 (i.e. j=8709 in [8501;8750], as job id is i=35)"
[1] "seed 93321 for j=210 out of 250 (i.e. j=8710 in [8501;8750], as job id is i=35)"
[1] "seed 63641 for j=211 out of 250 (i.e. j=8711 in [8501;8750], as job id is i=35)"
[1] "seed 44201 for j=212 out of 250 (i.e. j=8712 in [8501;8750], as job id is i=35)"
[1] "seed 38551 for j=213 out of 250 (i.e. j=8713 in [8501;8750], as job id is i=35)"
[1] "seed 56157 for j=214 out of 250 (i.e. j=8714 in [8501;8750], as job id is i=35)"
[1] "seed 12321 for j=215 out of 250 (i.e. j=8715 in [8501;8750], as job id is i=35)"
[1] "seed 85611 for j=216 out of 250 (i.e. j=8716 in [8501;8750], as job id is i=35)"
[1] "seed 33385 for j=217 out of 250 (i.e. j=8717 in [8501;8750], as job id is i=35)"
[1] "seed 72051 for j=218 out of 250 (i.e. j=8718 in [8501;8750], as job id is i=35)"
[1] "seed 15199 for j=219 out of 250 (i.e. j=8719 in [8501;8750], as job id is i=35)"
[1] "seed 61472 for j=220 out of 250 (i.e. j=8720 in [8501;8750], as job id is i=35)"
[1] "seed 33784 for j=221 out of 250 (i.e. j=8721 in [8501;8750], as job id is i=35)"
[1] "seed 80757 for j=222 out of 250 (i.e. j=8722 in [8501;8750], as job id is i=35)"
[1] "seed 61384 for j=223 out of 250 (i.e. j=8723 in [8501;8750], as job id is i=35)"
[1] "seed 65268 for j=224 out of 250 (i.e. j=8724 in [8501;8750], as job id is i=35)"
[1] "seed 17092 for j=225 out of 250 (i.e. j=8725 in [8501;8750], as job id is i=35)"
[1] "seed 66395 for j=226 out of 250 (i.e. j=8726 in [8501;8750], as job id is i=35)"
[1] "seed 58800 for j=227 out of 250 (i.e. j=8727 in [8501;8750], as job id is i=35)"
[1] "seed 36342 for j=228 out of 250 (i.e. j=8728 in [8501;8750], as job id is i=35)"
[1] "seed 99492 for j=229 out of 250 (i.e. j=8729 in [8501;8750], as job id is i=35)"
[1] "seed 42549 for j=230 out of 250 (i.e. j=8730 in [8501;8750], as job id is i=35)"
[1] "seed 45776 for j=231 out of 250 (i.e. j=8731 in [8501;8750], as job id is i=35)"
[1] "seed 46470 for j=232 out of 250 (i.e. j=8732 in [8501;8750], as job id is i=35)"
[1] "seed 67769 for j=233 out of 250 (i.e. j=8733 in [8501;8750], as job id is i=35)"
[1] "seed 92191 for j=234 out of 250 (i.e. j=8734 in [8501;8750], as job id is i=35)"
[1] "seed 72232 for j=235 out of 250 (i.e. j=8735 in [8501;8750], as job id is i=35)"
[1] "seed 66572 for j=236 out of 250 (i.e. j=8736 in [8501;8750], as job id is i=35)"
[1] "seed 37039 for j=237 out of 250 (i.e. j=8737 in [8501;8750], as job id is i=35)"
[1] "seed 85769 for j=238 out of 250 (i.e. j=8738 in [8501;8750], as job id is i=35)"
[1] "seed 66795 for j=239 out of 250 (i.e. j=8739 in [8501;8750], as job id is i=35)"
[1] "seed 50485 for j=240 out of 250 (i.e. j=8740 in [8501;8750], as job id is i=35)"
[1] "seed 81839 for j=241 out of 250 (i.e. j=8741 in [8501;8750], as job id is i=35)"
[1] "seed 92171 for j=242 out of 250 (i.e. j=8742 in [8501;8750], as job id is i=35)"
[1] "seed 7437 for j=243 out of 250 (i.e. j=8743 in [8501;8750], as job id is i=35)"
[1] "seed 26830 for j=244 out of 250 (i.e. j=8744 in [8501;8750], as job id is i=35)"
[1] "seed 86646 for j=245 out of 250 (i.e. j=8745 in [8501;8750], as job id is i=35)"
[1] "seed 42624 for j=246 out of 250 (i.e. j=8746 in [8501;8750], as job id is i=35)"
[1] "seed 24047 for j=247 out of 250 (i.e. j=8747 in [8501;8750], as job id is i=35)"
[1] "seed 90543 for j=248 out of 250 (i.e. j=8748 in [8501;8750], as job id is i=35)"
[1] "seed 90305 for j=249 out of 250 (i.e. j=8749 in [8501;8750], as job id is i=35)"
[1] "seed 96749 for j=250 out of 250 (i.e. j=8750 in [8501;8750], as job id is i=35)"
There were 22 warnings (use warnings() to see them)
> rownames(RES) <- NULL
> save(RES,file=paste0(path.res,name,"-",iter_sim,".rda"))
> 
> ## * Summary results
> sessionInfo()
R version 4.1.2 (2021-11-01)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Red Hat Enterprise Linux 8.5 (Ootpa)

Matrix products: default
BLAS:   /opt/software/R/4.1.2/lib64/R/lib/libRblas.so
LAPACK: /opt/software/R/4.1.2/lib64/R/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] mvtnorm_1.1-3    DelayedGSD_0.0.3

loaded via a namespace (and not attached):
 [1] BB_2019.10-1     magrittr_2.0.3   tidyselect_1.1.2 munsell_0.5.0   
 [5] lattice_0.20-45  colorspace_2.0-3 xtable_1.8-4     R6_2.5.1        
 [9] quadprog_1.5-8   rlang_1.0.3      fansi_1.0.3      dplyr_1.0.9     
[13] grid_4.1.2       nlme_3.1-153     gtable_0.3.0     gsDesign_3.3.0  
[17] utf8_1.2.2       cli_3.3.0        ellipsis_0.3.2   tibble_3.1.7    
[21] lifecycle_1.0.1  crayon_1.5.1     purrr_0.3.4      ggplot2_3.3.6   
[25] tidyr_1.2.0      vctrs_0.4.1      glue_1.6.2       compiler_4.1.2  
[29] pillar_1.7.0     generics_0.1.3   scales_1.2.0     pkgconfig_2.0.3 
> summary(RES)
     method        stage           type             statistic     
 Min.   :1.0   Min.   :1.000   Length:1500        Min.   :0.0049  
 1st Qu.:1.0   1st Qu.:1.000   Class :character   1st Qu.:1.4943  
 Median :1.5   Median :1.000   Mode  :character   Median :2.3892  
 Mean   :1.5   Mean   :1.333                      Mean   :2.3033  
 3rd Qu.:2.0   3rd Qu.:2.000                      3rd Qu.:3.0050  
 Max.   :2.0   Max.   :2.000                      Max.   :5.0424  
                                                  NA's   :500     
  estimate_ML          se_ML             info           infoPC      
 Min.   :-0.3732   Min.   :0.3370   Min.   :4.048   Min.   :0.3163  
 1st Qu.: 0.5502   1st Qu.:0.3897   1st Qu.:5.678   1st Qu.:0.4437  
 Median : 0.8124   Median :0.4028   Median :6.216   Median :0.4857  
 Mean   : 0.8237   Mean   :0.4059   Mean   :6.212   Mean   :0.4854  
 3rd Qu.: 1.0995   3rd Qu.:0.4225   3rd Qu.:6.676   3rd Qu.:0.5217  
 Max.   : 1.9106   Max.   :0.4971   Max.   :9.044   Max.   :0.7067  
 NA's   :500       NA's   :1000     NA's   :174     NA's   :174     
   info.pred      infoPC.pred           uk              lk         
 Min.   :4.303   Min.   :0.3362   Min.   :2.262   Min.   :-0.4441  
 1st Qu.:5.966   1st Qu.:0.4662   1st Qu.:2.478   1st Qu.: 0.1228  
 Median :6.525   Median :0.5099   Median :2.524   Median : 0.3053  
 Mean   :6.527   Mean   :0.5100   Mean   :2.531   Mean   : 0.2898  
 3rd Qu.:7.056   3rd Qu.:0.5514   3rd Qu.:2.591   3rd Qu.: 0.4355  
 Max.   :9.254   Max.   :0.7231   Max.   :2.807   Max.   : 1.0622  
 NA's   :1000    NA's   :1000     NA's   :1000    NA's   :1000     
   decision            reason            p.value_ML        lower_ML      
 Length:1500        Length:1500        Min.   :0.0000   Min.   :-0.9654  
 Class :character   Class :character   1st Qu.:0.0014   1st Qu.:-0.0637  
 Mode  :character   Mode  :character   Median :0.0070   Median : 0.1381  
                                       Mean   :0.0764   Mean   : 0.1187  
                                       3rd Qu.:0.0432   3rd Qu.: 0.3172  
                                       Max.   :0.9229   Max.   : 0.9906  
                                       NA's   :1000     NA's   :1000     
    upper_ML      p.value_MUE       lower_MUE         upper_MUE     
 Min.   :0.703   Min.   :0.0000   Min.   :-0.9677   Min.   :0.6985  
 1st Qu.:1.245   1st Qu.:0.0023   1st Qu.:-0.0613   1st Qu.:1.2374  
 Median :1.480   Median :0.0072   Median : 0.0750   Median :1.4586  
 Mean   :1.567   Mean   :0.0469   Mean   : 0.0834   Mean   :1.5630  
 3rd Qu.:1.910   3rd Qu.:0.0228   3rd Qu.: 0.2215   3rd Qu.:1.9416  
 Max.   :2.833   Max.   :1.0000   Max.   : 0.9956   Max.   :2.8279  
 NA's   :1000    NA's   :1000     NA's   :1000      NA's   :1000    
  estimate_MUE           ck           time.interim        seed      
 Min.   :-0.1042   Min.   :-0.0217   Min.   :523.0   Min.   : 1794  
 1st Qu.: 0.5880   1st Qu.: 1.3889   1st Qu.:587.0   1st Qu.:24927  
 Median : 0.8201   Median : 1.4450   Median :605.0   Median :53565  
 Mean   : 0.8390   Mean   : 1.4004   Mean   :604.1   Mean   :51715  
 3rd Qu.: 1.0867   3rd Qu.: 1.4985   3rd Qu.:626.0   3rd Qu.:77500  
 Max.   : 1.9030   Max.   : 1.7001   Max.   :684.0   Max.   :99496  
 NA's   :1000      NA's   :674                                      
  nX1.interim     nX2.interim     nX3.interim    computation.time
 Min.   :145.0   Min.   :131.0   Min.   :120.0   Min.   :0.690   
 1st Qu.:147.0   1st Qu.:135.0   1st Qu.:125.0   1st Qu.:0.901   
 Median :148.0   Median :136.0   Median :127.0   Median :0.997   
 Mean   :148.6   Mean   :136.3   Mean   :126.7   Mean   :1.029   
 3rd Qu.:150.0   3rd Qu.:138.0   3rd Qu.:129.0   3rd Qu.:1.153   
 Max.   :154.0   Max.   :142.0   Max.   :133.0   Max.   :3.779   
                                                                 
> 
> #----------------------------------------------------------------------
> ### BATCH_simuMain.R ends here
> 
> proc.time()
   user  system elapsed 
260.200   0.441 271.098 
