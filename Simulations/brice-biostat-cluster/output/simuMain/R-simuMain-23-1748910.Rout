
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### BATCH_simuMain.R --- 
> #----------------------------------------------------------------------
> ## Author: Paul Blanche
> ## Created: Mar  5 2021 (10:56) 
> ## Version: 
> ## Last-Updated: jul  7 2022 (13:56) 
> ##           By: Brice Ozenne
> ##     Update #: 518
> #----------------------------------------------------------------------
> ## 
> ### Commentary: 
> ## 
> ### Change Log:
> #----------------------------------------------------------------------
> ## 
> ### Code:
> 
> ## ** BATCH loop
> ## cd /projects/biostat01/people/hpl802/DelayedGSD/
> ## for ITER in `seq 1 10`;
> ## do
> ## eval 'R CMD BATCH --vanilla "--args iter_sim='$ITER' n.iter_sim=10" BATCH_simuMain.R output/R-simuMain-'$ITER'.Rout &'
> ## done
> 
> ## [1] 1186669
> ## [2] 1186670
> ## [3] 1186671
> ## [4] 1186672
> ## [5] 1186673
> ## [6] 1186674
> ## [7] 1186675
> ## [8] 1186676
> ## [9] 1186677
> ## [10] 1186678
> 
> rm(list=ls())
>                                    # {{{ parameters
> ## * parameters
> name <- "ScenarioName" # To save the results
> method <- 1:2 # methods used to compute the boundaries
>                                         #---
> myseed <- 140786598
>                                         #--- to plan the trial ----
> NMC <- 250 # number of sequential simulations to run in parallel. Eg. with 250, then we can run 40 scripts in paralell to get N=10,000 runs in total.
> kMax <- 2  #max number of analyses (including final)
> alpha <- 0.025  #type I error (one sided)
> beta <- 0.2  #type II error
> informationRates <- c(0.5,1)  #planned  information rates
> rho_alpha <- 2  # rho parameter for alpha error spending function
> rho_beta <- 2  # rho parameter for beta error spending function
> ## deltaPower <- 0.75 # just to try another value when Id > Imax
> Id <- 0.55  #(expected) information rate at each decision analysis
> binding <- TRUE
>                                         #
>                                         #---- to generate data -----------
>                                         #
> block <- c(1,1,0,0) 
> allsd <- c(2.5,2.1,2.4) # sd, first from baseline measurement, then the two changes from baseline
> mean0 <- c(10,0,0) # mean placebo group (again, first is absolute value, then change from baseline)
> delta <- c(0,0.6,0.8) # treatment effect
> ar <- (0.86*2)*2 # orginial accrual rate from data from Corine is 0.86 per week, hence we multiply by 2 for by 14 days. As to low, we further multiply by 2
> cor011 <- -0.15 # ~ from data from Corine
> corij1 <- 0.68  # ~ from data from Corine
> cor0j1 <- -0.27  # ~ from data from Corine
> Miss11 <- 5/104 # miss both V1 and V2
> Miss12 <- 1/104 # miss V1 and but not V2
> Miss21 <- 6/104 # do not miss V1 and but miss V2
> Miss22 <- 92/104 # miss none
> PropForInterim <- 0.5 # Decide to have interim analysiz when PropForInterim % of all subjects have had the chance to have one follow-up measuement recorded in the data to be available for analysis.
> theDelta.t <- 1.50001 # time lag to process the data and make them ready to analyze after collecting them (unit is time between two follow-up visits)
> TimeFactor <- 14 ## number of days between two visits
>                                         #
>                                         #--- actually for both planing the trial  and generating data-----
>                                         #
>                                         #
> deltaPower <- abs(delta[3]) # effect (NOT Z-scale/unit, but outcome scale/unit!) that the study is powered for: should we choose ourselves or compute from other numbers above ???
> n <- ceiling(2*2*((allsd[3]/deltaPower)^2)*(qnorm(1-beta)-qnorm(alpha))^2) #104 with Corine's data # should we choose ourselves or compute from the above numbers ???
>                                         # inflate SS as required for interim
> 
>                                         # {{{ Set seeds for parallel computing and reproducibility
> ## * Seed
> args <- commandArgs(TRUE) ## BATCH MODE
> if(length(args)>0){
+     for (arg in args){
+         eval(parse(text=arg))
+     }
+ }else{ ## SLUMR
+     iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_ID"))
+     n.iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_COUNT"))
+ } ## interactive
> if(is.na(iter_sim)){iter_sim <- 1}
> if(is.na(n.iter_sim)){n.iter_sim <- 40}
> 
> set.seed(140786598)
> allseeds <- sample.int(n = 10*n.iter_sim*NMC, size = n.iter_sim*NMC, replace=FALSE) #x=1:(.Machine$integer.max) seems to be maximal possible
> # }}}
> 
> # {{{ set path to load and save and othe machine specific variables
> ## * path
> path <- "."
> path.res <- file.path(path,"Results","simuMain")
> if(dir.exists(path.res)==FALSE){
+     if(dir.exists(file.path(path,"Results"))==FALSE){
+     dir.create(file.path(path,"Results"))
+     }
+     dir.create(path.res)
+ }
> path.output <- file.path(path,"output","simuMain")
> if(dir.exists(path.output)==FALSE){
+     if(dir.exists(file.path(path,"output"))==FALSE){
+     dir.create(file.path(path,"output"))
+     }
+     dir.create(path.output)
+ }
> # }}}
> 
> 
> ## * libraries and functions
> library(DelayedGSD)
DelayedGSD version 0.0.3
> ## sourceDir <- function(path, trace = TRUE, ...) {
> ##     for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
> ##         if(trace) cat(nm,":")
> ##         source(file.path(path, nm), ...)
> ##         if(trace) cat("\n")
> ##     }
> ## }
> ## sourceDir(pathToLoad)
>     
> 
> ## * Compute inflation factor and sample size
> plannedB <- vector(mode = "list", length = 3)
> for(iMeth in method){ ## iMeth <- 1
+     plannedB[[iMeth]] <- CalcBoundaries(kMax=kMax,  
+                                         alpha=alpha, 
+                                         beta=beta,  
+                                         InfoR.i=informationRates,  
+                                         InfoR.d=c(Id,1),  
+                                         rho_alpha=rho_alpha,  
+                                         rho_beta=rho_beta,  
+                                         method=iMeth,  
+                                         cNotBelowFixedc=FALSE,
+                                         bindingFutility=binding,
+                                         delta=tail(delta,1))
+     ## summary(plannedB[[1]])
+     ## coef(plannedB[[iMeth]], type = "information")
+ }
Loading required namespace: gsDesign
Loading required package: mvtnorm
Loading required namespace: BB
> inflationFactor <- unlist(lapply(plannedB,function(iP){iP$planned$InflationFactor}))
> nGSD <- ceiling(n*inflationFactor)
> ##  plot(plannedB[[1]])
> 
> #
> # --- just to check---
> ## n
> ## InfoFixed <- ((qnorm(1-beta)-qnorm(alpha))/(deltaPower))^2
> ## InfoFixed
> ## n/(4*(allsd[3])^2)
> #---
> # }}}
> 
> 
> 
> 
> # {{{ technical details to loop
> RES <- NULL # initialize results to save
> allj <- ((iter_sim-1)*NMC + 1):(iter_sim*NMC) # indices of all iterations (replicates) for this job, accountng for the other jobs running in parallel
> # }}}
> 
> ## * Loop
> for(j in allj){ ## j <- 51 ## 5
+     startComp <- Sys.time()
+     myseedi <- allseeds[j]
+     # {{{ TRACE info (e.g. to check the Rout)
+     print(paste0("seed ",myseedi," for ","j=",which(j==allj)," out of ",NMC, " (i.e. j=",j," in [",(iter_sim-1)*NMC + 1,";",iter_sim*NMC,"], as job id is i=",iter_sim,")"))
+     # }}}
+     # {{{ Missing probabilities
+     MyMissProb <- matrix(c(Miss11,Miss12,Miss21,Miss22),ncol=2,nrow=2,byrow=TRUE) # to additionnally remove 1 more because some FASFL=N
+     colnames(MyMissProb) <- c("V2 missing","V2 not missing")
+     rownames(MyMissProb) <- c("V1 missing","V1 not missing")
+     # }}}
+ 
+                                         # {{{ generate data
+     ## ** simulate
+     res <- GenData(n=n, 
+                    N.fw=2,
+                    rand.block=block,
+                    allsd=allsd,
+                    mean0=mean0,
+                    delta=delta,
+                    ar=ar,
+                    cor.01.1=cor011,
+                    cor.ij.1=corij1,
+                    cor.0j.1=cor0j1,
+                    seed=myseedi,
+                    MissProb=MyMissProb,
+                    DigitsOutcome=2,
+                    TimeFactor=TimeFactor,
+                    DigitsTime=0
+                    )
+     d <- res$d
+     ## head(d,n=20)
+                                         # }}}
+                                         # {{{ reformat data like those of Corine
+     ## Make data long format
+     ## dd <- FormatAsCase(d)
+     ## head(dd)
+     ## summary(dd)
+                                         # }}}
+    
+                                         # {{{ make data available at interim
+                                         # Here we stop inclusion data collection for the interim analysis as soon as
+                                         # half of the participants have completed (or had the opportunity to complete) the follow-up 
+     thet <- d$t3[ceiling(n*PropForInterim)]
+     di <- SelectData(d,t=thet)
+     ## ddi <- FormatAsCase(di) # needed ????
+     ## head(d[d$id==52,])
+                                         # }}}
+     ## {{{ analyze data at at interim
+     ## ** interim
+     lmmI <- analyzeData(di, ddf = "nlme", data.decision = sum(d$t1 <= thet + theDelta.t*TimeFactor), getinfo = TRUE, trace = TRUE)
+     ## lmmI <- analyzeData(di, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     currentGSD <- vector(mode = "list", length = 3)
+     out.interim <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+ 
+         currentGSD[[iMeth]] <- update(plannedB[[iMeth]], delta = lmmI, trace = FALSE)
+ 
+         iConfint.interim <- confint(currentGSD[[iMeth]])
+         iInfo.interim <- coef(currentGSD[[iMeth]], type = "information")
+         iBoundary.interim <- coef(currentGSD[[iMeth]], type = "boundary")
+         iDecision.interim <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+         out.interim[[iMeth]] <-  data.frame(statistic = iConfint.interim[1,"statistic"],
+                                             estimate_ML = iConfint.interim[1,"estimate"],
+                                             se_ML = iConfint.interim[1,"se"],
+                                             info = iInfo.interim[1,"Interim"],
+                                             infoPC = iInfo.interim[1,"Interim.pc"],
+                                             info.pred = iInfo.interim[1,"Decision"],
+                                             infoPC.pred = iInfo.interim[1,"Decision.pc"],
+                                             uk = iBoundary.interim[1,"Ebound"],
+                                             lk = iBoundary.interim[1,"Fbound"],
+                                             decision = iDecision.interim["decision","stage 1"],
+                                             reason = iDecision.interim["reason.interim","stage 1"])
+     }
+     ## currentGSD[[1]]
+     ## plot(currentGSD[[1]])
+ 
+     ## ** decision
+     dDecision <- d[which(d$t1 <= thet + theDelta.t*TimeFactor),]
+     lmmD <- analyzeData(dDecision, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+     
+     out.decision <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+           
+         if(out.interim[[iMeth]]$decision == "stop"){
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, trace = FALSE)
+             ## plot(currentGSD[[iMeth]])
+ 
+             iConfint.decision <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.decision  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = iConfint.decision[1,"statistic"],
+                                                 p.value_ML = iConfint.decision[iConfint.decision$method == "ML","p.value"],
+                                                 lower_ML = iConfint.decision[iConfint.decision$method == "ML","lower"],
+                                                 upper_ML = iConfint.decision[iConfint.decision$method == "ML","upper"],
+                                                 estimate_ML = iConfint.decision[iConfint.decision$method == "ML","estimate"],
+                                                 p.value_MUE = iConfint.decision[iConfint.decision$method == "MUE","p.value"],
+                                                 lower_MUE = iConfint.decision[iConfint.decision$method == "MUE","lower"],
+                                                 upper_MUE = iConfint.decision[iConfint.decision$method == "MUE","upper"],
+                                                 estimate_MUE = iConfint.decision[iConfint.decision$method == "MUE","estimate"],
+                                                 info = iInfo.decision[1,"Interim"],
+                                                 infoPC = iInfo.decision[1,"Interim.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = unname(iDecision.decision["decision","stage 2"])
+                                                 )
+ 
+         }else{
+             ## update information
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, k = 1, type.k = "decision", trace = FALSE)
+ 
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = NA,
+                                                 p.value_ML = NA,
+                                                 lower_ML = NA,
+                                                 upper_ML = NA,
+                                                 estimate_ML = NA,
+                                                 p.value_MUE = NA,
+                                                 lower_MUE = NA,
+                                                 upper_MUE = NA,
+                                                 estimate_MUE = NA,
+                                                 info = iInfo.decision[1,"Decision"],
+                                                 infoPC = iInfo.decision[1,"Decision.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = NA)
+         }
+     }
+                                         # }}}
+                                         # {{{ Analyze data at decision
+ 
+     ## ** finale
+     dFinal <- d
+     lmmF <- analyzeData(dFinal, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     out.final <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+         if(out.interim[[iMeth]]$decision == "stop"){
+             out.final[[iMeth]] <- data.frame(statistic = NA,
+                                              p.value_ML = NA,
+                                              lower_ML = NA,
+                                              upper_ML = NA,
+                                              estimate_ML = NA,
+                                              p.value_MUE = NA,
+                                              lower_MUE = NA,
+                                              upper_MUE = NA,
+                                              estimate_MUE = NA,
+                                              info = NA,
+                                              infoPC = NA,
+                                              ck = NA,
+                                              decision = NA)
+ 
+         }else{
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmF, trace = FALSE)
+ 
+             ## plot(test)
+             ## summary(test)
+             iConfint.final <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.final <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.final <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.final  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.final[[iMeth]] <- data.frame(statistic = iConfint.final[1,"statistic"],
+                                              p.value_ML = iConfint.final[iConfint.final$method == "ML","p.value"],
+                                              lower_ML = iConfint.final[iConfint.final$method == "ML","lower"],
+                                              upper_ML = iConfint.final[iConfint.final$method == "ML","upper"],
+                                              estimate_ML = iConfint.final[iConfint.final$method == "ML","estimate"],
+                                              p.value_MUE = iConfint.final[iConfint.final$method == "MUE","p.value"],
+                                              lower_MUE = iConfint.final[iConfint.final$method == "MUE","lower"],
+                                              upper_MUE = iConfint.final[iConfint.final$method == "MUE","upper"],
+                                              estimate_MUE = iConfint.final[iConfint.final$method == "MUE","estimate"],
+                                              info = iInfo.final[1,"Interim"],
+                                              infoPC = iInfo.final[1,"Interim.pc"],
+                                              ck = iBoundary.final[1,"Cbound"],
+                                              decision = unname(coef(currentGSD[[iMeth]], type = "decision")["decision","stage 2"])
+                                              )
+         }
+     }
+                                         # }}}
+ 
+     stopComp <- Sys.time()
+                                         # {{{ Save results
+ 
+     outMerge <- do.call(rbind,lapply(method, function(iMeth){
+         iNames <- unique(c(names(out.interim[[iMeth]]),names(out.decision[[iMeth]]),names(out.final[[iMeth]])))
+         iMerge <- data.frame(matrix(NA, ncol = length(iNames)+3, nrow = 3, dimnames = list(NULL, c("method", "stage", "type", iNames))))
+         iMerge[1,c("method","stage","type",names(out.interim[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "interim", out.interim[[iMeth]]) 
+         iMerge[2,c("method","stage","type",names(out.decision[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "decision", out.decision[[iMeth]]) 
+         iMerge[3,c("method","stage","type",names(out.final[[iMeth]]))] <- data.frame(method = iMeth, stage = 2, type = "final", out.final[[iMeth]])
+         return(iMerge)
+     }))
+ 
+     ## outMerge[outMerge$method==3,]
+ 
+     out <- cbind(
+         ## results
+         outMerge,
+         ## simulation details
+         time.interim = thet,
+         seed=myseedi,             
+         nX1.interim = sum(!is.na(di$X1)),
+         nX2.interim = sum(!is.na(di$X2)),
+         nX3.interim = sum(!is.na(di$X3)),
+         ## computation time
+         computation.time=as.double(round(difftime(stopComp,startComp,units="secs"),3))
+     )
+     ## names(out) <- myColNames
+     RES <- rbind(RES,out)
+     save(RES,file=paste0(path.res,name,"(tempo)-",iter_sim,".rda"))
+                                         # }}}
+ }
[1] "seed 1270 for j=1 out of 250 (i.e. j=5501 in [5501;5750], as job id is i=23)"
Loading required namespace: nlme
[1] "seed 90150 for j=2 out of 250 (i.e. j=5502 in [5501;5750], as job id is i=23)"
[1] "seed 42612 for j=3 out of 250 (i.e. j=5503 in [5501;5750], as job id is i=23)"
[1] "seed 76056 for j=4 out of 250 (i.e. j=5504 in [5501;5750], as job id is i=23)"
[1] "seed 40636 for j=5 out of 250 (i.e. j=5505 in [5501;5750], as job id is i=23)"
[1] "seed 83652 for j=6 out of 250 (i.e. j=5506 in [5501;5750], as job id is i=23)"
[1] "seed 31440 for j=7 out of 250 (i.e. j=5507 in [5501;5750], as job id is i=23)"
[1] "seed 56435 for j=8 out of 250 (i.e. j=5508 in [5501;5750], as job id is i=23)"
[1] "seed 60920 for j=9 out of 250 (i.e. j=5509 in [5501;5750], as job id is i=23)"
[1] "seed 80204 for j=10 out of 250 (i.e. j=5510 in [5501;5750], as job id is i=23)"
[1] "seed 20535 for j=11 out of 250 (i.e. j=5511 in [5501;5750], as job id is i=23)"
[1] "seed 59648 for j=12 out of 250 (i.e. j=5512 in [5501;5750], as job id is i=23)"
[1] "seed 85890 for j=13 out of 250 (i.e. j=5513 in [5501;5750], as job id is i=23)"
[1] "seed 98793 for j=14 out of 250 (i.e. j=5514 in [5501;5750], as job id is i=23)"
[1] "seed 27687 for j=15 out of 250 (i.e. j=5515 in [5501;5750], as job id is i=23)"
[1] "seed 26171 for j=16 out of 250 (i.e. j=5516 in [5501;5750], as job id is i=23)"
[1] "seed 24013 for j=17 out of 250 (i.e. j=5517 in [5501;5750], as job id is i=23)"
[1] "seed 78277 for j=18 out of 250 (i.e. j=5518 in [5501;5750], as job id is i=23)"
[1] "seed 2166 for j=19 out of 250 (i.e. j=5519 in [5501;5750], as job id is i=23)"
[1] "seed 48300 for j=20 out of 250 (i.e. j=5520 in [5501;5750], as job id is i=23)"
[1] "seed 50676 for j=21 out of 250 (i.e. j=5521 in [5501;5750], as job id is i=23)"
[1] "seed 61873 for j=22 out of 250 (i.e. j=5522 in [5501;5750], as job id is i=23)"
[1] "seed 69388 for j=23 out of 250 (i.e. j=5523 in [5501;5750], as job id is i=23)"
[1] "seed 24204 for j=24 out of 250 (i.e. j=5524 in [5501;5750], as job id is i=23)"
[1] "seed 86927 for j=25 out of 250 (i.e. j=5525 in [5501;5750], as job id is i=23)"
[1] "seed 62568 for j=26 out of 250 (i.e. j=5526 in [5501;5750], as job id is i=23)"
[1] "seed 66610 for j=27 out of 250 (i.e. j=5527 in [5501;5750], as job id is i=23)"
[1] "seed 94857 for j=28 out of 250 (i.e. j=5528 in [5501;5750], as job id is i=23)"
[1] "seed 25332 for j=29 out of 250 (i.e. j=5529 in [5501;5750], as job id is i=23)"
[1] "seed 75224 for j=30 out of 250 (i.e. j=5530 in [5501;5750], as job id is i=23)"
[1] "seed 81760 for j=31 out of 250 (i.e. j=5531 in [5501;5750], as job id is i=23)"
[1] "seed 64687 for j=32 out of 250 (i.e. j=5532 in [5501;5750], as job id is i=23)"
[1] "seed 42089 for j=33 out of 250 (i.e. j=5533 in [5501;5750], as job id is i=23)"
[1] "seed 60232 for j=34 out of 250 (i.e. j=5534 in [5501;5750], as job id is i=23)"
[1] "seed 39277 for j=35 out of 250 (i.e. j=5535 in [5501;5750], as job id is i=23)"
[1] "seed 77282 for j=36 out of 250 (i.e. j=5536 in [5501;5750], as job id is i=23)"
[1] "seed 31819 for j=37 out of 250 (i.e. j=5537 in [5501;5750], as job id is i=23)"
[1] "seed 59863 for j=38 out of 250 (i.e. j=5538 in [5501;5750], as job id is i=23)"
[1] "seed 44509 for j=39 out of 250 (i.e. j=5539 in [5501;5750], as job id is i=23)"
[1] "seed 59324 for j=40 out of 250 (i.e. j=5540 in [5501;5750], as job id is i=23)"
[1] "seed 72202 for j=41 out of 250 (i.e. j=5541 in [5501;5750], as job id is i=23)"
[1] "seed 1254 for j=42 out of 250 (i.e. j=5542 in [5501;5750], as job id is i=23)"
[1] "seed 91952 for j=43 out of 250 (i.e. j=5543 in [5501;5750], as job id is i=23)"
[1] "seed 9093 for j=44 out of 250 (i.e. j=5544 in [5501;5750], as job id is i=23)"
[1] "seed 77118 for j=45 out of 250 (i.e. j=5545 in [5501;5750], as job id is i=23)"
[1] "seed 887 for j=46 out of 250 (i.e. j=5546 in [5501;5750], as job id is i=23)"
[1] "seed 75396 for j=47 out of 250 (i.e. j=5547 in [5501;5750], as job id is i=23)"
[1] "seed 16587 for j=48 out of 250 (i.e. j=5548 in [5501;5750], as job id is i=23)"
[1] "seed 65056 for j=49 out of 250 (i.e. j=5549 in [5501;5750], as job id is i=23)"
[1] "seed 42360 for j=50 out of 250 (i.e. j=5550 in [5501;5750], as job id is i=23)"
[1] "seed 98259 for j=51 out of 250 (i.e. j=5551 in [5501;5750], as job id is i=23)"
[1] "seed 67317 for j=52 out of 250 (i.e. j=5552 in [5501;5750], as job id is i=23)"
[1] "seed 10816 for j=53 out of 250 (i.e. j=5553 in [5501;5750], as job id is i=23)"
[1] "seed 21671 for j=54 out of 250 (i.e. j=5554 in [5501;5750], as job id is i=23)"
[1] "seed 60344 for j=55 out of 250 (i.e. j=5555 in [5501;5750], as job id is i=23)"
[1] "seed 76588 for j=56 out of 250 (i.e. j=5556 in [5501;5750], as job id is i=23)"
[1] "seed 83962 for j=57 out of 250 (i.e. j=5557 in [5501;5750], as job id is i=23)"
[1] "seed 50804 for j=58 out of 250 (i.e. j=5558 in [5501;5750], as job id is i=23)"
[1] "seed 49416 for j=59 out of 250 (i.e. j=5559 in [5501;5750], as job id is i=23)"
[1] "seed 7237 for j=60 out of 250 (i.e. j=5560 in [5501;5750], as job id is i=23)"
[1] "seed 96474 for j=61 out of 250 (i.e. j=5561 in [5501;5750], as job id is i=23)"
[1] "seed 87116 for j=62 out of 250 (i.e. j=5562 in [5501;5750], as job id is i=23)"
[1] "seed 32830 for j=63 out of 250 (i.e. j=5563 in [5501;5750], as job id is i=23)"
[1] "seed 4650 for j=64 out of 250 (i.e. j=5564 in [5501;5750], as job id is i=23)"
[1] "seed 63997 for j=65 out of 250 (i.e. j=5565 in [5501;5750], as job id is i=23)"
[1] "seed 1598 for j=66 out of 250 (i.e. j=5566 in [5501;5750], as job id is i=23)"
[1] "seed 73367 for j=67 out of 250 (i.e. j=5567 in [5501;5750], as job id is i=23)"
[1] "seed 5064 for j=68 out of 250 (i.e. j=5568 in [5501;5750], as job id is i=23)"
[1] "seed 54485 for j=69 out of 250 (i.e. j=5569 in [5501;5750], as job id is i=23)"
[1] "seed 90233 for j=70 out of 250 (i.e. j=5570 in [5501;5750], as job id is i=23)"
[1] "seed 7010 for j=71 out of 250 (i.e. j=5571 in [5501;5750], as job id is i=23)"
[1] "seed 65926 for j=72 out of 250 (i.e. j=5572 in [5501;5750], as job id is i=23)"
[1] "seed 19633 for j=73 out of 250 (i.e. j=5573 in [5501;5750], as job id is i=23)"
[1] "seed 11211 for j=74 out of 250 (i.e. j=5574 in [5501;5750], as job id is i=23)"
[1] "seed 93108 for j=75 out of 250 (i.e. j=5575 in [5501;5750], as job id is i=23)"
[1] "seed 35864 for j=76 out of 250 (i.e. j=5576 in [5501;5750], as job id is i=23)"
[1] "seed 56791 for j=77 out of 250 (i.e. j=5577 in [5501;5750], as job id is i=23)"
[1] "seed 19909 for j=78 out of 250 (i.e. j=5578 in [5501;5750], as job id is i=23)"
[1] "seed 34088 for j=79 out of 250 (i.e. j=5579 in [5501;5750], as job id is i=23)"
[1] "seed 21121 for j=80 out of 250 (i.e. j=5580 in [5501;5750], as job id is i=23)"
[1] "seed 77691 for j=81 out of 250 (i.e. j=5581 in [5501;5750], as job id is i=23)"
[1] "seed 9411 for j=82 out of 250 (i.e. j=5582 in [5501;5750], as job id is i=23)"
[1] "seed 88696 for j=83 out of 250 (i.e. j=5583 in [5501;5750], as job id is i=23)"
[1] "seed 93951 for j=84 out of 250 (i.e. j=5584 in [5501;5750], as job id is i=23)"
[1] "seed 39306 for j=85 out of 250 (i.e. j=5585 in [5501;5750], as job id is i=23)"
[1] "seed 35985 for j=86 out of 250 (i.e. j=5586 in [5501;5750], as job id is i=23)"
[1] "seed 30327 for j=87 out of 250 (i.e. j=5587 in [5501;5750], as job id is i=23)"
[1] "seed 49360 for j=88 out of 250 (i.e. j=5588 in [5501;5750], as job id is i=23)"
[1] "seed 1347 for j=89 out of 250 (i.e. j=5589 in [5501;5750], as job id is i=23)"
[1] "seed 3875 for j=90 out of 250 (i.e. j=5590 in [5501;5750], as job id is i=23)"
[1] "seed 71836 for j=91 out of 250 (i.e. j=5591 in [5501;5750], as job id is i=23)"
[1] "seed 4421 for j=92 out of 250 (i.e. j=5592 in [5501;5750], as job id is i=23)"
[1] "seed 35103 for j=93 out of 250 (i.e. j=5593 in [5501;5750], as job id is i=23)"
[1] "seed 27620 for j=94 out of 250 (i.e. j=5594 in [5501;5750], as job id is i=23)"
[1] "seed 77496 for j=95 out of 250 (i.e. j=5595 in [5501;5750], as job id is i=23)"
[1] "seed 22477 for j=96 out of 250 (i.e. j=5596 in [5501;5750], as job id is i=23)"
[1] "seed 95197 for j=97 out of 250 (i.e. j=5597 in [5501;5750], as job id is i=23)"
[1] "seed 2935 for j=98 out of 250 (i.e. j=5598 in [5501;5750], as job id is i=23)"
[1] "seed 79584 for j=99 out of 250 (i.e. j=5599 in [5501;5750], as job id is i=23)"
[1] "seed 66675 for j=100 out of 250 (i.e. j=5600 in [5501;5750], as job id is i=23)"
[1] "seed 45986 for j=101 out of 250 (i.e. j=5601 in [5501;5750], as job id is i=23)"
[1] "seed 15686 for j=102 out of 250 (i.e. j=5602 in [5501;5750], as job id is i=23)"
[1] "seed 15774 for j=103 out of 250 (i.e. j=5603 in [5501;5750], as job id is i=23)"
[1] "seed 71776 for j=104 out of 250 (i.e. j=5604 in [5501;5750], as job id is i=23)"
[1] "seed 41832 for j=105 out of 250 (i.e. j=5605 in [5501;5750], as job id is i=23)"
[1] "seed 20614 for j=106 out of 250 (i.e. j=5606 in [5501;5750], as job id is i=23)"
[1] "seed 74879 for j=107 out of 250 (i.e. j=5607 in [5501;5750], as job id is i=23)"
[1] "seed 54566 for j=108 out of 250 (i.e. j=5608 in [5501;5750], as job id is i=23)"
[1] "seed 44526 for j=109 out of 250 (i.e. j=5609 in [5501;5750], as job id is i=23)"
[1] "seed 98086 for j=110 out of 250 (i.e. j=5610 in [5501;5750], as job id is i=23)"
[1] "seed 58631 for j=111 out of 250 (i.e. j=5611 in [5501;5750], as job id is i=23)"
[1] "seed 47784 for j=112 out of 250 (i.e. j=5612 in [5501;5750], as job id is i=23)"
[1] "seed 8593 for j=113 out of 250 (i.e. j=5613 in [5501;5750], as job id is i=23)"
[1] "seed 70543 for j=114 out of 250 (i.e. j=5614 in [5501;5750], as job id is i=23)"
[1] "seed 21019 for j=115 out of 250 (i.e. j=5615 in [5501;5750], as job id is i=23)"
[1] "seed 33687 for j=116 out of 250 (i.e. j=5616 in [5501;5750], as job id is i=23)"
[1] "seed 33681 for j=117 out of 250 (i.e. j=5617 in [5501;5750], as job id is i=23)"
[1] "seed 31225 for j=118 out of 250 (i.e. j=5618 in [5501;5750], as job id is i=23)"
[1] "seed 59163 for j=119 out of 250 (i.e. j=5619 in [5501;5750], as job id is i=23)"
[1] "seed 45230 for j=120 out of 250 (i.e. j=5620 in [5501;5750], as job id is i=23)"
[1] "seed 42088 for j=121 out of 250 (i.e. j=5621 in [5501;5750], as job id is i=23)"
[1] "seed 27756 for j=122 out of 250 (i.e. j=5622 in [5501;5750], as job id is i=23)"
[1] "seed 62877 for j=123 out of 250 (i.e. j=5623 in [5501;5750], as job id is i=23)"
[1] "seed 59368 for j=124 out of 250 (i.e. j=5624 in [5501;5750], as job id is i=23)"
[1] "seed 15602 for j=125 out of 250 (i.e. j=5625 in [5501;5750], as job id is i=23)"
[1] "seed 64558 for j=126 out of 250 (i.e. j=5626 in [5501;5750], as job id is i=23)"
[1] "seed 70066 for j=127 out of 250 (i.e. j=5627 in [5501;5750], as job id is i=23)"
[1] "seed 87026 for j=128 out of 250 (i.e. j=5628 in [5501;5750], as job id is i=23)"
[1] "seed 55204 for j=129 out of 250 (i.e. j=5629 in [5501;5750], as job id is i=23)"
[1] "seed 51338 for j=130 out of 250 (i.e. j=5630 in [5501;5750], as job id is i=23)"
[1] "seed 25620 for j=131 out of 250 (i.e. j=5631 in [5501;5750], as job id is i=23)"
[1] "seed 34593 for j=132 out of 250 (i.e. j=5632 in [5501;5750], as job id is i=23)"
[1] "seed 49776 for j=133 out of 250 (i.e. j=5633 in [5501;5750], as job id is i=23)"
[1] "seed 58777 for j=134 out of 250 (i.e. j=5634 in [5501;5750], as job id is i=23)"
[1] "seed 80076 for j=135 out of 250 (i.e. j=5635 in [5501;5750], as job id is i=23)"
[1] "seed 29190 for j=136 out of 250 (i.e. j=5636 in [5501;5750], as job id is i=23)"
[1] "seed 31235 for j=137 out of 250 (i.e. j=5637 in [5501;5750], as job id is i=23)"
[1] "seed 62708 for j=138 out of 250 (i.e. j=5638 in [5501;5750], as job id is i=23)"
[1] "seed 72723 for j=139 out of 250 (i.e. j=5639 in [5501;5750], as job id is i=23)"
[1] "seed 40178 for j=140 out of 250 (i.e. j=5640 in [5501;5750], as job id is i=23)"
[1] "seed 91645 for j=141 out of 250 (i.e. j=5641 in [5501;5750], as job id is i=23)"
[1] "seed 679 for j=142 out of 250 (i.e. j=5642 in [5501;5750], as job id is i=23)"
[1] "seed 86808 for j=143 out of 250 (i.e. j=5643 in [5501;5750], as job id is i=23)"
[1] "seed 45187 for j=144 out of 250 (i.e. j=5644 in [5501;5750], as job id is i=23)"
[1] "seed 85452 for j=145 out of 250 (i.e. j=5645 in [5501;5750], as job id is i=23)"
[1] "seed 48685 for j=146 out of 250 (i.e. j=5646 in [5501;5750], as job id is i=23)"
[1] "seed 78255 for j=147 out of 250 (i.e. j=5647 in [5501;5750], as job id is i=23)"
[1] "seed 60593 for j=148 out of 250 (i.e. j=5648 in [5501;5750], as job id is i=23)"
[1] "seed 19101 for j=149 out of 250 (i.e. j=5649 in [5501;5750], as job id is i=23)"
[1] "seed 2777 for j=150 out of 250 (i.e. j=5650 in [5501;5750], as job id is i=23)"
[1] "seed 38777 for j=151 out of 250 (i.e. j=5651 in [5501;5750], as job id is i=23)"
[1] "seed 55339 for j=152 out of 250 (i.e. j=5652 in [5501;5750], as job id is i=23)"
[1] "seed 56292 for j=153 out of 250 (i.e. j=5653 in [5501;5750], as job id is i=23)"
[1] "seed 20406 for j=154 out of 250 (i.e. j=5654 in [5501;5750], as job id is i=23)"
[1] "seed 3844 for j=155 out of 250 (i.e. j=5655 in [5501;5750], as job id is i=23)"
[1] "seed 44810 for j=156 out of 250 (i.e. j=5656 in [5501;5750], as job id is i=23)"
[1] "seed 72882 for j=157 out of 250 (i.e. j=5657 in [5501;5750], as job id is i=23)"
[1] "seed 37300 for j=158 out of 250 (i.e. j=5658 in [5501;5750], as job id is i=23)"
[1] "seed 44724 for j=159 out of 250 (i.e. j=5659 in [5501;5750], as job id is i=23)"
[1] "seed 14310 for j=160 out of 250 (i.e. j=5660 in [5501;5750], as job id is i=23)"
[1] "seed 10994 for j=161 out of 250 (i.e. j=5661 in [5501;5750], as job id is i=23)"
[1] "seed 21969 for j=162 out of 250 (i.e. j=5662 in [5501;5750], as job id is i=23)"
[1] "seed 16551 for j=163 out of 250 (i.e. j=5663 in [5501;5750], as job id is i=23)"
[1] "seed 81751 for j=164 out of 250 (i.e. j=5664 in [5501;5750], as job id is i=23)"
[1] "seed 36535 for j=165 out of 250 (i.e. j=5665 in [5501;5750], as job id is i=23)"
[1] "seed 31242 for j=166 out of 250 (i.e. j=5666 in [5501;5750], as job id is i=23)"
[1] "seed 29309 for j=167 out of 250 (i.e. j=5667 in [5501;5750], as job id is i=23)"
[1] "seed 51129 for j=168 out of 250 (i.e. j=5668 in [5501;5750], as job id is i=23)"
[1] "seed 78389 for j=169 out of 250 (i.e. j=5669 in [5501;5750], as job id is i=23)"
[1] "seed 52352 for j=170 out of 250 (i.e. j=5670 in [5501;5750], as job id is i=23)"
[1] "seed 10094 for j=171 out of 250 (i.e. j=5671 in [5501;5750], as job id is i=23)"
[1] "seed 90618 for j=172 out of 250 (i.e. j=5672 in [5501;5750], as job id is i=23)"
[1] "seed 71277 for j=173 out of 250 (i.e. j=5673 in [5501;5750], as job id is i=23)"
[1] "seed 80657 for j=174 out of 250 (i.e. j=5674 in [5501;5750], as job id is i=23)"
[1] "seed 6267 for j=175 out of 250 (i.e. j=5675 in [5501;5750], as job id is i=23)"
[1] "seed 9635 for j=176 out of 250 (i.e. j=5676 in [5501;5750], as job id is i=23)"
[1] "seed 61018 for j=177 out of 250 (i.e. j=5677 in [5501;5750], as job id is i=23)"
[1] "seed 36433 for j=178 out of 250 (i.e. j=5678 in [5501;5750], as job id is i=23)"
[1] "seed 10745 for j=179 out of 250 (i.e. j=5679 in [5501;5750], as job id is i=23)"
[1] "seed 83303 for j=180 out of 250 (i.e. j=5680 in [5501;5750], as job id is i=23)"
[1] "seed 47374 for j=181 out of 250 (i.e. j=5681 in [5501;5750], as job id is i=23)"
[1] "seed 43759 for j=182 out of 250 (i.e. j=5682 in [5501;5750], as job id is i=23)"
[1] "seed 12639 for j=183 out of 250 (i.e. j=5683 in [5501;5750], as job id is i=23)"
[1] "seed 34961 for j=184 out of 250 (i.e. j=5684 in [5501;5750], as job id is i=23)"
[1] "seed 4301 for j=185 out of 250 (i.e. j=5685 in [5501;5750], as job id is i=23)"
[1] "seed 76626 for j=186 out of 250 (i.e. j=5686 in [5501;5750], as job id is i=23)"
[1] "seed 54756 for j=187 out of 250 (i.e. j=5687 in [5501;5750], as job id is i=23)"
[1] "seed 79743 for j=188 out of 250 (i.e. j=5688 in [5501;5750], as job id is i=23)"
[1] "seed 80924 for j=189 out of 250 (i.e. j=5689 in [5501;5750], as job id is i=23)"
[1] "seed 3554 for j=190 out of 250 (i.e. j=5690 in [5501;5750], as job id is i=23)"
[1] "seed 80506 for j=191 out of 250 (i.e. j=5691 in [5501;5750], as job id is i=23)"
[1] "seed 89305 for j=192 out of 250 (i.e. j=5692 in [5501;5750], as job id is i=23)"
[1] "seed 35762 for j=193 out of 250 (i.e. j=5693 in [5501;5750], as job id is i=23)"
[1] "seed 75338 for j=194 out of 250 (i.e. j=5694 in [5501;5750], as job id is i=23)"
[1] "seed 47676 for j=195 out of 250 (i.e. j=5695 in [5501;5750], as job id is i=23)"
[1] "seed 89351 for j=196 out of 250 (i.e. j=5696 in [5501;5750], as job id is i=23)"
[1] "seed 41322 for j=197 out of 250 (i.e. j=5697 in [5501;5750], as job id is i=23)"
[1] "seed 39215 for j=198 out of 250 (i.e. j=5698 in [5501;5750], as job id is i=23)"
[1] "seed 82318 for j=199 out of 250 (i.e. j=5699 in [5501;5750], as job id is i=23)"
[1] "seed 28467 for j=200 out of 250 (i.e. j=5700 in [5501;5750], as job id is i=23)"
[1] "seed 17848 for j=201 out of 250 (i.e. j=5701 in [5501;5750], as job id is i=23)"
[1] "seed 54195 for j=202 out of 250 (i.e. j=5702 in [5501;5750], as job id is i=23)"
[1] "seed 94763 for j=203 out of 250 (i.e. j=5703 in [5501;5750], as job id is i=23)"
[1] "seed 21091 for j=204 out of 250 (i.e. j=5704 in [5501;5750], as job id is i=23)"
[1] "seed 43074 for j=205 out of 250 (i.e. j=5705 in [5501;5750], as job id is i=23)"
[1] "seed 614 for j=206 out of 250 (i.e. j=5706 in [5501;5750], as job id is i=23)"
[1] "seed 61110 for j=207 out of 250 (i.e. j=5707 in [5501;5750], as job id is i=23)"
[1] "seed 80902 for j=208 out of 250 (i.e. j=5708 in [5501;5750], as job id is i=23)"
[1] "seed 91825 for j=209 out of 250 (i.e. j=5709 in [5501;5750], as job id is i=23)"
[1] "seed 35789 for j=210 out of 250 (i.e. j=5710 in [5501;5750], as job id is i=23)"
[1] "seed 45120 for j=211 out of 250 (i.e. j=5711 in [5501;5750], as job id is i=23)"
[1] "seed 26254 for j=212 out of 250 (i.e. j=5712 in [5501;5750], as job id is i=23)"
[1] "seed 97717 for j=213 out of 250 (i.e. j=5713 in [5501;5750], as job id is i=23)"
[1] "seed 9865 for j=214 out of 250 (i.e. j=5714 in [5501;5750], as job id is i=23)"
[1] "seed 93220 for j=215 out of 250 (i.e. j=5715 in [5501;5750], as job id is i=23)"
[1] "seed 59471 for j=216 out of 250 (i.e. j=5716 in [5501;5750], as job id is i=23)"
[1] "seed 47644 for j=217 out of 250 (i.e. j=5717 in [5501;5750], as job id is i=23)"
[1] "seed 3359 for j=218 out of 250 (i.e. j=5718 in [5501;5750], as job id is i=23)"
[1] "seed 56898 for j=219 out of 250 (i.e. j=5719 in [5501;5750], as job id is i=23)"
[1] "seed 44646 for j=220 out of 250 (i.e. j=5720 in [5501;5750], as job id is i=23)"
[1] "seed 45292 for j=221 out of 250 (i.e. j=5721 in [5501;5750], as job id is i=23)"
[1] "seed 72289 for j=222 out of 250 (i.e. j=5722 in [5501;5750], as job id is i=23)"
[1] "seed 26451 for j=223 out of 250 (i.e. j=5723 in [5501;5750], as job id is i=23)"
[1] "seed 76564 for j=224 out of 250 (i.e. j=5724 in [5501;5750], as job id is i=23)"
[1] "seed 66794 for j=225 out of 250 (i.e. j=5725 in [5501;5750], as job id is i=23)"
[1] "seed 61805 for j=226 out of 250 (i.e. j=5726 in [5501;5750], as job id is i=23)"
[1] "seed 23749 for j=227 out of 250 (i.e. j=5727 in [5501;5750], as job id is i=23)"
[1] "seed 63352 for j=228 out of 250 (i.e. j=5728 in [5501;5750], as job id is i=23)"
[1] "seed 64353 for j=229 out of 250 (i.e. j=5729 in [5501;5750], as job id is i=23)"
[1] "seed 45575 for j=230 out of 250 (i.e. j=5730 in [5501;5750], as job id is i=23)"
[1] "seed 69036 for j=231 out of 250 (i.e. j=5731 in [5501;5750], as job id is i=23)"
[1] "seed 9577 for j=232 out of 250 (i.e. j=5732 in [5501;5750], as job id is i=23)"
[1] "seed 36921 for j=233 out of 250 (i.e. j=5733 in [5501;5750], as job id is i=23)"
[1] "seed 61860 for j=234 out of 250 (i.e. j=5734 in [5501;5750], as job id is i=23)"
[1] "seed 59143 for j=235 out of 250 (i.e. j=5735 in [5501;5750], as job id is i=23)"
[1] "seed 56778 for j=236 out of 250 (i.e. j=5736 in [5501;5750], as job id is i=23)"
[1] "seed 88568 for j=237 out of 250 (i.e. j=5737 in [5501;5750], as job id is i=23)"
[1] "seed 55937 for j=238 out of 250 (i.e. j=5738 in [5501;5750], as job id is i=23)"
[1] "seed 14499 for j=239 out of 250 (i.e. j=5739 in [5501;5750], as job id is i=23)"
[1] "seed 39183 for j=240 out of 250 (i.e. j=5740 in [5501;5750], as job id is i=23)"
[1] "seed 66931 for j=241 out of 250 (i.e. j=5741 in [5501;5750], as job id is i=23)"
[1] "seed 84192 for j=242 out of 250 (i.e. j=5742 in [5501;5750], as job id is i=23)"
[1] "seed 12118 for j=243 out of 250 (i.e. j=5743 in [5501;5750], as job id is i=23)"
[1] "seed 91778 for j=244 out of 250 (i.e. j=5744 in [5501;5750], as job id is i=23)"
[1] "seed 47311 for j=245 out of 250 (i.e. j=5745 in [5501;5750], as job id is i=23)"
[1] "seed 62365 for j=246 out of 250 (i.e. j=5746 in [5501;5750], as job id is i=23)"
[1] "seed 9226 for j=247 out of 250 (i.e. j=5747 in [5501;5750], as job id is i=23)"
[1] "seed 10876 for j=248 out of 250 (i.e. j=5748 in [5501;5750], as job id is i=23)"
[1] "seed 57062 for j=249 out of 250 (i.e. j=5749 in [5501;5750], as job id is i=23)"
[1] "seed 28264 for j=250 out of 250 (i.e. j=5750 in [5501;5750], as job id is i=23)"
There were 18 warnings (use warnings() to see them)
> rownames(RES) <- NULL
> save(RES,file=paste0(path.res,name,"-",iter_sim,".rda"))
> 
> ## * Summary results
> sessionInfo()
R version 4.1.2 (2021-11-01)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Red Hat Enterprise Linux 8.5 (Ootpa)

Matrix products: default
BLAS:   /opt/software/R/4.1.2/lib64/R/lib/libRblas.so
LAPACK: /opt/software/R/4.1.2/lib64/R/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] mvtnorm_1.1-3    DelayedGSD_0.0.3

loaded via a namespace (and not attached):
 [1] BB_2019.10-1     magrittr_2.0.3   tidyselect_1.1.2 munsell_0.5.0   
 [5] lattice_0.20-45  colorspace_2.0-3 xtable_1.8-4     R6_2.5.1        
 [9] quadprog_1.5-8   rlang_1.0.3      fansi_1.0.3      dplyr_1.0.9     
[13] grid_4.1.2       nlme_3.1-153     gtable_0.3.0     gsDesign_3.3.0  
[17] utf8_1.2.2       cli_3.3.0        ellipsis_0.3.2   tibble_3.1.7    
[21] lifecycle_1.0.1  crayon_1.5.1     purrr_0.3.4      ggplot2_3.3.6   
[25] tidyr_1.2.0      vctrs_0.4.1      glue_1.6.2       compiler_4.1.2  
[29] pillar_1.7.0     generics_0.1.3   scales_1.2.0     pkgconfig_2.0.3 
> summary(RES)
     method        stage           type             statistic     
 Min.   :1.0   Min.   :1.000   Length:1500        Min.   :0.0157  
 1st Qu.:1.0   1st Qu.:1.000   Class :character   1st Qu.:1.6315  
 Median :1.5   Median :1.000   Mode  :character   Median :2.3355  
 Mean   :1.5   Mean   :1.333                      Mean   :2.2875  
 3rd Qu.:2.0   3rd Qu.:2.000                      3rd Qu.:3.0666  
 Max.   :2.0   Max.   :2.000                      Max.   :5.7211  
                                                  NA's   :500     
  estimate_ML          se_ML             info           infoPC      
 Min.   :-0.6048   Min.   :0.3438   Min.   :4.375   Min.   :0.3418  
 1st Qu.: 0.5660   1st Qu.:0.3890   1st Qu.:5.638   1st Qu.:0.4405  
 Median : 0.7959   Median :0.4064   Median :6.127   Median :0.4787  
 Mean   : 0.8090   Mean   :0.4062   Mean   :6.203   Mean   :0.4847  
 3rd Qu.: 1.0684   3rd Qu.:0.4235   3rd Qu.:6.707   3rd Qu.:0.5241  
 Max.   : 2.0866   Max.   :0.4781   Max.   :8.479   Max.   :0.6626  
 NA's   :500       NA's   :1000     NA's   :152     NA's   :152     
   info.pred      infoPC.pred           uk              lk         
 Min.   :4.581   Min.   :0.3579   Min.   :2.293   Min.   :-0.3154  
 1st Qu.:5.952   1st Qu.:0.4651   1st Qu.:2.475   1st Qu.: 0.1141  
 Median :6.449   Median :0.5039   Median :2.537   Median : 0.2703  
 Mean   :6.510   Mean   :0.5087   Mean   :2.532   Mean   : 0.2863  
 3rd Qu.:7.022   3rd Qu.:0.5487   3rd Qu.:2.594   3rd Qu.: 0.4427  
 Max.   :9.241   Max.   :0.7221   Max.   :2.756   Max.   : 0.9708  
 NA's   :1000    NA's   :1000     NA's   :1000    NA's   :1000     
   decision            reason            p.value_ML        lower_ML      
 Length:1500        Length:1500        Min.   :0.0000   Min.   :-0.9446  
 Class :character   Class :character   1st Qu.:0.0012   1st Qu.:-0.0564  
 Mode  :character   Mode  :character   Median :0.0076   Median : 0.1247  
                                       Mean   :0.0686   Mean   : 0.1197  
                                       3rd Qu.:0.0406   3rd Qu.: 0.3233  
                                       Max.   :0.9875   Max.   : 1.0698  
                                       NA's   :1000     NA's   :1000     
    upper_ML       p.value_MUE       lower_MUE         upper_MUE     
 Min.   :0.6674   Min.   :0.0000   Min.   :-0.9396   Min.   :0.7844  
 1st Qu.:1.2393   1st Qu.:0.0034   1st Qu.:-0.0620   1st Qu.:1.2369  
 Median :1.4653   Median :0.0073   Median : 0.0732   Median :1.4422  
 Mean   :1.5489   Mean   :0.0396   Mean   : 0.0932   Mean   :1.5617  
 3rd Qu.:1.8174   3rd Qu.:0.0229   3rd Qu.: 0.1921   3rd Qu.:1.8567  
 Max.   :2.7105   Max.   :1.0000   Max.   : 1.8896   Max.   :3.3347  
 NA's   :1000     NA's   :1000     NA's   :1000      NA's   :1000    
  estimate_MUE           ck          time.interim        seed      
 Min.   :-0.0776   Min.   :0.0237   Min.   :527.0   Min.   :  614  
 1st Qu.: 0.5885   1st Qu.:1.3964   1st Qu.:587.0   1st Qu.:26254  
 Median : 0.7937   Median :1.4385   Median :602.0   Median :49022  
 Mean   : 0.8407   Mean   :1.4150   Mean   :604.2   Mean   :48851  
 3rd Qu.: 1.0492   3rd Qu.:1.4943   3rd Qu.:622.0   3rd Qu.:72202  
 Max.   : 2.5089   Max.   :1.7086   Max.   :687.0   Max.   :98793  
 NA's   :1000      NA's   :652                                     
  nX1.interim     nX2.interim     nX3.interim  computation.time
 Min.   :145.0   Min.   :130.0   Min.   :120   Min.   :0.674   
 1st Qu.:148.0   1st Qu.:135.0   1st Qu.:125   1st Qu.:0.908   
 Median :149.0   Median :137.0   Median :127   Median :0.995   
 Mean   :148.7   Mean   :136.6   Mean   :127   Mean   :1.011   
 3rd Qu.:150.0   3rd Qu.:138.0   3rd Qu.:129   3rd Qu.:1.114   
 Max.   :155.0   Max.   :144.0   Max.   :133   Max.   :3.744   
                                                               
> 
> #----------------------------------------------------------------------
> ### BATCH_simuMain.R ends here
> 
> proc.time()
   user  system elapsed 
255.471   0.413 266.519 
