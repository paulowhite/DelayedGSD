
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### BATCH_simuMain.R --- 
> #----------------------------------------------------------------------
> ## Author: Paul Blanche
> ## Created: Mar  5 2021 (10:56) 
> ## Version: 
> ## Last-Updated: jul  7 2022 (13:56) 
> ##           By: Brice Ozenne
> ##     Update #: 518
> #----------------------------------------------------------------------
> ## 
> ### Commentary: 
> ## 
> ### Change Log:
> #----------------------------------------------------------------------
> ## 
> ### Code:
> 
> ## ** BATCH loop
> ## cd /projects/biostat01/people/hpl802/DelayedGSD/
> ## for ITER in `seq 1 10`;
> ## do
> ## eval 'R CMD BATCH --vanilla "--args iter_sim='$ITER' n.iter_sim=10" BATCH_simuMain.R output/R-simuMain-'$ITER'.Rout &'
> ## done
> 
> ## [1] 1186669
> ## [2] 1186670
> ## [3] 1186671
> ## [4] 1186672
> ## [5] 1186673
> ## [6] 1186674
> ## [7] 1186675
> ## [8] 1186676
> ## [9] 1186677
> ## [10] 1186678
> 
> rm(list=ls())
>                                    # {{{ parameters
> ## * parameters
> name <- "ScenarioName" # To save the results
> method <- 1:2 # methods used to compute the boundaries
>                                         #---
> myseed <- 140786598
>                                         #--- to plan the trial ----
> NMC <- 250 # number of sequential simulations to run in parallel. Eg. with 250, then we can run 40 scripts in paralell to get N=10,000 runs in total.
> kMax <- 2  #max number of analyses (including final)
> alpha <- 0.025  #type I error (one sided)
> beta <- 0.2  #type II error
> informationRates <- c(0.5,1)  #planned  information rates
> rho_alpha <- 2  # rho parameter for alpha error spending function
> rho_beta <- 2  # rho parameter for beta error spending function
> ## deltaPower <- 0.75 # just to try another value when Id > Imax
> Id <- 0.55  #(expected) information rate at each decision analysis
> binding <- TRUE
>                                         #
>                                         #---- to generate data -----------
>                                         #
> block <- c(1,1,0,0) 
> allsd <- c(2.5,2.1,2.4) # sd, first from baseline measurement, then the two changes from baseline
> mean0 <- c(10,0,0) # mean placebo group (again, first is absolute value, then change from baseline)
> delta <- c(0,0.6,0.8) # treatment effect
> ar <- (0.86*2)*2 # orginial accrual rate from data from Corine is 0.86 per week, hence we multiply by 2 for by 14 days. As to low, we further multiply by 2
> cor011 <- -0.15 # ~ from data from Corine
> corij1 <- 0.68  # ~ from data from Corine
> cor0j1 <- -0.27  # ~ from data from Corine
> Miss11 <- 5/104 # miss both V1 and V2
> Miss12 <- 1/104 # miss V1 and but not V2
> Miss21 <- 6/104 # do not miss V1 and but miss V2
> Miss22 <- 92/104 # miss none
> PropForInterim <- 0.5 # Decide to have interim analysiz when PropForInterim % of all subjects have had the chance to have one follow-up measuement recorded in the data to be available for analysis.
> theDelta.t <- 1.50001 # time lag to process the data and make them ready to analyze after collecting them (unit is time between two follow-up visits)
> TimeFactor <- 14 ## number of days between two visits
>                                         #
>                                         #--- actually for both planing the trial  and generating data-----
>                                         #
>                                         #
> deltaPower <- abs(delta[3]) # effect (NOT Z-scale/unit, but outcome scale/unit!) that the study is powered for: should we choose ourselves or compute from other numbers above ???
> n <- ceiling(2*2*((allsd[3]/deltaPower)^2)*(qnorm(1-beta)-qnorm(alpha))^2) #104 with Corine's data # should we choose ourselves or compute from the above numbers ???
>                                         # inflate SS as required for interim
> 
>                                         # {{{ Set seeds for parallel computing and reproducibility
> ## * Seed
> args <- commandArgs(TRUE) ## BATCH MODE
> if(length(args)>0){
+     for (arg in args){
+         eval(parse(text=arg))
+     }
+ }else{ ## SLUMR
+     iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_ID"))
+     n.iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_COUNT"))
+ } ## interactive
> if(is.na(iter_sim)){iter_sim <- 1}
> if(is.na(n.iter_sim)){n.iter_sim <- 40}
> 
> set.seed(140786598)
> allseeds <- sample.int(n = 10*n.iter_sim*NMC, size = n.iter_sim*NMC, replace=FALSE) #x=1:(.Machine$integer.max) seems to be maximal possible
> # }}}
> 
> # {{{ set path to load and save and othe machine specific variables
> ## * path
> path <- "."
> path.res <- file.path(path,"Results","simuMain")
> if(dir.exists(path.res)==FALSE){
+     if(dir.exists(file.path(path,"Results"))==FALSE){
+     dir.create(file.path(path,"Results"))
+     }
+     dir.create(path.res)
+ }
> path.output <- file.path(path,"output","simuMain")
> if(dir.exists(path.output)==FALSE){
+     if(dir.exists(file.path(path,"output"))==FALSE){
+     dir.create(file.path(path,"output"))
+     }
+     dir.create(path.output)
+ }
> # }}}
> 
> 
> ## * libraries and functions
> library(DelayedGSD)
DelayedGSD version 0.0.3
> ## sourceDir <- function(path, trace = TRUE, ...) {
> ##     for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
> ##         if(trace) cat(nm,":")
> ##         source(file.path(path, nm), ...)
> ##         if(trace) cat("\n")
> ##     }
> ## }
> ## sourceDir(pathToLoad)
>     
> 
> ## * Compute inflation factor and sample size
> plannedB <- vector(mode = "list", length = 3)
> for(iMeth in method){ ## iMeth <- 1
+     plannedB[[iMeth]] <- CalcBoundaries(kMax=kMax,  
+                                         alpha=alpha, 
+                                         beta=beta,  
+                                         InfoR.i=informationRates,  
+                                         InfoR.d=c(Id,1),  
+                                         rho_alpha=rho_alpha,  
+                                         rho_beta=rho_beta,  
+                                         method=iMeth,  
+                                         cNotBelowFixedc=FALSE,
+                                         bindingFutility=binding,
+                                         delta=tail(delta,1))
+     ## summary(plannedB[[1]])
+     ## coef(plannedB[[iMeth]], type = "information")
+ }
Loading required namespace: gsDesign
Loading required package: mvtnorm
Loading required namespace: BB
> inflationFactor <- unlist(lapply(plannedB,function(iP){iP$planned$InflationFactor}))
> nGSD <- ceiling(n*inflationFactor)
> ##  plot(plannedB[[1]])
> 
> #
> # --- just to check---
> ## n
> ## InfoFixed <- ((qnorm(1-beta)-qnorm(alpha))/(deltaPower))^2
> ## InfoFixed
> ## n/(4*(allsd[3])^2)
> #---
> # }}}
> 
> 
> 
> 
> # {{{ technical details to loop
> RES <- NULL # initialize results to save
> allj <- ((iter_sim-1)*NMC + 1):(iter_sim*NMC) # indices of all iterations (replicates) for this job, accountng for the other jobs running in parallel
> # }}}
> 
> ## * Loop
> for(j in allj){ ## j <- 51 ## 5
+     startComp <- Sys.time()
+     myseedi <- allseeds[j]
+     # {{{ TRACE info (e.g. to check the Rout)
+     print(paste0("seed ",myseedi," for ","j=",which(j==allj)," out of ",NMC, " (i.e. j=",j," in [",(iter_sim-1)*NMC + 1,";",iter_sim*NMC,"], as job id is i=",iter_sim,")"))
+     # }}}
+     # {{{ Missing probabilities
+     MyMissProb <- matrix(c(Miss11,Miss12,Miss21,Miss22),ncol=2,nrow=2,byrow=TRUE) # to additionnally remove 1 more because some FASFL=N
+     colnames(MyMissProb) <- c("V2 missing","V2 not missing")
+     rownames(MyMissProb) <- c("V1 missing","V1 not missing")
+     # }}}
+ 
+                                         # {{{ generate data
+     ## ** simulate
+     res <- GenData(n=n, 
+                    N.fw=2,
+                    rand.block=block,
+                    allsd=allsd,
+                    mean0=mean0,
+                    delta=delta,
+                    ar=ar,
+                    cor.01.1=cor011,
+                    cor.ij.1=corij1,
+                    cor.0j.1=cor0j1,
+                    seed=myseedi,
+                    MissProb=MyMissProb,
+                    DigitsOutcome=2,
+                    TimeFactor=TimeFactor,
+                    DigitsTime=0
+                    )
+     d <- res$d
+     ## head(d,n=20)
+                                         # }}}
+                                         # {{{ reformat data like those of Corine
+     ## Make data long format
+     ## dd <- FormatAsCase(d)
+     ## head(dd)
+     ## summary(dd)
+                                         # }}}
+    
+                                         # {{{ make data available at interim
+                                         # Here we stop inclusion data collection for the interim analysis as soon as
+                                         # half of the participants have completed (or had the opportunity to complete) the follow-up 
+     thet <- d$t3[ceiling(n*PropForInterim)]
+     di <- SelectData(d,t=thet)
+     ## ddi <- FormatAsCase(di) # needed ????
+     ## head(d[d$id==52,])
+                                         # }}}
+     ## {{{ analyze data at at interim
+     ## ** interim
+     lmmI <- analyzeData(di, ddf = "nlme", data.decision = sum(d$t1 <= thet + theDelta.t*TimeFactor), getinfo = TRUE, trace = TRUE)
+     ## lmmI <- analyzeData(di, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     currentGSD <- vector(mode = "list", length = 3)
+     out.interim <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+ 
+         currentGSD[[iMeth]] <- update(plannedB[[iMeth]], delta = lmmI, trace = FALSE)
+ 
+         iConfint.interim <- confint(currentGSD[[iMeth]])
+         iInfo.interim <- coef(currentGSD[[iMeth]], type = "information")
+         iBoundary.interim <- coef(currentGSD[[iMeth]], type = "boundary")
+         iDecision.interim <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+         out.interim[[iMeth]] <-  data.frame(statistic = iConfint.interim[1,"statistic"],
+                                             estimate_ML = iConfint.interim[1,"estimate"],
+                                             se_ML = iConfint.interim[1,"se"],
+                                             info = iInfo.interim[1,"Interim"],
+                                             infoPC = iInfo.interim[1,"Interim.pc"],
+                                             info.pred = iInfo.interim[1,"Decision"],
+                                             infoPC.pred = iInfo.interim[1,"Decision.pc"],
+                                             uk = iBoundary.interim[1,"Ebound"],
+                                             lk = iBoundary.interim[1,"Fbound"],
+                                             decision = iDecision.interim["decision","stage 1"],
+                                             reason = iDecision.interim["reason.interim","stage 1"])
+     }
+     ## currentGSD[[1]]
+     ## plot(currentGSD[[1]])
+ 
+     ## ** decision
+     dDecision <- d[which(d$t1 <= thet + theDelta.t*TimeFactor),]
+     lmmD <- analyzeData(dDecision, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+     
+     out.decision <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+           
+         if(out.interim[[iMeth]]$decision == "stop"){
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, trace = FALSE)
+             ## plot(currentGSD[[iMeth]])
+ 
+             iConfint.decision <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.decision  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = iConfint.decision[1,"statistic"],
+                                                 p.value_ML = iConfint.decision[iConfint.decision$method == "ML","p.value"],
+                                                 lower_ML = iConfint.decision[iConfint.decision$method == "ML","lower"],
+                                                 upper_ML = iConfint.decision[iConfint.decision$method == "ML","upper"],
+                                                 estimate_ML = iConfint.decision[iConfint.decision$method == "ML","estimate"],
+                                                 p.value_MUE = iConfint.decision[iConfint.decision$method == "MUE","p.value"],
+                                                 lower_MUE = iConfint.decision[iConfint.decision$method == "MUE","lower"],
+                                                 upper_MUE = iConfint.decision[iConfint.decision$method == "MUE","upper"],
+                                                 estimate_MUE = iConfint.decision[iConfint.decision$method == "MUE","estimate"],
+                                                 info = iInfo.decision[1,"Interim"],
+                                                 infoPC = iInfo.decision[1,"Interim.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = unname(iDecision.decision["decision","stage 2"])
+                                                 )
+ 
+         }else{
+             ## update information
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, k = 1, type.k = "decision", trace = FALSE)
+ 
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = NA,
+                                                 p.value_ML = NA,
+                                                 lower_ML = NA,
+                                                 upper_ML = NA,
+                                                 estimate_ML = NA,
+                                                 p.value_MUE = NA,
+                                                 lower_MUE = NA,
+                                                 upper_MUE = NA,
+                                                 estimate_MUE = NA,
+                                                 info = iInfo.decision[1,"Decision"],
+                                                 infoPC = iInfo.decision[1,"Decision.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = NA)
+         }
+     }
+                                         # }}}
+                                         # {{{ Analyze data at decision
+ 
+     ## ** finale
+     dFinal <- d
+     lmmF <- analyzeData(dFinal, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     out.final <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+         if(out.interim[[iMeth]]$decision == "stop"){
+             out.final[[iMeth]] <- data.frame(statistic = NA,
+                                              p.value_ML = NA,
+                                              lower_ML = NA,
+                                              upper_ML = NA,
+                                              estimate_ML = NA,
+                                              p.value_MUE = NA,
+                                              lower_MUE = NA,
+                                              upper_MUE = NA,
+                                              estimate_MUE = NA,
+                                              info = NA,
+                                              infoPC = NA,
+                                              ck = NA,
+                                              decision = NA)
+ 
+         }else{
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmF, trace = FALSE)
+ 
+             ## plot(test)
+             ## summary(test)
+             iConfint.final <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.final <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.final <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.final  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.final[[iMeth]] <- data.frame(statistic = iConfint.final[1,"statistic"],
+                                              p.value_ML = iConfint.final[iConfint.final$method == "ML","p.value"],
+                                              lower_ML = iConfint.final[iConfint.final$method == "ML","lower"],
+                                              upper_ML = iConfint.final[iConfint.final$method == "ML","upper"],
+                                              estimate_ML = iConfint.final[iConfint.final$method == "ML","estimate"],
+                                              p.value_MUE = iConfint.final[iConfint.final$method == "MUE","p.value"],
+                                              lower_MUE = iConfint.final[iConfint.final$method == "MUE","lower"],
+                                              upper_MUE = iConfint.final[iConfint.final$method == "MUE","upper"],
+                                              estimate_MUE = iConfint.final[iConfint.final$method == "MUE","estimate"],
+                                              info = iInfo.final[1,"Interim"],
+                                              infoPC = iInfo.final[1,"Interim.pc"],
+                                              ck = iBoundary.final[1,"Cbound"],
+                                              decision = unname(coef(currentGSD[[iMeth]], type = "decision")["decision","stage 2"])
+                                              )
+         }
+     }
+                                         # }}}
+ 
+     stopComp <- Sys.time()
+                                         # {{{ Save results
+ 
+     outMerge <- do.call(rbind,lapply(method, function(iMeth){
+         iNames <- unique(c(names(out.interim[[iMeth]]),names(out.decision[[iMeth]]),names(out.final[[iMeth]])))
+         iMerge <- data.frame(matrix(NA, ncol = length(iNames)+3, nrow = 3, dimnames = list(NULL, c("method", "stage", "type", iNames))))
+         iMerge[1,c("method","stage","type",names(out.interim[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "interim", out.interim[[iMeth]]) 
+         iMerge[2,c("method","stage","type",names(out.decision[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "decision", out.decision[[iMeth]]) 
+         iMerge[3,c("method","stage","type",names(out.final[[iMeth]]))] <- data.frame(method = iMeth, stage = 2, type = "final", out.final[[iMeth]])
+         return(iMerge)
+     }))
+ 
+     ## outMerge[outMerge$method==3,]
+ 
+     out <- cbind(
+         ## results
+         outMerge,
+         ## simulation details
+         time.interim = thet,
+         seed=myseedi,             
+         nX1.interim = sum(!is.na(di$X1)),
+         nX2.interim = sum(!is.na(di$X2)),
+         nX3.interim = sum(!is.na(di$X3)),
+         ## computation time
+         computation.time=as.double(round(difftime(stopComp,startComp,units="secs"),3))
+     )
+     ## names(out) <- myColNames
+     RES <- rbind(RES,out)
+     save(RES,file=paste0(path.res,name,"(tempo)-",iter_sim,".rda"))
+                                         # }}}
+ }
[1] "seed 30560 for j=1 out of 250 (i.e. j=1751 in [1751;2000], as job id is i=8)"
Loading required namespace: nlme
[1] "seed 30591 for j=2 out of 250 (i.e. j=1752 in [1751;2000], as job id is i=8)"
[1] "seed 74836 for j=3 out of 250 (i.e. j=1753 in [1751;2000], as job id is i=8)"
[1] "seed 9111 for j=4 out of 250 (i.e. j=1754 in [1751;2000], as job id is i=8)"
[1] "seed 75323 for j=5 out of 250 (i.e. j=1755 in [1751;2000], as job id is i=8)"
[1] "seed 82630 for j=6 out of 250 (i.e. j=1756 in [1751;2000], as job id is i=8)"
[1] "seed 38957 for j=7 out of 250 (i.e. j=1757 in [1751;2000], as job id is i=8)"
[1] "seed 56850 for j=8 out of 250 (i.e. j=1758 in [1751;2000], as job id is i=8)"
[1] "seed 65874 for j=9 out of 250 (i.e. j=1759 in [1751;2000], as job id is i=8)"
[1] "seed 57551 for j=10 out of 250 (i.e. j=1760 in [1751;2000], as job id is i=8)"
[1] "seed 44223 for j=11 out of 250 (i.e. j=1761 in [1751;2000], as job id is i=8)"
[1] "seed 82388 for j=12 out of 250 (i.e. j=1762 in [1751;2000], as job id is i=8)"
[1] "seed 7621 for j=13 out of 250 (i.e. j=1763 in [1751;2000], as job id is i=8)"
[1] "seed 62093 for j=14 out of 250 (i.e. j=1764 in [1751;2000], as job id is i=8)"
[1] "seed 93416 for j=15 out of 250 (i.e. j=1765 in [1751;2000], as job id is i=8)"
[1] "seed 57125 for j=16 out of 250 (i.e. j=1766 in [1751;2000], as job id is i=8)"
[1] "seed 16581 for j=17 out of 250 (i.e. j=1767 in [1751;2000], as job id is i=8)"
[1] "seed 18637 for j=18 out of 250 (i.e. j=1768 in [1751;2000], as job id is i=8)"
[1] "seed 76731 for j=19 out of 250 (i.e. j=1769 in [1751;2000], as job id is i=8)"
[1] "seed 7592 for j=20 out of 250 (i.e. j=1770 in [1751;2000], as job id is i=8)"
[1] "seed 33720 for j=21 out of 250 (i.e. j=1771 in [1751;2000], as job id is i=8)"
[1] "seed 61989 for j=22 out of 250 (i.e. j=1772 in [1751;2000], as job id is i=8)"
[1] "seed 31759 for j=23 out of 250 (i.e. j=1773 in [1751;2000], as job id is i=8)"
[1] "seed 77148 for j=24 out of 250 (i.e. j=1774 in [1751;2000], as job id is i=8)"
[1] "seed 2097 for j=25 out of 250 (i.e. j=1775 in [1751;2000], as job id is i=8)"
[1] "seed 31727 for j=26 out of 250 (i.e. j=1776 in [1751;2000], as job id is i=8)"
[1] "seed 44028 for j=27 out of 250 (i.e. j=1777 in [1751;2000], as job id is i=8)"
[1] "seed 60228 for j=28 out of 250 (i.e. j=1778 in [1751;2000], as job id is i=8)"
[1] "seed 45145 for j=29 out of 250 (i.e. j=1779 in [1751;2000], as job id is i=8)"
[1] "seed 17034 for j=30 out of 250 (i.e. j=1780 in [1751;2000], as job id is i=8)"
[1] "seed 73348 for j=31 out of 250 (i.e. j=1781 in [1751;2000], as job id is i=8)"
[1] "seed 3315 for j=32 out of 250 (i.e. j=1782 in [1751;2000], as job id is i=8)"
[1] "seed 24633 for j=33 out of 250 (i.e. j=1783 in [1751;2000], as job id is i=8)"
[1] "seed 30676 for j=34 out of 250 (i.e. j=1784 in [1751;2000], as job id is i=8)"
[1] "seed 68276 for j=35 out of 250 (i.e. j=1785 in [1751;2000], as job id is i=8)"
[1] "seed 99588 for j=36 out of 250 (i.e. j=1786 in [1751;2000], as job id is i=8)"
[1] "seed 18110 for j=37 out of 250 (i.e. j=1787 in [1751;2000], as job id is i=8)"
[1] "seed 56613 for j=38 out of 250 (i.e. j=1788 in [1751;2000], as job id is i=8)"
[1] "seed 76216 for j=39 out of 250 (i.e. j=1789 in [1751;2000], as job id is i=8)"
[1] "seed 76180 for j=40 out of 250 (i.e. j=1790 in [1751;2000], as job id is i=8)"
[1] "seed 31944 for j=41 out of 250 (i.e. j=1791 in [1751;2000], as job id is i=8)"
[1] "seed 77697 for j=42 out of 250 (i.e. j=1792 in [1751;2000], as job id is i=8)"
[1] "seed 38370 for j=43 out of 250 (i.e. j=1793 in [1751;2000], as job id is i=8)"
[1] "seed 52484 for j=44 out of 250 (i.e. j=1794 in [1751;2000], as job id is i=8)"
[1] "seed 57977 for j=45 out of 250 (i.e. j=1795 in [1751;2000], as job id is i=8)"
[1] "seed 9868 for j=46 out of 250 (i.e. j=1796 in [1751;2000], as job id is i=8)"
[1] "seed 64541 for j=47 out of 250 (i.e. j=1797 in [1751;2000], as job id is i=8)"
[1] "seed 20994 for j=48 out of 250 (i.e. j=1798 in [1751;2000], as job id is i=8)"
[1] "seed 27014 for j=49 out of 250 (i.e. j=1799 in [1751;2000], as job id is i=8)"
[1] "seed 59229 for j=50 out of 250 (i.e. j=1800 in [1751;2000], as job id is i=8)"
[1] "seed 63218 for j=51 out of 250 (i.e. j=1801 in [1751;2000], as job id is i=8)"
[1] "seed 45662 for j=52 out of 250 (i.e. j=1802 in [1751;2000], as job id is i=8)"
[1] "seed 79748 for j=53 out of 250 (i.e. j=1803 in [1751;2000], as job id is i=8)"
[1] "seed 66528 for j=54 out of 250 (i.e. j=1804 in [1751;2000], as job id is i=8)"
[1] "seed 17914 for j=55 out of 250 (i.e. j=1805 in [1751;2000], as job id is i=8)"
[1] "seed 51935 for j=56 out of 250 (i.e. j=1806 in [1751;2000], as job id is i=8)"
[1] "seed 91181 for j=57 out of 250 (i.e. j=1807 in [1751;2000], as job id is i=8)"
[1] "seed 92873 for j=58 out of 250 (i.e. j=1808 in [1751;2000], as job id is i=8)"
[1] "seed 61301 for j=59 out of 250 (i.e. j=1809 in [1751;2000], as job id is i=8)"
[1] "seed 822 for j=60 out of 250 (i.e. j=1810 in [1751;2000], as job id is i=8)"
[1] "seed 57594 for j=61 out of 250 (i.e. j=1811 in [1751;2000], as job id is i=8)"
[1] "seed 55412 for j=62 out of 250 (i.e. j=1812 in [1751;2000], as job id is i=8)"
[1] "seed 84851 for j=63 out of 250 (i.e. j=1813 in [1751;2000], as job id is i=8)"
[1] "seed 10716 for j=64 out of 250 (i.e. j=1814 in [1751;2000], as job id is i=8)"
[1] "seed 30951 for j=65 out of 250 (i.e. j=1815 in [1751;2000], as job id is i=8)"
[1] "seed 24878 for j=66 out of 250 (i.e. j=1816 in [1751;2000], as job id is i=8)"
[1] "seed 25837 for j=67 out of 250 (i.e. j=1817 in [1751;2000], as job id is i=8)"
[1] "seed 54647 for j=68 out of 250 (i.e. j=1818 in [1751;2000], as job id is i=8)"
[1] "seed 24404 for j=69 out of 250 (i.e. j=1819 in [1751;2000], as job id is i=8)"
[1] "seed 95070 for j=70 out of 250 (i.e. j=1820 in [1751;2000], as job id is i=8)"
[1] "seed 46802 for j=71 out of 250 (i.e. j=1821 in [1751;2000], as job id is i=8)"
[1] "seed 90180 for j=72 out of 250 (i.e. j=1822 in [1751;2000], as job id is i=8)"
[1] "seed 44760 for j=73 out of 250 (i.e. j=1823 in [1751;2000], as job id is i=8)"
[1] "seed 95021 for j=74 out of 250 (i.e. j=1824 in [1751;2000], as job id is i=8)"
[1] "seed 37635 for j=75 out of 250 (i.e. j=1825 in [1751;2000], as job id is i=8)"
[1] "seed 61036 for j=76 out of 250 (i.e. j=1826 in [1751;2000], as job id is i=8)"
[1] "seed 34601 for j=77 out of 250 (i.e. j=1827 in [1751;2000], as job id is i=8)"
[1] "seed 10840 for j=78 out of 250 (i.e. j=1828 in [1751;2000], as job id is i=8)"
[1] "seed 95940 for j=79 out of 250 (i.e. j=1829 in [1751;2000], as job id is i=8)"
[1] "seed 15562 for j=80 out of 250 (i.e. j=1830 in [1751;2000], as job id is i=8)"
[1] "seed 50858 for j=81 out of 250 (i.e. j=1831 in [1751;2000], as job id is i=8)"
[1] "seed 91945 for j=82 out of 250 (i.e. j=1832 in [1751;2000], as job id is i=8)"
[1] "seed 42541 for j=83 out of 250 (i.e. j=1833 in [1751;2000], as job id is i=8)"
[1] "seed 15445 for j=84 out of 250 (i.e. j=1834 in [1751;2000], as job id is i=8)"
[1] "seed 77487 for j=85 out of 250 (i.e. j=1835 in [1751;2000], as job id is i=8)"
[1] "seed 40820 for j=86 out of 250 (i.e. j=1836 in [1751;2000], as job id is i=8)"
[1] "seed 56209 for j=87 out of 250 (i.e. j=1837 in [1751;2000], as job id is i=8)"
[1] "seed 80421 for j=88 out of 250 (i.e. j=1838 in [1751;2000], as job id is i=8)"
[1] "seed 24609 for j=89 out of 250 (i.e. j=1839 in [1751;2000], as job id is i=8)"
[1] "seed 34945 for j=90 out of 250 (i.e. j=1840 in [1751;2000], as job id is i=8)"
[1] "seed 24228 for j=91 out of 250 (i.e. j=1841 in [1751;2000], as job id is i=8)"
[1] "seed 7879 for j=92 out of 250 (i.e. j=1842 in [1751;2000], as job id is i=8)"
[1] "seed 7100 for j=93 out of 250 (i.e. j=1843 in [1751;2000], as job id is i=8)"
[1] "seed 76907 for j=94 out of 250 (i.e. j=1844 in [1751;2000], as job id is i=8)"
[1] "seed 63828 for j=95 out of 250 (i.e. j=1845 in [1751;2000], as job id is i=8)"
[1] "seed 45768 for j=96 out of 250 (i.e. j=1846 in [1751;2000], as job id is i=8)"
[1] "seed 57370 for j=97 out of 250 (i.e. j=1847 in [1751;2000], as job id is i=8)"
[1] "seed 27837 for j=98 out of 250 (i.e. j=1848 in [1751;2000], as job id is i=8)"
[1] "seed 19983 for j=99 out of 250 (i.e. j=1849 in [1751;2000], as job id is i=8)"
[1] "seed 38828 for j=100 out of 250 (i.e. j=1850 in [1751;2000], as job id is i=8)"
[1] "seed 27143 for j=101 out of 250 (i.e. j=1851 in [1751;2000], as job id is i=8)"
[1] "seed 68157 for j=102 out of 250 (i.e. j=1852 in [1751;2000], as job id is i=8)"
[1] "seed 1653 for j=103 out of 250 (i.e. j=1853 in [1751;2000], as job id is i=8)"
[1] "seed 50309 for j=104 out of 250 (i.e. j=1854 in [1751;2000], as job id is i=8)"
[1] "seed 81847 for j=105 out of 250 (i.e. j=1855 in [1751;2000], as job id is i=8)"
[1] "seed 54134 for j=106 out of 250 (i.e. j=1856 in [1751;2000], as job id is i=8)"
[1] "seed 149 for j=107 out of 250 (i.e. j=1857 in [1751;2000], as job id is i=8)"
[1] "seed 78442 for j=108 out of 250 (i.e. j=1858 in [1751;2000], as job id is i=8)"
[1] "seed 28837 for j=109 out of 250 (i.e. j=1859 in [1751;2000], as job id is i=8)"
[1] "seed 77868 for j=110 out of 250 (i.e. j=1860 in [1751;2000], as job id is i=8)"
[1] "seed 13101 for j=111 out of 250 (i.e. j=1861 in [1751;2000], as job id is i=8)"
[1] "seed 51163 for j=112 out of 250 (i.e. j=1862 in [1751;2000], as job id is i=8)"
[1] "seed 6505 for j=113 out of 250 (i.e. j=1863 in [1751;2000], as job id is i=8)"
[1] "seed 85804 for j=114 out of 250 (i.e. j=1864 in [1751;2000], as job id is i=8)"
[1] "seed 65225 for j=115 out of 250 (i.e. j=1865 in [1751;2000], as job id is i=8)"
[1] "seed 54608 for j=116 out of 250 (i.e. j=1866 in [1751;2000], as job id is i=8)"
[1] "seed 92333 for j=117 out of 250 (i.e. j=1867 in [1751;2000], as job id is i=8)"
[1] "seed 17920 for j=118 out of 250 (i.e. j=1868 in [1751;2000], as job id is i=8)"
[1] "seed 79814 for j=119 out of 250 (i.e. j=1869 in [1751;2000], as job id is i=8)"
[1] "seed 71537 for j=120 out of 250 (i.e. j=1870 in [1751;2000], as job id is i=8)"
[1] "seed 32810 for j=121 out of 250 (i.e. j=1871 in [1751;2000], as job id is i=8)"
[1] "seed 11705 for j=122 out of 250 (i.e. j=1872 in [1751;2000], as job id is i=8)"
[1] "seed 8025 for j=123 out of 250 (i.e. j=1873 in [1751;2000], as job id is i=8)"
[1] "seed 1778 for j=124 out of 250 (i.e. j=1874 in [1751;2000], as job id is i=8)"
[1] "seed 73814 for j=125 out of 250 (i.e. j=1875 in [1751;2000], as job id is i=8)"
[1] "seed 18580 for j=126 out of 250 (i.e. j=1876 in [1751;2000], as job id is i=8)"
[1] "seed 99999 for j=127 out of 250 (i.e. j=1877 in [1751;2000], as job id is i=8)"
[1] "seed 72608 for j=128 out of 250 (i.e. j=1878 in [1751;2000], as job id is i=8)"
[1] "seed 84510 for j=129 out of 250 (i.e. j=1879 in [1751;2000], as job id is i=8)"
[1] "seed 70240 for j=130 out of 250 (i.e. j=1880 in [1751;2000], as job id is i=8)"
[1] "seed 17753 for j=131 out of 250 (i.e. j=1881 in [1751;2000], as job id is i=8)"
[1] "seed 91377 for j=132 out of 250 (i.e. j=1882 in [1751;2000], as job id is i=8)"
[1] "seed 14171 for j=133 out of 250 (i.e. j=1883 in [1751;2000], as job id is i=8)"
[1] "seed 96487 for j=134 out of 250 (i.e. j=1884 in [1751;2000], as job id is i=8)"
[1] "seed 85244 for j=135 out of 250 (i.e. j=1885 in [1751;2000], as job id is i=8)"
[1] "seed 51786 for j=136 out of 250 (i.e. j=1886 in [1751;2000], as job id is i=8)"
[1] "seed 15289 for j=137 out of 250 (i.e. j=1887 in [1751;2000], as job id is i=8)"
[1] "seed 36697 for j=138 out of 250 (i.e. j=1888 in [1751;2000], as job id is i=8)"
[1] "seed 71790 for j=139 out of 250 (i.e. j=1889 in [1751;2000], as job id is i=8)"
[1] "seed 61605 for j=140 out of 250 (i.e. j=1890 in [1751;2000], as job id is i=8)"
[1] "seed 44368 for j=141 out of 250 (i.e. j=1891 in [1751;2000], as job id is i=8)"
[1] "seed 92665 for j=142 out of 250 (i.e. j=1892 in [1751;2000], as job id is i=8)"
[1] "seed 42483 for j=143 out of 250 (i.e. j=1893 in [1751;2000], as job id is i=8)"
[1] "seed 97824 for j=144 out of 250 (i.e. j=1894 in [1751;2000], as job id is i=8)"
[1] "seed 91012 for j=145 out of 250 (i.e. j=1895 in [1751;2000], as job id is i=8)"
[1] "seed 68265 for j=146 out of 250 (i.e. j=1896 in [1751;2000], as job id is i=8)"
[1] "seed 36969 for j=147 out of 250 (i.e. j=1897 in [1751;2000], as job id is i=8)"
[1] "seed 51347 for j=148 out of 250 (i.e. j=1898 in [1751;2000], as job id is i=8)"
[1] "seed 18228 for j=149 out of 250 (i.e. j=1899 in [1751;2000], as job id is i=8)"
[1] "seed 75440 for j=150 out of 250 (i.e. j=1900 in [1751;2000], as job id is i=8)"
[1] "seed 39313 for j=151 out of 250 (i.e. j=1901 in [1751;2000], as job id is i=8)"
[1] "seed 30996 for j=152 out of 250 (i.e. j=1902 in [1751;2000], as job id is i=8)"
[1] "seed 43617 for j=153 out of 250 (i.e. j=1903 in [1751;2000], as job id is i=8)"
[1] "seed 50407 for j=154 out of 250 (i.e. j=1904 in [1751;2000], as job id is i=8)"
[1] "seed 17964 for j=155 out of 250 (i.e. j=1905 in [1751;2000], as job id is i=8)"
[1] "seed 40727 for j=156 out of 250 (i.e. j=1906 in [1751;2000], as job id is i=8)"
[1] "seed 92790 for j=157 out of 250 (i.e. j=1907 in [1751;2000], as job id is i=8)"
[1] "seed 14177 for j=158 out of 250 (i.e. j=1908 in [1751;2000], as job id is i=8)"
[1] "seed 23807 for j=159 out of 250 (i.e. j=1909 in [1751;2000], as job id is i=8)"
[1] "seed 91049 for j=160 out of 250 (i.e. j=1910 in [1751;2000], as job id is i=8)"
[1] "seed 48458 for j=161 out of 250 (i.e. j=1911 in [1751;2000], as job id is i=8)"
[1] "seed 96612 for j=162 out of 250 (i.e. j=1912 in [1751;2000], as job id is i=8)"
[1] "seed 42909 for j=163 out of 250 (i.e. j=1913 in [1751;2000], as job id is i=8)"
[1] "seed 50409 for j=164 out of 250 (i.e. j=1914 in [1751;2000], as job id is i=8)"
[1] "seed 29767 for j=165 out of 250 (i.e. j=1915 in [1751;2000], as job id is i=8)"
[1] "seed 41677 for j=166 out of 250 (i.e. j=1916 in [1751;2000], as job id is i=8)"
[1] "seed 57358 for j=167 out of 250 (i.e. j=1917 in [1751;2000], as job id is i=8)"
[1] "seed 65634 for j=168 out of 250 (i.e. j=1918 in [1751;2000], as job id is i=8)"
[1] "seed 24161 for j=169 out of 250 (i.e. j=1919 in [1751;2000], as job id is i=8)"
[1] "seed 46715 for j=170 out of 250 (i.e. j=1920 in [1751;2000], as job id is i=8)"
[1] "seed 93947 for j=171 out of 250 (i.e. j=1921 in [1751;2000], as job id is i=8)"
[1] "seed 5159 for j=172 out of 250 (i.e. j=1922 in [1751;2000], as job id is i=8)"
[1] "seed 21587 for j=173 out of 250 (i.e. j=1923 in [1751;2000], as job id is i=8)"
[1] "seed 92061 for j=174 out of 250 (i.e. j=1924 in [1751;2000], as job id is i=8)"
[1] "seed 23146 for j=175 out of 250 (i.e. j=1925 in [1751;2000], as job id is i=8)"
[1] "seed 38707 for j=176 out of 250 (i.e. j=1926 in [1751;2000], as job id is i=8)"
[1] "seed 85349 for j=177 out of 250 (i.e. j=1927 in [1751;2000], as job id is i=8)"
[1] "seed 34440 for j=178 out of 250 (i.e. j=1928 in [1751;2000], as job id is i=8)"
[1] "seed 74824 for j=179 out of 250 (i.e. j=1929 in [1751;2000], as job id is i=8)"
[1] "seed 94975 for j=180 out of 250 (i.e. j=1930 in [1751;2000], as job id is i=8)"
[1] "seed 41516 for j=181 out of 250 (i.e. j=1931 in [1751;2000], as job id is i=8)"
[1] "seed 89594 for j=182 out of 250 (i.e. j=1932 in [1751;2000], as job id is i=8)"
[1] "seed 37555 for j=183 out of 250 (i.e. j=1933 in [1751;2000], as job id is i=8)"
[1] "seed 74928 for j=184 out of 250 (i.e. j=1934 in [1751;2000], as job id is i=8)"
[1] "seed 54006 for j=185 out of 250 (i.e. j=1935 in [1751;2000], as job id is i=8)"
[1] "seed 50319 for j=186 out of 250 (i.e. j=1936 in [1751;2000], as job id is i=8)"
[1] "seed 21691 for j=187 out of 250 (i.e. j=1937 in [1751;2000], as job id is i=8)"
[1] "seed 57021 for j=188 out of 250 (i.e. j=1938 in [1751;2000], as job id is i=8)"
[1] "seed 88564 for j=189 out of 250 (i.e. j=1939 in [1751;2000], as job id is i=8)"
[1] "seed 22137 for j=190 out of 250 (i.e. j=1940 in [1751;2000], as job id is i=8)"
[1] "seed 63021 for j=191 out of 250 (i.e. j=1941 in [1751;2000], as job id is i=8)"
[1] "seed 5098 for j=192 out of 250 (i.e. j=1942 in [1751;2000], as job id is i=8)"
[1] "seed 79351 for j=193 out of 250 (i.e. j=1943 in [1751;2000], as job id is i=8)"
[1] "seed 63642 for j=194 out of 250 (i.e. j=1944 in [1751;2000], as job id is i=8)"
[1] "seed 86108 for j=195 out of 250 (i.e. j=1945 in [1751;2000], as job id is i=8)"
[1] "seed 92212 for j=196 out of 250 (i.e. j=1946 in [1751;2000], as job id is i=8)"
[1] "seed 28786 for j=197 out of 250 (i.e. j=1947 in [1751;2000], as job id is i=8)"
[1] "seed 46914 for j=198 out of 250 (i.e. j=1948 in [1751;2000], as job id is i=8)"
[1] "seed 73046 for j=199 out of 250 (i.e. j=1949 in [1751;2000], as job id is i=8)"
[1] "seed 34674 for j=200 out of 250 (i.e. j=1950 in [1751;2000], as job id is i=8)"
[1] "seed 11088 for j=201 out of 250 (i.e. j=1951 in [1751;2000], as job id is i=8)"
[1] "seed 33406 for j=202 out of 250 (i.e. j=1952 in [1751;2000], as job id is i=8)"
[1] "seed 89285 for j=203 out of 250 (i.e. j=1953 in [1751;2000], as job id is i=8)"
[1] "seed 75270 for j=204 out of 250 (i.e. j=1954 in [1751;2000], as job id is i=8)"
[1] "seed 83178 for j=205 out of 250 (i.e. j=1955 in [1751;2000], as job id is i=8)"
[1] "seed 74087 for j=206 out of 250 (i.e. j=1956 in [1751;2000], as job id is i=8)"
[1] "seed 24433 for j=207 out of 250 (i.e. j=1957 in [1751;2000], as job id is i=8)"
[1] "seed 99486 for j=208 out of 250 (i.e. j=1958 in [1751;2000], as job id is i=8)"
[1] "seed 88513 for j=209 out of 250 (i.e. j=1959 in [1751;2000], as job id is i=8)"
[1] "seed 46722 for j=210 out of 250 (i.e. j=1960 in [1751;2000], as job id is i=8)"
[1] "seed 3144 for j=211 out of 250 (i.e. j=1961 in [1751;2000], as job id is i=8)"
[1] "seed 29223 for j=212 out of 250 (i.e. j=1962 in [1751;2000], as job id is i=8)"
[1] "seed 54622 for j=213 out of 250 (i.e. j=1963 in [1751;2000], as job id is i=8)"
[1] "seed 26622 for j=214 out of 250 (i.e. j=1964 in [1751;2000], as job id is i=8)"
[1] "seed 66672 for j=215 out of 250 (i.e. j=1965 in [1751;2000], as job id is i=8)"
[1] "seed 41427 for j=216 out of 250 (i.e. j=1966 in [1751;2000], as job id is i=8)"
[1] "seed 50900 for j=217 out of 250 (i.e. j=1967 in [1751;2000], as job id is i=8)"
[1] "seed 82539 for j=218 out of 250 (i.e. j=1968 in [1751;2000], as job id is i=8)"
[1] "seed 3457 for j=219 out of 250 (i.e. j=1969 in [1751;2000], as job id is i=8)"
[1] "seed 41485 for j=220 out of 250 (i.e. j=1970 in [1751;2000], as job id is i=8)"
[1] "seed 50644 for j=221 out of 250 (i.e. j=1971 in [1751;2000], as job id is i=8)"
[1] "seed 11181 for j=222 out of 250 (i.e. j=1972 in [1751;2000], as job id is i=8)"
[1] "seed 49359 for j=223 out of 250 (i.e. j=1973 in [1751;2000], as job id is i=8)"
[1] "seed 22951 for j=224 out of 250 (i.e. j=1974 in [1751;2000], as job id is i=8)"
[1] "seed 41749 for j=225 out of 250 (i.e. j=1975 in [1751;2000], as job id is i=8)"
[1] "seed 83402 for j=226 out of 250 (i.e. j=1976 in [1751;2000], as job id is i=8)"
[1] "seed 90629 for j=227 out of 250 (i.e. j=1977 in [1751;2000], as job id is i=8)"
[1] "seed 23803 for j=228 out of 250 (i.e. j=1978 in [1751;2000], as job id is i=8)"
[1] "seed 71679 for j=229 out of 250 (i.e. j=1979 in [1751;2000], as job id is i=8)"
[1] "seed 50065 for j=230 out of 250 (i.e. j=1980 in [1751;2000], as job id is i=8)"
[1] "seed 92134 for j=231 out of 250 (i.e. j=1981 in [1751;2000], as job id is i=8)"
[1] "seed 96852 for j=232 out of 250 (i.e. j=1982 in [1751;2000], as job id is i=8)"
[1] "seed 78281 for j=233 out of 250 (i.e. j=1983 in [1751;2000], as job id is i=8)"
[1] "seed 23506 for j=234 out of 250 (i.e. j=1984 in [1751;2000], as job id is i=8)"
[1] "seed 57188 for j=235 out of 250 (i.e. j=1985 in [1751;2000], as job id is i=8)"
[1] "seed 68792 for j=236 out of 250 (i.e. j=1986 in [1751;2000], as job id is i=8)"
[1] "seed 36465 for j=237 out of 250 (i.e. j=1987 in [1751;2000], as job id is i=8)"
[1] "seed 17988 for j=238 out of 250 (i.e. j=1988 in [1751;2000], as job id is i=8)"
[1] "seed 18371 for j=239 out of 250 (i.e. j=1989 in [1751;2000], as job id is i=8)"
[1] "seed 37457 for j=240 out of 250 (i.e. j=1990 in [1751;2000], as job id is i=8)"
[1] "seed 26076 for j=241 out of 250 (i.e. j=1991 in [1751;2000], as job id is i=8)"
[1] "seed 44268 for j=242 out of 250 (i.e. j=1992 in [1751;2000], as job id is i=8)"
[1] "seed 23618 for j=243 out of 250 (i.e. j=1993 in [1751;2000], as job id is i=8)"
[1] "seed 33164 for j=244 out of 250 (i.e. j=1994 in [1751;2000], as job id is i=8)"
[1] "seed 46826 for j=245 out of 250 (i.e. j=1995 in [1751;2000], as job id is i=8)"
[1] "seed 55495 for j=246 out of 250 (i.e. j=1996 in [1751;2000], as job id is i=8)"
[1] "seed 51563 for j=247 out of 250 (i.e. j=1997 in [1751;2000], as job id is i=8)"
[1] "seed 4746 for j=248 out of 250 (i.e. j=1998 in [1751;2000], as job id is i=8)"
[1] "seed 64427 for j=249 out of 250 (i.e. j=1999 in [1751;2000], as job id is i=8)"
[1] "seed 92916 for j=250 out of 250 (i.e. j=2000 in [1751;2000], as job id is i=8)"
There were 14 warnings (use warnings() to see them)
> rownames(RES) <- NULL
> save(RES,file=paste0(path.res,name,"-",iter_sim,".rda"))
> 
> ## * Summary results
> sessionInfo()
R version 4.1.2 (2021-11-01)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Red Hat Enterprise Linux 8.5 (Ootpa)

Matrix products: default
BLAS:   /opt/software/R/4.1.2/lib64/R/lib/libRblas.so
LAPACK: /opt/software/R/4.1.2/lib64/R/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] mvtnorm_1.1-3    DelayedGSD_0.0.3

loaded via a namespace (and not attached):
 [1] BB_2019.10-1     magrittr_2.0.3   tidyselect_1.1.2 munsell_0.5.0   
 [5] lattice_0.20-45  colorspace_2.0-3 xtable_1.8-4     R6_2.5.1        
 [9] quadprog_1.5-8   rlang_1.0.3      fansi_1.0.3      dplyr_1.0.9     
[13] grid_4.1.2       nlme_3.1-153     gtable_0.3.0     gsDesign_3.3.0  
[17] utf8_1.2.2       cli_3.3.0        ellipsis_0.3.2   tibble_3.1.7    
[21] lifecycle_1.0.1  crayon_1.5.1     purrr_0.3.4      ggplot2_3.3.6   
[25] tidyr_1.2.0      vctrs_0.4.1      glue_1.6.2       compiler_4.1.2  
[29] pillar_1.7.0     generics_0.1.3   scales_1.2.0     pkgconfig_2.0.3 
> summary(RES)
     method        stage           type             statistic     
 Min.   :1.0   Min.   :1.000   Length:1500        Min.   :0.0053  
 1st Qu.:1.0   1st Qu.:1.000   Class :character   1st Qu.:1.7227  
 Median :1.5   Median :1.000   Mode  :character   Median :2.4264  
 Mean   :1.5   Mean   :1.333                      Mean   :2.3668  
 3rd Qu.:2.0   3rd Qu.:2.000                      3rd Qu.:3.0694  
 Max.   :2.0   Max.   :2.000                      Max.   :5.0758  
                                                  NA's   :500     
  estimate_ML          se_ML             info           infoPC      
 Min.   :-1.0876   Min.   :0.3338   Min.   :4.426   Min.   :0.3459  
 1st Qu.: 0.5856   1st Qu.:0.3865   1st Qu.:5.791   1st Qu.:0.4525  
 Median : 0.8558   Median :0.4028   Median :6.228   Median :0.4867  
 Mean   : 0.8366   Mean   :0.4036   Mean   :6.298   Mean   :0.4921  
 3rd Qu.: 1.0928   3rd Qu.:0.4184   3rd Qu.:6.746   3rd Qu.:0.5271  
 Max.   : 2.1838   Max.   :0.4753   Max.   :9.244   Max.   :0.7224  
 NA's   :500       NA's   :1000     NA's   :182     NA's   :182     
   info.pred      infoPC.pred           uk              lk         
 Min.   :4.712   Min.   :0.3682   Min.   :2.248   Min.   :-0.2956  
 1st Qu.:6.053   1st Qu.:0.4730   1st Qu.:2.466   1st Qu.: 0.1593  
 Median :6.524   Median :0.5098   Median :2.524   Median : 0.3055  
 Mean   :6.601   Mean   :0.5158   Mean   :2.523   Mean   : 0.3105  
 3rd Qu.:7.099   3rd Qu.:0.5547   3rd Qu.:2.577   3rd Qu.: 0.4692  
 Max.   :9.695   Max.   :0.7576   Max.   :2.749   Max.   : 1.1076  
 NA's   :1000    NA's   :1000     NA's   :1000    NA's   :1000     
   decision            reason            p.value_ML        lower_ML      
 Length:1500        Length:1500        Min.   :0.0000   Min.   :-1.6501  
 Class :character   Class :character   1st Qu.:0.0010   1st Qu.:-0.0492  
 Mode  :character   Mode  :character   Median :0.0059   Median : 0.1670  
                                       Mean   :0.0722   Mean   : 0.1273  
                                       3rd Qu.:0.0372   3rd Qu.: 0.3500  
                                       Max.   :0.9957   Max.   : 1.0120  
                                       NA's   :1000     NA's   :1000     
    upper_ML      p.value_MUE       lower_MUE         upper_MUE     
 Min.   :0.026   Min.   :0.0000   Min.   :-1.6457   Min.   :0.0216  
 1st Qu.:1.252   1st Qu.:0.0021   1st Qu.:-0.0645   1st Qu.:1.2473  
 Median :1.530   Median :0.0069   Median : 0.0801   Median :1.4906  
 Mean   :1.584   Mean   :0.0448   Mean   : 0.0924   Mean   :1.5923  
 3rd Qu.:1.939   3rd Qu.:0.0218   3rd Qu.: 0.2395   3rd Qu.:1.9505  
 Max.   :2.754   Max.   :0.9855   Max.   : 1.9578   Max.   :3.5465  
 NA's   :1000    NA's   :1000     NA's   :1000      NA's   :1000    
  estimate_MUE           ck           time.interim        seed      
 Min.   :-0.8121   Min.   :-0.0736   Min.   :515.0   Min.   :  149  
 1st Qu.: 0.6030   1st Qu.: 1.4093   1st Qu.:583.0   1st Qu.:26622  
 Median : 0.8260   Median : 1.4536   Median :602.0   Median :50314  
 Mean   : 0.8530   Mean   : 1.4333   Mean   :601.4   Mean   :50276  
 3rd Qu.: 1.1061   3rd Qu.: 1.5048   3rd Qu.:620.0   3rd Qu.:74836  
 Max.   : 2.6386   Max.   : 1.6992   Max.   :654.0   Max.   :99999  
 NA's   :1000      NA's   :682                                      
  nX1.interim     nX2.interim     nX3.interim    computation.time
 Min.   :145.0   Min.   :130.0   Min.   :118.0   Min.   :0.693   
 1st Qu.:147.0   1st Qu.:135.0   1st Qu.:125.0   1st Qu.:0.905   
 Median :149.0   Median :137.0   Median :127.0   Median :1.008   
 Mean   :148.7   Mean   :136.4   Mean   :126.8   Mean   :1.027   
 3rd Qu.:150.0   3rd Qu.:138.0   3rd Qu.:129.0   3rd Qu.:1.136   
 Max.   :153.0   Max.   :142.0   Max.   :137.0   Max.   :3.785   
                                                                 
> 
> #----------------------------------------------------------------------
> ### BATCH_simuMain.R ends here
> 
> proc.time()
   user  system elapsed 
259.558   0.462 270.859 
