
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### BATCH_simuMain.R --- 
> #----------------------------------------------------------------------
> ## Author: Paul Blanche
> ## Created: Mar  5 2021 (10:56) 
> ## Version: 
> ## Last-Updated: jul  7 2022 (13:56) 
> ##           By: Brice Ozenne
> ##     Update #: 518
> #----------------------------------------------------------------------
> ## 
> ### Commentary: 
> ## 
> ### Change Log:
> #----------------------------------------------------------------------
> ## 
> ### Code:
> 
> ## ** BATCH loop
> ## cd /projects/biostat01/people/hpl802/DelayedGSD/
> ## for ITER in `seq 1 10`;
> ## do
> ## eval 'R CMD BATCH --vanilla "--args iter_sim='$ITER' n.iter_sim=10" BATCH_simuMain.R output/R-simuMain-'$ITER'.Rout &'
> ## done
> 
> ## [1] 1186669
> ## [2] 1186670
> ## [3] 1186671
> ## [4] 1186672
> ## [5] 1186673
> ## [6] 1186674
> ## [7] 1186675
> ## [8] 1186676
> ## [9] 1186677
> ## [10] 1186678
> 
> rm(list=ls())
>                                    # {{{ parameters
> ## * parameters
> name <- "ScenarioName" # To save the results
> method <- 1:2 # methods used to compute the boundaries
>                                         #---
> myseed <- 140786598
>                                         #--- to plan the trial ----
> NMC <- 250 # number of sequential simulations to run in parallel. Eg. with 250, then we can run 40 scripts in paralell to get N=10,000 runs in total.
> kMax <- 2  #max number of analyses (including final)
> alpha <- 0.025  #type I error (one sided)
> beta <- 0.2  #type II error
> informationRates <- c(0.5,1)  #planned  information rates
> rho_alpha <- 2  # rho parameter for alpha error spending function
> rho_beta <- 2  # rho parameter for beta error spending function
> ## deltaPower <- 0.75 # just to try another value when Id > Imax
> Id <- 0.55  #(expected) information rate at each decision analysis
> binding <- TRUE
>                                         #
>                                         #---- to generate data -----------
>                                         #
> block <- c(1,1,0,0) 
> allsd <- c(2.5,2.1,2.4) # sd, first from baseline measurement, then the two changes from baseline
> mean0 <- c(10,0,0) # mean placebo group (again, first is absolute value, then change from baseline)
> delta <- c(0,0.6,0.8) # treatment effect
> ar <- (0.86*2)*2 # orginial accrual rate from data from Corine is 0.86 per week, hence we multiply by 2 for by 14 days. As to low, we further multiply by 2
> cor011 <- -0.15 # ~ from data from Corine
> corij1 <- 0.68  # ~ from data from Corine
> cor0j1 <- -0.27  # ~ from data from Corine
> Miss11 <- 5/104 # miss both V1 and V2
> Miss12 <- 1/104 # miss V1 and but not V2
> Miss21 <- 6/104 # do not miss V1 and but miss V2
> Miss22 <- 92/104 # miss none
> PropForInterim <- 0.5 # Decide to have interim analysiz when PropForInterim % of all subjects have had the chance to have one follow-up measuement recorded in the data to be available for analysis.
> theDelta.t <- 1.50001 # time lag to process the data and make them ready to analyze after collecting them (unit is time between two follow-up visits)
> TimeFactor <- 14 ## number of days between two visits
>                                         #
>                                         #--- actually for both planing the trial  and generating data-----
>                                         #
>                                         #
> deltaPower <- abs(delta[3]) # effect (NOT Z-scale/unit, but outcome scale/unit!) that the study is powered for: should we choose ourselves or compute from other numbers above ???
> n <- ceiling(2*2*((allsd[3]/deltaPower)^2)*(qnorm(1-beta)-qnorm(alpha))^2) #104 with Corine's data # should we choose ourselves or compute from the above numbers ???
>                                         # inflate SS as required for interim
> 
>                                         # {{{ Set seeds for parallel computing and reproducibility
> ## * Seed
> args <- commandArgs(TRUE) ## BATCH MODE
> if(length(args)>0){
+     for (arg in args){
+         eval(parse(text=arg))
+     }
+ }else{ ## SLUMR
+     iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_ID"))
+     n.iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_COUNT"))
+ } ## interactive
> if(is.na(iter_sim)){iter_sim <- 1}
> if(is.na(n.iter_sim)){n.iter_sim <- 40}
> 
> set.seed(140786598)
> allseeds <- sample.int(n = 10*n.iter_sim*NMC, size = n.iter_sim*NMC, replace=FALSE) #x=1:(.Machine$integer.max) seems to be maximal possible
> # }}}
> 
> # {{{ set path to load and save and othe machine specific variables
> ## * path
> path <- "."
> path.res <- file.path(path,"Results","simuMain")
> if(dir.exists(path.res)==FALSE){
+     if(dir.exists(file.path(path,"Results"))==FALSE){
+     dir.create(file.path(path,"Results"))
+     }
+     dir.create(path.res)
+ }
> path.output <- file.path(path,"output","simuMain")
> if(dir.exists(path.output)==FALSE){
+     if(dir.exists(file.path(path,"output"))==FALSE){
+     dir.create(file.path(path,"output"))
+     }
+     dir.create(path.output)
+ }
> # }}}
> 
> 
> ## * libraries and functions
> library(DelayedGSD)
DelayedGSD version 0.0.3
> ## sourceDir <- function(path, trace = TRUE, ...) {
> ##     for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
> ##         if(trace) cat(nm,":")
> ##         source(file.path(path, nm), ...)
> ##         if(trace) cat("\n")
> ##     }
> ## }
> ## sourceDir(pathToLoad)
>     
> 
> ## * Compute inflation factor and sample size
> plannedB <- vector(mode = "list", length = 3)
> for(iMeth in method){ ## iMeth <- 1
+     plannedB[[iMeth]] <- CalcBoundaries(kMax=kMax,  
+                                         alpha=alpha, 
+                                         beta=beta,  
+                                         InfoR.i=informationRates,  
+                                         InfoR.d=c(Id,1),  
+                                         rho_alpha=rho_alpha,  
+                                         rho_beta=rho_beta,  
+                                         method=iMeth,  
+                                         cNotBelowFixedc=FALSE,
+                                         bindingFutility=binding,
+                                         delta=tail(delta,1))
+     ## summary(plannedB[[1]])
+     ## coef(plannedB[[iMeth]], type = "information")
+ }
Loading required namespace: gsDesign
Loading required package: mvtnorm
Loading required namespace: BB
> inflationFactor <- unlist(lapply(plannedB,function(iP){iP$planned$InflationFactor}))
> nGSD <- ceiling(n*inflationFactor)
> ##  plot(plannedB[[1]])
> 
> #
> # --- just to check---
> ## n
> ## InfoFixed <- ((qnorm(1-beta)-qnorm(alpha))/(deltaPower))^2
> ## InfoFixed
> ## n/(4*(allsd[3])^2)
> #---
> # }}}
> 
> 
> 
> 
> # {{{ technical details to loop
> RES <- NULL # initialize results to save
> allj <- ((iter_sim-1)*NMC + 1):(iter_sim*NMC) # indices of all iterations (replicates) for this job, accountng for the other jobs running in parallel
> # }}}
> 
> ## * Loop
> for(j in allj){ ## j <- 51 ## 5
+     startComp <- Sys.time()
+     myseedi <- allseeds[j]
+     # {{{ TRACE info (e.g. to check the Rout)
+     print(paste0("seed ",myseedi," for ","j=",which(j==allj)," out of ",NMC, " (i.e. j=",j," in [",(iter_sim-1)*NMC + 1,";",iter_sim*NMC,"], as job id is i=",iter_sim,")"))
+     # }}}
+     # {{{ Missing probabilities
+     MyMissProb <- matrix(c(Miss11,Miss12,Miss21,Miss22),ncol=2,nrow=2,byrow=TRUE) # to additionnally remove 1 more because some FASFL=N
+     colnames(MyMissProb) <- c("V2 missing","V2 not missing")
+     rownames(MyMissProb) <- c("V1 missing","V1 not missing")
+     # }}}
+ 
+                                         # {{{ generate data
+     ## ** simulate
+     res <- GenData(n=n, 
+                    N.fw=2,
+                    rand.block=block,
+                    allsd=allsd,
+                    mean0=mean0,
+                    delta=delta,
+                    ar=ar,
+                    cor.01.1=cor011,
+                    cor.ij.1=corij1,
+                    cor.0j.1=cor0j1,
+                    seed=myseedi,
+                    MissProb=MyMissProb,
+                    DigitsOutcome=2,
+                    TimeFactor=TimeFactor,
+                    DigitsTime=0
+                    )
+     d <- res$d
+     ## head(d,n=20)
+                                         # }}}
+                                         # {{{ reformat data like those of Corine
+     ## Make data long format
+     ## dd <- FormatAsCase(d)
+     ## head(dd)
+     ## summary(dd)
+                                         # }}}
+    
+                                         # {{{ make data available at interim
+                                         # Here we stop inclusion data collection for the interim analysis as soon as
+                                         # half of the participants have completed (or had the opportunity to complete) the follow-up 
+     thet <- d$t3[ceiling(n*PropForInterim)]
+     di <- SelectData(d,t=thet)
+     ## ddi <- FormatAsCase(di) # needed ????
+     ## head(d[d$id==52,])
+                                         # }}}
+     ## {{{ analyze data at at interim
+     ## ** interim
+     lmmI <- analyzeData(di, ddf = "nlme", data.decision = sum(d$t1 <= thet + theDelta.t*TimeFactor), getinfo = TRUE, trace = TRUE)
+     ## lmmI <- analyzeData(di, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     currentGSD <- vector(mode = "list", length = 3)
+     out.interim <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+ 
+         currentGSD[[iMeth]] <- update(plannedB[[iMeth]], delta = lmmI, trace = FALSE)
+ 
+         iConfint.interim <- confint(currentGSD[[iMeth]])
+         iInfo.interim <- coef(currentGSD[[iMeth]], type = "information")
+         iBoundary.interim <- coef(currentGSD[[iMeth]], type = "boundary")
+         iDecision.interim <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+         out.interim[[iMeth]] <-  data.frame(statistic = iConfint.interim[1,"statistic"],
+                                             estimate_ML = iConfint.interim[1,"estimate"],
+                                             se_ML = iConfint.interim[1,"se"],
+                                             info = iInfo.interim[1,"Interim"],
+                                             infoPC = iInfo.interim[1,"Interim.pc"],
+                                             info.pred = iInfo.interim[1,"Decision"],
+                                             infoPC.pred = iInfo.interim[1,"Decision.pc"],
+                                             uk = iBoundary.interim[1,"Ebound"],
+                                             lk = iBoundary.interim[1,"Fbound"],
+                                             decision = iDecision.interim["decision","stage 1"],
+                                             reason = iDecision.interim["reason.interim","stage 1"])
+     }
+     ## currentGSD[[1]]
+     ## plot(currentGSD[[1]])
+ 
+     ## ** decision
+     dDecision <- d[which(d$t1 <= thet + theDelta.t*TimeFactor),]
+     lmmD <- analyzeData(dDecision, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+     
+     out.decision <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+           
+         if(out.interim[[iMeth]]$decision == "stop"){
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, trace = FALSE)
+             ## plot(currentGSD[[iMeth]])
+ 
+             iConfint.decision <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.decision  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = iConfint.decision[1,"statistic"],
+                                                 p.value_ML = iConfint.decision[iConfint.decision$method == "ML","p.value"],
+                                                 lower_ML = iConfint.decision[iConfint.decision$method == "ML","lower"],
+                                                 upper_ML = iConfint.decision[iConfint.decision$method == "ML","upper"],
+                                                 estimate_ML = iConfint.decision[iConfint.decision$method == "ML","estimate"],
+                                                 p.value_MUE = iConfint.decision[iConfint.decision$method == "MUE","p.value"],
+                                                 lower_MUE = iConfint.decision[iConfint.decision$method == "MUE","lower"],
+                                                 upper_MUE = iConfint.decision[iConfint.decision$method == "MUE","upper"],
+                                                 estimate_MUE = iConfint.decision[iConfint.decision$method == "MUE","estimate"],
+                                                 info = iInfo.decision[1,"Interim"],
+                                                 infoPC = iInfo.decision[1,"Interim.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = unname(iDecision.decision["decision","stage 2"])
+                                                 )
+ 
+         }else{
+             ## update information
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, k = 1, type.k = "decision", trace = FALSE)
+ 
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = NA,
+                                                 p.value_ML = NA,
+                                                 lower_ML = NA,
+                                                 upper_ML = NA,
+                                                 estimate_ML = NA,
+                                                 p.value_MUE = NA,
+                                                 lower_MUE = NA,
+                                                 upper_MUE = NA,
+                                                 estimate_MUE = NA,
+                                                 info = iInfo.decision[1,"Decision"],
+                                                 infoPC = iInfo.decision[1,"Decision.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = NA)
+         }
+     }
+                                         # }}}
+                                         # {{{ Analyze data at decision
+ 
+     ## ** finale
+     dFinal <- d
+     lmmF <- analyzeData(dFinal, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     out.final <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+         if(out.interim[[iMeth]]$decision == "stop"){
+             out.final[[iMeth]] <- data.frame(statistic = NA,
+                                              p.value_ML = NA,
+                                              lower_ML = NA,
+                                              upper_ML = NA,
+                                              estimate_ML = NA,
+                                              p.value_MUE = NA,
+                                              lower_MUE = NA,
+                                              upper_MUE = NA,
+                                              estimate_MUE = NA,
+                                              info = NA,
+                                              infoPC = NA,
+                                              ck = NA,
+                                              decision = NA)
+ 
+         }else{
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmF, trace = FALSE)
+ 
+             ## plot(test)
+             ## summary(test)
+             iConfint.final <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.final <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.final <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.final  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.final[[iMeth]] <- data.frame(statistic = iConfint.final[1,"statistic"],
+                                              p.value_ML = iConfint.final[iConfint.final$method == "ML","p.value"],
+                                              lower_ML = iConfint.final[iConfint.final$method == "ML","lower"],
+                                              upper_ML = iConfint.final[iConfint.final$method == "ML","upper"],
+                                              estimate_ML = iConfint.final[iConfint.final$method == "ML","estimate"],
+                                              p.value_MUE = iConfint.final[iConfint.final$method == "MUE","p.value"],
+                                              lower_MUE = iConfint.final[iConfint.final$method == "MUE","lower"],
+                                              upper_MUE = iConfint.final[iConfint.final$method == "MUE","upper"],
+                                              estimate_MUE = iConfint.final[iConfint.final$method == "MUE","estimate"],
+                                              info = iInfo.final[1,"Interim"],
+                                              infoPC = iInfo.final[1,"Interim.pc"],
+                                              ck = iBoundary.final[1,"Cbound"],
+                                              decision = unname(coef(currentGSD[[iMeth]], type = "decision")["decision","stage 2"])
+                                              )
+         }
+     }
+                                         # }}}
+ 
+     stopComp <- Sys.time()
+                                         # {{{ Save results
+ 
+     outMerge <- do.call(rbind,lapply(method, function(iMeth){
+         iNames <- unique(c(names(out.interim[[iMeth]]),names(out.decision[[iMeth]]),names(out.final[[iMeth]])))
+         iMerge <- data.frame(matrix(NA, ncol = length(iNames)+3, nrow = 3, dimnames = list(NULL, c("method", "stage", "type", iNames))))
+         iMerge[1,c("method","stage","type",names(out.interim[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "interim", out.interim[[iMeth]]) 
+         iMerge[2,c("method","stage","type",names(out.decision[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "decision", out.decision[[iMeth]]) 
+         iMerge[3,c("method","stage","type",names(out.final[[iMeth]]))] <- data.frame(method = iMeth, stage = 2, type = "final", out.final[[iMeth]])
+         return(iMerge)
+     }))
+ 
+     ## outMerge[outMerge$method==3,]
+ 
+     out <- cbind(
+         ## results
+         outMerge,
+         ## simulation details
+         time.interim = thet,
+         seed=myseedi,             
+         nX1.interim = sum(!is.na(di$X1)),
+         nX2.interim = sum(!is.na(di$X2)),
+         nX3.interim = sum(!is.na(di$X3)),
+         ## computation time
+         computation.time=as.double(round(difftime(stopComp,startComp,units="secs"),3))
+     )
+     ## names(out) <- myColNames
+     RES <- rbind(RES,out)
+     save(RES,file=paste0(path.res,name,"(tempo)-",iter_sim,".rda"))
+                                         # }}}
+ }
[1] "seed 24904 for j=1 out of 250 (i.e. j=7001 in [7001;7250], as job id is i=29)"
Loading required namespace: nlme
[1] "seed 13786 for j=2 out of 250 (i.e. j=7002 in [7001;7250], as job id is i=29)"
[1] "seed 67201 for j=3 out of 250 (i.e. j=7003 in [7001;7250], as job id is i=29)"
[1] "seed 44969 for j=4 out of 250 (i.e. j=7004 in [7001;7250], as job id is i=29)"
[1] "seed 13789 for j=5 out of 250 (i.e. j=7005 in [7001;7250], as job id is i=29)"
[1] "seed 70050 for j=6 out of 250 (i.e. j=7006 in [7001;7250], as job id is i=29)"
[1] "seed 85198 for j=7 out of 250 (i.e. j=7007 in [7001;7250], as job id is i=29)"
[1] "seed 96145 for j=8 out of 250 (i.e. j=7008 in [7001;7250], as job id is i=29)"
[1] "seed 76010 for j=9 out of 250 (i.e. j=7009 in [7001;7250], as job id is i=29)"
[1] "seed 55822 for j=10 out of 250 (i.e. j=7010 in [7001;7250], as job id is i=29)"
[1] "seed 72826 for j=11 out of 250 (i.e. j=7011 in [7001;7250], as job id is i=29)"
[1] "seed 74538 for j=12 out of 250 (i.e. j=7012 in [7001;7250], as job id is i=29)"
[1] "seed 74859 for j=13 out of 250 (i.e. j=7013 in [7001;7250], as job id is i=29)"
[1] "seed 94119 for j=14 out of 250 (i.e. j=7014 in [7001;7250], as job id is i=29)"
[1] "seed 31815 for j=15 out of 250 (i.e. j=7015 in [7001;7250], as job id is i=29)"
[1] "seed 45436 for j=16 out of 250 (i.e. j=7016 in [7001;7250], as job id is i=29)"
[1] "seed 623 for j=17 out of 250 (i.e. j=7017 in [7001;7250], as job id is i=29)"
[1] "seed 25786 for j=18 out of 250 (i.e. j=7018 in [7001;7250], as job id is i=29)"
[1] "seed 59638 for j=19 out of 250 (i.e. j=7019 in [7001;7250], as job id is i=29)"
[1] "seed 67052 for j=20 out of 250 (i.e. j=7020 in [7001;7250], as job id is i=29)"
[1] "seed 98247 for j=21 out of 250 (i.e. j=7021 in [7001;7250], as job id is i=29)"
[1] "seed 83172 for j=22 out of 250 (i.e. j=7022 in [7001;7250], as job id is i=29)"
[1] "seed 79595 for j=23 out of 250 (i.e. j=7023 in [7001;7250], as job id is i=29)"
[1] "seed 18231 for j=24 out of 250 (i.e. j=7024 in [7001;7250], as job id is i=29)"
[1] "seed 30914 for j=25 out of 250 (i.e. j=7025 in [7001;7250], as job id is i=29)"
[1] "seed 89261 for j=26 out of 250 (i.e. j=7026 in [7001;7250], as job id is i=29)"
[1] "seed 40725 for j=27 out of 250 (i.e. j=7027 in [7001;7250], as job id is i=29)"
[1] "seed 77703 for j=28 out of 250 (i.e. j=7028 in [7001;7250], as job id is i=29)"
[1] "seed 76190 for j=29 out of 250 (i.e. j=7029 in [7001;7250], as job id is i=29)"
[1] "seed 86257 for j=30 out of 250 (i.e. j=7030 in [7001;7250], as job id is i=29)"
[1] "seed 20513 for j=31 out of 250 (i.e. j=7031 in [7001;7250], as job id is i=29)"
[1] "seed 4748 for j=32 out of 250 (i.e. j=7032 in [7001;7250], as job id is i=29)"
[1] "seed 38355 for j=33 out of 250 (i.e. j=7033 in [7001;7250], as job id is i=29)"
[1] "seed 32532 for j=34 out of 250 (i.e. j=7034 in [7001;7250], as job id is i=29)"
[1] "seed 68088 for j=35 out of 250 (i.e. j=7035 in [7001;7250], as job id is i=29)"
[1] "seed 44925 for j=36 out of 250 (i.e. j=7036 in [7001;7250], as job id is i=29)"
[1] "seed 98828 for j=37 out of 250 (i.e. j=7037 in [7001;7250], as job id is i=29)"
[1] "seed 24364 for j=38 out of 250 (i.e. j=7038 in [7001;7250], as job id is i=29)"
[1] "seed 69069 for j=39 out of 250 (i.e. j=7039 in [7001;7250], as job id is i=29)"
[1] "seed 538 for j=40 out of 250 (i.e. j=7040 in [7001;7250], as job id is i=29)"
[1] "seed 12078 for j=41 out of 250 (i.e. j=7041 in [7001;7250], as job id is i=29)"
[1] "seed 25131 for j=42 out of 250 (i.e. j=7042 in [7001;7250], as job id is i=29)"
[1] "seed 4167 for j=43 out of 250 (i.e. j=7043 in [7001;7250], as job id is i=29)"
[1] "seed 78859 for j=44 out of 250 (i.e. j=7044 in [7001;7250], as job id is i=29)"
[1] "seed 1520 for j=45 out of 250 (i.e. j=7045 in [7001;7250], as job id is i=29)"
[1] "seed 80522 for j=46 out of 250 (i.e. j=7046 in [7001;7250], as job id is i=29)"
[1] "seed 27321 for j=47 out of 250 (i.e. j=7047 in [7001;7250], as job id is i=29)"
[1] "seed 28601 for j=48 out of 250 (i.e. j=7048 in [7001;7250], as job id is i=29)"
[1] "seed 54815 for j=49 out of 250 (i.e. j=7049 in [7001;7250], as job id is i=29)"
[1] "seed 82767 for j=50 out of 250 (i.e. j=7050 in [7001;7250], as job id is i=29)"
[1] "seed 43539 for j=51 out of 250 (i.e. j=7051 in [7001;7250], as job id is i=29)"
[1] "seed 71997 for j=52 out of 250 (i.e. j=7052 in [7001;7250], as job id is i=29)"
[1] "seed 56060 for j=53 out of 250 (i.e. j=7053 in [7001;7250], as job id is i=29)"
[1] "seed 99325 for j=54 out of 250 (i.e. j=7054 in [7001;7250], as job id is i=29)"
[1] "seed 98108 for j=55 out of 250 (i.e. j=7055 in [7001;7250], as job id is i=29)"
[1] "seed 29873 for j=56 out of 250 (i.e. j=7056 in [7001;7250], as job id is i=29)"
[1] "seed 69706 for j=57 out of 250 (i.e. j=7057 in [7001;7250], as job id is i=29)"
[1] "seed 19918 for j=58 out of 250 (i.e. j=7058 in [7001;7250], as job id is i=29)"
[1] "seed 40091 for j=59 out of 250 (i.e. j=7059 in [7001;7250], as job id is i=29)"
[1] "seed 60799 for j=60 out of 250 (i.e. j=7060 in [7001;7250], as job id is i=29)"
[1] "seed 92029 for j=61 out of 250 (i.e. j=7061 in [7001;7250], as job id is i=29)"
[1] "seed 1030 for j=62 out of 250 (i.e. j=7062 in [7001;7250], as job id is i=29)"
[1] "seed 3931 for j=63 out of 250 (i.e. j=7063 in [7001;7250], as job id is i=29)"
[1] "seed 98252 for j=64 out of 250 (i.e. j=7064 in [7001;7250], as job id is i=29)"
[1] "seed 44628 for j=65 out of 250 (i.e. j=7065 in [7001;7250], as job id is i=29)"
[1] "seed 14885 for j=66 out of 250 (i.e. j=7066 in [7001;7250], as job id is i=29)"
[1] "seed 31547 for j=67 out of 250 (i.e. j=7067 in [7001;7250], as job id is i=29)"
[1] "seed 40850 for j=68 out of 250 (i.e. j=7068 in [7001;7250], as job id is i=29)"
[1] "seed 42978 for j=69 out of 250 (i.e. j=7069 in [7001;7250], as job id is i=29)"
[1] "seed 32501 for j=70 out of 250 (i.e. j=7070 in [7001;7250], as job id is i=29)"
[1] "seed 17919 for j=71 out of 250 (i.e. j=7071 in [7001;7250], as job id is i=29)"
[1] "seed 37741 for j=72 out of 250 (i.e. j=7072 in [7001;7250], as job id is i=29)"
[1] "seed 92947 for j=73 out of 250 (i.e. j=7073 in [7001;7250], as job id is i=29)"
[1] "seed 71023 for j=74 out of 250 (i.e. j=7074 in [7001;7250], as job id is i=29)"
[1] "seed 20494 for j=75 out of 250 (i.e. j=7075 in [7001;7250], as job id is i=29)"
[1] "seed 4407 for j=76 out of 250 (i.e. j=7076 in [7001;7250], as job id is i=29)"
[1] "seed 98209 for j=77 out of 250 (i.e. j=7077 in [7001;7250], as job id is i=29)"
[1] "seed 93776 for j=78 out of 250 (i.e. j=7078 in [7001;7250], as job id is i=29)"
[1] "seed 47995 for j=79 out of 250 (i.e. j=7079 in [7001;7250], as job id is i=29)"
[1] "seed 13868 for j=80 out of 250 (i.e. j=7080 in [7001;7250], as job id is i=29)"
[1] "seed 85799 for j=81 out of 250 (i.e. j=7081 in [7001;7250], as job id is i=29)"
[1] "seed 48822 for j=82 out of 250 (i.e. j=7082 in [7001;7250], as job id is i=29)"
[1] "seed 23738 for j=83 out of 250 (i.e. j=7083 in [7001;7250], as job id is i=29)"
[1] "seed 66791 for j=84 out of 250 (i.e. j=7084 in [7001;7250], as job id is i=29)"
[1] "seed 56224 for j=85 out of 250 (i.e. j=7085 in [7001;7250], as job id is i=29)"
[1] "seed 77121 for j=86 out of 250 (i.e. j=7086 in [7001;7250], as job id is i=29)"
[1] "seed 69612 for j=87 out of 250 (i.e. j=7087 in [7001;7250], as job id is i=29)"
[1] "seed 21756 for j=88 out of 250 (i.e. j=7088 in [7001;7250], as job id is i=29)"
[1] "seed 19227 for j=89 out of 250 (i.e. j=7089 in [7001;7250], as job id is i=29)"
[1] "seed 38856 for j=90 out of 250 (i.e. j=7090 in [7001;7250], as job id is i=29)"
[1] "seed 60177 for j=91 out of 250 (i.e. j=7091 in [7001;7250], as job id is i=29)"
[1] "seed 73854 for j=92 out of 250 (i.e. j=7092 in [7001;7250], as job id is i=29)"
[1] "seed 26945 for j=93 out of 250 (i.e. j=7093 in [7001;7250], as job id is i=29)"
[1] "seed 30025 for j=94 out of 250 (i.e. j=7094 in [7001;7250], as job id is i=29)"
[1] "seed 50520 for j=95 out of 250 (i.e. j=7095 in [7001;7250], as job id is i=29)"
[1] "seed 88086 for j=96 out of 250 (i.e. j=7096 in [7001;7250], as job id is i=29)"
[1] "seed 36011 for j=97 out of 250 (i.e. j=7097 in [7001;7250], as job id is i=29)"
[1] "seed 6494 for j=98 out of 250 (i.e. j=7098 in [7001;7250], as job id is i=29)"
[1] "seed 25939 for j=99 out of 250 (i.e. j=7099 in [7001;7250], as job id is i=29)"
[1] "seed 42623 for j=100 out of 250 (i.e. j=7100 in [7001;7250], as job id is i=29)"
[1] "seed 6021 for j=101 out of 250 (i.e. j=7101 in [7001;7250], as job id is i=29)"
[1] "seed 27062 for j=102 out of 250 (i.e. j=7102 in [7001;7250], as job id is i=29)"
[1] "seed 42042 for j=103 out of 250 (i.e. j=7103 in [7001;7250], as job id is i=29)"
[1] "seed 35867 for j=104 out of 250 (i.e. j=7104 in [7001;7250], as job id is i=29)"
[1] "seed 45489 for j=105 out of 250 (i.e. j=7105 in [7001;7250], as job id is i=29)"
[1] "seed 51070 for j=106 out of 250 (i.e. j=7106 in [7001;7250], as job id is i=29)"
[1] "seed 43338 for j=107 out of 250 (i.e. j=7107 in [7001;7250], as job id is i=29)"
[1] "seed 95908 for j=108 out of 250 (i.e. j=7108 in [7001;7250], as job id is i=29)"
[1] "seed 63209 for j=109 out of 250 (i.e. j=7109 in [7001;7250], as job id is i=29)"
[1] "seed 9273 for j=110 out of 250 (i.e. j=7110 in [7001;7250], as job id is i=29)"
[1] "seed 96152 for j=111 out of 250 (i.e. j=7111 in [7001;7250], as job id is i=29)"
[1] "seed 64679 for j=112 out of 250 (i.e. j=7112 in [7001;7250], as job id is i=29)"
[1] "seed 9931 for j=113 out of 250 (i.e. j=7113 in [7001;7250], as job id is i=29)"
[1] "seed 51839 for j=114 out of 250 (i.e. j=7114 in [7001;7250], as job id is i=29)"
[1] "seed 66053 for j=115 out of 250 (i.e. j=7115 in [7001;7250], as job id is i=29)"
[1] "seed 83889 for j=116 out of 250 (i.e. j=7116 in [7001;7250], as job id is i=29)"
[1] "seed 95026 for j=117 out of 250 (i.e. j=7117 in [7001;7250], as job id is i=29)"
[1] "seed 79637 for j=118 out of 250 (i.e. j=7118 in [7001;7250], as job id is i=29)"
[1] "seed 7950 for j=119 out of 250 (i.e. j=7119 in [7001;7250], as job id is i=29)"
[1] "seed 70979 for j=120 out of 250 (i.e. j=7120 in [7001;7250], as job id is i=29)"
[1] "seed 76948 for j=121 out of 250 (i.e. j=7121 in [7001;7250], as job id is i=29)"
[1] "seed 11799 for j=122 out of 250 (i.e. j=7122 in [7001;7250], as job id is i=29)"
[1] "seed 33357 for j=123 out of 250 (i.e. j=7123 in [7001;7250], as job id is i=29)"
[1] "seed 21828 for j=124 out of 250 (i.e. j=7124 in [7001;7250], as job id is i=29)"
[1] "seed 70048 for j=125 out of 250 (i.e. j=7125 in [7001;7250], as job id is i=29)"
[1] "seed 21370 for j=126 out of 250 (i.e. j=7126 in [7001;7250], as job id is i=29)"
[1] "seed 73766 for j=127 out of 250 (i.e. j=7127 in [7001;7250], as job id is i=29)"
[1] "seed 86220 for j=128 out of 250 (i.e. j=7128 in [7001;7250], as job id is i=29)"
[1] "seed 41621 for j=129 out of 250 (i.e. j=7129 in [7001;7250], as job id is i=29)"
[1] "seed 70363 for j=130 out of 250 (i.e. j=7130 in [7001;7250], as job id is i=29)"
[1] "seed 49131 for j=131 out of 250 (i.e. j=7131 in [7001;7250], as job id is i=29)"
[1] "seed 79155 for j=132 out of 250 (i.e. j=7132 in [7001;7250], as job id is i=29)"
[1] "seed 84567 for j=133 out of 250 (i.e. j=7133 in [7001;7250], as job id is i=29)"
[1] "seed 63301 for j=134 out of 250 (i.e. j=7134 in [7001;7250], as job id is i=29)"
[1] "seed 62183 for j=135 out of 250 (i.e. j=7135 in [7001;7250], as job id is i=29)"
[1] "seed 70205 for j=136 out of 250 (i.e. j=7136 in [7001;7250], as job id is i=29)"
[1] "seed 26793 for j=137 out of 250 (i.e. j=7137 in [7001;7250], as job id is i=29)"
[1] "seed 33561 for j=138 out of 250 (i.e. j=7138 in [7001;7250], as job id is i=29)"
[1] "seed 95967 for j=139 out of 250 (i.e. j=7139 in [7001;7250], as job id is i=29)"
[1] "seed 9256 for j=140 out of 250 (i.e. j=7140 in [7001;7250], as job id is i=29)"
[1] "seed 241 for j=141 out of 250 (i.e. j=7141 in [7001;7250], as job id is i=29)"
[1] "seed 56274 for j=142 out of 250 (i.e. j=7142 in [7001;7250], as job id is i=29)"
[1] "seed 78818 for j=143 out of 250 (i.e. j=7143 in [7001;7250], as job id is i=29)"
[1] "seed 39904 for j=144 out of 250 (i.e. j=7144 in [7001;7250], as job id is i=29)"
[1] "seed 52638 for j=145 out of 250 (i.e. j=7145 in [7001;7250], as job id is i=29)"
[1] "seed 2211 for j=146 out of 250 (i.e. j=7146 in [7001;7250], as job id is i=29)"
[1] "seed 82428 for j=147 out of 250 (i.e. j=7147 in [7001;7250], as job id is i=29)"
[1] "seed 86915 for j=148 out of 250 (i.e. j=7148 in [7001;7250], as job id is i=29)"
[1] "seed 63636 for j=149 out of 250 (i.e. j=7149 in [7001;7250], as job id is i=29)"
[1] "seed 29688 for j=150 out of 250 (i.e. j=7150 in [7001;7250], as job id is i=29)"
[1] "seed 1693 for j=151 out of 250 (i.e. j=7151 in [7001;7250], as job id is i=29)"
[1] "seed 15435 for j=152 out of 250 (i.e. j=7152 in [7001;7250], as job id is i=29)"
[1] "seed 22568 for j=153 out of 250 (i.e. j=7153 in [7001;7250], as job id is i=29)"
[1] "seed 29697 for j=154 out of 250 (i.e. j=7154 in [7001;7250], as job id is i=29)"
[1] "seed 40586 for j=155 out of 250 (i.e. j=7155 in [7001;7250], as job id is i=29)"
[1] "seed 46718 for j=156 out of 250 (i.e. j=7156 in [7001;7250], as job id is i=29)"
[1] "seed 4989 for j=157 out of 250 (i.e. j=7157 in [7001;7250], as job id is i=29)"
[1] "seed 77424 for j=158 out of 250 (i.e. j=7158 in [7001;7250], as job id is i=29)"
[1] "seed 9702 for j=159 out of 250 (i.e. j=7159 in [7001;7250], as job id is i=29)"
[1] "seed 23992 for j=160 out of 250 (i.e. j=7160 in [7001;7250], as job id is i=29)"
[1] "seed 96404 for j=161 out of 250 (i.e. j=7161 in [7001;7250], as job id is i=29)"
[1] "seed 46154 for j=162 out of 250 (i.e. j=7162 in [7001;7250], as job id is i=29)"
[1] "seed 20336 for j=163 out of 250 (i.e. j=7163 in [7001;7250], as job id is i=29)"
[1] "seed 56683 for j=164 out of 250 (i.e. j=7164 in [7001;7250], as job id is i=29)"
[1] "seed 23061 for j=165 out of 250 (i.e. j=7165 in [7001;7250], as job id is i=29)"
[1] "seed 20233 for j=166 out of 250 (i.e. j=7166 in [7001;7250], as job id is i=29)"
[1] "seed 68379 for j=167 out of 250 (i.e. j=7167 in [7001;7250], as job id is i=29)"
[1] "seed 37708 for j=168 out of 250 (i.e. j=7168 in [7001;7250], as job id is i=29)"
[1] "seed 71455 for j=169 out of 250 (i.e. j=7169 in [7001;7250], as job id is i=29)"
[1] "seed 97042 for j=170 out of 250 (i.e. j=7170 in [7001;7250], as job id is i=29)"
[1] "seed 22390 for j=171 out of 250 (i.e. j=7171 in [7001;7250], as job id is i=29)"
[1] "seed 93568 for j=172 out of 250 (i.e. j=7172 in [7001;7250], as job id is i=29)"
[1] "seed 26736 for j=173 out of 250 (i.e. j=7173 in [7001;7250], as job id is i=29)"
[1] "seed 8361 for j=174 out of 250 (i.e. j=7174 in [7001;7250], as job id is i=29)"
[1] "seed 18794 for j=175 out of 250 (i.e. j=7175 in [7001;7250], as job id is i=29)"
[1] "seed 92932 for j=176 out of 250 (i.e. j=7176 in [7001;7250], as job id is i=29)"
[1] "seed 5057 for j=177 out of 250 (i.e. j=7177 in [7001;7250], as job id is i=29)"
[1] "seed 32420 for j=178 out of 250 (i.e. j=7178 in [7001;7250], as job id is i=29)"
[1] "seed 44571 for j=179 out of 250 (i.e. j=7179 in [7001;7250], as job id is i=29)"
[1] "seed 50819 for j=180 out of 250 (i.e. j=7180 in [7001;7250], as job id is i=29)"
[1] "seed 65999 for j=181 out of 250 (i.e. j=7181 in [7001;7250], as job id is i=29)"
[1] "seed 45693 for j=182 out of 250 (i.e. j=7182 in [7001;7250], as job id is i=29)"
[1] "seed 45419 for j=183 out of 250 (i.e. j=7183 in [7001;7250], as job id is i=29)"
[1] "seed 51483 for j=184 out of 250 (i.e. j=7184 in [7001;7250], as job id is i=29)"
[1] "seed 22712 for j=185 out of 250 (i.e. j=7185 in [7001;7250], as job id is i=29)"
[1] "seed 93674 for j=186 out of 250 (i.e. j=7186 in [7001;7250], as job id is i=29)"
[1] "seed 9675 for j=187 out of 250 (i.e. j=7187 in [7001;7250], as job id is i=29)"
[1] "seed 43213 for j=188 out of 250 (i.e. j=7188 in [7001;7250], as job id is i=29)"
[1] "seed 68458 for j=189 out of 250 (i.e. j=7189 in [7001;7250], as job id is i=29)"
[1] "seed 46375 for j=190 out of 250 (i.e. j=7190 in [7001;7250], as job id is i=29)"
[1] "seed 13489 for j=191 out of 250 (i.e. j=7191 in [7001;7250], as job id is i=29)"
[1] "seed 70114 for j=192 out of 250 (i.e. j=7192 in [7001;7250], as job id is i=29)"
[1] "seed 27840 for j=193 out of 250 (i.e. j=7193 in [7001;7250], as job id is i=29)"
[1] "seed 93999 for j=194 out of 250 (i.e. j=7194 in [7001;7250], as job id is i=29)"
[1] "seed 99565 for j=195 out of 250 (i.e. j=7195 in [7001;7250], as job id is i=29)"
[1] "seed 59261 for j=196 out of 250 (i.e. j=7196 in [7001;7250], as job id is i=29)"
[1] "seed 36368 for j=197 out of 250 (i.e. j=7197 in [7001;7250], as job id is i=29)"
[1] "seed 18349 for j=198 out of 250 (i.e. j=7198 in [7001;7250], as job id is i=29)"
[1] "seed 57736 for j=199 out of 250 (i.e. j=7199 in [7001;7250], as job id is i=29)"
[1] "seed 18123 for j=200 out of 250 (i.e. j=7200 in [7001;7250], as job id is i=29)"
[1] "seed 54157 for j=201 out of 250 (i.e. j=7201 in [7001;7250], as job id is i=29)"
[1] "seed 85647 for j=202 out of 250 (i.e. j=7202 in [7001;7250], as job id is i=29)"
[1] "seed 88803 for j=203 out of 250 (i.e. j=7203 in [7001;7250], as job id is i=29)"
[1] "seed 34583 for j=204 out of 250 (i.e. j=7204 in [7001;7250], as job id is i=29)"
[1] "seed 2425 for j=205 out of 250 (i.e. j=7205 in [7001;7250], as job id is i=29)"
[1] "seed 16555 for j=206 out of 250 (i.e. j=7206 in [7001;7250], as job id is i=29)"
[1] "seed 6117 for j=207 out of 250 (i.e. j=7207 in [7001;7250], as job id is i=29)"
[1] "seed 25819 for j=208 out of 250 (i.e. j=7208 in [7001;7250], as job id is i=29)"
[1] "seed 74596 for j=209 out of 250 (i.e. j=7209 in [7001;7250], as job id is i=29)"
[1] "seed 73820 for j=210 out of 250 (i.e. j=7210 in [7001;7250], as job id is i=29)"
[1] "seed 14165 for j=211 out of 250 (i.e. j=7211 in [7001;7250], as job id is i=29)"
[1] "seed 15416 for j=212 out of 250 (i.e. j=7212 in [7001;7250], as job id is i=29)"
[1] "seed 34404 for j=213 out of 250 (i.e. j=7213 in [7001;7250], as job id is i=29)"
[1] "seed 57465 for j=214 out of 250 (i.e. j=7214 in [7001;7250], as job id is i=29)"
[1] "seed 49686 for j=215 out of 250 (i.e. j=7215 in [7001;7250], as job id is i=29)"
[1] "seed 48507 for j=216 out of 250 (i.e. j=7216 in [7001;7250], as job id is i=29)"
[1] "seed 23400 for j=217 out of 250 (i.e. j=7217 in [7001;7250], as job id is i=29)"
[1] "seed 32834 for j=218 out of 250 (i.e. j=7218 in [7001;7250], as job id is i=29)"
[1] "seed 64206 for j=219 out of 250 (i.e. j=7219 in [7001;7250], as job id is i=29)"
[1] "seed 34227 for j=220 out of 250 (i.e. j=7220 in [7001;7250], as job id is i=29)"
[1] "seed 49597 for j=221 out of 250 (i.e. j=7221 in [7001;7250], as job id is i=29)"
[1] "seed 72282 for j=222 out of 250 (i.e. j=7222 in [7001;7250], as job id is i=29)"
[1] "seed 59305 for j=223 out of 250 (i.e. j=7223 in [7001;7250], as job id is i=29)"
[1] "seed 48134 for j=224 out of 250 (i.e. j=7224 in [7001;7250], as job id is i=29)"
[1] "seed 471 for j=225 out of 250 (i.e. j=7225 in [7001;7250], as job id is i=29)"
[1] "seed 7882 for j=226 out of 250 (i.e. j=7226 in [7001;7250], as job id is i=29)"
[1] "seed 12974 for j=227 out of 250 (i.e. j=7227 in [7001;7250], as job id is i=29)"
[1] "seed 18422 for j=228 out of 250 (i.e. j=7228 in [7001;7250], as job id is i=29)"
[1] "seed 80187 for j=229 out of 250 (i.e. j=7229 in [7001;7250], as job id is i=29)"
[1] "seed 11908 for j=230 out of 250 (i.e. j=7230 in [7001;7250], as job id is i=29)"
[1] "seed 61062 for j=231 out of 250 (i.e. j=7231 in [7001;7250], as job id is i=29)"
[1] "seed 98660 for j=232 out of 250 (i.e. j=7232 in [7001;7250], as job id is i=29)"
[1] "seed 48693 for j=233 out of 250 (i.e. j=7233 in [7001;7250], as job id is i=29)"
[1] "seed 61363 for j=234 out of 250 (i.e. j=7234 in [7001;7250], as job id is i=29)"
[1] "seed 39381 for j=235 out of 250 (i.e. j=7235 in [7001;7250], as job id is i=29)"
[1] "seed 91404 for j=236 out of 250 (i.e. j=7236 in [7001;7250], as job id is i=29)"
[1] "seed 48266 for j=237 out of 250 (i.e. j=7237 in [7001;7250], as job id is i=29)"
[1] "seed 70903 for j=238 out of 250 (i.e. j=7238 in [7001;7250], as job id is i=29)"
[1] "seed 45313 for j=239 out of 250 (i.e. j=7239 in [7001;7250], as job id is i=29)"
[1] "seed 69778 for j=240 out of 250 (i.e. j=7240 in [7001;7250], as job id is i=29)"
[1] "seed 41975 for j=241 out of 250 (i.e. j=7241 in [7001;7250], as job id is i=29)"
[1] "seed 23231 for j=242 out of 250 (i.e. j=7242 in [7001;7250], as job id is i=29)"
[1] "seed 20053 for j=243 out of 250 (i.e. j=7243 in [7001;7250], as job id is i=29)"
[1] "seed 94839 for j=244 out of 250 (i.e. j=7244 in [7001;7250], as job id is i=29)"
[1] "seed 14635 for j=245 out of 250 (i.e. j=7245 in [7001;7250], as job id is i=29)"
[1] "seed 59901 for j=246 out of 250 (i.e. j=7246 in [7001;7250], as job id is i=29)"
[1] "seed 5464 for j=247 out of 250 (i.e. j=7247 in [7001;7250], as job id is i=29)"
[1] "seed 45094 for j=248 out of 250 (i.e. j=7248 in [7001;7250], as job id is i=29)"
[1] "seed 32828 for j=249 out of 250 (i.e. j=7249 in [7001;7250], as job id is i=29)"
[1] "seed 18374 for j=250 out of 250 (i.e. j=7250 in [7001;7250], as job id is i=29)"
There were 24 warnings (use warnings() to see them)
> rownames(RES) <- NULL
> save(RES,file=paste0(path.res,name,"-",iter_sim,".rda"))
> 
> ## * Summary results
> sessionInfo()
R version 4.1.2 (2021-11-01)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Red Hat Enterprise Linux 8.5 (Ootpa)

Matrix products: default
BLAS:   /opt/software/R/4.1.2/lib64/R/lib/libRblas.so
LAPACK: /opt/software/R/4.1.2/lib64/R/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] mvtnorm_1.1-3    DelayedGSD_0.0.3

loaded via a namespace (and not attached):
 [1] BB_2019.10-1     magrittr_2.0.3   tidyselect_1.1.2 munsell_0.5.0   
 [5] lattice_0.20-45  colorspace_2.0-3 xtable_1.8-4     R6_2.5.1        
 [9] quadprog_1.5-8   rlang_1.0.3      fansi_1.0.3      dplyr_1.0.9     
[13] grid_4.1.2       nlme_3.1-153     gtable_0.3.0     gsDesign_3.3.0  
[17] utf8_1.2.2       cli_3.3.0        ellipsis_0.3.2   tibble_3.1.7    
[21] lifecycle_1.0.1  crayon_1.5.1     purrr_0.3.4      ggplot2_3.3.6   
[25] tidyr_1.2.0      vctrs_0.4.1      glue_1.6.2       compiler_4.1.2  
[29] pillar_1.7.0     generics_0.1.3   scales_1.2.0     pkgconfig_2.0.3 
> summary(RES)
     method        stage           type             statistic     
 Min.   :1.0   Min.   :1.000   Length:1500        Min.   :0.0689  
 1st Qu.:1.0   1st Qu.:1.000   Class :character   1st Qu.:1.6282  
 Median :1.5   Median :1.000   Mode  :character   Median :2.3726  
 Mean   :1.5   Mean   :1.333                      Mean   :2.3326  
 3rd Qu.:2.0   3rd Qu.:2.000                      3rd Qu.:3.0854  
 Max.   :2.0   Max.   :2.000                      Max.   :4.7336  
                                                  NA's   :500     
  estimate_ML          se_ML             info           infoPC      
 Min.   :-0.3845   Min.   :0.3226   Min.   :4.297   Min.   :0.3358  
 1st Qu.: 0.5683   1st Qu.:0.3839   1st Qu.:5.772   1st Qu.:0.4510  
 Median : 0.8175   Median :0.4024   Median :6.254   Median :0.4887  
 Mean   : 0.8190   Mean   :0.4017   Mean   :6.362   Mean   :0.4972  
 3rd Qu.: 1.0702   3rd Qu.:0.4188   3rd Qu.:6.902   3rd Qu.:0.5393  
 Max.   : 1.9284   Max.   :0.4824   Max.   :9.611   Max.   :0.7510  
 NA's   :500       NA's   :1000     NA's   :156     NA's   :156     
   info.pred       infoPC.pred           uk              lk         
 Min.   : 4.675   Min.   :0.3653   Min.   :2.195   Min.   :-0.3453  
 1st Qu.: 6.040   1st Qu.:0.4720   1st Qu.:2.456   1st Qu.: 0.1562  
 Median : 6.568   Median :0.5132   Median :2.523   Median : 0.3091  
 Mean   : 6.676   Mean   :0.5217   Mean   :2.516   Mean   : 0.3319  
 3rd Qu.: 7.305   3rd Qu.:0.5708   3rd Qu.:2.578   3rd Qu.: 0.4968  
 Max.   :10.134   Max.   :0.7919   Max.   :2.768   Max.   : 1.2694  
 NA's   :1000     NA's   :1000     NA's   :1000    NA's   :1000     
   decision            reason            p.value_ML        lower_ML      
 Length:1500        Length:1500        Min.   :0.0000   Min.   :-0.9542  
 Class :character   Class :character   1st Qu.:0.0011   1st Qu.:-0.0284  
 Mode  :character   Mode  :character   Median :0.0063   Median : 0.1669  
                                       Mean   :0.0586   Mean   : 0.1380  
                                       3rd Qu.:0.0320   3rd Qu.: 0.3350  
                                       Max.   :0.9452   Max.   : 0.9390  
                                       NA's   :1000     NA's   :1000     
    upper_ML       p.value_MUE       lower_MUE         upper_MUE     
 Min.   :0.4333   Min.   :0.0000   Min.   :-0.9516   Min.   :0.6606  
 1st Qu.:1.2638   1st Qu.:0.0030   1st Qu.:-0.0379   1st Qu.:1.2642  
 Median :1.4961   Median :0.0071   Median : 0.0778   Median :1.4610  
 Mean   :1.5579   Mean   :0.0314   Mean   : 0.1073   Mean   :1.5711  
 3rd Qu.:1.8409   3rd Qu.:0.0171   3rd Qu.: 0.2057   3rd Qu.:1.8670  
 Max.   :2.8639   Max.   :0.6437   Max.   : 1.7245   Max.   :3.0387  
 NA's   :1000     NA's   :1000     NA's   :1000      NA's   :1000    
  estimate_MUE           ck          time.interim        seed      
 Min.   :-0.1299   Min.   :0.1672   Min.   :527.0   Min.   :  241  
 1st Qu.: 0.6212   1st Qu.:1.3992   1st Qu.:588.0   1st Qu.:23231  
 Median : 0.8097   Median :1.4541   Median :604.5   Median :45462  
 Mean   : 0.8550   Mean   :1.4276   Mean   :605.7   Mean   :48056  
 3rd Qu.: 1.0546   3rd Qu.:1.5116   3rd Qu.:624.0   3rd Qu.:71023  
 Max.   : 2.2680   Max.   :1.7565   Max.   :687.0   Max.   :99565  
 NA's   :1000      NA's   :656                                     
  nX1.interim     nX2.interim     nX3.interim  computation.time
 Min.   :146.0   Min.   :131.0   Min.   :119   Min.   :0.6730  
 1st Qu.:148.0   1st Qu.:135.0   1st Qu.:125   1st Qu.:0.8960  
 Median :149.0   Median :136.0   Median :127   Median :0.9715  
 Mean   :148.9   Mean   :136.5   Mean   :127   Mean   :1.0159  
 3rd Qu.:150.0   3rd Qu.:138.0   3rd Qu.:129   3rd Qu.:1.1320  
 Max.   :155.0   Max.   :142.0   Max.   :133   Max.   :3.7670  
                                                               
> 
> #----------------------------------------------------------------------
> ### BATCH_simuMain.R ends here
> 
> proc.time()
   user  system elapsed 
256.705   0.392 267.574 
