
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### BATCH_simuMain.R --- 
> #----------------------------------------------------------------------
> ## Author: Paul Blanche
> ## Created: Mar  5 2021 (10:56) 
> ## Version: 
> ## Last-Updated: jul  7 2022 (13:56) 
> ##           By: Brice Ozenne
> ##     Update #: 518
> #----------------------------------------------------------------------
> ## 
> ### Commentary: 
> ## 
> ### Change Log:
> #----------------------------------------------------------------------
> ## 
> ### Code:
> 
> ## ** BATCH loop
> ## cd /projects/biostat01/people/hpl802/DelayedGSD/
> ## for ITER in `seq 1 10`;
> ## do
> ## eval 'R CMD BATCH --vanilla "--args iter_sim='$ITER' n.iter_sim=10" BATCH_simuMain.R output/R-simuMain-'$ITER'.Rout &'
> ## done
> 
> ## [1] 1186669
> ## [2] 1186670
> ## [3] 1186671
> ## [4] 1186672
> ## [5] 1186673
> ## [6] 1186674
> ## [7] 1186675
> ## [8] 1186676
> ## [9] 1186677
> ## [10] 1186678
> 
> rm(list=ls())
>                                    # {{{ parameters
> ## * parameters
> name <- "ScenarioName" # To save the results
> method <- 1:2 # methods used to compute the boundaries
>                                         #---
> myseed <- 140786598
>                                         #--- to plan the trial ----
> NMC <- 250 # number of sequential simulations to run in parallel. Eg. with 250, then we can run 40 scripts in paralell to get N=10,000 runs in total.
> kMax <- 2  #max number of analyses (including final)
> alpha <- 0.025  #type I error (one sided)
> beta <- 0.2  #type II error
> informationRates <- c(0.5,1)  #planned  information rates
> rho_alpha <- 2  # rho parameter for alpha error spending function
> rho_beta <- 2  # rho parameter for beta error spending function
> ## deltaPower <- 0.75 # just to try another value when Id > Imax
> Id <- 0.55  #(expected) information rate at each decision analysis
> binding <- TRUE
>                                         #
>                                         #---- to generate data -----------
>                                         #
> block <- c(1,1,0,0) 
> allsd <- c(2.5,2.1,2.4) # sd, first from baseline measurement, then the two changes from baseline
> mean0 <- c(10,0,0) # mean placebo group (again, first is absolute value, then change from baseline)
> delta <- c(0,0.6,0.8) # treatment effect
> ar <- (0.86*2)*2 # orginial accrual rate from data from Corine is 0.86 per week, hence we multiply by 2 for by 14 days. As to low, we further multiply by 2
> cor011 <- -0.15 # ~ from data from Corine
> corij1 <- 0.68  # ~ from data from Corine
> cor0j1 <- -0.27  # ~ from data from Corine
> Miss11 <- 5/104 # miss both V1 and V2
> Miss12 <- 1/104 # miss V1 and but not V2
> Miss21 <- 6/104 # do not miss V1 and but miss V2
> Miss22 <- 92/104 # miss none
> PropForInterim <- 0.5 # Decide to have interim analysiz when PropForInterim % of all subjects have had the chance to have one follow-up measuement recorded in the data to be available for analysis.
> theDelta.t <- 1.50001 # time lag to process the data and make them ready to analyze after collecting them (unit is time between two follow-up visits)
> TimeFactor <- 14 ## number of days between two visits
>                                         #
>                                         #--- actually for both planing the trial  and generating data-----
>                                         #
>                                         #
> deltaPower <- abs(delta[3]) # effect (NOT Z-scale/unit, but outcome scale/unit!) that the study is powered for: should we choose ourselves or compute from other numbers above ???
> n <- ceiling(2*2*((allsd[3]/deltaPower)^2)*(qnorm(1-beta)-qnorm(alpha))^2) #104 with Corine's data # should we choose ourselves or compute from the above numbers ???
>                                         # inflate SS as required for interim
> 
>                                         # {{{ Set seeds for parallel computing and reproducibility
> ## * Seed
> args <- commandArgs(TRUE) ## BATCH MODE
> if(length(args)>0){
+     for (arg in args){
+         eval(parse(text=arg))
+     }
+ }else{ ## SLUMR
+     iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_ID"))
+     n.iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_COUNT"))
+ } ## interactive
> if(is.na(iter_sim)){iter_sim <- 1}
> if(is.na(n.iter_sim)){n.iter_sim <- 40}
> 
> set.seed(140786598)
> allseeds <- sample.int(n = 10*n.iter_sim*NMC, size = n.iter_sim*NMC, replace=FALSE) #x=1:(.Machine$integer.max) seems to be maximal possible
> # }}}
> 
> # {{{ set path to load and save and othe machine specific variables
> ## * path
> path <- "."
> path.res <- file.path(path,"Results","simuMain")
> if(dir.exists(path.res)==FALSE){
+     if(dir.exists(file.path(path,"Results"))==FALSE){
+     dir.create(file.path(path,"Results"))
+     }
+     dir.create(path.res)
+ }
> path.output <- file.path(path,"output","simuMain")
> if(dir.exists(path.output)==FALSE){
+     if(dir.exists(file.path(path,"output"))==FALSE){
+     dir.create(file.path(path,"output"))
+     }
+     dir.create(path.output)
+ }
> # }}}
> 
> 
> ## * libraries and functions
> library(DelayedGSD)
DelayedGSD version 0.0.3
> ## sourceDir <- function(path, trace = TRUE, ...) {
> ##     for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
> ##         if(trace) cat(nm,":")
> ##         source(file.path(path, nm), ...)
> ##         if(trace) cat("\n")
> ##     }
> ## }
> ## sourceDir(pathToLoad)
>     
> 
> ## * Compute inflation factor and sample size
> plannedB <- vector(mode = "list", length = 3)
> for(iMeth in method){ ## iMeth <- 1
+     plannedB[[iMeth]] <- CalcBoundaries(kMax=kMax,  
+                                         alpha=alpha, 
+                                         beta=beta,  
+                                         InfoR.i=informationRates,  
+                                         InfoR.d=c(Id,1),  
+                                         rho_alpha=rho_alpha,  
+                                         rho_beta=rho_beta,  
+                                         method=iMeth,  
+                                         cNotBelowFixedc=FALSE,
+                                         bindingFutility=binding,
+                                         delta=tail(delta,1))
+     ## summary(plannedB[[1]])
+     ## coef(plannedB[[iMeth]], type = "information")
+ }
Loading required namespace: gsDesign
Loading required package: mvtnorm
Loading required namespace: BB
> inflationFactor <- unlist(lapply(plannedB,function(iP){iP$planned$InflationFactor}))
> nGSD <- ceiling(n*inflationFactor)
> ##  plot(plannedB[[1]])
> 
> #
> # --- just to check---
> ## n
> ## InfoFixed <- ((qnorm(1-beta)-qnorm(alpha))/(deltaPower))^2
> ## InfoFixed
> ## n/(4*(allsd[3])^2)
> #---
> # }}}
> 
> 
> 
> 
> # {{{ technical details to loop
> RES <- NULL # initialize results to save
> allj <- ((iter_sim-1)*NMC + 1):(iter_sim*NMC) # indices of all iterations (replicates) for this job, accountng for the other jobs running in parallel
> # }}}
> 
> ## * Loop
> for(j in allj){ ## j <- 51 ## 5
+     startComp <- Sys.time()
+     myseedi <- allseeds[j]
+     # {{{ TRACE info (e.g. to check the Rout)
+     print(paste0("seed ",myseedi," for ","j=",which(j==allj)," out of ",NMC, " (i.e. j=",j," in [",(iter_sim-1)*NMC + 1,";",iter_sim*NMC,"], as job id is i=",iter_sim,")"))
+     # }}}
+     # {{{ Missing probabilities
+     MyMissProb <- matrix(c(Miss11,Miss12,Miss21,Miss22),ncol=2,nrow=2,byrow=TRUE) # to additionnally remove 1 more because some FASFL=N
+     colnames(MyMissProb) <- c("V2 missing","V2 not missing")
+     rownames(MyMissProb) <- c("V1 missing","V1 not missing")
+     # }}}
+ 
+                                         # {{{ generate data
+     ## ** simulate
+     res <- GenData(n=n, 
+                    N.fw=2,
+                    rand.block=block,
+                    allsd=allsd,
+                    mean0=mean0,
+                    delta=delta,
+                    ar=ar,
+                    cor.01.1=cor011,
+                    cor.ij.1=corij1,
+                    cor.0j.1=cor0j1,
+                    seed=myseedi,
+                    MissProb=MyMissProb,
+                    DigitsOutcome=2,
+                    TimeFactor=TimeFactor,
+                    DigitsTime=0
+                    )
+     d <- res$d
+     ## head(d,n=20)
+                                         # }}}
+                                         # {{{ reformat data like those of Corine
+     ## Make data long format
+     ## dd <- FormatAsCase(d)
+     ## head(dd)
+     ## summary(dd)
+                                         # }}}
+    
+                                         # {{{ make data available at interim
+                                         # Here we stop inclusion data collection for the interim analysis as soon as
+                                         # half of the participants have completed (or had the opportunity to complete) the follow-up 
+     thet <- d$t3[ceiling(n*PropForInterim)]
+     di <- SelectData(d,t=thet)
+     ## ddi <- FormatAsCase(di) # needed ????
+     ## head(d[d$id==52,])
+                                         # }}}
+     ## {{{ analyze data at at interim
+     ## ** interim
+     lmmI <- analyzeData(di, ddf = "nlme", data.decision = sum(d$t1 <= thet + theDelta.t*TimeFactor), getinfo = TRUE, trace = TRUE)
+     ## lmmI <- analyzeData(di, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     currentGSD <- vector(mode = "list", length = 3)
+     out.interim <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+ 
+         currentGSD[[iMeth]] <- update(plannedB[[iMeth]], delta = lmmI, trace = FALSE)
+ 
+         iConfint.interim <- confint(currentGSD[[iMeth]])
+         iInfo.interim <- coef(currentGSD[[iMeth]], type = "information")
+         iBoundary.interim <- coef(currentGSD[[iMeth]], type = "boundary")
+         iDecision.interim <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+         out.interim[[iMeth]] <-  data.frame(statistic = iConfint.interim[1,"statistic"],
+                                             estimate_ML = iConfint.interim[1,"estimate"],
+                                             se_ML = iConfint.interim[1,"se"],
+                                             info = iInfo.interim[1,"Interim"],
+                                             infoPC = iInfo.interim[1,"Interim.pc"],
+                                             info.pred = iInfo.interim[1,"Decision"],
+                                             infoPC.pred = iInfo.interim[1,"Decision.pc"],
+                                             uk = iBoundary.interim[1,"Ebound"],
+                                             lk = iBoundary.interim[1,"Fbound"],
+                                             decision = iDecision.interim["decision","stage 1"],
+                                             reason = iDecision.interim["reason.interim","stage 1"])
+     }
+     ## currentGSD[[1]]
+     ## plot(currentGSD[[1]])
+ 
+     ## ** decision
+     dDecision <- d[which(d$t1 <= thet + theDelta.t*TimeFactor),]
+     lmmD <- analyzeData(dDecision, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+     
+     out.decision <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+           
+         if(out.interim[[iMeth]]$decision == "stop"){
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, trace = FALSE)
+             ## plot(currentGSD[[iMeth]])
+ 
+             iConfint.decision <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.decision  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = iConfint.decision[1,"statistic"],
+                                                 p.value_ML = iConfint.decision[iConfint.decision$method == "ML","p.value"],
+                                                 lower_ML = iConfint.decision[iConfint.decision$method == "ML","lower"],
+                                                 upper_ML = iConfint.decision[iConfint.decision$method == "ML","upper"],
+                                                 estimate_ML = iConfint.decision[iConfint.decision$method == "ML","estimate"],
+                                                 p.value_MUE = iConfint.decision[iConfint.decision$method == "MUE","p.value"],
+                                                 lower_MUE = iConfint.decision[iConfint.decision$method == "MUE","lower"],
+                                                 upper_MUE = iConfint.decision[iConfint.decision$method == "MUE","upper"],
+                                                 estimate_MUE = iConfint.decision[iConfint.decision$method == "MUE","estimate"],
+                                                 info = iInfo.decision[1,"Interim"],
+                                                 infoPC = iInfo.decision[1,"Interim.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = unname(iDecision.decision["decision","stage 2"])
+                                                 )
+ 
+         }else{
+             ## update information
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, k = 1, type.k = "decision", trace = FALSE)
+ 
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = NA,
+                                                 p.value_ML = NA,
+                                                 lower_ML = NA,
+                                                 upper_ML = NA,
+                                                 estimate_ML = NA,
+                                                 p.value_MUE = NA,
+                                                 lower_MUE = NA,
+                                                 upper_MUE = NA,
+                                                 estimate_MUE = NA,
+                                                 info = iInfo.decision[1,"Decision"],
+                                                 infoPC = iInfo.decision[1,"Decision.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = NA)
+         }
+     }
+                                         # }}}
+                                         # {{{ Analyze data at decision
+ 
+     ## ** finale
+     dFinal <- d
+     lmmF <- analyzeData(dFinal, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     out.final <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+         if(out.interim[[iMeth]]$decision == "stop"){
+             out.final[[iMeth]] <- data.frame(statistic = NA,
+                                              p.value_ML = NA,
+                                              lower_ML = NA,
+                                              upper_ML = NA,
+                                              estimate_ML = NA,
+                                              p.value_MUE = NA,
+                                              lower_MUE = NA,
+                                              upper_MUE = NA,
+                                              estimate_MUE = NA,
+                                              info = NA,
+                                              infoPC = NA,
+                                              ck = NA,
+                                              decision = NA)
+ 
+         }else{
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmF, trace = FALSE)
+ 
+             ## plot(test)
+             ## summary(test)
+             iConfint.final <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.final <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.final <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.final  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.final[[iMeth]] <- data.frame(statistic = iConfint.final[1,"statistic"],
+                                              p.value_ML = iConfint.final[iConfint.final$method == "ML","p.value"],
+                                              lower_ML = iConfint.final[iConfint.final$method == "ML","lower"],
+                                              upper_ML = iConfint.final[iConfint.final$method == "ML","upper"],
+                                              estimate_ML = iConfint.final[iConfint.final$method == "ML","estimate"],
+                                              p.value_MUE = iConfint.final[iConfint.final$method == "MUE","p.value"],
+                                              lower_MUE = iConfint.final[iConfint.final$method == "MUE","lower"],
+                                              upper_MUE = iConfint.final[iConfint.final$method == "MUE","upper"],
+                                              estimate_MUE = iConfint.final[iConfint.final$method == "MUE","estimate"],
+                                              info = iInfo.final[1,"Interim"],
+                                              infoPC = iInfo.final[1,"Interim.pc"],
+                                              ck = iBoundary.final[1,"Cbound"],
+                                              decision = unname(coef(currentGSD[[iMeth]], type = "decision")["decision","stage 2"])
+                                              )
+         }
+     }
+                                         # }}}
+ 
+     stopComp <- Sys.time()
+                                         # {{{ Save results
+ 
+     outMerge <- do.call(rbind,lapply(method, function(iMeth){
+         iNames <- unique(c(names(out.interim[[iMeth]]),names(out.decision[[iMeth]]),names(out.final[[iMeth]])))
+         iMerge <- data.frame(matrix(NA, ncol = length(iNames)+3, nrow = 3, dimnames = list(NULL, c("method", "stage", "type", iNames))))
+         iMerge[1,c("method","stage","type",names(out.interim[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "interim", out.interim[[iMeth]]) 
+         iMerge[2,c("method","stage","type",names(out.decision[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "decision", out.decision[[iMeth]]) 
+         iMerge[3,c("method","stage","type",names(out.final[[iMeth]]))] <- data.frame(method = iMeth, stage = 2, type = "final", out.final[[iMeth]])
+         return(iMerge)
+     }))
+ 
+     ## outMerge[outMerge$method==3,]
+ 
+     out <- cbind(
+         ## results
+         outMerge,
+         ## simulation details
+         time.interim = thet,
+         seed=myseedi,             
+         nX1.interim = sum(!is.na(di$X1)),
+         nX2.interim = sum(!is.na(di$X2)),
+         nX3.interim = sum(!is.na(di$X3)),
+         ## computation time
+         computation.time=as.double(round(difftime(stopComp,startComp,units="secs"),3))
+     )
+     ## names(out) <- myColNames
+     RES <- rbind(RES,out)
+     save(RES,file=paste0(path.res,name,"(tempo)-",iter_sim,".rda"))
+                                         # }}}
+ }
[1] "seed 39356 for j=1 out of 250 (i.e. j=4751 in [4751;5000], as job id is i=20)"
Loading required namespace: nlme
[1] "seed 57014 for j=2 out of 250 (i.e. j=4752 in [4751;5000], as job id is i=20)"
[1] "seed 36768 for j=3 out of 250 (i.e. j=4753 in [4751;5000], as job id is i=20)"
[1] "seed 57 for j=4 out of 250 (i.e. j=4754 in [4751;5000], as job id is i=20)"
[1] "seed 50219 for j=5 out of 250 (i.e. j=4755 in [4751;5000], as job id is i=20)"
[1] "seed 78222 for j=6 out of 250 (i.e. j=4756 in [4751;5000], as job id is i=20)"
[1] "seed 80056 for j=7 out of 250 (i.e. j=4757 in [4751;5000], as job id is i=20)"
[1] "seed 13359 for j=8 out of 250 (i.e. j=4758 in [4751;5000], as job id is i=20)"
[1] "seed 79827 for j=9 out of 250 (i.e. j=4759 in [4751;5000], as job id is i=20)"
[1] "seed 22376 for j=10 out of 250 (i.e. j=4760 in [4751;5000], as job id is i=20)"
[1] "seed 49608 for j=11 out of 250 (i.e. j=4761 in [4751;5000], as job id is i=20)"
[1] "seed 28716 for j=12 out of 250 (i.e. j=4762 in [4751;5000], as job id is i=20)"
[1] "seed 63697 for j=13 out of 250 (i.e. j=4763 in [4751;5000], as job id is i=20)"
[1] "seed 74904 for j=14 out of 250 (i.e. j=4764 in [4751;5000], as job id is i=20)"
[1] "seed 28767 for j=15 out of 250 (i.e. j=4765 in [4751;5000], as job id is i=20)"
[1] "seed 67373 for j=16 out of 250 (i.e. j=4766 in [4751;5000], as job id is i=20)"
[1] "seed 8306 for j=17 out of 250 (i.e. j=4767 in [4751;5000], as job id is i=20)"
[1] "seed 98756 for j=18 out of 250 (i.e. j=4768 in [4751;5000], as job id is i=20)"
[1] "seed 36213 for j=19 out of 250 (i.e. j=4769 in [4751;5000], as job id is i=20)"
[1] "seed 63887 for j=20 out of 250 (i.e. j=4770 in [4751;5000], as job id is i=20)"
[1] "seed 68828 for j=21 out of 250 (i.e. j=4771 in [4751;5000], as job id is i=20)"
[1] "seed 48365 for j=22 out of 250 (i.e. j=4772 in [4751;5000], as job id is i=20)"
[1] "seed 21332 for j=23 out of 250 (i.e. j=4773 in [4751;5000], as job id is i=20)"
[1] "seed 22626 for j=24 out of 250 (i.e. j=4774 in [4751;5000], as job id is i=20)"
[1] "seed 21737 for j=25 out of 250 (i.e. j=4775 in [4751;5000], as job id is i=20)"
[1] "seed 85285 for j=26 out of 250 (i.e. j=4776 in [4751;5000], as job id is i=20)"
[1] "seed 67435 for j=27 out of 250 (i.e. j=4777 in [4751;5000], as job id is i=20)"
[1] "seed 78154 for j=28 out of 250 (i.e. j=4778 in [4751;5000], as job id is i=20)"
[1] "seed 38168 for j=29 out of 250 (i.e. j=4779 in [4751;5000], as job id is i=20)"
[1] "seed 52191 for j=30 out of 250 (i.e. j=4780 in [4751;5000], as job id is i=20)"
[1] "seed 50903 for j=31 out of 250 (i.e. j=4781 in [4751;5000], as job id is i=20)"
[1] "seed 1834 for j=32 out of 250 (i.e. j=4782 in [4751;5000], as job id is i=20)"
[1] "seed 70961 for j=33 out of 250 (i.e. j=4783 in [4751;5000], as job id is i=20)"
[1] "seed 13084 for j=34 out of 250 (i.e. j=4784 in [4751;5000], as job id is i=20)"
[1] "seed 55788 for j=35 out of 250 (i.e. j=4785 in [4751;5000], as job id is i=20)"
[1] "seed 8379 for j=36 out of 250 (i.e. j=4786 in [4751;5000], as job id is i=20)"
[1] "seed 8767 for j=37 out of 250 (i.e. j=4787 in [4751;5000], as job id is i=20)"
[1] "seed 33927 for j=38 out of 250 (i.e. j=4788 in [4751;5000], as job id is i=20)"
[1] "seed 41456 for j=39 out of 250 (i.e. j=4789 in [4751;5000], as job id is i=20)"
[1] "seed 34189 for j=40 out of 250 (i.e. j=4790 in [4751;5000], as job id is i=20)"
[1] "seed 20823 for j=41 out of 250 (i.e. j=4791 in [4751;5000], as job id is i=20)"
[1] "seed 17085 for j=42 out of 250 (i.e. j=4792 in [4751;5000], as job id is i=20)"
[1] "seed 98959 for j=43 out of 250 (i.e. j=4793 in [4751;5000], as job id is i=20)"
[1] "seed 95471 for j=44 out of 250 (i.e. j=4794 in [4751;5000], as job id is i=20)"
[1] "seed 93371 for j=45 out of 250 (i.e. j=4795 in [4751;5000], as job id is i=20)"
[1] "seed 35816 for j=46 out of 250 (i.e. j=4796 in [4751;5000], as job id is i=20)"
[1] "seed 23082 for j=47 out of 250 (i.e. j=4797 in [4751;5000], as job id is i=20)"
[1] "seed 50052 for j=48 out of 250 (i.e. j=4798 in [4751;5000], as job id is i=20)"
[1] "seed 45915 for j=49 out of 250 (i.e. j=4799 in [4751;5000], as job id is i=20)"
[1] "seed 16166 for j=50 out of 250 (i.e. j=4800 in [4751;5000], as job id is i=20)"
[1] "seed 81038 for j=51 out of 250 (i.e. j=4801 in [4751;5000], as job id is i=20)"
[1] "seed 76064 for j=52 out of 250 (i.e. j=4802 in [4751;5000], as job id is i=20)"
[1] "seed 93089 for j=53 out of 250 (i.e. j=4803 in [4751;5000], as job id is i=20)"
[1] "seed 18681 for j=54 out of 250 (i.e. j=4804 in [4751;5000], as job id is i=20)"
[1] "seed 15611 for j=55 out of 250 (i.e. j=4805 in [4751;5000], as job id is i=20)"
[1] "seed 96390 for j=56 out of 250 (i.e. j=4806 in [4751;5000], as job id is i=20)"
[1] "seed 2188 for j=57 out of 250 (i.e. j=4807 in [4751;5000], as job id is i=20)"
[1] "seed 6885 for j=58 out of 250 (i.e. j=4808 in [4751;5000], as job id is i=20)"
[1] "seed 78891 for j=59 out of 250 (i.e. j=4809 in [4751;5000], as job id is i=20)"
[1] "seed 34173 for j=60 out of 250 (i.e. j=4810 in [4751;5000], as job id is i=20)"
[1] "seed 65156 for j=61 out of 250 (i.e. j=4811 in [4751;5000], as job id is i=20)"
[1] "seed 46306 for j=62 out of 250 (i.e. j=4812 in [4751;5000], as job id is i=20)"
[1] "seed 87742 for j=63 out of 250 (i.e. j=4813 in [4751;5000], as job id is i=20)"
[1] "seed 62516 for j=64 out of 250 (i.e. j=4814 in [4751;5000], as job id is i=20)"
[1] "seed 24779 for j=65 out of 250 (i.e. j=4815 in [4751;5000], as job id is i=20)"
[1] "seed 71433 for j=66 out of 250 (i.e. j=4816 in [4751;5000], as job id is i=20)"
[1] "seed 50363 for j=67 out of 250 (i.e. j=4817 in [4751;5000], as job id is i=20)"
[1] "seed 33067 for j=68 out of 250 (i.e. j=4818 in [4751;5000], as job id is i=20)"
[1] "seed 65141 for j=69 out of 250 (i.e. j=4819 in [4751;5000], as job id is i=20)"
[1] "seed 88832 for j=70 out of 250 (i.e. j=4820 in [4751;5000], as job id is i=20)"
[1] "seed 50246 for j=71 out of 250 (i.e. j=4821 in [4751;5000], as job id is i=20)"
[1] "seed 49632 for j=72 out of 250 (i.e. j=4822 in [4751;5000], as job id is i=20)"
[1] "seed 15391 for j=73 out of 250 (i.e. j=4823 in [4751;5000], as job id is i=20)"
[1] "seed 84393 for j=74 out of 250 (i.e. j=4824 in [4751;5000], as job id is i=20)"
[1] "seed 50648 for j=75 out of 250 (i.e. j=4825 in [4751;5000], as job id is i=20)"
[1] "seed 56804 for j=76 out of 250 (i.e. j=4826 in [4751;5000], as job id is i=20)"
[1] "seed 12780 for j=77 out of 250 (i.e. j=4827 in [4751;5000], as job id is i=20)"
[1] "seed 24194 for j=78 out of 250 (i.e. j=4828 in [4751;5000], as job id is i=20)"
[1] "seed 44358 for j=79 out of 250 (i.e. j=4829 in [4751;5000], as job id is i=20)"
[1] "seed 3853 for j=80 out of 250 (i.e. j=4830 in [4751;5000], as job id is i=20)"
[1] "seed 63607 for j=81 out of 250 (i.e. j=4831 in [4751;5000], as job id is i=20)"
[1] "seed 67847 for j=82 out of 250 (i.e. j=4832 in [4751;5000], as job id is i=20)"
[1] "seed 90895 for j=83 out of 250 (i.e. j=4833 in [4751;5000], as job id is i=20)"
[1] "seed 63127 for j=84 out of 250 (i.e. j=4834 in [4751;5000], as job id is i=20)"
[1] "seed 78648 for j=85 out of 250 (i.e. j=4835 in [4751;5000], as job id is i=20)"
[1] "seed 69487 for j=86 out of 250 (i.e. j=4836 in [4751;5000], as job id is i=20)"
[1] "seed 44255 for j=87 out of 250 (i.e. j=4837 in [4751;5000], as job id is i=20)"
[1] "seed 25022 for j=88 out of 250 (i.e. j=4838 in [4751;5000], as job id is i=20)"
[1] "seed 64510 for j=89 out of 250 (i.e. j=4839 in [4751;5000], as job id is i=20)"
[1] "seed 61171 for j=90 out of 250 (i.e. j=4840 in [4751;5000], as job id is i=20)"
[1] "seed 29887 for j=91 out of 250 (i.e. j=4841 in [4751;5000], as job id is i=20)"
[1] "seed 39805 for j=92 out of 250 (i.e. j=4842 in [4751;5000], as job id is i=20)"
[1] "seed 91048 for j=93 out of 250 (i.e. j=4843 in [4751;5000], as job id is i=20)"
[1] "seed 34844 for j=94 out of 250 (i.e. j=4844 in [4751;5000], as job id is i=20)"
[1] "seed 46923 for j=95 out of 250 (i.e. j=4845 in [4751;5000], as job id is i=20)"
[1] "seed 69423 for j=96 out of 250 (i.e. j=4846 in [4751;5000], as job id is i=20)"
[1] "seed 64358 for j=97 out of 250 (i.e. j=4847 in [4751;5000], as job id is i=20)"
[1] "seed 15995 for j=98 out of 250 (i.e. j=4848 in [4751;5000], as job id is i=20)"
[1] "seed 6009 for j=99 out of 250 (i.e. j=4849 in [4751;5000], as job id is i=20)"
[1] "seed 79192 for j=100 out of 250 (i.e. j=4850 in [4751;5000], as job id is i=20)"
[1] "seed 64843 for j=101 out of 250 (i.e. j=4851 in [4751;5000], as job id is i=20)"
[1] "seed 77639 for j=102 out of 250 (i.e. j=4852 in [4751;5000], as job id is i=20)"
[1] "seed 65532 for j=103 out of 250 (i.e. j=4853 in [4751;5000], as job id is i=20)"
[1] "seed 82138 for j=104 out of 250 (i.e. j=4854 in [4751;5000], as job id is i=20)"
[1] "seed 54634 for j=105 out of 250 (i.e. j=4855 in [4751;5000], as job id is i=20)"
[1] "seed 55474 for j=106 out of 250 (i.e. j=4856 in [4751;5000], as job id is i=20)"
[1] "seed 42656 for j=107 out of 250 (i.e. j=4857 in [4751;5000], as job id is i=20)"
[1] "seed 13164 for j=108 out of 250 (i.e. j=4858 in [4751;5000], as job id is i=20)"
[1] "seed 96147 for j=109 out of 250 (i.e. j=4859 in [4751;5000], as job id is i=20)"
[1] "seed 80085 for j=110 out of 250 (i.e. j=4860 in [4751;5000], as job id is i=20)"
[1] "seed 91467 for j=111 out of 250 (i.e. j=4861 in [4751;5000], as job id is i=20)"
[1] "seed 2722 for j=112 out of 250 (i.e. j=4862 in [4751;5000], as job id is i=20)"
[1] "seed 10810 for j=113 out of 250 (i.e. j=4863 in [4751;5000], as job id is i=20)"
[1] "seed 35629 for j=114 out of 250 (i.e. j=4864 in [4751;5000], as job id is i=20)"
[1] "seed 38537 for j=115 out of 250 (i.e. j=4865 in [4751;5000], as job id is i=20)"
[1] "seed 79572 for j=116 out of 250 (i.e. j=4866 in [4751;5000], as job id is i=20)"
[1] "seed 69593 for j=117 out of 250 (i.e. j=4867 in [4751;5000], as job id is i=20)"
[1] "seed 33797 for j=118 out of 250 (i.e. j=4868 in [4751;5000], as job id is i=20)"
[1] "seed 87573 for j=119 out of 250 (i.e. j=4869 in [4751;5000], as job id is i=20)"
[1] "seed 16828 for j=120 out of 250 (i.e. j=4870 in [4751;5000], as job id is i=20)"
[1] "seed 77491 for j=121 out of 250 (i.e. j=4871 in [4751;5000], as job id is i=20)"
[1] "seed 48558 for j=122 out of 250 (i.e. j=4872 in [4751;5000], as job id is i=20)"
[1] "seed 63648 for j=123 out of 250 (i.e. j=4873 in [4751;5000], as job id is i=20)"
[1] "seed 98313 for j=124 out of 250 (i.e. j=4874 in [4751;5000], as job id is i=20)"
[1] "seed 8722 for j=125 out of 250 (i.e. j=4875 in [4751;5000], as job id is i=20)"
[1] "seed 49843 for j=126 out of 250 (i.e. j=4876 in [4751;5000], as job id is i=20)"
[1] "seed 35552 for j=127 out of 250 (i.e. j=4877 in [4751;5000], as job id is i=20)"
[1] "seed 89537 for j=128 out of 250 (i.e. j=4878 in [4751;5000], as job id is i=20)"
[1] "seed 82053 for j=129 out of 250 (i.e. j=4879 in [4751;5000], as job id is i=20)"
[1] "seed 4912 for j=130 out of 250 (i.e. j=4880 in [4751;5000], as job id is i=20)"
[1] "seed 20181 for j=131 out of 250 (i.e. j=4881 in [4751;5000], as job id is i=20)"
[1] "seed 50729 for j=132 out of 250 (i.e. j=4882 in [4751;5000], as job id is i=20)"
[1] "seed 68655 for j=133 out of 250 (i.e. j=4883 in [4751;5000], as job id is i=20)"
[1] "seed 71945 for j=134 out of 250 (i.e. j=4884 in [4751;5000], as job id is i=20)"
[1] "seed 63390 for j=135 out of 250 (i.e. j=4885 in [4751;5000], as job id is i=20)"
[1] "seed 53372 for j=136 out of 250 (i.e. j=4886 in [4751;5000], as job id is i=20)"
[1] "seed 96587 for j=137 out of 250 (i.e. j=4887 in [4751;5000], as job id is i=20)"
[1] "seed 57976 for j=138 out of 250 (i.e. j=4888 in [4751;5000], as job id is i=20)"
[1] "seed 65702 for j=139 out of 250 (i.e. j=4889 in [4751;5000], as job id is i=20)"
[1] "seed 30063 for j=140 out of 250 (i.e. j=4890 in [4751;5000], as job id is i=20)"
[1] "seed 81519 for j=141 out of 250 (i.e. j=4891 in [4751;5000], as job id is i=20)"
[1] "seed 58082 for j=142 out of 250 (i.e. j=4892 in [4751;5000], as job id is i=20)"
[1] "seed 8702 for j=143 out of 250 (i.e. j=4893 in [4751;5000], as job id is i=20)"
[1] "seed 97245 for j=144 out of 250 (i.e. j=4894 in [4751;5000], as job id is i=20)"
[1] "seed 4108 for j=145 out of 250 (i.e. j=4895 in [4751;5000], as job id is i=20)"
[1] "seed 28896 for j=146 out of 250 (i.e. j=4896 in [4751;5000], as job id is i=20)"
[1] "seed 64043 for j=147 out of 250 (i.e. j=4897 in [4751;5000], as job id is i=20)"
[1] "seed 52770 for j=148 out of 250 (i.e. j=4898 in [4751;5000], as job id is i=20)"
[1] "seed 38918 for j=149 out of 250 (i.e. j=4899 in [4751;5000], as job id is i=20)"
[1] "seed 17633 for j=150 out of 250 (i.e. j=4900 in [4751;5000], as job id is i=20)"
[1] "seed 91984 for j=151 out of 250 (i.e. j=4901 in [4751;5000], as job id is i=20)"
[1] "seed 41078 for j=152 out of 250 (i.e. j=4902 in [4751;5000], as job id is i=20)"
[1] "seed 19654 for j=153 out of 250 (i.e. j=4903 in [4751;5000], as job id is i=20)"
[1] "seed 69051 for j=154 out of 250 (i.e. j=4904 in [4751;5000], as job id is i=20)"
[1] "seed 70554 for j=155 out of 250 (i.e. j=4905 in [4751;5000], as job id is i=20)"
[1] "seed 57096 for j=156 out of 250 (i.e. j=4906 in [4751;5000], as job id is i=20)"
[1] "seed 95577 for j=157 out of 250 (i.e. j=4907 in [4751;5000], as job id is i=20)"
[1] "seed 86215 for j=158 out of 250 (i.e. j=4908 in [4751;5000], as job id is i=20)"
[1] "seed 64411 for j=159 out of 250 (i.e. j=4909 in [4751;5000], as job id is i=20)"
[1] "seed 4204 for j=160 out of 250 (i.e. j=4910 in [4751;5000], as job id is i=20)"
[1] "seed 49587 for j=161 out of 250 (i.e. j=4911 in [4751;5000], as job id is i=20)"
[1] "seed 20331 for j=162 out of 250 (i.e. j=4912 in [4751;5000], as job id is i=20)"
[1] "seed 9363 for j=163 out of 250 (i.e. j=4913 in [4751;5000], as job id is i=20)"
[1] "seed 99190 for j=164 out of 250 (i.e. j=4914 in [4751;5000], as job id is i=20)"
[1] "seed 21888 for j=165 out of 250 (i.e. j=4915 in [4751;5000], as job id is i=20)"
[1] "seed 3634 for j=166 out of 250 (i.e. j=4916 in [4751;5000], as job id is i=20)"
[1] "seed 98344 for j=167 out of 250 (i.e. j=4917 in [4751;5000], as job id is i=20)"
[1] "seed 15252 for j=168 out of 250 (i.e. j=4918 in [4751;5000], as job id is i=20)"
[1] "seed 3394 for j=169 out of 250 (i.e. j=4919 in [4751;5000], as job id is i=20)"
[1] "seed 32635 for j=170 out of 250 (i.e. j=4920 in [4751;5000], as job id is i=20)"
[1] "seed 51409 for j=171 out of 250 (i.e. j=4921 in [4751;5000], as job id is i=20)"
[1] "seed 48948 for j=172 out of 250 (i.e. j=4922 in [4751;5000], as job id is i=20)"
[1] "seed 27681 for j=173 out of 250 (i.e. j=4923 in [4751;5000], as job id is i=20)"
[1] "seed 13908 for j=174 out of 250 (i.e. j=4924 in [4751;5000], as job id is i=20)"
[1] "seed 20830 for j=175 out of 250 (i.e. j=4925 in [4751;5000], as job id is i=20)"
[1] "seed 36807 for j=176 out of 250 (i.e. j=4926 in [4751;5000], as job id is i=20)"
[1] "seed 45372 for j=177 out of 250 (i.e. j=4927 in [4751;5000], as job id is i=20)"
[1] "seed 78556 for j=178 out of 250 (i.e. j=4928 in [4751;5000], as job id is i=20)"
[1] "seed 28036 for j=179 out of 250 (i.e. j=4929 in [4751;5000], as job id is i=20)"
[1] "seed 29007 for j=180 out of 250 (i.e. j=4930 in [4751;5000], as job id is i=20)"
[1] "seed 77739 for j=181 out of 250 (i.e. j=4931 in [4751;5000], as job id is i=20)"
[1] "seed 84936 for j=182 out of 250 (i.e. j=4932 in [4751;5000], as job id is i=20)"
[1] "seed 48532 for j=183 out of 250 (i.e. j=4933 in [4751;5000], as job id is i=20)"
[1] "seed 69175 for j=184 out of 250 (i.e. j=4934 in [4751;5000], as job id is i=20)"
[1] "seed 32098 for j=185 out of 250 (i.e. j=4935 in [4751;5000], as job id is i=20)"
[1] "seed 80668 for j=186 out of 250 (i.e. j=4936 in [4751;5000], as job id is i=20)"
[1] "seed 97870 for j=187 out of 250 (i.e. j=4937 in [4751;5000], as job id is i=20)"
[1] "seed 37797 for j=188 out of 250 (i.e. j=4938 in [4751;5000], as job id is i=20)"
[1] "seed 66775 for j=189 out of 250 (i.e. j=4939 in [4751;5000], as job id is i=20)"
[1] "seed 84108 for j=190 out of 250 (i.e. j=4940 in [4751;5000], as job id is i=20)"
[1] "seed 92854 for j=191 out of 250 (i.e. j=4941 in [4751;5000], as job id is i=20)"
[1] "seed 42969 for j=192 out of 250 (i.e. j=4942 in [4751;5000], as job id is i=20)"
[1] "seed 94987 for j=193 out of 250 (i.e. j=4943 in [4751;5000], as job id is i=20)"
[1] "seed 37152 for j=194 out of 250 (i.e. j=4944 in [4751;5000], as job id is i=20)"
[1] "seed 62927 for j=195 out of 250 (i.e. j=4945 in [4751;5000], as job id is i=20)"
[1] "seed 51746 for j=196 out of 250 (i.e. j=4946 in [4751;5000], as job id is i=20)"
[1] "seed 65504 for j=197 out of 250 (i.e. j=4947 in [4751;5000], as job id is i=20)"
[1] "seed 6549 for j=198 out of 250 (i.e. j=4948 in [4751;5000], as job id is i=20)"
[1] "seed 6682 for j=199 out of 250 (i.e. j=4949 in [4751;5000], as job id is i=20)"
[1] "seed 86144 for j=200 out of 250 (i.e. j=4950 in [4751;5000], as job id is i=20)"
[1] "seed 29264 for j=201 out of 250 (i.e. j=4951 in [4751;5000], as job id is i=20)"
[1] "seed 84162 for j=202 out of 250 (i.e. j=4952 in [4751;5000], as job id is i=20)"
[1] "seed 56343 for j=203 out of 250 (i.e. j=4953 in [4751;5000], as job id is i=20)"
[1] "seed 73889 for j=204 out of 250 (i.e. j=4954 in [4751;5000], as job id is i=20)"
[1] "seed 83048 for j=205 out of 250 (i.e. j=4955 in [4751;5000], as job id is i=20)"
[1] "seed 48625 for j=206 out of 250 (i.e. j=4956 in [4751;5000], as job id is i=20)"
[1] "seed 43789 for j=207 out of 250 (i.e. j=4957 in [4751;5000], as job id is i=20)"
[1] "seed 56531 for j=208 out of 250 (i.e. j=4958 in [4751;5000], as job id is i=20)"
[1] "seed 30050 for j=209 out of 250 (i.e. j=4959 in [4751;5000], as job id is i=20)"
[1] "seed 99396 for j=210 out of 250 (i.e. j=4960 in [4751;5000], as job id is i=20)"
[1] "seed 6888 for j=211 out of 250 (i.e. j=4961 in [4751;5000], as job id is i=20)"
[1] "seed 18125 for j=212 out of 250 (i.e. j=4962 in [4751;5000], as job id is i=20)"
[1] "seed 89856 for j=213 out of 250 (i.e. j=4963 in [4751;5000], as job id is i=20)"
[1] "seed 15808 for j=214 out of 250 (i.e. j=4964 in [4751;5000], as job id is i=20)"
[1] "seed 8188 for j=215 out of 250 (i.e. j=4965 in [4751;5000], as job id is i=20)"
[1] "seed 30854 for j=216 out of 250 (i.e. j=4966 in [4751;5000], as job id is i=20)"
[1] "seed 33601 for j=217 out of 250 (i.e. j=4967 in [4751;5000], as job id is i=20)"
[1] "seed 79559 for j=218 out of 250 (i.e. j=4968 in [4751;5000], as job id is i=20)"
[1] "seed 37329 for j=219 out of 250 (i.e. j=4969 in [4751;5000], as job id is i=20)"
[1] "seed 88706 for j=220 out of 250 (i.e. j=4970 in [4751;5000], as job id is i=20)"
[1] "seed 73123 for j=221 out of 250 (i.e. j=4971 in [4751;5000], as job id is i=20)"
[1] "seed 70710 for j=222 out of 250 (i.e. j=4972 in [4751;5000], as job id is i=20)"
[1] "seed 78320 for j=223 out of 250 (i.e. j=4973 in [4751;5000], as job id is i=20)"
[1] "seed 81419 for j=224 out of 250 (i.e. j=4974 in [4751;5000], as job id is i=20)"
[1] "seed 23230 for j=225 out of 250 (i.e. j=4975 in [4751;5000], as job id is i=20)"
[1] "seed 23431 for j=226 out of 250 (i.e. j=4976 in [4751;5000], as job id is i=20)"
[1] "seed 63627 for j=227 out of 250 (i.e. j=4977 in [4751;5000], as job id is i=20)"
[1] "seed 17495 for j=228 out of 250 (i.e. j=4978 in [4751;5000], as job id is i=20)"
[1] "seed 69090 for j=229 out of 250 (i.e. j=4979 in [4751;5000], as job id is i=20)"
[1] "seed 11117 for j=230 out of 250 (i.e. j=4980 in [4751;5000], as job id is i=20)"
[1] "seed 89411 for j=231 out of 250 (i.e. j=4981 in [4751;5000], as job id is i=20)"
[1] "seed 50519 for j=232 out of 250 (i.e. j=4982 in [4751;5000], as job id is i=20)"
[1] "seed 26333 for j=233 out of 250 (i.e. j=4983 in [4751;5000], as job id is i=20)"
[1] "seed 48565 for j=234 out of 250 (i.e. j=4984 in [4751;5000], as job id is i=20)"
[1] "seed 68067 for j=235 out of 250 (i.e. j=4985 in [4751;5000], as job id is i=20)"
[1] "seed 45563 for j=236 out of 250 (i.e. j=4986 in [4751;5000], as job id is i=20)"
[1] "seed 76466 for j=237 out of 250 (i.e. j=4987 in [4751;5000], as job id is i=20)"
[1] "seed 43693 for j=238 out of 250 (i.e. j=4988 in [4751;5000], as job id is i=20)"
[1] "seed 65556 for j=239 out of 250 (i.e. j=4989 in [4751;5000], as job id is i=20)"
[1] "seed 92034 for j=240 out of 250 (i.e. j=4990 in [4751;5000], as job id is i=20)"
[1] "seed 51804 for j=241 out of 250 (i.e. j=4991 in [4751;5000], as job id is i=20)"
[1] "seed 62281 for j=242 out of 250 (i.e. j=4992 in [4751;5000], as job id is i=20)"
[1] "seed 51312 for j=243 out of 250 (i.e. j=4993 in [4751;5000], as job id is i=20)"
[1] "seed 44135 for j=244 out of 250 (i.e. j=4994 in [4751;5000], as job id is i=20)"
[1] "seed 58519 for j=245 out of 250 (i.e. j=4995 in [4751;5000], as job id is i=20)"
[1] "seed 40481 for j=246 out of 250 (i.e. j=4996 in [4751;5000], as job id is i=20)"
[1] "seed 14196 for j=247 out of 250 (i.e. j=4997 in [4751;5000], as job id is i=20)"
[1] "seed 49567 for j=248 out of 250 (i.e. j=4998 in [4751;5000], as job id is i=20)"
[1] "seed 49456 for j=249 out of 250 (i.e. j=4999 in [4751;5000], as job id is i=20)"
[1] "seed 36548 for j=250 out of 250 (i.e. j=5000 in [4751;5000], as job id is i=20)"
There were 34 warnings (use warnings() to see them)
> rownames(RES) <- NULL
> save(RES,file=paste0(path.res,name,"-",iter_sim,".rda"))
> 
> ## * Summary results
> sessionInfo()
R version 4.1.2 (2021-11-01)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Red Hat Enterprise Linux 8.5 (Ootpa)

Matrix products: default
BLAS:   /opt/software/R/4.1.2/lib64/R/lib/libRblas.so
LAPACK: /opt/software/R/4.1.2/lib64/R/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] mvtnorm_1.1-3    DelayedGSD_0.0.3

loaded via a namespace (and not attached):
 [1] BB_2019.10-1     magrittr_2.0.3   tidyselect_1.1.2 munsell_0.5.0   
 [5] lattice_0.20-45  colorspace_2.0-3 xtable_1.8-4     R6_2.5.1        
 [9] quadprog_1.5-8   rlang_1.0.3      fansi_1.0.3      dplyr_1.0.9     
[13] grid_4.1.2       nlme_3.1-153     gtable_0.3.0     gsDesign_3.3.0  
[17] utf8_1.2.2       cli_3.3.0        ellipsis_0.3.2   tibble_3.1.7    
[21] lifecycle_1.0.1  crayon_1.5.1     purrr_0.3.4      ggplot2_3.3.6   
[25] tidyr_1.2.0      vctrs_0.4.1      glue_1.6.2       compiler_4.1.2  
[29] pillar_1.7.0     generics_0.1.3   scales_1.2.0     pkgconfig_2.0.3 
> summary(RES)
     method        stage           type             statistic     
 Min.   :1.0   Min.   :1.000   Length:1500        Min.   :0.0007  
 1st Qu.:1.0   1st Qu.:1.000   Class :character   1st Qu.:1.4527  
 Median :1.5   Median :1.000   Mode  :character   Median :2.2685  
 Mean   :1.5   Mean   :1.333                      Mean   :2.2065  
 3rd Qu.:2.0   3rd Qu.:2.000                      3rd Qu.:2.8647  
 Max.   :2.0   Max.   :2.000                      Max.   :4.9336  
                                                  NA's   :500     
  estimate_ML          se_ML             info           infoPC      
 Min.   :-0.7506   Min.   :0.3284   Min.   :4.449   Min.   :0.3476  
 1st Qu.: 0.5347   1st Qu.:0.3849   1st Qu.:5.771   1st Qu.:0.4510  
 Median : 0.7429   Median :0.4054   Median :6.207   Median :0.4850  
 Mean   : 0.7703   Mean   :0.4031   Mean   :6.317   Mean   :0.4936  
 3rd Qu.: 1.0023   3rd Qu.:0.4217   3rd Qu.:6.843   3rd Qu.:0.5347  
 Max.   : 1.9780   Max.   :0.4741   Max.   :9.668   Max.   :0.7554  
 NA's   :500       NA's   :1000     NA's   :142     NA's   :142     
   info.pred      infoPC.pred           uk              lk         
 Min.   :4.740   Min.   :0.3704   Min.   :2.223   Min.   :-0.2871  
 1st Qu.:6.027   1st Qu.:0.4709   1st Qu.:2.460   1st Qu.: 0.1306  
 Median :6.484   Median :0.5067   Median :2.533   Median : 0.2799  
 Mean   :6.617   Mean   :0.5171   Mean   :2.521   Mean   : 0.3174  
 3rd Qu.:7.180   3rd Qu.:0.5611   3rd Qu.:2.588   3rd Qu.: 0.4855  
 Max.   :9.797   Max.   :0.7655   Max.   :2.745   Max.   : 1.1825  
 NA's   :1000    NA's   :1000     NA's   :1000    NA's   :1000     
   decision            reason            p.value_ML        lower_ML      
 Length:1500        Length:1500        Min.   :0.0000   Min.   :-0.9858  
 Class :character   Class :character   1st Qu.:0.0023   1st Qu.:-0.0671  
 Mode  :character   Mode  :character   Median :0.0089   Median : 0.1132  
                                       Mean   :0.0835   Mean   : 0.0894  
                                       3rd Qu.:0.0449   3rd Qu.: 0.2645  
                                       Max.   :0.9912   Max.   : 1.0745  
                                       NA's   :1000     NA's   :1000     
    upper_ML       p.value_MUE       lower_MUE         upper_MUE     
 Min.   :0.2851   Min.   :0.0000   Min.   :-0.9084   Min.   :0.6793  
 1st Qu.:1.2084   1st Qu.:0.0048   1st Qu.:-0.0493   1st Qu.:1.2202  
 Median :1.4255   Median :0.0086   Median : 0.0610   Median :1.4232  
 Mean   :1.5068   Mean   :0.0691   Mean   : 0.0769   Mean   :1.5256  
 3rd Qu.:1.7700   3rd Qu.:0.0242   3rd Qu.: 0.1764   3rd Qu.:1.7413  
 Max.   :2.8946   Max.   :1.0000   Max.   : 1.5006   Max.   :2.9263  
 NA's   :1000     NA's   :1000     NA's   :1000      NA's   :1000    
  estimate_MUE           ck         time.interim        seed      
 Min.   :-0.0403   Min.   :0.149   Min.   :519.0   Min.   :   57  
 1st Qu.: 0.5897   1st Qu.:1.394   1st Qu.:582.0   1st Qu.:28767  
 Median : 0.7710   Median :1.442   Median :601.5   Median :50441  
 Mean   : 0.8047   Mean   :1.399   Mean   :599.4   Mean   :50934  
 3rd Qu.: 0.9783   3rd Qu.:1.507   3rd Qu.:615.0   3rd Qu.:73123  
 Max.   : 2.1115   Max.   :1.724   Max.   :670.0   Max.   :99396  
 NA's   :1000      NA's   :642                                    
  nX1.interim     nX2.interim     nX3.interim    computation.time
 Min.   :145.0   Min.   :131.0   Min.   :121.0   Min.   :0.7080  
 1st Qu.:147.0   1st Qu.:135.0   1st Qu.:125.0   1st Qu.:0.9120  
 Median :148.0   Median :136.0   Median :127.0   Median :0.9975  
 Mean   :148.6   Mean   :136.4   Mean   :126.8   Mean   :1.0282  
 3rd Qu.:150.0   3rd Qu.:138.0   3rd Qu.:129.0   3rd Qu.:1.1330  
 Max.   :153.0   Max.   :146.0   Max.   :133.0   Max.   :3.7150  
                                                                 
> 
> #----------------------------------------------------------------------
> ### BATCH_simuMain.R ends here
> 
> proc.time()
   user  system elapsed 
259.866   0.443 270.890 
