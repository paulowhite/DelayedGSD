
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### BATCH_simuMain.R --- 
> #----------------------------------------------------------------------
> ## Author: Paul Blanche
> ## Created: Mar  5 2021 (10:56) 
> ## Version: 
> ## Last-Updated: jul  7 2022 (13:56) 
> ##           By: Brice Ozenne
> ##     Update #: 518
> #----------------------------------------------------------------------
> ## 
> ### Commentary: 
> ## 
> ### Change Log:
> #----------------------------------------------------------------------
> ## 
> ### Code:
> 
> ## ** BATCH loop
> ## cd /projects/biostat01/people/hpl802/DelayedGSD/
> ## for ITER in `seq 1 10`;
> ## do
> ## eval 'R CMD BATCH --vanilla "--args iter_sim='$ITER' n.iter_sim=10" BATCH_simuMain.R output/R-simuMain-'$ITER'.Rout &'
> ## done
> 
> ## [1] 1186669
> ## [2] 1186670
> ## [3] 1186671
> ## [4] 1186672
> ## [5] 1186673
> ## [6] 1186674
> ## [7] 1186675
> ## [8] 1186676
> ## [9] 1186677
> ## [10] 1186678
> 
> rm(list=ls())
>                                    # {{{ parameters
> ## * parameters
> name <- "ScenarioName" # To save the results
> method <- 1:2 # methods used to compute the boundaries
>                                         #---
> myseed <- 140786598
>                                         #--- to plan the trial ----
> NMC <- 250 # number of sequential simulations to run in parallel. Eg. with 250, then we can run 40 scripts in paralell to get N=10,000 runs in total.
> kMax <- 2  #max number of analyses (including final)
> alpha <- 0.025  #type I error (one sided)
> beta <- 0.2  #type II error
> informationRates <- c(0.5,1)  #planned  information rates
> rho_alpha <- 2  # rho parameter for alpha error spending function
> rho_beta <- 2  # rho parameter for beta error spending function
> ## deltaPower <- 0.75 # just to try another value when Id > Imax
> Id <- 0.55  #(expected) information rate at each decision analysis
> binding <- TRUE
>                                         #
>                                         #---- to generate data -----------
>                                         #
> block <- c(1,1,0,0) 
> allsd <- c(2.5,2.1,2.4) # sd, first from baseline measurement, then the two changes from baseline
> mean0 <- c(10,0,0) # mean placebo group (again, first is absolute value, then change from baseline)
> delta <- c(0,0.6,0.8) # treatment effect
> ar <- (0.86*2)*2 # orginial accrual rate from data from Corine is 0.86 per week, hence we multiply by 2 for by 14 days. As to low, we further multiply by 2
> cor011 <- -0.15 # ~ from data from Corine
> corij1 <- 0.68  # ~ from data from Corine
> cor0j1 <- -0.27  # ~ from data from Corine
> Miss11 <- 5/104 # miss both V1 and V2
> Miss12 <- 1/104 # miss V1 and but not V2
> Miss21 <- 6/104 # do not miss V1 and but miss V2
> Miss22 <- 92/104 # miss none
> PropForInterim <- 0.5 # Decide to have interim analysiz when PropForInterim % of all subjects have had the chance to have one follow-up measuement recorded in the data to be available for analysis.
> theDelta.t <- 1.50001 # time lag to process the data and make them ready to analyze after collecting them (unit is time between two follow-up visits)
> TimeFactor <- 14 ## number of days between two visits
>                                         #
>                                         #--- actually for both planing the trial  and generating data-----
>                                         #
>                                         #
> deltaPower <- abs(delta[3]) # effect (NOT Z-scale/unit, but outcome scale/unit!) that the study is powered for: should we choose ourselves or compute from other numbers above ???
> n <- ceiling(2*2*((allsd[3]/deltaPower)^2)*(qnorm(1-beta)-qnorm(alpha))^2) #104 with Corine's data # should we choose ourselves or compute from the above numbers ???
>                                         # inflate SS as required for interim
> 
>                                         # {{{ Set seeds for parallel computing and reproducibility
> ## * Seed
> args <- commandArgs(TRUE) ## BATCH MODE
> if(length(args)>0){
+     for (arg in args){
+         eval(parse(text=arg))
+     }
+ }else{ ## SLUMR
+     iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_ID"))
+     n.iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_COUNT"))
+ } ## interactive
> if(is.na(iter_sim)){iter_sim <- 1}
> if(is.na(n.iter_sim)){n.iter_sim <- 40}
> 
> set.seed(140786598)
> allseeds <- sample.int(n = 10*n.iter_sim*NMC, size = n.iter_sim*NMC, replace=FALSE) #x=1:(.Machine$integer.max) seems to be maximal possible
> # }}}
> 
> # {{{ set path to load and save and othe machine specific variables
> ## * path
> path <- "."
> path.res <- file.path(path,"Results","simuMain")
> if(dir.exists(path.res)==FALSE){
+     if(dir.exists(file.path(path,"Results"))==FALSE){
+     dir.create(file.path(path,"Results"))
+     }
+     dir.create(path.res)
+ }
> path.output <- file.path(path,"output","simuMain")
> if(dir.exists(path.output)==FALSE){
+     if(dir.exists(file.path(path,"output"))==FALSE){
+     dir.create(file.path(path,"output"))
+     }
+     dir.create(path.output)
+ }
> # }}}
> 
> 
> ## * libraries and functions
> library(DelayedGSD)
DelayedGSD version 0.0.3
> ## sourceDir <- function(path, trace = TRUE, ...) {
> ##     for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
> ##         if(trace) cat(nm,":")
> ##         source(file.path(path, nm), ...)
> ##         if(trace) cat("\n")
> ##     }
> ## }
> ## sourceDir(pathToLoad)
>     
> 
> ## * Compute inflation factor and sample size
> plannedB <- vector(mode = "list", length = 3)
> for(iMeth in method){ ## iMeth <- 1
+     plannedB[[iMeth]] <- CalcBoundaries(kMax=kMax,  
+                                         alpha=alpha, 
+                                         beta=beta,  
+                                         InfoR.i=informationRates,  
+                                         InfoR.d=c(Id,1),  
+                                         rho_alpha=rho_alpha,  
+                                         rho_beta=rho_beta,  
+                                         method=iMeth,  
+                                         cNotBelowFixedc=FALSE,
+                                         bindingFutility=binding,
+                                         delta=tail(delta,1))
+     ## summary(plannedB[[1]])
+     ## coef(plannedB[[iMeth]], type = "information")
+ }
Loading required namespace: gsDesign
Loading required package: mvtnorm
Loading required namespace: BB
> inflationFactor <- unlist(lapply(plannedB,function(iP){iP$planned$InflationFactor}))
> nGSD <- ceiling(n*inflationFactor)
> ##  plot(plannedB[[1]])
> 
> #
> # --- just to check---
> ## n
> ## InfoFixed <- ((qnorm(1-beta)-qnorm(alpha))/(deltaPower))^2
> ## InfoFixed
> ## n/(4*(allsd[3])^2)
> #---
> # }}}
> 
> 
> 
> 
> # {{{ technical details to loop
> RES <- NULL # initialize results to save
> allj <- ((iter_sim-1)*NMC + 1):(iter_sim*NMC) # indices of all iterations (replicates) for this job, accountng for the other jobs running in parallel
> # }}}
> 
> ## * Loop
> for(j in allj){ ## j <- 51 ## 5
+     startComp <- Sys.time()
+     myseedi <- allseeds[j]
+     # {{{ TRACE info (e.g. to check the Rout)
+     print(paste0("seed ",myseedi," for ","j=",which(j==allj)," out of ",NMC, " (i.e. j=",j," in [",(iter_sim-1)*NMC + 1,";",iter_sim*NMC,"], as job id is i=",iter_sim,")"))
+     # }}}
+     # {{{ Missing probabilities
+     MyMissProb <- matrix(c(Miss11,Miss12,Miss21,Miss22),ncol=2,nrow=2,byrow=TRUE) # to additionnally remove 1 more because some FASFL=N
+     colnames(MyMissProb) <- c("V2 missing","V2 not missing")
+     rownames(MyMissProb) <- c("V1 missing","V1 not missing")
+     # }}}
+ 
+                                         # {{{ generate data
+     ## ** simulate
+     res <- GenData(n=n, 
+                    N.fw=2,
+                    rand.block=block,
+                    allsd=allsd,
+                    mean0=mean0,
+                    delta=delta,
+                    ar=ar,
+                    cor.01.1=cor011,
+                    cor.ij.1=corij1,
+                    cor.0j.1=cor0j1,
+                    seed=myseedi,
+                    MissProb=MyMissProb,
+                    DigitsOutcome=2,
+                    TimeFactor=TimeFactor,
+                    DigitsTime=0
+                    )
+     d <- res$d
+     ## head(d,n=20)
+                                         # }}}
+                                         # {{{ reformat data like those of Corine
+     ## Make data long format
+     ## dd <- FormatAsCase(d)
+     ## head(dd)
+     ## summary(dd)
+                                         # }}}
+    
+                                         # {{{ make data available at interim
+                                         # Here we stop inclusion data collection for the interim analysis as soon as
+                                         # half of the participants have completed (or had the opportunity to complete) the follow-up 
+     thet <- d$t3[ceiling(n*PropForInterim)]
+     di <- SelectData(d,t=thet)
+     ## ddi <- FormatAsCase(di) # needed ????
+     ## head(d[d$id==52,])
+                                         # }}}
+     ## {{{ analyze data at at interim
+     ## ** interim
+     lmmI <- analyzeData(di, ddf = "nlme", data.decision = sum(d$t1 <= thet + theDelta.t*TimeFactor), getinfo = TRUE, trace = TRUE)
+     ## lmmI <- analyzeData(di, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     currentGSD <- vector(mode = "list", length = 3)
+     out.interim <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+ 
+         currentGSD[[iMeth]] <- update(plannedB[[iMeth]], delta = lmmI, trace = FALSE)
+ 
+         iConfint.interim <- confint(currentGSD[[iMeth]])
+         iInfo.interim <- coef(currentGSD[[iMeth]], type = "information")
+         iBoundary.interim <- coef(currentGSD[[iMeth]], type = "boundary")
+         iDecision.interim <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+         out.interim[[iMeth]] <-  data.frame(statistic = iConfint.interim[1,"statistic"],
+                                             estimate_ML = iConfint.interim[1,"estimate"],
+                                             se_ML = iConfint.interim[1,"se"],
+                                             info = iInfo.interim[1,"Interim"],
+                                             infoPC = iInfo.interim[1,"Interim.pc"],
+                                             info.pred = iInfo.interim[1,"Decision"],
+                                             infoPC.pred = iInfo.interim[1,"Decision.pc"],
+                                             uk = iBoundary.interim[1,"Ebound"],
+                                             lk = iBoundary.interim[1,"Fbound"],
+                                             decision = iDecision.interim["decision","stage 1"],
+                                             reason = iDecision.interim["reason.interim","stage 1"])
+     }
+     ## currentGSD[[1]]
+     ## plot(currentGSD[[1]])
+ 
+     ## ** decision
+     dDecision <- d[which(d$t1 <= thet + theDelta.t*TimeFactor),]
+     lmmD <- analyzeData(dDecision, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+     
+     out.decision <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+           
+         if(out.interim[[iMeth]]$decision == "stop"){
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, trace = FALSE)
+             ## plot(currentGSD[[iMeth]])
+ 
+             iConfint.decision <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.decision  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = iConfint.decision[1,"statistic"],
+                                                 p.value_ML = iConfint.decision[iConfint.decision$method == "ML","p.value"],
+                                                 lower_ML = iConfint.decision[iConfint.decision$method == "ML","lower"],
+                                                 upper_ML = iConfint.decision[iConfint.decision$method == "ML","upper"],
+                                                 estimate_ML = iConfint.decision[iConfint.decision$method == "ML","estimate"],
+                                                 p.value_MUE = iConfint.decision[iConfint.decision$method == "MUE","p.value"],
+                                                 lower_MUE = iConfint.decision[iConfint.decision$method == "MUE","lower"],
+                                                 upper_MUE = iConfint.decision[iConfint.decision$method == "MUE","upper"],
+                                                 estimate_MUE = iConfint.decision[iConfint.decision$method == "MUE","estimate"],
+                                                 info = iInfo.decision[1,"Interim"],
+                                                 infoPC = iInfo.decision[1,"Interim.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = unname(iDecision.decision["decision","stage 2"])
+                                                 )
+ 
+         }else{
+             ## update information
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, k = 1, type.k = "decision", trace = FALSE)
+ 
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = NA,
+                                                 p.value_ML = NA,
+                                                 lower_ML = NA,
+                                                 upper_ML = NA,
+                                                 estimate_ML = NA,
+                                                 p.value_MUE = NA,
+                                                 lower_MUE = NA,
+                                                 upper_MUE = NA,
+                                                 estimate_MUE = NA,
+                                                 info = iInfo.decision[1,"Decision"],
+                                                 infoPC = iInfo.decision[1,"Decision.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = NA)
+         }
+     }
+                                         # }}}
+                                         # {{{ Analyze data at decision
+ 
+     ## ** finale
+     dFinal <- d
+     lmmF <- analyzeData(dFinal, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     out.final <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+         if(out.interim[[iMeth]]$decision == "stop"){
+             out.final[[iMeth]] <- data.frame(statistic = NA,
+                                              p.value_ML = NA,
+                                              lower_ML = NA,
+                                              upper_ML = NA,
+                                              estimate_ML = NA,
+                                              p.value_MUE = NA,
+                                              lower_MUE = NA,
+                                              upper_MUE = NA,
+                                              estimate_MUE = NA,
+                                              info = NA,
+                                              infoPC = NA,
+                                              ck = NA,
+                                              decision = NA)
+ 
+         }else{
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmF, trace = FALSE)
+ 
+             ## plot(test)
+             ## summary(test)
+             iConfint.final <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.final <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.final <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.final  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.final[[iMeth]] <- data.frame(statistic = iConfint.final[1,"statistic"],
+                                              p.value_ML = iConfint.final[iConfint.final$method == "ML","p.value"],
+                                              lower_ML = iConfint.final[iConfint.final$method == "ML","lower"],
+                                              upper_ML = iConfint.final[iConfint.final$method == "ML","upper"],
+                                              estimate_ML = iConfint.final[iConfint.final$method == "ML","estimate"],
+                                              p.value_MUE = iConfint.final[iConfint.final$method == "MUE","p.value"],
+                                              lower_MUE = iConfint.final[iConfint.final$method == "MUE","lower"],
+                                              upper_MUE = iConfint.final[iConfint.final$method == "MUE","upper"],
+                                              estimate_MUE = iConfint.final[iConfint.final$method == "MUE","estimate"],
+                                              info = iInfo.final[1,"Interim"],
+                                              infoPC = iInfo.final[1,"Interim.pc"],
+                                              ck = iBoundary.final[1,"Cbound"],
+                                              decision = unname(coef(currentGSD[[iMeth]], type = "decision")["decision","stage 2"])
+                                              )
+         }
+     }
+                                         # }}}
+ 
+     stopComp <- Sys.time()
+                                         # {{{ Save results
+ 
+     outMerge <- do.call(rbind,lapply(method, function(iMeth){
+         iNames <- unique(c(names(out.interim[[iMeth]]),names(out.decision[[iMeth]]),names(out.final[[iMeth]])))
+         iMerge <- data.frame(matrix(NA, ncol = length(iNames)+3, nrow = 3, dimnames = list(NULL, c("method", "stage", "type", iNames))))
+         iMerge[1,c("method","stage","type",names(out.interim[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "interim", out.interim[[iMeth]]) 
+         iMerge[2,c("method","stage","type",names(out.decision[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "decision", out.decision[[iMeth]]) 
+         iMerge[3,c("method","stage","type",names(out.final[[iMeth]]))] <- data.frame(method = iMeth, stage = 2, type = "final", out.final[[iMeth]])
+         return(iMerge)
+     }))
+ 
+     ## outMerge[outMerge$method==3,]
+ 
+     out <- cbind(
+         ## results
+         outMerge,
+         ## simulation details
+         time.interim = thet,
+         seed=myseedi,             
+         nX1.interim = sum(!is.na(di$X1)),
+         nX2.interim = sum(!is.na(di$X2)),
+         nX3.interim = sum(!is.na(di$X3)),
+         ## computation time
+         computation.time=as.double(round(difftime(stopComp,startComp,units="secs"),3))
+     )
+     ## names(out) <- myColNames
+     RES <- rbind(RES,out)
+     save(RES,file=paste0(path.res,name,"(tempo)-",iter_sim,".rda"))
+                                         # }}}
+ }
[1] "seed 81525 for j=1 out of 250 (i.e. j=1251 in [1251;1500], as job id is i=6)"
Loading required namespace: nlme
[1] "seed 39974 for j=2 out of 250 (i.e. j=1252 in [1251;1500], as job id is i=6)"
[1] "seed 52951 for j=3 out of 250 (i.e. j=1253 in [1251;1500], as job id is i=6)"
[1] "seed 90214 for j=4 out of 250 (i.e. j=1254 in [1251;1500], as job id is i=6)"
[1] "seed 72351 for j=5 out of 250 (i.e. j=1255 in [1251;1500], as job id is i=6)"
[1] "seed 50369 for j=6 out of 250 (i.e. j=1256 in [1251;1500], as job id is i=6)"
[1] "seed 41463 for j=7 out of 250 (i.e. j=1257 in [1251;1500], as job id is i=6)"
[1] "seed 80913 for j=8 out of 250 (i.e. j=1258 in [1251;1500], as job id is i=6)"
[1] "seed 69737 for j=9 out of 250 (i.e. j=1259 in [1251;1500], as job id is i=6)"
[1] "seed 91967 for j=10 out of 250 (i.e. j=1260 in [1251;1500], as job id is i=6)"
[1] "seed 15496 for j=11 out of 250 (i.e. j=1261 in [1251;1500], as job id is i=6)"
[1] "seed 44378 for j=12 out of 250 (i.e. j=1262 in [1251;1500], as job id is i=6)"
[1] "seed 73113 for j=13 out of 250 (i.e. j=1263 in [1251;1500], as job id is i=6)"
[1] "seed 66171 for j=14 out of 250 (i.e. j=1264 in [1251;1500], as job id is i=6)"
[1] "seed 68412 for j=15 out of 250 (i.e. j=1265 in [1251;1500], as job id is i=6)"
[1] "seed 55801 for j=16 out of 250 (i.e. j=1266 in [1251;1500], as job id is i=6)"
[1] "seed 60497 for j=17 out of 250 (i.e. j=1267 in [1251;1500], as job id is i=6)"
[1] "seed 91005 for j=18 out of 250 (i.e. j=1268 in [1251;1500], as job id is i=6)"
[1] "seed 49725 for j=19 out of 250 (i.e. j=1269 in [1251;1500], as job id is i=6)"
[1] "seed 35806 for j=20 out of 250 (i.e. j=1270 in [1251;1500], as job id is i=6)"
[1] "seed 61902 for j=21 out of 250 (i.e. j=1271 in [1251;1500], as job id is i=6)"
[1] "seed 64498 for j=22 out of 250 (i.e. j=1272 in [1251;1500], as job id is i=6)"
[1] "seed 54446 for j=23 out of 250 (i.e. j=1273 in [1251;1500], as job id is i=6)"
[1] "seed 58750 for j=24 out of 250 (i.e. j=1274 in [1251;1500], as job id is i=6)"
[1] "seed 83608 for j=25 out of 250 (i.e. j=1275 in [1251;1500], as job id is i=6)"
[1] "seed 30668 for j=26 out of 250 (i.e. j=1276 in [1251;1500], as job id is i=6)"
[1] "seed 30357 for j=27 out of 250 (i.e. j=1277 in [1251;1500], as job id is i=6)"
[1] "seed 13940 for j=28 out of 250 (i.e. j=1278 in [1251;1500], as job id is i=6)"
[1] "seed 49665 for j=29 out of 250 (i.e. j=1279 in [1251;1500], as job id is i=6)"
[1] "seed 5263 for j=30 out of 250 (i.e. j=1280 in [1251;1500], as job id is i=6)"
[1] "seed 62450 for j=31 out of 250 (i.e. j=1281 in [1251;1500], as job id is i=6)"
[1] "seed 45763 for j=32 out of 250 (i.e. j=1282 in [1251;1500], as job id is i=6)"
[1] "seed 54740 for j=33 out of 250 (i.e. j=1283 in [1251;1500], as job id is i=6)"
[1] "seed 65854 for j=34 out of 250 (i.e. j=1284 in [1251;1500], as job id is i=6)"
[1] "seed 25156 for j=35 out of 250 (i.e. j=1285 in [1251;1500], as job id is i=6)"
[1] "seed 38193 for j=36 out of 250 (i.e. j=1286 in [1251;1500], as job id is i=6)"
[1] "seed 18842 for j=37 out of 250 (i.e. j=1287 in [1251;1500], as job id is i=6)"
[1] "seed 98126 for j=38 out of 250 (i.e. j=1288 in [1251;1500], as job id is i=6)"
[1] "seed 62849 for j=39 out of 250 (i.e. j=1289 in [1251;1500], as job id is i=6)"
[1] "seed 9757 for j=40 out of 250 (i.e. j=1290 in [1251;1500], as job id is i=6)"
[1] "seed 22460 for j=41 out of 250 (i.e. j=1291 in [1251;1500], as job id is i=6)"
[1] "seed 56690 for j=42 out of 250 (i.e. j=1292 in [1251;1500], as job id is i=6)"
[1] "seed 76953 for j=43 out of 250 (i.e. j=1293 in [1251;1500], as job id is i=6)"
[1] "seed 93854 for j=44 out of 250 (i.e. j=1294 in [1251;1500], as job id is i=6)"
[1] "seed 82078 for j=45 out of 250 (i.e. j=1295 in [1251;1500], as job id is i=6)"
[1] "seed 48862 for j=46 out of 250 (i.e. j=1296 in [1251;1500], as job id is i=6)"
[1] "seed 70800 for j=47 out of 250 (i.e. j=1297 in [1251;1500], as job id is i=6)"
[1] "seed 38647 for j=48 out of 250 (i.e. j=1298 in [1251;1500], as job id is i=6)"
[1] "seed 17959 for j=49 out of 250 (i.e. j=1299 in [1251;1500], as job id is i=6)"
[1] "seed 75902 for j=50 out of 250 (i.e. j=1300 in [1251;1500], as job id is i=6)"
[1] "seed 20215 for j=51 out of 250 (i.e. j=1301 in [1251;1500], as job id is i=6)"
[1] "seed 43732 for j=52 out of 250 (i.e. j=1302 in [1251;1500], as job id is i=6)"
[1] "seed 6234 for j=53 out of 250 (i.e. j=1303 in [1251;1500], as job id is i=6)"
[1] "seed 63422 for j=54 out of 250 (i.e. j=1304 in [1251;1500], as job id is i=6)"
[1] "seed 42205 for j=55 out of 250 (i.e. j=1305 in [1251;1500], as job id is i=6)"
[1] "seed 60630 for j=56 out of 250 (i.e. j=1306 in [1251;1500], as job id is i=6)"
[1] "seed 15043 for j=57 out of 250 (i.e. j=1307 in [1251;1500], as job id is i=6)"
[1] "seed 76936 for j=58 out of 250 (i.e. j=1308 in [1251;1500], as job id is i=6)"
[1] "seed 24869 for j=59 out of 250 (i.e. j=1309 in [1251;1500], as job id is i=6)"
[1] "seed 97836 for j=60 out of 250 (i.e. j=1310 in [1251;1500], as job id is i=6)"
[1] "seed 7642 for j=61 out of 250 (i.e. j=1311 in [1251;1500], as job id is i=6)"
[1] "seed 51686 for j=62 out of 250 (i.e. j=1312 in [1251;1500], as job id is i=6)"
[1] "seed 64376 for j=63 out of 250 (i.e. j=1313 in [1251;1500], as job id is i=6)"
[1] "seed 78343 for j=64 out of 250 (i.e. j=1314 in [1251;1500], as job id is i=6)"
[1] "seed 41027 for j=65 out of 250 (i.e. j=1315 in [1251;1500], as job id is i=6)"
[1] "seed 82145 for j=66 out of 250 (i.e. j=1316 in [1251;1500], as job id is i=6)"
[1] "seed 54799 for j=67 out of 250 (i.e. j=1317 in [1251;1500], as job id is i=6)"
[1] "seed 57991 for j=68 out of 250 (i.e. j=1318 in [1251;1500], as job id is i=6)"
[1] "seed 61054 for j=69 out of 250 (i.e. j=1319 in [1251;1500], as job id is i=6)"
[1] "seed 47005 for j=70 out of 250 (i.e. j=1320 in [1251;1500], as job id is i=6)"
[1] "seed 53190 for j=71 out of 250 (i.e. j=1321 in [1251;1500], as job id is i=6)"
[1] "seed 60615 for j=72 out of 250 (i.e. j=1322 in [1251;1500], as job id is i=6)"
[1] "seed 56505 for j=73 out of 250 (i.e. j=1323 in [1251;1500], as job id is i=6)"
[1] "seed 98306 for j=74 out of 250 (i.e. j=1324 in [1251;1500], as job id is i=6)"
[1] "seed 77236 for j=75 out of 250 (i.e. j=1325 in [1251;1500], as job id is i=6)"
[1] "seed 29218 for j=76 out of 250 (i.e. j=1326 in [1251;1500], as job id is i=6)"
[1] "seed 75421 for j=77 out of 250 (i.e. j=1327 in [1251;1500], as job id is i=6)"
[1] "seed 92148 for j=78 out of 250 (i.e. j=1328 in [1251;1500], as job id is i=6)"
[1] "seed 44235 for j=79 out of 250 (i.e. j=1329 in [1251;1500], as job id is i=6)"
[1] "seed 57958 for j=80 out of 250 (i.e. j=1330 in [1251;1500], as job id is i=6)"
[1] "seed 64562 for j=81 out of 250 (i.e. j=1331 in [1251;1500], as job id is i=6)"
[1] "seed 57117 for j=82 out of 250 (i.e. j=1332 in [1251;1500], as job id is i=6)"
[1] "seed 12169 for j=83 out of 250 (i.e. j=1333 in [1251;1500], as job id is i=6)"
[1] "seed 51014 for j=84 out of 250 (i.e. j=1334 in [1251;1500], as job id is i=6)"
[1] "seed 81470 for j=85 out of 250 (i.e. j=1335 in [1251;1500], as job id is i=6)"
[1] "seed 28761 for j=86 out of 250 (i.e. j=1336 in [1251;1500], as job id is i=6)"
[1] "seed 92986 for j=87 out of 250 (i.e. j=1337 in [1251;1500], as job id is i=6)"
[1] "seed 26723 for j=88 out of 250 (i.e. j=1338 in [1251;1500], as job id is i=6)"
[1] "seed 10913 for j=89 out of 250 (i.e. j=1339 in [1251;1500], as job id is i=6)"
[1] "seed 6701 for j=90 out of 250 (i.e. j=1340 in [1251;1500], as job id is i=6)"
[1] "seed 88870 for j=91 out of 250 (i.e. j=1341 in [1251;1500], as job id is i=6)"
[1] "seed 32461 for j=92 out of 250 (i.e. j=1342 in [1251;1500], as job id is i=6)"
[1] "seed 2258 for j=93 out of 250 (i.e. j=1343 in [1251;1500], as job id is i=6)"
[1] "seed 25790 for j=94 out of 250 (i.e. j=1344 in [1251;1500], as job id is i=6)"
[1] "seed 93894 for j=95 out of 250 (i.e. j=1345 in [1251;1500], as job id is i=6)"
[1] "seed 38331 for j=96 out of 250 (i.e. j=1346 in [1251;1500], as job id is i=6)"
[1] "seed 70391 for j=97 out of 250 (i.e. j=1347 in [1251;1500], as job id is i=6)"
[1] "seed 10357 for j=98 out of 250 (i.e. j=1348 in [1251;1500], as job id is i=6)"
[1] "seed 61495 for j=99 out of 250 (i.e. j=1349 in [1251;1500], as job id is i=6)"
[1] "seed 72889 for j=100 out of 250 (i.e. j=1350 in [1251;1500], as job id is i=6)"
[1] "seed 52282 for j=101 out of 250 (i.e. j=1351 in [1251;1500], as job id is i=6)"
[1] "seed 55782 for j=102 out of 250 (i.e. j=1352 in [1251;1500], as job id is i=6)"
[1] "seed 8549 for j=103 out of 250 (i.e. j=1353 in [1251;1500], as job id is i=6)"
[1] "seed 89038 for j=104 out of 250 (i.e. j=1354 in [1251;1500], as job id is i=6)"
[1] "seed 3433 for j=105 out of 250 (i.e. j=1355 in [1251;1500], as job id is i=6)"
[1] "seed 59874 for j=106 out of 250 (i.e. j=1356 in [1251;1500], as job id is i=6)"
[1] "seed 63817 for j=107 out of 250 (i.e. j=1357 in [1251;1500], as job id is i=6)"
[1] "seed 74885 for j=108 out of 250 (i.e. j=1358 in [1251;1500], as job id is i=6)"
[1] "seed 19664 for j=109 out of 250 (i.e. j=1359 in [1251;1500], as job id is i=6)"
[1] "seed 92421 for j=110 out of 250 (i.e. j=1360 in [1251;1500], as job id is i=6)"
[1] "seed 89826 for j=111 out of 250 (i.e. j=1361 in [1251;1500], as job id is i=6)"
[1] "seed 30870 for j=112 out of 250 (i.e. j=1362 in [1251;1500], as job id is i=6)"
[1] "seed 68624 for j=113 out of 250 (i.e. j=1363 in [1251;1500], as job id is i=6)"
[1] "seed 74553 for j=114 out of 250 (i.e. j=1364 in [1251;1500], as job id is i=6)"
[1] "seed 67797 for j=115 out of 250 (i.e. j=1365 in [1251;1500], as job id is i=6)"
[1] "seed 2014 for j=116 out of 250 (i.e. j=1366 in [1251;1500], as job id is i=6)"
[1] "seed 40662 for j=117 out of 250 (i.e. j=1367 in [1251;1500], as job id is i=6)"
[1] "seed 58564 for j=118 out of 250 (i.e. j=1368 in [1251;1500], as job id is i=6)"
[1] "seed 84409 for j=119 out of 250 (i.e. j=1369 in [1251;1500], as job id is i=6)"
[1] "seed 41436 for j=120 out of 250 (i.e. j=1370 in [1251;1500], as job id is i=6)"
[1] "seed 4400 for j=121 out of 250 (i.e. j=1371 in [1251;1500], as job id is i=6)"
[1] "seed 59791 for j=122 out of 250 (i.e. j=1372 in [1251;1500], as job id is i=6)"
[1] "seed 17709 for j=123 out of 250 (i.e. j=1373 in [1251;1500], as job id is i=6)"
[1] "seed 79764 for j=124 out of 250 (i.e. j=1374 in [1251;1500], as job id is i=6)"
[1] "seed 18136 for j=125 out of 250 (i.e. j=1375 in [1251;1500], as job id is i=6)"
[1] "seed 92658 for j=126 out of 250 (i.e. j=1376 in [1251;1500], as job id is i=6)"
[1] "seed 18726 for j=127 out of 250 (i.e. j=1377 in [1251;1500], as job id is i=6)"
[1] "seed 16792 for j=128 out of 250 (i.e. j=1378 in [1251;1500], as job id is i=6)"
[1] "seed 44415 for j=129 out of 250 (i.e. j=1379 in [1251;1500], as job id is i=6)"
[1] "seed 31437 for j=130 out of 250 (i.e. j=1380 in [1251;1500], as job id is i=6)"
[1] "seed 37350 for j=131 out of 250 (i.e. j=1381 in [1251;1500], as job id is i=6)"
[1] "seed 7452 for j=132 out of 250 (i.e. j=1382 in [1251;1500], as job id is i=6)"
[1] "seed 86513 for j=133 out of 250 (i.e. j=1383 in [1251;1500], as job id is i=6)"
[1] "seed 36503 for j=134 out of 250 (i.e. j=1384 in [1251;1500], as job id is i=6)"
[1] "seed 8019 for j=135 out of 250 (i.e. j=1385 in [1251;1500], as job id is i=6)"
[1] "seed 45526 for j=136 out of 250 (i.e. j=1386 in [1251;1500], as job id is i=6)"
[1] "seed 27510 for j=137 out of 250 (i.e. j=1387 in [1251;1500], as job id is i=6)"
[1] "seed 70081 for j=138 out of 250 (i.e. j=1388 in [1251;1500], as job id is i=6)"
[1] "seed 42552 for j=139 out of 250 (i.e. j=1389 in [1251;1500], as job id is i=6)"
[1] "seed 93112 for j=140 out of 250 (i.e. j=1390 in [1251;1500], as job id is i=6)"
[1] "seed 22396 for j=141 out of 250 (i.e. j=1391 in [1251;1500], as job id is i=6)"
[1] "seed 25684 for j=142 out of 250 (i.e. j=1392 in [1251;1500], as job id is i=6)"
[1] "seed 6055 for j=143 out of 250 (i.e. j=1393 in [1251;1500], as job id is i=6)"
[1] "seed 79957 for j=144 out of 250 (i.e. j=1394 in [1251;1500], as job id is i=6)"
[1] "seed 18354 for j=145 out of 250 (i.e. j=1395 in [1251;1500], as job id is i=6)"
[1] "seed 96019 for j=146 out of 250 (i.e. j=1396 in [1251;1500], as job id is i=6)"
[1] "seed 90757 for j=147 out of 250 (i.e. j=1397 in [1251;1500], as job id is i=6)"
[1] "seed 18591 for j=148 out of 250 (i.e. j=1398 in [1251;1500], as job id is i=6)"
[1] "seed 18855 for j=149 out of 250 (i.e. j=1399 in [1251;1500], as job id is i=6)"
[1] "seed 43083 for j=150 out of 250 (i.e. j=1400 in [1251;1500], as job id is i=6)"
[1] "seed 11392 for j=151 out of 250 (i.e. j=1401 in [1251;1500], as job id is i=6)"
[1] "seed 9043 for j=152 out of 250 (i.e. j=1402 in [1251;1500], as job id is i=6)"
[1] "seed 1759 for j=153 out of 250 (i.e. j=1403 in [1251;1500], as job id is i=6)"
[1] "seed 17383 for j=154 out of 250 (i.e. j=1404 in [1251;1500], as job id is i=6)"
[1] "seed 71670 for j=155 out of 250 (i.e. j=1405 in [1251;1500], as job id is i=6)"
[1] "seed 25880 for j=156 out of 250 (i.e. j=1406 in [1251;1500], as job id is i=6)"
[1] "seed 76256 for j=157 out of 250 (i.e. j=1407 in [1251;1500], as job id is i=6)"
[1] "seed 35597 for j=158 out of 250 (i.e. j=1408 in [1251;1500], as job id is i=6)"
[1] "seed 82944 for j=159 out of 250 (i.e. j=1409 in [1251;1500], as job id is i=6)"
[1] "seed 85219 for j=160 out of 250 (i.e. j=1410 in [1251;1500], as job id is i=6)"
[1] "seed 39912 for j=161 out of 250 (i.e. j=1411 in [1251;1500], as job id is i=6)"
[1] "seed 2973 for j=162 out of 250 (i.e. j=1412 in [1251;1500], as job id is i=6)"
[1] "seed 89375 for j=163 out of 250 (i.e. j=1413 in [1251;1500], as job id is i=6)"
[1] "seed 96788 for j=164 out of 250 (i.e. j=1414 in [1251;1500], as job id is i=6)"
[1] "seed 68426 for j=165 out of 250 (i.e. j=1415 in [1251;1500], as job id is i=6)"
[1] "seed 57042 for j=166 out of 250 (i.e. j=1416 in [1251;1500], as job id is i=6)"
[1] "seed 3424 for j=167 out of 250 (i.e. j=1417 in [1251;1500], as job id is i=6)"
[1] "seed 2677 for j=168 out of 250 (i.e. j=1418 in [1251;1500], as job id is i=6)"
[1] "seed 62961 for j=169 out of 250 (i.e. j=1419 in [1251;1500], as job id is i=6)"
[1] "seed 14995 for j=170 out of 250 (i.e. j=1420 in [1251;1500], as job id is i=6)"
[1] "seed 61838 for j=171 out of 250 (i.e. j=1421 in [1251;1500], as job id is i=6)"
[1] "seed 64925 for j=172 out of 250 (i.e. j=1422 in [1251;1500], as job id is i=6)"
[1] "seed 39737 for j=173 out of 250 (i.e. j=1423 in [1251;1500], as job id is i=6)"
[1] "seed 62870 for j=174 out of 250 (i.e. j=1424 in [1251;1500], as job id is i=6)"
[1] "seed 39802 for j=175 out of 250 (i.e. j=1425 in [1251;1500], as job id is i=6)"
[1] "seed 37611 for j=176 out of 250 (i.e. j=1426 in [1251;1500], as job id is i=6)"
[1] "seed 70719 for j=177 out of 250 (i.e. j=1427 in [1251;1500], as job id is i=6)"
[1] "seed 82454 for j=178 out of 250 (i.e. j=1428 in [1251;1500], as job id is i=6)"
[1] "seed 96820 for j=179 out of 250 (i.e. j=1429 in [1251;1500], as job id is i=6)"
[1] "seed 23352 for j=180 out of 250 (i.e. j=1430 in [1251;1500], as job id is i=6)"
[1] "seed 54722 for j=181 out of 250 (i.e. j=1431 in [1251;1500], as job id is i=6)"
[1] "seed 46062 for j=182 out of 250 (i.e. j=1432 in [1251;1500], as job id is i=6)"
[1] "seed 33289 for j=183 out of 250 (i.e. j=1433 in [1251;1500], as job id is i=6)"
[1] "seed 7706 for j=184 out of 250 (i.e. j=1434 in [1251;1500], as job id is i=6)"
[1] "seed 38833 for j=185 out of 250 (i.e. j=1435 in [1251;1500], as job id is i=6)"
[1] "seed 7278 for j=186 out of 250 (i.e. j=1436 in [1251;1500], as job id is i=6)"
[1] "seed 30645 for j=187 out of 250 (i.e. j=1437 in [1251;1500], as job id is i=6)"
[1] "seed 99307 for j=188 out of 250 (i.e. j=1438 in [1251;1500], as job id is i=6)"
[1] "seed 77598 for j=189 out of 250 (i.e. j=1439 in [1251;1500], as job id is i=6)"
[1] "seed 75544 for j=190 out of 250 (i.e. j=1440 in [1251;1500], as job id is i=6)"
[1] "seed 21634 for j=191 out of 250 (i.e. j=1441 in [1251;1500], as job id is i=6)"
[1] "seed 94804 for j=192 out of 250 (i.e. j=1442 in [1251;1500], as job id is i=6)"
[1] "seed 89646 for j=193 out of 250 (i.e. j=1443 in [1251;1500], as job id is i=6)"
[1] "seed 25517 for j=194 out of 250 (i.e. j=1444 in [1251;1500], as job id is i=6)"
[1] "seed 20104 for j=195 out of 250 (i.e. j=1445 in [1251;1500], as job id is i=6)"
[1] "seed 46987 for j=196 out of 250 (i.e. j=1446 in [1251;1500], as job id is i=6)"
[1] "seed 47191 for j=197 out of 250 (i.e. j=1447 in [1251;1500], as job id is i=6)"
[1] "seed 69742 for j=198 out of 250 (i.e. j=1448 in [1251;1500], as job id is i=6)"
[1] "seed 20816 for j=199 out of 250 (i.e. j=1449 in [1251;1500], as job id is i=6)"
[1] "seed 79401 for j=200 out of 250 (i.e. j=1450 in [1251;1500], as job id is i=6)"
[1] "seed 46158 for j=201 out of 250 (i.e. j=1451 in [1251;1500], as job id is i=6)"
[1] "seed 89016 for j=202 out of 250 (i.e. j=1452 in [1251;1500], as job id is i=6)"
[1] "seed 40911 for j=203 out of 250 (i.e. j=1453 in [1251;1500], as job id is i=6)"
[1] "seed 24840 for j=204 out of 250 (i.e. j=1454 in [1251;1500], as job id is i=6)"
[1] "seed 24227 for j=205 out of 250 (i.e. j=1455 in [1251;1500], as job id is i=6)"
[1] "seed 54972 for j=206 out of 250 (i.e. j=1456 in [1251;1500], as job id is i=6)"
[1] "seed 19980 for j=207 out of 250 (i.e. j=1457 in [1251;1500], as job id is i=6)"
[1] "seed 35240 for j=208 out of 250 (i.e. j=1458 in [1251;1500], as job id is i=6)"
[1] "seed 30613 for j=209 out of 250 (i.e. j=1459 in [1251;1500], as job id is i=6)"
[1] "seed 30317 for j=210 out of 250 (i.e. j=1460 in [1251;1500], as job id is i=6)"
[1] "seed 76 for j=211 out of 250 (i.e. j=1461 in [1251;1500], as job id is i=6)"
[1] "seed 82725 for j=212 out of 250 (i.e. j=1462 in [1251;1500], as job id is i=6)"
[1] "seed 82225 for j=213 out of 250 (i.e. j=1463 in [1251;1500], as job id is i=6)"
[1] "seed 40739 for j=214 out of 250 (i.e. j=1464 in [1251;1500], as job id is i=6)"
[1] "seed 62204 for j=215 out of 250 (i.e. j=1465 in [1251;1500], as job id is i=6)"
[1] "seed 48343 for j=216 out of 250 (i.e. j=1466 in [1251;1500], as job id is i=6)"
[1] "seed 42090 for j=217 out of 250 (i.e. j=1467 in [1251;1500], as job id is i=6)"
[1] "seed 56170 for j=218 out of 250 (i.e. j=1468 in [1251;1500], as job id is i=6)"
[1] "seed 18826 for j=219 out of 250 (i.e. j=1469 in [1251;1500], as job id is i=6)"
[1] "seed 62604 for j=220 out of 250 (i.e. j=1470 in [1251;1500], as job id is i=6)"
[1] "seed 714 for j=221 out of 250 (i.e. j=1471 in [1251;1500], as job id is i=6)"
[1] "seed 53688 for j=222 out of 250 (i.e. j=1472 in [1251;1500], as job id is i=6)"
[1] "seed 74570 for j=223 out of 250 (i.e. j=1473 in [1251;1500], as job id is i=6)"
[1] "seed 67701 for j=224 out of 250 (i.e. j=1474 in [1251;1500], as job id is i=6)"
[1] "seed 75384 for j=225 out of 250 (i.e. j=1475 in [1251;1500], as job id is i=6)"
[1] "seed 81269 for j=226 out of 250 (i.e. j=1476 in [1251;1500], as job id is i=6)"
[1] "seed 19629 for j=227 out of 250 (i.e. j=1477 in [1251;1500], as job id is i=6)"
[1] "seed 54648 for j=228 out of 250 (i.e. j=1478 in [1251;1500], as job id is i=6)"
[1] "seed 14452 for j=229 out of 250 (i.e. j=1479 in [1251;1500], as job id is i=6)"
[1] "seed 23305 for j=230 out of 250 (i.e. j=1480 in [1251;1500], as job id is i=6)"
[1] "seed 93316 for j=231 out of 250 (i.e. j=1481 in [1251;1500], as job id is i=6)"
[1] "seed 31486 for j=232 out of 250 (i.e. j=1482 in [1251;1500], as job id is i=6)"
[1] "seed 77890 for j=233 out of 250 (i.e. j=1483 in [1251;1500], as job id is i=6)"
[1] "seed 53744 for j=234 out of 250 (i.e. j=1484 in [1251;1500], as job id is i=6)"
[1] "seed 77916 for j=235 out of 250 (i.e. j=1485 in [1251;1500], as job id is i=6)"
[1] "seed 11760 for j=236 out of 250 (i.e. j=1486 in [1251;1500], as job id is i=6)"
[1] "seed 19767 for j=237 out of 250 (i.e. j=1487 in [1251;1500], as job id is i=6)"
[1] "seed 2728 for j=238 out of 250 (i.e. j=1488 in [1251;1500], as job id is i=6)"
[1] "seed 80935 for j=239 out of 250 (i.e. j=1489 in [1251;1500], as job id is i=6)"
[1] "seed 10496 for j=240 out of 250 (i.e. j=1490 in [1251;1500], as job id is i=6)"
[1] "seed 86767 for j=241 out of 250 (i.e. j=1491 in [1251;1500], as job id is i=6)"
[1] "seed 38513 for j=242 out of 250 (i.e. j=1492 in [1251;1500], as job id is i=6)"
[1] "seed 6776 for j=243 out of 250 (i.e. j=1493 in [1251;1500], as job id is i=6)"
[1] "seed 94193 for j=244 out of 250 (i.e. j=1494 in [1251;1500], as job id is i=6)"
[1] "seed 89520 for j=245 out of 250 (i.e. j=1495 in [1251;1500], as job id is i=6)"
[1] "seed 28570 for j=246 out of 250 (i.e. j=1496 in [1251;1500], as job id is i=6)"
[1] "seed 4273 for j=247 out of 250 (i.e. j=1497 in [1251;1500], as job id is i=6)"
[1] "seed 50629 for j=248 out of 250 (i.e. j=1498 in [1251;1500], as job id is i=6)"
[1] "seed 64313 for j=249 out of 250 (i.e. j=1499 in [1251;1500], as job id is i=6)"
[1] "seed 60787 for j=250 out of 250 (i.e. j=1500 in [1251;1500], as job id is i=6)"
There were 22 warnings (use warnings() to see them)
> rownames(RES) <- NULL
> save(RES,file=paste0(path.res,name,"-",iter_sim,".rda"))
> 
> ## * Summary results
> sessionInfo()
R version 4.1.2 (2021-11-01)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Red Hat Enterprise Linux 8.5 (Ootpa)

Matrix products: default
BLAS:   /opt/software/R/4.1.2/lib64/R/lib/libRblas.so
LAPACK: /opt/software/R/4.1.2/lib64/R/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] mvtnorm_1.1-3    DelayedGSD_0.0.3

loaded via a namespace (and not attached):
 [1] BB_2019.10-1     magrittr_2.0.3   tidyselect_1.1.2 munsell_0.5.0   
 [5] lattice_0.20-45  colorspace_2.0-3 xtable_1.8-4     R6_2.5.1        
 [9] quadprog_1.5-8   rlang_1.0.3      fansi_1.0.3      dplyr_1.0.9     
[13] grid_4.1.2       nlme_3.1-153     gtable_0.3.0     gsDesign_3.3.0  
[17] utf8_1.2.2       cli_3.3.0        ellipsis_0.3.2   tibble_3.1.7    
[21] lifecycle_1.0.1  crayon_1.5.1     purrr_0.3.4      ggplot2_3.3.6   
[25] tidyr_1.2.0      vctrs_0.4.1      glue_1.6.2       compiler_4.1.2  
[29] pillar_1.7.0     generics_0.1.3   scales_1.2.0     pkgconfig_2.0.3 
> summary(RES)
     method        stage           type             statistic     
 Min.   :1.0   Min.   :1.000   Length:1500        Min.   :0.1129  
 1st Qu.:1.0   1st Qu.:1.000   Class :character   1st Qu.:1.6872  
 Median :1.5   Median :1.000   Mode  :character   Median :2.4448  
 Mean   :1.5   Mean   :1.333                      Mean   :2.3629  
 3rd Qu.:2.0   3rd Qu.:2.000                      3rd Qu.:3.0488  
 Max.   :2.0   Max.   :2.000                      Max.   :5.4620  
                                                  NA's   :500     
  estimate_ML          se_ML             info           infoPC      
 Min.   :-0.3241   Min.   :0.3323   Min.   :4.310   Min.   :0.3368  
 1st Qu.: 0.5841   1st Qu.:0.3832   1st Qu.:5.768   1st Qu.:0.4507  
 Median : 0.8557   Median :0.4020   Median :6.302   Median :0.4924  
 Mean   : 0.8423   Mean   :0.4020   Mean   :6.344   Mean   :0.4957  
 3rd Qu.: 1.0794   3rd Qu.:0.4191   3rd Qu.:6.940   3rd Qu.:0.5423  
 Max.   : 2.1850   Max.   :0.4817   Max.   :9.810   Max.   :0.7665  
 NA's   :500       NA's   :1000     NA's   :184     NA's   :184     
   info.pred      infoPC.pred           uk              lk         
 Min.   :4.608   Min.   :0.3601   Min.   :2.241   Min.   :-0.3402  
 1st Qu.:6.109   1st Qu.:0.4774   1st Qu.:2.453   1st Qu.: 0.1538  
 Median :6.593   Median :0.5151   Median :2.521   Median : 0.3128  
 Mean   :6.669   Mean   :0.5211   Mean   :2.517   Mean   : 0.3303  
 3rd Qu.:7.260   3rd Qu.:0.5673   3rd Qu.:2.579   3rd Qu.: 0.5044  
 Max.   :9.574   Max.   :0.7481   Max.   :2.766   Max.   : 1.1274  
 NA's   :1000    NA's   :1000     NA's   :1000    NA's   :1000     
   decision            reason            p.value_ML        lower_ML      
 Length:1500        Length:1500        Min.   :0.0000   Min.   :-0.8479  
 Class :character   Class :character   1st Qu.:0.0012   1st Qu.:-0.0240  
 Mode  :character   Mode  :character   Median :0.0060   Median : 0.1707  
                                       Mean   :0.0642   Mean   : 0.1372  
                                       3rd Qu.:0.0314   3rd Qu.: 0.3150  
                                       Max.   :0.8633   Max.   : 1.2194  
                                       NA's   :1000     NA's   :1000     
    upper_ML       p.value_MUE       lower_MUE         upper_MUE     
 Min.   :0.6987   Min.   :0.0000   Min.   :-0.8649   Min.   :0.6943  
 1st Qu.:1.2747   1st Qu.:0.0018   1st Qu.:-0.0404   1st Qu.:1.2609  
 Median :1.5132   Median :0.0068   Median : 0.0822   Median :1.4785  
 Mean   :1.5875   Mean   :0.0360   Mean   : 0.1086   Mean   :1.5919  
 3rd Qu.:1.8998   3rd Qu.:0.0183   3rd Qu.: 0.2645   3rd Qu.:1.9088  
 Max.   :2.9769   Max.   :0.6327   Max.   : 1.2911   Max.   :2.9722  
 NA's   :1000     NA's   :1000     NA's   :1000      NA's   :1000    
  estimate_MUE           ck          time.interim        seed      
 Min.   :-0.0747   Min.   :0.0107   Min.   :526.0   Min.   :   76  
 1st Qu.: 0.6267   1st Qu.:1.4040   1st Qu.:583.0   1st Qu.:25156  
 Median : 0.8226   Median :1.4590   Median :600.0   Median :51350  
 Mean   : 0.8634   Mean   :1.4219   Mean   :600.9   Mean   :49694  
 3rd Qu.: 1.0854   3rd Qu.:1.5127   3rd Qu.:619.0   3rd Qu.:73113  
 Max.   : 2.0982   Max.   :1.7437   Max.   :676.0   Max.   :99307  
 NA's   :1000      NA's   :684                                     
  nX1.interim     nX2.interim     nX3.interim  computation.time
 Min.   :146.0   Min.   :131.0   Min.   :121   Min.   :0.681   
 1st Qu.:148.0   1st Qu.:135.0   1st Qu.:125   1st Qu.:0.920   
 Median :148.5   Median :137.0   Median :127   Median :1.004   
 Mean   :148.7   Mean   :136.7   Mean   :127   Mean   :1.028   
 3rd Qu.:150.0   3rd Qu.:138.0   3rd Qu.:129   3rd Qu.:1.127   
 Max.   :153.0   Max.   :143.0   Max.   :134   Max.   :3.837   
                                                               
> 
> #----------------------------------------------------------------------
> ### BATCH_simuMain.R ends here
> 
> proc.time()
   user  system elapsed 
259.537   0.430 270.798 
