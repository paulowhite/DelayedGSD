
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### BATCH_simuMain.R --- 
> #----------------------------------------------------------------------
> ## Author: Paul Blanche
> ## Created: Mar  5 2021 (10:56) 
> ## Version: 
> ## Last-Updated: jul  7 2022 (13:56) 
> ##           By: Brice Ozenne
> ##     Update #: 518
> #----------------------------------------------------------------------
> ## 
> ### Commentary: 
> ## 
> ### Change Log:
> #----------------------------------------------------------------------
> ## 
> ### Code:
> 
> ## ** BATCH loop
> ## cd /projects/biostat01/people/hpl802/DelayedGSD/
> ## for ITER in `seq 1 10`;
> ## do
> ## eval 'R CMD BATCH --vanilla "--args iter_sim='$ITER' n.iter_sim=10" BATCH_simuMain.R output/R-simuMain-'$ITER'.Rout &'
> ## done
> 
> ## [1] 1186669
> ## [2] 1186670
> ## [3] 1186671
> ## [4] 1186672
> ## [5] 1186673
> ## [6] 1186674
> ## [7] 1186675
> ## [8] 1186676
> ## [9] 1186677
> ## [10] 1186678
> 
> rm(list=ls())
>                                    # {{{ parameters
> ## * parameters
> name <- "ScenarioName" # To save the results
> method <- 1:2 # methods used to compute the boundaries
>                                         #---
> myseed <- 140786598
>                                         #--- to plan the trial ----
> NMC <- 250 # number of sequential simulations to run in parallel. Eg. with 250, then we can run 40 scripts in paralell to get N=10,000 runs in total.
> kMax <- 2  #max number of analyses (including final)
> alpha <- 0.025  #type I error (one sided)
> beta <- 0.2  #type II error
> informationRates <- c(0.5,1)  #planned  information rates
> rho_alpha <- 2  # rho parameter for alpha error spending function
> rho_beta <- 2  # rho parameter for beta error spending function
> ## deltaPower <- 0.75 # just to try another value when Id > Imax
> Id <- 0.55  #(expected) information rate at each decision analysis
> binding <- TRUE
>                                         #
>                                         #---- to generate data -----------
>                                         #
> block <- c(1,1,0,0) 
> allsd <- c(2.5,2.1,2.4) # sd, first from baseline measurement, then the two changes from baseline
> mean0 <- c(10,0,0) # mean placebo group (again, first is absolute value, then change from baseline)
> delta <- c(0,0.6,0.8) # treatment effect
> ar <- (0.86*2)*2 # orginial accrual rate from data from Corine is 0.86 per week, hence we multiply by 2 for by 14 days. As to low, we further multiply by 2
> cor011 <- -0.15 # ~ from data from Corine
> corij1 <- 0.68  # ~ from data from Corine
> cor0j1 <- -0.27  # ~ from data from Corine
> Miss11 <- 5/104 # miss both V1 and V2
> Miss12 <- 1/104 # miss V1 and but not V2
> Miss21 <- 6/104 # do not miss V1 and but miss V2
> Miss22 <- 92/104 # miss none
> PropForInterim <- 0.5 # Decide to have interim analysiz when PropForInterim % of all subjects have had the chance to have one follow-up measuement recorded in the data to be available for analysis.
> theDelta.t <- 1.50001 # time lag to process the data and make them ready to analyze after collecting them (unit is time between two follow-up visits)
> TimeFactor <- 14 ## number of days between two visits
>                                         #
>                                         #--- actually for both planing the trial  and generating data-----
>                                         #
>                                         #
> deltaPower <- abs(delta[3]) # effect (NOT Z-scale/unit, but outcome scale/unit!) that the study is powered for: should we choose ourselves or compute from other numbers above ???
> n <- ceiling(2*2*((allsd[3]/deltaPower)^2)*(qnorm(1-beta)-qnorm(alpha))^2) #104 with Corine's data # should we choose ourselves or compute from the above numbers ???
>                                         # inflate SS as required for interim
> 
>                                         # {{{ Set seeds for parallel computing and reproducibility
> ## * Seed
> args <- commandArgs(TRUE) ## BATCH MODE
> if(length(args)>0){
+     for (arg in args){
+         eval(parse(text=arg))
+     }
+ }else{ ## SLUMR
+     iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_ID"))
+     n.iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_COUNT"))
+ } ## interactive
> if(is.na(iter_sim)){iter_sim <- 1}
> if(is.na(n.iter_sim)){n.iter_sim <- 40}
> 
> set.seed(140786598)
> allseeds <- sample.int(n = 10*n.iter_sim*NMC, size = n.iter_sim*NMC, replace=FALSE) #x=1:(.Machine$integer.max) seems to be maximal possible
> # }}}
> 
> # {{{ set path to load and save and othe machine specific variables
> ## * path
> path <- "."
> path.res <- file.path(path,"Results","simuMain")
> if(dir.exists(path.res)==FALSE){
+     if(dir.exists(file.path(path,"Results"))==FALSE){
+     dir.create(file.path(path,"Results"))
+     }
+     dir.create(path.res)
+ }
> path.output <- file.path(path,"output","simuMain")
> if(dir.exists(path.output)==FALSE){
+     if(dir.exists(file.path(path,"output"))==FALSE){
+     dir.create(file.path(path,"output"))
+     }
+     dir.create(path.output)
+ }
> # }}}
> 
> 
> ## * libraries and functions
> library(DelayedGSD)
DelayedGSD version 0.0.3
> ## sourceDir <- function(path, trace = TRUE, ...) {
> ##     for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
> ##         if(trace) cat(nm,":")
> ##         source(file.path(path, nm), ...)
> ##         if(trace) cat("\n")
> ##     }
> ## }
> ## sourceDir(pathToLoad)
>     
> 
> ## * Compute inflation factor and sample size
> plannedB <- vector(mode = "list", length = 3)
> for(iMeth in method){ ## iMeth <- 1
+     plannedB[[iMeth]] <- CalcBoundaries(kMax=kMax,  
+                                         alpha=alpha, 
+                                         beta=beta,  
+                                         InfoR.i=informationRates,  
+                                         InfoR.d=c(Id,1),  
+                                         rho_alpha=rho_alpha,  
+                                         rho_beta=rho_beta,  
+                                         method=iMeth,  
+                                         cNotBelowFixedc=FALSE,
+                                         bindingFutility=binding,
+                                         delta=tail(delta,1))
+     ## summary(plannedB[[1]])
+     ## coef(plannedB[[iMeth]], type = "information")
+ }
Loading required namespace: gsDesign
Loading required package: mvtnorm
Loading required namespace: BB
> inflationFactor <- unlist(lapply(plannedB,function(iP){iP$planned$InflationFactor}))
> nGSD <- ceiling(n*inflationFactor)
> ##  plot(plannedB[[1]])
> 
> #
> # --- just to check---
> ## n
> ## InfoFixed <- ((qnorm(1-beta)-qnorm(alpha))/(deltaPower))^2
> ## InfoFixed
> ## n/(4*(allsd[3])^2)
> #---
> # }}}
> 
> 
> 
> 
> # {{{ technical details to loop
> RES <- NULL # initialize results to save
> allj <- ((iter_sim-1)*NMC + 1):(iter_sim*NMC) # indices of all iterations (replicates) for this job, accountng for the other jobs running in parallel
> # }}}
> 
> ## * Loop
> for(j in allj){ ## j <- 51 ## 5
+     startComp <- Sys.time()
+     myseedi <- allseeds[j]
+     # {{{ TRACE info (e.g. to check the Rout)
+     print(paste0("seed ",myseedi," for ","j=",which(j==allj)," out of ",NMC, " (i.e. j=",j," in [",(iter_sim-1)*NMC + 1,";",iter_sim*NMC,"], as job id is i=",iter_sim,")"))
+     # }}}
+     # {{{ Missing probabilities
+     MyMissProb <- matrix(c(Miss11,Miss12,Miss21,Miss22),ncol=2,nrow=2,byrow=TRUE) # to additionnally remove 1 more because some FASFL=N
+     colnames(MyMissProb) <- c("V2 missing","V2 not missing")
+     rownames(MyMissProb) <- c("V1 missing","V1 not missing")
+     # }}}
+ 
+                                         # {{{ generate data
+     ## ** simulate
+     res <- GenData(n=n, 
+                    N.fw=2,
+                    rand.block=block,
+                    allsd=allsd,
+                    mean0=mean0,
+                    delta=delta,
+                    ar=ar,
+                    cor.01.1=cor011,
+                    cor.ij.1=corij1,
+                    cor.0j.1=cor0j1,
+                    seed=myseedi,
+                    MissProb=MyMissProb,
+                    DigitsOutcome=2,
+                    TimeFactor=TimeFactor,
+                    DigitsTime=0
+                    )
+     d <- res$d
+     ## head(d,n=20)
+                                         # }}}
+                                         # {{{ reformat data like those of Corine
+     ## Make data long format
+     ## dd <- FormatAsCase(d)
+     ## head(dd)
+     ## summary(dd)
+                                         # }}}
+    
+                                         # {{{ make data available at interim
+                                         # Here we stop inclusion data collection for the interim analysis as soon as
+                                         # half of the participants have completed (or had the opportunity to complete) the follow-up 
+     thet <- d$t3[ceiling(n*PropForInterim)]
+     di <- SelectData(d,t=thet)
+     ## ddi <- FormatAsCase(di) # needed ????
+     ## head(d[d$id==52,])
+                                         # }}}
+     ## {{{ analyze data at at interim
+     ## ** interim
+     lmmI <- analyzeData(di, ddf = "nlme", data.decision = sum(d$t1 <= thet + theDelta.t*TimeFactor), getinfo = TRUE, trace = TRUE)
+     ## lmmI <- analyzeData(di, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     currentGSD <- vector(mode = "list", length = 3)
+     out.interim <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+ 
+         currentGSD[[iMeth]] <- update(plannedB[[iMeth]], delta = lmmI, trace = FALSE)
+ 
+         iConfint.interim <- confint(currentGSD[[iMeth]])
+         iInfo.interim <- coef(currentGSD[[iMeth]], type = "information")
+         iBoundary.interim <- coef(currentGSD[[iMeth]], type = "boundary")
+         iDecision.interim <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+         out.interim[[iMeth]] <-  data.frame(statistic = iConfint.interim[1,"statistic"],
+                                             estimate_ML = iConfint.interim[1,"estimate"],
+                                             se_ML = iConfint.interim[1,"se"],
+                                             info = iInfo.interim[1,"Interim"],
+                                             infoPC = iInfo.interim[1,"Interim.pc"],
+                                             info.pred = iInfo.interim[1,"Decision"],
+                                             infoPC.pred = iInfo.interim[1,"Decision.pc"],
+                                             uk = iBoundary.interim[1,"Ebound"],
+                                             lk = iBoundary.interim[1,"Fbound"],
+                                             decision = iDecision.interim["decision","stage 1"],
+                                             reason = iDecision.interim["reason.interim","stage 1"])
+     }
+     ## currentGSD[[1]]
+     ## plot(currentGSD[[1]])
+ 
+     ## ** decision
+     dDecision <- d[which(d$t1 <= thet + theDelta.t*TimeFactor),]
+     lmmD <- analyzeData(dDecision, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+     
+     out.decision <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+           
+         if(out.interim[[iMeth]]$decision == "stop"){
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, trace = FALSE)
+             ## plot(currentGSD[[iMeth]])
+ 
+             iConfint.decision <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.decision  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = iConfint.decision[1,"statistic"],
+                                                 p.value_ML = iConfint.decision[iConfint.decision$method == "ML","p.value"],
+                                                 lower_ML = iConfint.decision[iConfint.decision$method == "ML","lower"],
+                                                 upper_ML = iConfint.decision[iConfint.decision$method == "ML","upper"],
+                                                 estimate_ML = iConfint.decision[iConfint.decision$method == "ML","estimate"],
+                                                 p.value_MUE = iConfint.decision[iConfint.decision$method == "MUE","p.value"],
+                                                 lower_MUE = iConfint.decision[iConfint.decision$method == "MUE","lower"],
+                                                 upper_MUE = iConfint.decision[iConfint.decision$method == "MUE","upper"],
+                                                 estimate_MUE = iConfint.decision[iConfint.decision$method == "MUE","estimate"],
+                                                 info = iInfo.decision[1,"Interim"],
+                                                 infoPC = iInfo.decision[1,"Interim.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = unname(iDecision.decision["decision","stage 2"])
+                                                 )
+ 
+         }else{
+             ## update information
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, k = 1, type.k = "decision", trace = FALSE)
+ 
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = NA,
+                                                 p.value_ML = NA,
+                                                 lower_ML = NA,
+                                                 upper_ML = NA,
+                                                 estimate_ML = NA,
+                                                 p.value_MUE = NA,
+                                                 lower_MUE = NA,
+                                                 upper_MUE = NA,
+                                                 estimate_MUE = NA,
+                                                 info = iInfo.decision[1,"Decision"],
+                                                 infoPC = iInfo.decision[1,"Decision.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = NA)
+         }
+     }
+                                         # }}}
+                                         # {{{ Analyze data at decision
+ 
+     ## ** finale
+     dFinal <- d
+     lmmF <- analyzeData(dFinal, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     out.final <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+         if(out.interim[[iMeth]]$decision == "stop"){
+             out.final[[iMeth]] <- data.frame(statistic = NA,
+                                              p.value_ML = NA,
+                                              lower_ML = NA,
+                                              upper_ML = NA,
+                                              estimate_ML = NA,
+                                              p.value_MUE = NA,
+                                              lower_MUE = NA,
+                                              upper_MUE = NA,
+                                              estimate_MUE = NA,
+                                              info = NA,
+                                              infoPC = NA,
+                                              ck = NA,
+                                              decision = NA)
+ 
+         }else{
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmF, trace = FALSE)
+ 
+             ## plot(test)
+             ## summary(test)
+             iConfint.final <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.final <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.final <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.final  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.final[[iMeth]] <- data.frame(statistic = iConfint.final[1,"statistic"],
+                                              p.value_ML = iConfint.final[iConfint.final$method == "ML","p.value"],
+                                              lower_ML = iConfint.final[iConfint.final$method == "ML","lower"],
+                                              upper_ML = iConfint.final[iConfint.final$method == "ML","upper"],
+                                              estimate_ML = iConfint.final[iConfint.final$method == "ML","estimate"],
+                                              p.value_MUE = iConfint.final[iConfint.final$method == "MUE","p.value"],
+                                              lower_MUE = iConfint.final[iConfint.final$method == "MUE","lower"],
+                                              upper_MUE = iConfint.final[iConfint.final$method == "MUE","upper"],
+                                              estimate_MUE = iConfint.final[iConfint.final$method == "MUE","estimate"],
+                                              info = iInfo.final[1,"Interim"],
+                                              infoPC = iInfo.final[1,"Interim.pc"],
+                                              ck = iBoundary.final[1,"Cbound"],
+                                              decision = unname(coef(currentGSD[[iMeth]], type = "decision")["decision","stage 2"])
+                                              )
+         }
+     }
+                                         # }}}
+ 
+     stopComp <- Sys.time()
+                                         # {{{ Save results
+ 
+     outMerge <- do.call(rbind,lapply(method, function(iMeth){
+         iNames <- unique(c(names(out.interim[[iMeth]]),names(out.decision[[iMeth]]),names(out.final[[iMeth]])))
+         iMerge <- data.frame(matrix(NA, ncol = length(iNames)+3, nrow = 3, dimnames = list(NULL, c("method", "stage", "type", iNames))))
+         iMerge[1,c("method","stage","type",names(out.interim[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "interim", out.interim[[iMeth]]) 
+         iMerge[2,c("method","stage","type",names(out.decision[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "decision", out.decision[[iMeth]]) 
+         iMerge[3,c("method","stage","type",names(out.final[[iMeth]]))] <- data.frame(method = iMeth, stage = 2, type = "final", out.final[[iMeth]])
+         return(iMerge)
+     }))
+ 
+     ## outMerge[outMerge$method==3,]
+ 
+     out <- cbind(
+         ## results
+         outMerge,
+         ## simulation details
+         time.interim = thet,
+         seed=myseedi,             
+         nX1.interim = sum(!is.na(di$X1)),
+         nX2.interim = sum(!is.na(di$X2)),
+         nX3.interim = sum(!is.na(di$X3)),
+         ## computation time
+         computation.time=as.double(round(difftime(stopComp,startComp,units="secs"),3))
+     )
+     ## names(out) <- myColNames
+     RES <- rbind(RES,out)
+     save(RES,file=paste0(path.res,name,"(tempo)-",iter_sim,".rda"))
+                                         # }}}
+ }
[1] "seed 86697 for j=1 out of 250 (i.e. j=7501 in [7501;7750], as job id is i=31)"
Loading required namespace: nlme
[1] "seed 96654 for j=2 out of 250 (i.e. j=7502 in [7501;7750], as job id is i=31)"
[1] "seed 111 for j=3 out of 250 (i.e. j=7503 in [7501;7750], as job id is i=31)"
[1] "seed 61410 for j=4 out of 250 (i.e. j=7504 in [7501;7750], as job id is i=31)"
[1] "seed 17952 for j=5 out of 250 (i.e. j=7505 in [7501;7750], as job id is i=31)"
[1] "seed 99413 for j=6 out of 250 (i.e. j=7506 in [7501;7750], as job id is i=31)"
[1] "seed 43764 for j=7 out of 250 (i.e. j=7507 in [7501;7750], as job id is i=31)"
[1] "seed 64850 for j=8 out of 250 (i.e. j=7508 in [7501;7750], as job id is i=31)"
[1] "seed 50274 for j=9 out of 250 (i.e. j=7509 in [7501;7750], as job id is i=31)"
[1] "seed 314 for j=10 out of 250 (i.e. j=7510 in [7501;7750], as job id is i=31)"
[1] "seed 66066 for j=11 out of 250 (i.e. j=7511 in [7501;7750], as job id is i=31)"
[1] "seed 22365 for j=12 out of 250 (i.e. j=7512 in [7501;7750], as job id is i=31)"
[1] "seed 51469 for j=13 out of 250 (i.e. j=7513 in [7501;7750], as job id is i=31)"
[1] "seed 90736 for j=14 out of 250 (i.e. j=7514 in [7501;7750], as job id is i=31)"
[1] "seed 25303 for j=15 out of 250 (i.e. j=7515 in [7501;7750], as job id is i=31)"
[1] "seed 51429 for j=16 out of 250 (i.e. j=7516 in [7501;7750], as job id is i=31)"
[1] "seed 71153 for j=17 out of 250 (i.e. j=7517 in [7501;7750], as job id is i=31)"
[1] "seed 16421 for j=18 out of 250 (i.e. j=7518 in [7501;7750], as job id is i=31)"
[1] "seed 77153 for j=19 out of 250 (i.e. j=7519 in [7501;7750], as job id is i=31)"
[1] "seed 69474 for j=20 out of 250 (i.e. j=7520 in [7501;7750], as job id is i=31)"
[1] "seed 25329 for j=21 out of 250 (i.e. j=7521 in [7501;7750], as job id is i=31)"
[1] "seed 54313 for j=22 out of 250 (i.e. j=7522 in [7501;7750], as job id is i=31)"
[1] "seed 31614 for j=23 out of 250 (i.e. j=7523 in [7501;7750], as job id is i=31)"
[1] "seed 95067 for j=24 out of 250 (i.e. j=7524 in [7501;7750], as job id is i=31)"
[1] "seed 11096 for j=25 out of 250 (i.e. j=7525 in [7501;7750], as job id is i=31)"
[1] "seed 49537 for j=26 out of 250 (i.e. j=7526 in [7501;7750], as job id is i=31)"
[1] "seed 6288 for j=27 out of 250 (i.e. j=7527 in [7501;7750], as job id is i=31)"
[1] "seed 65076 for j=28 out of 250 (i.e. j=7528 in [7501;7750], as job id is i=31)"
[1] "seed 56451 for j=29 out of 250 (i.e. j=7529 in [7501;7750], as job id is i=31)"
[1] "seed 79664 for j=30 out of 250 (i.e. j=7530 in [7501;7750], as job id is i=31)"
[1] "seed 96071 for j=31 out of 250 (i.e. j=7531 in [7501;7750], as job id is i=31)"
[1] "seed 47683 for j=32 out of 250 (i.e. j=7532 in [7501;7750], as job id is i=31)"
[1] "seed 38127 for j=33 out of 250 (i.e. j=7533 in [7501;7750], as job id is i=31)"
[1] "seed 594 for j=34 out of 250 (i.e. j=7534 in [7501;7750], as job id is i=31)"
[1] "seed 5773 for j=35 out of 250 (i.e. j=7535 in [7501;7750], as job id is i=31)"
[1] "seed 11079 for j=36 out of 250 (i.e. j=7536 in [7501;7750], as job id is i=31)"
[1] "seed 84461 for j=37 out of 250 (i.e. j=7537 in [7501;7750], as job id is i=31)"
[1] "seed 70908 for j=38 out of 250 (i.e. j=7538 in [7501;7750], as job id is i=31)"
[1] "seed 30402 for j=39 out of 250 (i.e. j=7539 in [7501;7750], as job id is i=31)"
[1] "seed 85390 for j=40 out of 250 (i.e. j=7540 in [7501;7750], as job id is i=31)"
[1] "seed 72729 for j=41 out of 250 (i.e. j=7541 in [7501;7750], as job id is i=31)"
[1] "seed 7945 for j=42 out of 250 (i.e. j=7542 in [7501;7750], as job id is i=31)"
[1] "seed 23008 for j=43 out of 250 (i.e. j=7543 in [7501;7750], as job id is i=31)"
[1] "seed 22643 for j=44 out of 250 (i.e. j=7544 in [7501;7750], as job id is i=31)"
[1] "seed 44407 for j=45 out of 250 (i.e. j=7545 in [7501;7750], as job id is i=31)"
[1] "seed 96549 for j=46 out of 250 (i.e. j=7546 in [7501;7750], as job id is i=31)"
[1] "seed 63476 for j=47 out of 250 (i.e. j=7547 in [7501;7750], as job id is i=31)"
[1] "seed 57963 for j=48 out of 250 (i.e. j=7548 in [7501;7750], as job id is i=31)"
[1] "seed 52371 for j=49 out of 250 (i.e. j=7549 in [7501;7750], as job id is i=31)"
[1] "seed 5368 for j=50 out of 250 (i.e. j=7550 in [7501;7750], as job id is i=31)"
[1] "seed 65187 for j=51 out of 250 (i.e. j=7551 in [7501;7750], as job id is i=31)"
[1] "seed 99267 for j=52 out of 250 (i.e. j=7552 in [7501;7750], as job id is i=31)"
[1] "seed 72962 for j=53 out of 250 (i.e. j=7553 in [7501;7750], as job id is i=31)"
[1] "seed 66615 for j=54 out of 250 (i.e. j=7554 in [7501;7750], as job id is i=31)"
[1] "seed 39620 for j=55 out of 250 (i.e. j=7555 in [7501;7750], as job id is i=31)"
[1] "seed 35514 for j=56 out of 250 (i.e. j=7556 in [7501;7750], as job id is i=31)"
[1] "seed 32845 for j=57 out of 250 (i.e. j=7557 in [7501;7750], as job id is i=31)"
[1] "seed 35757 for j=58 out of 250 (i.e. j=7558 in [7501;7750], as job id is i=31)"
[1] "seed 68185 for j=59 out of 250 (i.e. j=7559 in [7501;7750], as job id is i=31)"
[1] "seed 1395 for j=60 out of 250 (i.e. j=7560 in [7501;7750], as job id is i=31)"
[1] "seed 20232 for j=61 out of 250 (i.e. j=7561 in [7501;7750], as job id is i=31)"
[1] "seed 89671 for j=62 out of 250 (i.e. j=7562 in [7501;7750], as job id is i=31)"
[1] "seed 71864 for j=63 out of 250 (i.e. j=7563 in [7501;7750], as job id is i=31)"
[1] "seed 44569 for j=64 out of 250 (i.e. j=7564 in [7501;7750], as job id is i=31)"
[1] "seed 58694 for j=65 out of 250 (i.e. j=7565 in [7501;7750], as job id is i=31)"
[1] "seed 72637 for j=66 out of 250 (i.e. j=7566 in [7501;7750], as job id is i=31)"
[1] "seed 71955 for j=67 out of 250 (i.e. j=7567 in [7501;7750], as job id is i=31)"
[1] "seed 10198 for j=68 out of 250 (i.e. j=7568 in [7501;7750], as job id is i=31)"
[1] "seed 26762 for j=69 out of 250 (i.e. j=7569 in [7501;7750], as job id is i=31)"
[1] "seed 29030 for j=70 out of 250 (i.e. j=7570 in [7501;7750], as job id is i=31)"
[1] "seed 25671 for j=71 out of 250 (i.e. j=7571 in [7501;7750], as job id is i=31)"
[1] "seed 34146 for j=72 out of 250 (i.e. j=7572 in [7501;7750], as job id is i=31)"
[1] "seed 64729 for j=73 out of 250 (i.e. j=7573 in [7501;7750], as job id is i=31)"
[1] "seed 69561 for j=74 out of 250 (i.e. j=7574 in [7501;7750], as job id is i=31)"
[1] "seed 46707 for j=75 out of 250 (i.e. j=7575 in [7501;7750], as job id is i=31)"
[1] "seed 74121 for j=76 out of 250 (i.e. j=7576 in [7501;7750], as job id is i=31)"
[1] "seed 27328 for j=77 out of 250 (i.e. j=7577 in [7501;7750], as job id is i=31)"
[1] "seed 67970 for j=78 out of 250 (i.e. j=7578 in [7501;7750], as job id is i=31)"
[1] "seed 14438 for j=79 out of 250 (i.e. j=7579 in [7501;7750], as job id is i=31)"
[1] "seed 36251 for j=80 out of 250 (i.e. j=7580 in [7501;7750], as job id is i=31)"
[1] "seed 31019 for j=81 out of 250 (i.e. j=7581 in [7501;7750], as job id is i=31)"
[1] "seed 18674 for j=82 out of 250 (i.e. j=7582 in [7501;7750], as job id is i=31)"
[1] "seed 38086 for j=83 out of 250 (i.e. j=7583 in [7501;7750], as job id is i=31)"
[1] "seed 53402 for j=84 out of 250 (i.e. j=7584 in [7501;7750], as job id is i=31)"
[1] "seed 10556 for j=85 out of 250 (i.e. j=7585 in [7501;7750], as job id is i=31)"
[1] "seed 8010 for j=86 out of 250 (i.e. j=7586 in [7501;7750], as job id is i=31)"
[1] "seed 56246 for j=87 out of 250 (i.e. j=7587 in [7501;7750], as job id is i=31)"
[1] "seed 60863 for j=88 out of 250 (i.e. j=7588 in [7501;7750], as job id is i=31)"
[1] "seed 13342 for j=89 out of 250 (i.e. j=7589 in [7501;7750], as job id is i=31)"
[1] "seed 10329 for j=90 out of 250 (i.e. j=7590 in [7501;7750], as job id is i=31)"
[1] "seed 75786 for j=91 out of 250 (i.e. j=7591 in [7501;7750], as job id is i=31)"
[1] "seed 75379 for j=92 out of 250 (i.e. j=7592 in [7501;7750], as job id is i=31)"
[1] "seed 33697 for j=93 out of 250 (i.e. j=7593 in [7501;7750], as job id is i=31)"
[1] "seed 81603 for j=94 out of 250 (i.e. j=7594 in [7501;7750], as job id is i=31)"
[1] "seed 73485 for j=95 out of 250 (i.e. j=7595 in [7501;7750], as job id is i=31)"
[1] "seed 28410 for j=96 out of 250 (i.e. j=7596 in [7501;7750], as job id is i=31)"
[1] "seed 93864 for j=97 out of 250 (i.e. j=7597 in [7501;7750], as job id is i=31)"
[1] "seed 75563 for j=98 out of 250 (i.e. j=7598 in [7501;7750], as job id is i=31)"
[1] "seed 16576 for j=99 out of 250 (i.e. j=7599 in [7501;7750], as job id is i=31)"
[1] "seed 4798 for j=100 out of 250 (i.e. j=7600 in [7501;7750], as job id is i=31)"
[1] "seed 5297 for j=101 out of 250 (i.e. j=7601 in [7501;7750], as job id is i=31)"
[1] "seed 18341 for j=102 out of 250 (i.e. j=7602 in [7501;7750], as job id is i=31)"
[1] "seed 89205 for j=103 out of 250 (i.e. j=7603 in [7501;7750], as job id is i=31)"
[1] "seed 90872 for j=104 out of 250 (i.e. j=7604 in [7501;7750], as job id is i=31)"
[1] "seed 10989 for j=105 out of 250 (i.e. j=7605 in [7501;7750], as job id is i=31)"
[1] "seed 63863 for j=106 out of 250 (i.e. j=7606 in [7501;7750], as job id is i=31)"
[1] "seed 61168 for j=107 out of 250 (i.e. j=7607 in [7501;7750], as job id is i=31)"
[1] "seed 46341 for j=108 out of 250 (i.e. j=7608 in [7501;7750], as job id is i=31)"
[1] "seed 71341 for j=109 out of 250 (i.e. j=7609 in [7501;7750], as job id is i=31)"
[1] "seed 34901 for j=110 out of 250 (i.e. j=7610 in [7501;7750], as job id is i=31)"
[1] "seed 307 for j=111 out of 250 (i.e. j=7611 in [7501;7750], as job id is i=31)"
[1] "seed 73272 for j=112 out of 250 (i.e. j=7612 in [7501;7750], as job id is i=31)"
[1] "seed 96039 for j=113 out of 250 (i.e. j=7613 in [7501;7750], as job id is i=31)"
[1] "seed 85253 for j=114 out of 250 (i.e. j=7614 in [7501;7750], as job id is i=31)"
[1] "seed 20309 for j=115 out of 250 (i.e. j=7615 in [7501;7750], as job id is i=31)"
[1] "seed 99630 for j=116 out of 250 (i.e. j=7616 in [7501;7750], as job id is i=31)"
[1] "seed 92521 for j=117 out of 250 (i.e. j=7617 in [7501;7750], as job id is i=31)"
[1] "seed 90178 for j=118 out of 250 (i.e. j=7618 in [7501;7750], as job id is i=31)"
[1] "seed 63606 for j=119 out of 250 (i.e. j=7619 in [7501;7750], as job id is i=31)"
[1] "seed 52245 for j=120 out of 250 (i.e. j=7620 in [7501;7750], as job id is i=31)"
[1] "seed 53394 for j=121 out of 250 (i.e. j=7621 in [7501;7750], as job id is i=31)"
[1] "seed 87459 for j=122 out of 250 (i.e. j=7622 in [7501;7750], as job id is i=31)"
[1] "seed 99868 for j=123 out of 250 (i.e. j=7623 in [7501;7750], as job id is i=31)"
[1] "seed 5859 for j=124 out of 250 (i.e. j=7624 in [7501;7750], as job id is i=31)"
[1] "seed 40140 for j=125 out of 250 (i.e. j=7625 in [7501;7750], as job id is i=31)"
[1] "seed 95335 for j=126 out of 250 (i.e. j=7626 in [7501;7750], as job id is i=31)"
[1] "seed 68461 for j=127 out of 250 (i.e. j=7627 in [7501;7750], as job id is i=31)"
[1] "seed 33781 for j=128 out of 250 (i.e. j=7628 in [7501;7750], as job id is i=31)"
[1] "seed 65036 for j=129 out of 250 (i.e. j=7629 in [7501;7750], as job id is i=31)"
[1] "seed 81405 for j=130 out of 250 (i.e. j=7630 in [7501;7750], as job id is i=31)"
[1] "seed 95762 for j=131 out of 250 (i.e. j=7631 in [7501;7750], as job id is i=31)"
[1] "seed 47373 for j=132 out of 250 (i.e. j=7632 in [7501;7750], as job id is i=31)"
[1] "seed 19840 for j=133 out of 250 (i.e. j=7633 in [7501;7750], as job id is i=31)"
[1] "seed 93285 for j=134 out of 250 (i.e. j=7634 in [7501;7750], as job id is i=31)"
[1] "seed 46653 for j=135 out of 250 (i.e. j=7635 in [7501;7750], as job id is i=31)"
[1] "seed 21651 for j=136 out of 250 (i.e. j=7636 in [7501;7750], as job id is i=31)"
[1] "seed 99244 for j=137 out of 250 (i.e. j=7637 in [7501;7750], as job id is i=31)"
[1] "seed 68421 for j=138 out of 250 (i.e. j=7638 in [7501;7750], as job id is i=31)"
[1] "seed 24590 for j=139 out of 250 (i.e. j=7639 in [7501;7750], as job id is i=31)"
[1] "seed 91001 for j=140 out of 250 (i.e. j=7640 in [7501;7750], as job id is i=31)"
[1] "seed 54758 for j=141 out of 250 (i.e. j=7641 in [7501;7750], as job id is i=31)"
[1] "seed 47211 for j=142 out of 250 (i.e. j=7642 in [7501;7750], as job id is i=31)"
[1] "seed 82463 for j=143 out of 250 (i.e. j=7643 in [7501;7750], as job id is i=31)"
[1] "seed 1291 for j=144 out of 250 (i.e. j=7644 in [7501;7750], as job id is i=31)"
[1] "seed 83263 for j=145 out of 250 (i.e. j=7645 in [7501;7750], as job id is i=31)"
[1] "seed 33639 for j=146 out of 250 (i.e. j=7646 in [7501;7750], as job id is i=31)"
[1] "seed 49037 for j=147 out of 250 (i.e. j=7647 in [7501;7750], as job id is i=31)"
[1] "seed 33554 for j=148 out of 250 (i.e. j=7648 in [7501;7750], as job id is i=31)"
[1] "seed 7172 for j=149 out of 250 (i.e. j=7649 in [7501;7750], as job id is i=31)"
[1] "seed 61980 for j=150 out of 250 (i.e. j=7650 in [7501;7750], as job id is i=31)"
[1] "seed 15480 for j=151 out of 250 (i.e. j=7651 in [7501;7750], as job id is i=31)"
[1] "seed 10327 for j=152 out of 250 (i.e. j=7652 in [7501;7750], as job id is i=31)"
[1] "seed 26974 for j=153 out of 250 (i.e. j=7653 in [7501;7750], as job id is i=31)"
[1] "seed 5077 for j=154 out of 250 (i.e. j=7654 in [7501;7750], as job id is i=31)"
[1] "seed 38915 for j=155 out of 250 (i.e. j=7655 in [7501;7750], as job id is i=31)"
[1] "seed 96744 for j=156 out of 250 (i.e. j=7656 in [7501;7750], as job id is i=31)"
[1] "seed 11932 for j=157 out of 250 (i.e. j=7657 in [7501;7750], as job id is i=31)"
[1] "seed 44821 for j=158 out of 250 (i.e. j=7658 in [7501;7750], as job id is i=31)"
[1] "seed 96366 for j=159 out of 250 (i.e. j=7659 in [7501;7750], as job id is i=31)"
[1] "seed 49431 for j=160 out of 250 (i.e. j=7660 in [7501;7750], as job id is i=31)"
[1] "seed 71295 for j=161 out of 250 (i.e. j=7661 in [7501;7750], as job id is i=31)"
[1] "seed 14327 for j=162 out of 250 (i.e. j=7662 in [7501;7750], as job id is i=31)"
[1] "seed 91757 for j=163 out of 250 (i.e. j=7663 in [7501;7750], as job id is i=31)"
[1] "seed 86141 for j=164 out of 250 (i.e. j=7664 in [7501;7750], as job id is i=31)"
[1] "seed 91408 for j=165 out of 250 (i.e. j=7665 in [7501;7750], as job id is i=31)"
[1] "seed 36297 for j=166 out of 250 (i.e. j=7666 in [7501;7750], as job id is i=31)"
[1] "seed 49672 for j=167 out of 250 (i.e. j=7667 in [7501;7750], as job id is i=31)"
[1] "seed 37627 for j=168 out of 250 (i.e. j=7668 in [7501;7750], as job id is i=31)"
[1] "seed 64749 for j=169 out of 250 (i.e. j=7669 in [7501;7750], as job id is i=31)"
[1] "seed 96380 for j=170 out of 250 (i.e. j=7670 in [7501;7750], as job id is i=31)"
[1] "seed 94207 for j=171 out of 250 (i.e. j=7671 in [7501;7750], as job id is i=31)"
[1] "seed 55151 for j=172 out of 250 (i.e. j=7672 in [7501;7750], as job id is i=31)"
[1] "seed 37520 for j=173 out of 250 (i.e. j=7673 in [7501;7750], as job id is i=31)"
[1] "seed 31897 for j=174 out of 250 (i.e. j=7674 in [7501;7750], as job id is i=31)"
[1] "seed 59775 for j=175 out of 250 (i.e. j=7675 in [7501;7750], as job id is i=31)"
[1] "seed 86795 for j=176 out of 250 (i.e. j=7676 in [7501;7750], as job id is i=31)"
[1] "seed 73281 for j=177 out of 250 (i.e. j=7677 in [7501;7750], as job id is i=31)"
[1] "seed 80676 for j=178 out of 250 (i.e. j=7678 in [7501;7750], as job id is i=31)"
[1] "seed 90882 for j=179 out of 250 (i.e. j=7679 in [7501;7750], as job id is i=31)"
[1] "seed 39746 for j=180 out of 250 (i.e. j=7680 in [7501;7750], as job id is i=31)"
[1] "seed 60206 for j=181 out of 250 (i.e. j=7681 in [7501;7750], as job id is i=31)"
[1] "seed 85556 for j=182 out of 250 (i.e. j=7682 in [7501;7750], as job id is i=31)"
[1] "seed 16133 for j=183 out of 250 (i.e. j=7683 in [7501;7750], as job id is i=31)"
[1] "seed 51976 for j=184 out of 250 (i.e. j=7684 in [7501;7750], as job id is i=31)"
[1] "seed 49963 for j=185 out of 250 (i.e. j=7685 in [7501;7750], as job id is i=31)"
[1] "seed 22341 for j=186 out of 250 (i.e. j=7686 in [7501;7750], as job id is i=31)"
[1] "seed 7073 for j=187 out of 250 (i.e. j=7687 in [7501;7750], as job id is i=31)"
[1] "seed 56846 for j=188 out of 250 (i.e. j=7688 in [7501;7750], as job id is i=31)"
[1] "seed 36979 for j=189 out of 250 (i.e. j=7689 in [7501;7750], as job id is i=31)"
[1] "seed 58811 for j=190 out of 250 (i.e. j=7690 in [7501;7750], as job id is i=31)"
[1] "seed 60846 for j=191 out of 250 (i.e. j=7691 in [7501;7750], as job id is i=31)"
[1] "seed 51268 for j=192 out of 250 (i.e. j=7692 in [7501;7750], as job id is i=31)"
[1] "seed 98591 for j=193 out of 250 (i.e. j=7693 in [7501;7750], as job id is i=31)"
[1] "seed 34273 for j=194 out of 250 (i.e. j=7694 in [7501;7750], as job id is i=31)"
[1] "seed 52300 for j=195 out of 250 (i.e. j=7695 in [7501;7750], as job id is i=31)"
[1] "seed 8947 for j=196 out of 250 (i.e. j=7696 in [7501;7750], as job id is i=31)"
[1] "seed 84480 for j=197 out of 250 (i.e. j=7697 in [7501;7750], as job id is i=31)"
[1] "seed 15195 for j=198 out of 250 (i.e. j=7698 in [7501;7750], as job id is i=31)"
[1] "seed 14076 for j=199 out of 250 (i.e. j=7699 in [7501;7750], as job id is i=31)"
[1] "seed 57634 for j=200 out of 250 (i.e. j=7700 in [7501;7750], as job id is i=31)"
[1] "seed 62682 for j=201 out of 250 (i.e. j=7701 in [7501;7750], as job id is i=31)"
[1] "seed 11819 for j=202 out of 250 (i.e. j=7702 in [7501;7750], as job id is i=31)"
[1] "seed 65648 for j=203 out of 250 (i.e. j=7703 in [7501;7750], as job id is i=31)"
[1] "seed 10835 for j=204 out of 250 (i.e. j=7704 in [7501;7750], as job id is i=31)"
[1] "seed 42193 for j=205 out of 250 (i.e. j=7705 in [7501;7750], as job id is i=31)"
[1] "seed 12742 for j=206 out of 250 (i.e. j=7706 in [7501;7750], as job id is i=31)"
[1] "seed 97925 for j=207 out of 250 (i.e. j=7707 in [7501;7750], as job id is i=31)"
[1] "seed 366 for j=208 out of 250 (i.e. j=7708 in [7501;7750], as job id is i=31)"
[1] "seed 12654 for j=209 out of 250 (i.e. j=7709 in [7501;7750], as job id is i=31)"
[1] "seed 17870 for j=210 out of 250 (i.e. j=7710 in [7501;7750], as job id is i=31)"
[1] "seed 57541 for j=211 out of 250 (i.e. j=7711 in [7501;7750], as job id is i=31)"
[1] "seed 5888 for j=212 out of 250 (i.e. j=7712 in [7501;7750], as job id is i=31)"
[1] "seed 45772 for j=213 out of 250 (i.e. j=7713 in [7501;7750], as job id is i=31)"
[1] "seed 23841 for j=214 out of 250 (i.e. j=7714 in [7501;7750], as job id is i=31)"
[1] "seed 65544 for j=215 out of 250 (i.e. j=7715 in [7501;7750], as job id is i=31)"
[1] "seed 25267 for j=216 out of 250 (i.e. j=7716 in [7501;7750], as job id is i=31)"
[1] "seed 51467 for j=217 out of 250 (i.e. j=7717 in [7501;7750], as job id is i=31)"
[1] "seed 35321 for j=218 out of 250 (i.e. j=7718 in [7501;7750], as job id is i=31)"
[1] "seed 45957 for j=219 out of 250 (i.e. j=7719 in [7501;7750], as job id is i=31)"
[1] "seed 46302 for j=220 out of 250 (i.e. j=7720 in [7501;7750], as job id is i=31)"
[1] "seed 20509 for j=221 out of 250 (i.e. j=7721 in [7501;7750], as job id is i=31)"
[1] "seed 26563 for j=222 out of 250 (i.e. j=7722 in [7501;7750], as job id is i=31)"
[1] "seed 24437 for j=223 out of 250 (i.e. j=7723 in [7501;7750], as job id is i=31)"
[1] "seed 95311 for j=224 out of 250 (i.e. j=7724 in [7501;7750], as job id is i=31)"
[1] "seed 79605 for j=225 out of 250 (i.e. j=7725 in [7501;7750], as job id is i=31)"
[1] "seed 18907 for j=226 out of 250 (i.e. j=7726 in [7501;7750], as job id is i=31)"
[1] "seed 55040 for j=227 out of 250 (i.e. j=7727 in [7501;7750], as job id is i=31)"
[1] "seed 87656 for j=228 out of 250 (i.e. j=7728 in [7501;7750], as job id is i=31)"
[1] "seed 54654 for j=229 out of 250 (i.e. j=7729 in [7501;7750], as job id is i=31)"
[1] "seed 32688 for j=230 out of 250 (i.e. j=7730 in [7501;7750], as job id is i=31)"
[1] "seed 44291 for j=231 out of 250 (i.e. j=7731 in [7501;7750], as job id is i=31)"
[1] "seed 20238 for j=232 out of 250 (i.e. j=7732 in [7501;7750], as job id is i=31)"
[1] "seed 6807 for j=233 out of 250 (i.e. j=7733 in [7501;7750], as job id is i=31)"
[1] "seed 25543 for j=234 out of 250 (i.e. j=7734 in [7501;7750], as job id is i=31)"
[1] "seed 62910 for j=235 out of 250 (i.e. j=7735 in [7501;7750], as job id is i=31)"
[1] "seed 39927 for j=236 out of 250 (i.e. j=7736 in [7501;7750], as job id is i=31)"
[1] "seed 9439 for j=237 out of 250 (i.e. j=7737 in [7501;7750], as job id is i=31)"
[1] "seed 13876 for j=238 out of 250 (i.e. j=7738 in [7501;7750], as job id is i=31)"
[1] "seed 31441 for j=239 out of 250 (i.e. j=7739 in [7501;7750], as job id is i=31)"
[1] "seed 3708 for j=240 out of 250 (i.e. j=7740 in [7501;7750], as job id is i=31)"
[1] "seed 53974 for j=241 out of 250 (i.e. j=7741 in [7501;7750], as job id is i=31)"
[1] "seed 21890 for j=242 out of 250 (i.e. j=7742 in [7501;7750], as job id is i=31)"
[1] "seed 21084 for j=243 out of 250 (i.e. j=7743 in [7501;7750], as job id is i=31)"
[1] "seed 52984 for j=244 out of 250 (i.e. j=7744 in [7501;7750], as job id is i=31)"
[1] "seed 36763 for j=245 out of 250 (i.e. j=7745 in [7501;7750], as job id is i=31)"
[1] "seed 99883 for j=246 out of 250 (i.e. j=7746 in [7501;7750], as job id is i=31)"
[1] "seed 72855 for j=247 out of 250 (i.e. j=7747 in [7501;7750], as job id is i=31)"
[1] "seed 7247 for j=248 out of 250 (i.e. j=7748 in [7501;7750], as job id is i=31)"
[1] "seed 23596 for j=249 out of 250 (i.e. j=7749 in [7501;7750], as job id is i=31)"
[1] "seed 35571 for j=250 out of 250 (i.e. j=7750 in [7501;7750], as job id is i=31)"
There were 18 warnings (use warnings() to see them)
> rownames(RES) <- NULL
> save(RES,file=paste0(path.res,name,"-",iter_sim,".rda"))
> 
> ## * Summary results
> sessionInfo()
R version 4.1.2 (2021-11-01)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Red Hat Enterprise Linux 8.5 (Ootpa)

Matrix products: default
BLAS:   /opt/software/R/4.1.2/lib64/R/lib/libRblas.so
LAPACK: /opt/software/R/4.1.2/lib64/R/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] mvtnorm_1.1-3    DelayedGSD_0.0.3

loaded via a namespace (and not attached):
 [1] BB_2019.10-1     magrittr_2.0.3   tidyselect_1.1.2 munsell_0.5.0   
 [5] lattice_0.20-45  colorspace_2.0-3 xtable_1.8-4     R6_2.5.1        
 [9] quadprog_1.5-8   rlang_1.0.3      fansi_1.0.3      dplyr_1.0.9     
[13] grid_4.1.2       nlme_3.1-153     gtable_0.3.0     gsDesign_3.3.0  
[17] utf8_1.2.2       cli_3.3.0        ellipsis_0.3.2   tibble_3.1.7    
[21] lifecycle_1.0.1  crayon_1.5.1     purrr_0.3.4      ggplot2_3.3.6   
[25] tidyr_1.2.0      vctrs_0.4.1      glue_1.6.2       compiler_4.1.2  
[29] pillar_1.7.0     generics_0.1.3   scales_1.2.0     pkgconfig_2.0.3 
> summary(RES)
     method        stage           type             statistic    
 Min.   :1.0   Min.   :1.000   Length:1500        Min.   :0.058  
 1st Qu.:1.0   1st Qu.:1.000   Class :character   1st Qu.:1.561  
 Median :1.5   Median :1.000   Mode  :character   Median :2.303  
 Mean   :1.5   Mean   :1.333                      Mean   :2.264  
 3rd Qu.:2.0   3rd Qu.:2.000                      3rd Qu.:3.024  
 Max.   :2.0   Max.   :2.000                      Max.   :4.754  
                                                  NA's   :500    
  estimate_ML          se_ML             info           infoPC      
 Min.   :-0.7669   Min.   :0.3254   Min.   :4.434   Min.   :0.3465  
 1st Qu.: 0.5118   1st Qu.:0.3839   1st Qu.:5.742   1st Qu.:0.4487  
 Median : 0.8034   Median :0.4035   Median :6.233   Median :0.4871  
 Mean   : 0.7961   Mean   :0.4022   Mean   :6.330   Mean   :0.4946  
 3rd Qu.: 1.0450   3rd Qu.:0.4207   3rd Qu.:6.835   3rd Qu.:0.5341  
 Max.   : 1.9207   Max.   :0.4749   Max.   :9.444   Max.   :0.7379  
 NA's   :500       NA's   :1000     NA's   :162     NA's   :162     
   info.pred      infoPC.pred           uk              lk         
 Min.   :4.694   Min.   :0.3668   Min.   :2.208   Min.   :-0.2925  
 1st Qu.:5.997   1st Qu.:0.4686   1st Qu.:2.456   1st Qu.: 0.1390  
 Median :6.545   Median :0.5114   Median :2.526   Median : 0.2987  
 Mean   :6.654   Mean   :0.5199   Mean   :2.518   Mean   : 0.3266  
 3rd Qu.:7.171   3rd Qu.:0.5603   3rd Qu.:2.585   3rd Qu.: 0.4968  
 Max.   :9.922   Max.   :0.7753   Max.   :2.748   Max.   : 1.2267  
 NA's   :1000    NA's   :1000     NA's   :1000    NA's   :1000     
   decision            reason            p.value_ML        lower_ML      
 Length:1500        Length:1500        Min.   :0.0000   Min.   :-0.9747  
 Class :character   Class :character   1st Qu.:0.0015   1st Qu.:-0.1003  
 Mode  :character   Mode  :character   Median :0.0095   Median : 0.1357  
                                       Mean   :0.0790   Mean   : 0.0997  
                                       3rd Qu.:0.0574   3rd Qu.: 0.3056  
                                       Max.   :0.9325   Max.   : 0.8867  
                                       NA's   :1000     NA's   :1000     
    upper_ML       p.value_MUE       lower_MUE         upper_MUE     
 Min.   :0.6528   Min.   :0.0000   Min.   :-0.9703   Min.   :0.6718  
 1st Qu.:1.1832   1st Qu.:0.0030   1st Qu.:-0.1029   1st Qu.:1.1856  
 Median :1.4938   Median :0.0076   Median : 0.0819   Median :1.4462  
 Mean   :1.5272   Mean   :0.0485   Mean   : 0.0672   Mean   :1.5331  
 3rd Qu.:1.8622   3rd Qu.:0.0301   3rd Qu.: 0.2088   3rd Qu.:1.8847  
 Max.   :2.6393   Max.   :0.8098   Max.   : 1.3123   Max.   :2.6452  
 NA's   :1000     NA's   :1000     NA's   :1000      NA's   :1000    
  estimate_MUE           ck          time.interim        seed      
 Min.   :-0.1492   Min.   :0.2628   Min.   :534.0   Min.   :  111  
 1st Qu.: 0.5442   1st Qu.:1.4005   1st Qu.:586.0   1st Qu.:23008  
 Median : 0.8000   Median :1.4481   Median :605.0   Median :49234  
 Mean   : 0.8074   Mean   :1.4244   Mean   :604.9   Mean   :48691  
 3rd Qu.: 1.0644   3rd Qu.:1.5077   3rd Qu.:623.0   3rd Qu.:71864  
 Max.   : 1.8834   Max.   :1.7209   Max.   :674.0   Max.   :99883  
 NA's   :1000      NA's   :662                                     
  nX1.interim     nX2.interim     nX3.interim  computation.time
 Min.   :146.0   Min.   :130.0   Min.   :120   Min.   :0.669   
 1st Qu.:147.0   1st Qu.:135.0   1st Qu.:125   1st Qu.:0.888   
 Median :149.0   Median :136.5   Median :127   Median :0.984   
 Mean   :148.7   Mean   :136.7   Mean   :127   Mean   :1.008   
 3rd Qu.:150.0   3rd Qu.:138.0   3rd Qu.:129   3rd Qu.:1.125   
 Max.   :154.0   Max.   :143.0   Max.   :134   Max.   :3.786   
                                                               
> 
> #----------------------------------------------------------------------
> ### BATCH_simuMain.R ends here
> 
> proc.time()
   user  system elapsed 
255.269   0.400 266.189 
