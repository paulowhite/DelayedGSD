
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### BATCH_simuMain.R --- 
> #----------------------------------------------------------------------
> ## Author: Paul Blanche
> ## Created: Mar  5 2021 (10:56) 
> ## Version: 
> ## Last-Updated: jul  7 2022 (13:56) 
> ##           By: Brice Ozenne
> ##     Update #: 518
> #----------------------------------------------------------------------
> ## 
> ### Commentary: 
> ## 
> ### Change Log:
> #----------------------------------------------------------------------
> ## 
> ### Code:
> 
> ## ** BATCH loop
> ## cd /projects/biostat01/people/hpl802/DelayedGSD/
> ## for ITER in `seq 1 10`;
> ## do
> ## eval 'R CMD BATCH --vanilla "--args iter_sim='$ITER' n.iter_sim=10" BATCH_simuMain.R output/R-simuMain-'$ITER'.Rout &'
> ## done
> 
> ## [1] 1186669
> ## [2] 1186670
> ## [3] 1186671
> ## [4] 1186672
> ## [5] 1186673
> ## [6] 1186674
> ## [7] 1186675
> ## [8] 1186676
> ## [9] 1186677
> ## [10] 1186678
> 
> rm(list=ls())
>                                    # {{{ parameters
> ## * parameters
> name <- "ScenarioName" # To save the results
> method <- 1:2 # methods used to compute the boundaries
>                                         #---
> myseed <- 140786598
>                                         #--- to plan the trial ----
> NMC <- 250 # number of sequential simulations to run in parallel. Eg. with 250, then we can run 40 scripts in paralell to get N=10,000 runs in total.
> kMax <- 2  #max number of analyses (including final)
> alpha <- 0.025  #type I error (one sided)
> beta <- 0.2  #type II error
> informationRates <- c(0.5,1)  #planned  information rates
> rho_alpha <- 2  # rho parameter for alpha error spending function
> rho_beta <- 2  # rho parameter for beta error spending function
> ## deltaPower <- 0.75 # just to try another value when Id > Imax
> Id <- 0.55  #(expected) information rate at each decision analysis
> binding <- TRUE
>                                         #
>                                         #---- to generate data -----------
>                                         #
> block <- c(1,1,0,0) 
> allsd <- c(2.5,2.1,2.4) # sd, first from baseline measurement, then the two changes from baseline
> mean0 <- c(10,0,0) # mean placebo group (again, first is absolute value, then change from baseline)
> delta <- c(0,0.6,0.8) # treatment effect
> ar <- (0.86*2)*2 # orginial accrual rate from data from Corine is 0.86 per week, hence we multiply by 2 for by 14 days. As to low, we further multiply by 2
> cor011 <- -0.15 # ~ from data from Corine
> corij1 <- 0.68  # ~ from data from Corine
> cor0j1 <- -0.27  # ~ from data from Corine
> Miss11 <- 5/104 # miss both V1 and V2
> Miss12 <- 1/104 # miss V1 and but not V2
> Miss21 <- 6/104 # do not miss V1 and but miss V2
> Miss22 <- 92/104 # miss none
> PropForInterim <- 0.5 # Decide to have interim analysiz when PropForInterim % of all subjects have had the chance to have one follow-up measuement recorded in the data to be available for analysis.
> theDelta.t <- 1.50001 # time lag to process the data and make them ready to analyze after collecting them (unit is time between two follow-up visits)
> TimeFactor <- 14 ## number of days between two visits
>                                         #
>                                         #--- actually for both planing the trial  and generating data-----
>                                         #
>                                         #
> deltaPower <- abs(delta[3]) # effect (NOT Z-scale/unit, but outcome scale/unit!) that the study is powered for: should we choose ourselves or compute from other numbers above ???
> n <- ceiling(2*2*((allsd[3]/deltaPower)^2)*(qnorm(1-beta)-qnorm(alpha))^2) #104 with Corine's data # should we choose ourselves or compute from the above numbers ???
>                                         # inflate SS as required for interim
> 
>                                         # {{{ Set seeds for parallel computing and reproducibility
> ## * Seed
> args <- commandArgs(TRUE) ## BATCH MODE
> if(length(args)>0){
+     for (arg in args){
+         eval(parse(text=arg))
+     }
+ }else{ ## SLUMR
+     iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_ID"))
+     n.iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_COUNT"))
+ } ## interactive
> if(is.na(iter_sim)){iter_sim <- 1}
> if(is.na(n.iter_sim)){n.iter_sim <- 40}
> 
> set.seed(140786598)
> allseeds <- sample.int(n = 10*n.iter_sim*NMC, size = n.iter_sim*NMC, replace=FALSE) #x=1:(.Machine$integer.max) seems to be maximal possible
> # }}}
> 
> # {{{ set path to load and save and othe machine specific variables
> ## * path
> path <- "."
> path.res <- file.path(path,"Results","simuMain")
> if(dir.exists(path.res)==FALSE){
+     if(dir.exists(file.path(path,"Results"))==FALSE){
+     dir.create(file.path(path,"Results"))
+     }
+     dir.create(path.res)
+ }
> path.output <- file.path(path,"output","simuMain")
> if(dir.exists(path.output)==FALSE){
+     if(dir.exists(file.path(path,"output"))==FALSE){
+     dir.create(file.path(path,"output"))
+     }
+     dir.create(path.output)
+ }
> # }}}
> 
> 
> ## * libraries and functions
> library(DelayedGSD)
DelayedGSD version 0.0.3
> ## sourceDir <- function(path, trace = TRUE, ...) {
> ##     for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
> ##         if(trace) cat(nm,":")
> ##         source(file.path(path, nm), ...)
> ##         if(trace) cat("\n")
> ##     }
> ## }
> ## sourceDir(pathToLoad)
>     
> 
> ## * Compute inflation factor and sample size
> plannedB <- vector(mode = "list", length = 3)
> for(iMeth in method){ ## iMeth <- 1
+     plannedB[[iMeth]] <- CalcBoundaries(kMax=kMax,  
+                                         alpha=alpha, 
+                                         beta=beta,  
+                                         InfoR.i=informationRates,  
+                                         InfoR.d=c(Id,1),  
+                                         rho_alpha=rho_alpha,  
+                                         rho_beta=rho_beta,  
+                                         method=iMeth,  
+                                         cNotBelowFixedc=FALSE,
+                                         bindingFutility=binding,
+                                         delta=tail(delta,1))
+     ## summary(plannedB[[1]])
+     ## coef(plannedB[[iMeth]], type = "information")
+ }
Loading required namespace: gsDesign
Loading required package: mvtnorm
Loading required namespace: BB
> inflationFactor <- unlist(lapply(plannedB,function(iP){iP$planned$InflationFactor}))
> nGSD <- ceiling(n*inflationFactor)
> ##  plot(plannedB[[1]])
> 
> #
> # --- just to check---
> ## n
> ## InfoFixed <- ((qnorm(1-beta)-qnorm(alpha))/(deltaPower))^2
> ## InfoFixed
> ## n/(4*(allsd[3])^2)
> #---
> # }}}
> 
> 
> 
> 
> # {{{ technical details to loop
> RES <- NULL # initialize results to save
> allj <- ((iter_sim-1)*NMC + 1):(iter_sim*NMC) # indices of all iterations (replicates) for this job, accountng for the other jobs running in parallel
> # }}}
> 
> ## * Loop
> for(j in allj){ ## j <- 51 ## 5
+     startComp <- Sys.time()
+     myseedi <- allseeds[j]
+     # {{{ TRACE info (e.g. to check the Rout)
+     print(paste0("seed ",myseedi," for ","j=",which(j==allj)," out of ",NMC, " (i.e. j=",j," in [",(iter_sim-1)*NMC + 1,";",iter_sim*NMC,"], as job id is i=",iter_sim,")"))
+     # }}}
+     # {{{ Missing probabilities
+     MyMissProb <- matrix(c(Miss11,Miss12,Miss21,Miss22),ncol=2,nrow=2,byrow=TRUE) # to additionnally remove 1 more because some FASFL=N
+     colnames(MyMissProb) <- c("V2 missing","V2 not missing")
+     rownames(MyMissProb) <- c("V1 missing","V1 not missing")
+     # }}}
+ 
+                                         # {{{ generate data
+     ## ** simulate
+     res <- GenData(n=n, 
+                    N.fw=2,
+                    rand.block=block,
+                    allsd=allsd,
+                    mean0=mean0,
+                    delta=delta,
+                    ar=ar,
+                    cor.01.1=cor011,
+                    cor.ij.1=corij1,
+                    cor.0j.1=cor0j1,
+                    seed=myseedi,
+                    MissProb=MyMissProb,
+                    DigitsOutcome=2,
+                    TimeFactor=TimeFactor,
+                    DigitsTime=0
+                    )
+     d <- res$d
+     ## head(d,n=20)
+                                         # }}}
+                                         # {{{ reformat data like those of Corine
+     ## Make data long format
+     ## dd <- FormatAsCase(d)
+     ## head(dd)
+     ## summary(dd)
+                                         # }}}
+    
+                                         # {{{ make data available at interim
+                                         # Here we stop inclusion data collection for the interim analysis as soon as
+                                         # half of the participants have completed (or had the opportunity to complete) the follow-up 
+     thet <- d$t3[ceiling(n*PropForInterim)]
+     di <- SelectData(d,t=thet)
+     ## ddi <- FormatAsCase(di) # needed ????
+     ## head(d[d$id==52,])
+                                         # }}}
+     ## {{{ analyze data at at interim
+     ## ** interim
+     lmmI <- analyzeData(di, ddf = "nlme", data.decision = sum(d$t1 <= thet + theDelta.t*TimeFactor), getinfo = TRUE, trace = TRUE)
+     ## lmmI <- analyzeData(di, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     currentGSD <- vector(mode = "list", length = 3)
+     out.interim <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+ 
+         currentGSD[[iMeth]] <- update(plannedB[[iMeth]], delta = lmmI, trace = FALSE)
+ 
+         iConfint.interim <- confint(currentGSD[[iMeth]])
+         iInfo.interim <- coef(currentGSD[[iMeth]], type = "information")
+         iBoundary.interim <- coef(currentGSD[[iMeth]], type = "boundary")
+         iDecision.interim <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+         out.interim[[iMeth]] <-  data.frame(statistic = iConfint.interim[1,"statistic"],
+                                             estimate_ML = iConfint.interim[1,"estimate"],
+                                             se_ML = iConfint.interim[1,"se"],
+                                             info = iInfo.interim[1,"Interim"],
+                                             infoPC = iInfo.interim[1,"Interim.pc"],
+                                             info.pred = iInfo.interim[1,"Decision"],
+                                             infoPC.pred = iInfo.interim[1,"Decision.pc"],
+                                             uk = iBoundary.interim[1,"Ebound"],
+                                             lk = iBoundary.interim[1,"Fbound"],
+                                             decision = iDecision.interim["decision","stage 1"],
+                                             reason = iDecision.interim["reason.interim","stage 1"])
+     }
+     ## currentGSD[[1]]
+     ## plot(currentGSD[[1]])
+ 
+     ## ** decision
+     dDecision <- d[which(d$t1 <= thet + theDelta.t*TimeFactor),]
+     lmmD <- analyzeData(dDecision, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+     
+     out.decision <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+           
+         if(out.interim[[iMeth]]$decision == "stop"){
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, trace = FALSE)
+             ## plot(currentGSD[[iMeth]])
+ 
+             iConfint.decision <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.decision  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = iConfint.decision[1,"statistic"],
+                                                 p.value_ML = iConfint.decision[iConfint.decision$method == "ML","p.value"],
+                                                 lower_ML = iConfint.decision[iConfint.decision$method == "ML","lower"],
+                                                 upper_ML = iConfint.decision[iConfint.decision$method == "ML","upper"],
+                                                 estimate_ML = iConfint.decision[iConfint.decision$method == "ML","estimate"],
+                                                 p.value_MUE = iConfint.decision[iConfint.decision$method == "MUE","p.value"],
+                                                 lower_MUE = iConfint.decision[iConfint.decision$method == "MUE","lower"],
+                                                 upper_MUE = iConfint.decision[iConfint.decision$method == "MUE","upper"],
+                                                 estimate_MUE = iConfint.decision[iConfint.decision$method == "MUE","estimate"],
+                                                 info = iInfo.decision[1,"Interim"],
+                                                 infoPC = iInfo.decision[1,"Interim.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = unname(iDecision.decision["decision","stage 2"])
+                                                 )
+ 
+         }else{
+             ## update information
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, k = 1, type.k = "decision", trace = FALSE)
+ 
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = NA,
+                                                 p.value_ML = NA,
+                                                 lower_ML = NA,
+                                                 upper_ML = NA,
+                                                 estimate_ML = NA,
+                                                 p.value_MUE = NA,
+                                                 lower_MUE = NA,
+                                                 upper_MUE = NA,
+                                                 estimate_MUE = NA,
+                                                 info = iInfo.decision[1,"Decision"],
+                                                 infoPC = iInfo.decision[1,"Decision.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = NA)
+         }
+     }
+                                         # }}}
+                                         # {{{ Analyze data at decision
+ 
+     ## ** finale
+     dFinal <- d
+     lmmF <- analyzeData(dFinal, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     out.final <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+         if(out.interim[[iMeth]]$decision == "stop"){
+             out.final[[iMeth]] <- data.frame(statistic = NA,
+                                              p.value_ML = NA,
+                                              lower_ML = NA,
+                                              upper_ML = NA,
+                                              estimate_ML = NA,
+                                              p.value_MUE = NA,
+                                              lower_MUE = NA,
+                                              upper_MUE = NA,
+                                              estimate_MUE = NA,
+                                              info = NA,
+                                              infoPC = NA,
+                                              ck = NA,
+                                              decision = NA)
+ 
+         }else{
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmF, trace = FALSE)
+ 
+             ## plot(test)
+             ## summary(test)
+             iConfint.final <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.final <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.final <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.final  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.final[[iMeth]] <- data.frame(statistic = iConfint.final[1,"statistic"],
+                                              p.value_ML = iConfint.final[iConfint.final$method == "ML","p.value"],
+                                              lower_ML = iConfint.final[iConfint.final$method == "ML","lower"],
+                                              upper_ML = iConfint.final[iConfint.final$method == "ML","upper"],
+                                              estimate_ML = iConfint.final[iConfint.final$method == "ML","estimate"],
+                                              p.value_MUE = iConfint.final[iConfint.final$method == "MUE","p.value"],
+                                              lower_MUE = iConfint.final[iConfint.final$method == "MUE","lower"],
+                                              upper_MUE = iConfint.final[iConfint.final$method == "MUE","upper"],
+                                              estimate_MUE = iConfint.final[iConfint.final$method == "MUE","estimate"],
+                                              info = iInfo.final[1,"Interim"],
+                                              infoPC = iInfo.final[1,"Interim.pc"],
+                                              ck = iBoundary.final[1,"Cbound"],
+                                              decision = unname(coef(currentGSD[[iMeth]], type = "decision")["decision","stage 2"])
+                                              )
+         }
+     }
+                                         # }}}
+ 
+     stopComp <- Sys.time()
+                                         # {{{ Save results
+ 
+     outMerge <- do.call(rbind,lapply(method, function(iMeth){
+         iNames <- unique(c(names(out.interim[[iMeth]]),names(out.decision[[iMeth]]),names(out.final[[iMeth]])))
+         iMerge <- data.frame(matrix(NA, ncol = length(iNames)+3, nrow = 3, dimnames = list(NULL, c("method", "stage", "type", iNames))))
+         iMerge[1,c("method","stage","type",names(out.interim[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "interim", out.interim[[iMeth]]) 
+         iMerge[2,c("method","stage","type",names(out.decision[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "decision", out.decision[[iMeth]]) 
+         iMerge[3,c("method","stage","type",names(out.final[[iMeth]]))] <- data.frame(method = iMeth, stage = 2, type = "final", out.final[[iMeth]])
+         return(iMerge)
+     }))
+ 
+     ## outMerge[outMerge$method==3,]
+ 
+     out <- cbind(
+         ## results
+         outMerge,
+         ## simulation details
+         time.interim = thet,
+         seed=myseedi,             
+         nX1.interim = sum(!is.na(di$X1)),
+         nX2.interim = sum(!is.na(di$X2)),
+         nX3.interim = sum(!is.na(di$X3)),
+         ## computation time
+         computation.time=as.double(round(difftime(stopComp,startComp,units="secs"),3))
+     )
+     ## names(out) <- myColNames
+     RES <- rbind(RES,out)
+     save(RES,file=paste0(path.res,name,"(tempo)-",iter_sim,".rda"))
+                                         # }}}
+ }
[1] "seed 9822 for j=1 out of 250 (i.e. j=9501 in [9501;9750], as job id is i=39)"
Loading required namespace: nlme
[1] "seed 77115 for j=2 out of 250 (i.e. j=9502 in [9501;9750], as job id is i=39)"
[1] "seed 73457 for j=3 out of 250 (i.e. j=9503 in [9501;9750], as job id is i=39)"
[1] "seed 55362 for j=4 out of 250 (i.e. j=9504 in [9501;9750], as job id is i=39)"
[1] "seed 4633 for j=5 out of 250 (i.e. j=9505 in [9501;9750], as job id is i=39)"
[1] "seed 82064 for j=6 out of 250 (i.e. j=9506 in [9501;9750], as job id is i=39)"
[1] "seed 60622 for j=7 out of 250 (i.e. j=9507 in [9501;9750], as job id is i=39)"
[1] "seed 98077 for j=8 out of 250 (i.e. j=9508 in [9501;9750], as job id is i=39)"
[1] "seed 85581 for j=9 out of 250 (i.e. j=9509 in [9501;9750], as job id is i=39)"
[1] "seed 63595 for j=10 out of 250 (i.e. j=9510 in [9501;9750], as job id is i=39)"
[1] "seed 76271 for j=11 out of 250 (i.e. j=9511 in [9501;9750], as job id is i=39)"
[1] "seed 57330 for j=12 out of 250 (i.e. j=9512 in [9501;9750], as job id is i=39)"
[1] "seed 63512 for j=13 out of 250 (i.e. j=9513 in [9501;9750], as job id is i=39)"
[1] "seed 26765 for j=14 out of 250 (i.e. j=9514 in [9501;9750], as job id is i=39)"
[1] "seed 78720 for j=15 out of 250 (i.e. j=9515 in [9501;9750], as job id is i=39)"
[1] "seed 19884 for j=16 out of 250 (i.e. j=9516 in [9501;9750], as job id is i=39)"
[1] "seed 9766 for j=17 out of 250 (i.e. j=9517 in [9501;9750], as job id is i=39)"
[1] "seed 47807 for j=18 out of 250 (i.e. j=9518 in [9501;9750], as job id is i=39)"
[1] "seed 24952 for j=19 out of 250 (i.e. j=9519 in [9501;9750], as job id is i=39)"
[1] "seed 39975 for j=20 out of 250 (i.e. j=9520 in [9501;9750], as job id is i=39)"
[1] "seed 89468 for j=21 out of 250 (i.e. j=9521 in [9501;9750], as job id is i=39)"
[1] "seed 84320 for j=22 out of 250 (i.e. j=9522 in [9501;9750], as job id is i=39)"
[1] "seed 12141 for j=23 out of 250 (i.e. j=9523 in [9501;9750], as job id is i=39)"
[1] "seed 52007 for j=24 out of 250 (i.e. j=9524 in [9501;9750], as job id is i=39)"
[1] "seed 66608 for j=25 out of 250 (i.e. j=9525 in [9501;9750], as job id is i=39)"
[1] "seed 1972 for j=26 out of 250 (i.e. j=9526 in [9501;9750], as job id is i=39)"
[1] "seed 46487 for j=27 out of 250 (i.e. j=9527 in [9501;9750], as job id is i=39)"
[1] "seed 73769 for j=28 out of 250 (i.e. j=9528 in [9501;9750], as job id is i=39)"
[1] "seed 81770 for j=29 out of 250 (i.e. j=9529 in [9501;9750], as job id is i=39)"
[1] "seed 77017 for j=30 out of 250 (i.e. j=9530 in [9501;9750], as job id is i=39)"
[1] "seed 56256 for j=31 out of 250 (i.e. j=9531 in [9501;9750], as job id is i=39)"
[1] "seed 89864 for j=32 out of 250 (i.e. j=9532 in [9501;9750], as job id is i=39)"
[1] "seed 96293 for j=33 out of 250 (i.e. j=9533 in [9501;9750], as job id is i=39)"
[1] "seed 46218 for j=34 out of 250 (i.e. j=9534 in [9501;9750], as job id is i=39)"
[1] "seed 58580 for j=35 out of 250 (i.e. j=9535 in [9501;9750], as job id is i=39)"
[1] "seed 59977 for j=36 out of 250 (i.e. j=9536 in [9501;9750], as job id is i=39)"
[1] "seed 97166 for j=37 out of 250 (i.e. j=9537 in [9501;9750], as job id is i=39)"
[1] "seed 76308 for j=38 out of 250 (i.e. j=9538 in [9501;9750], as job id is i=39)"
[1] "seed 75381 for j=39 out of 250 (i.e. j=9539 in [9501;9750], as job id is i=39)"
[1] "seed 14941 for j=40 out of 250 (i.e. j=9540 in [9501;9750], as job id is i=39)"
[1] "seed 41429 for j=41 out of 250 (i.e. j=9541 in [9501;9750], as job id is i=39)"
[1] "seed 54892 for j=42 out of 250 (i.e. j=9542 in [9501;9750], as job id is i=39)"
[1] "seed 53903 for j=43 out of 250 (i.e. j=9543 in [9501;9750], as job id is i=39)"
[1] "seed 61478 for j=44 out of 250 (i.e. j=9544 in [9501;9750], as job id is i=39)"
[1] "seed 47269 for j=45 out of 250 (i.e. j=9545 in [9501;9750], as job id is i=39)"
[1] "seed 54212 for j=46 out of 250 (i.e. j=9546 in [9501;9750], as job id is i=39)"
[1] "seed 21610 for j=47 out of 250 (i.e. j=9547 in [9501;9750], as job id is i=39)"
[1] "seed 59357 for j=48 out of 250 (i.e. j=9548 in [9501;9750], as job id is i=39)"
[1] "seed 37846 for j=49 out of 250 (i.e. j=9549 in [9501;9750], as job id is i=39)"
[1] "seed 20316 for j=50 out of 250 (i.e. j=9550 in [9501;9750], as job id is i=39)"
[1] "seed 38002 for j=51 out of 250 (i.e. j=9551 in [9501;9750], as job id is i=39)"
[1] "seed 49974 for j=52 out of 250 (i.e. j=9552 in [9501;9750], as job id is i=39)"
[1] "seed 21529 for j=53 out of 250 (i.e. j=9553 in [9501;9750], as job id is i=39)"
[1] "seed 20882 for j=54 out of 250 (i.e. j=9554 in [9501;9750], as job id is i=39)"
[1] "seed 4602 for j=55 out of 250 (i.e. j=9555 in [9501;9750], as job id is i=39)"
[1] "seed 49804 for j=56 out of 250 (i.e. j=9556 in [9501;9750], as job id is i=39)"
[1] "seed 20394 for j=57 out of 250 (i.e. j=9557 in [9501;9750], as job id is i=39)"
[1] "seed 53562 for j=58 out of 250 (i.e. j=9558 in [9501;9750], as job id is i=39)"
[1] "seed 65935 for j=59 out of 250 (i.e. j=9559 in [9501;9750], as job id is i=39)"
[1] "seed 76032 for j=60 out of 250 (i.e. j=9560 in [9501;9750], as job id is i=39)"
[1] "seed 94060 for j=61 out of 250 (i.e. j=9561 in [9501;9750], as job id is i=39)"
[1] "seed 65930 for j=62 out of 250 (i.e. j=9562 in [9501;9750], as job id is i=39)"
[1] "seed 28860 for j=63 out of 250 (i.e. j=9563 in [9501;9750], as job id is i=39)"
[1] "seed 51201 for j=64 out of 250 (i.e. j=9564 in [9501;9750], as job id is i=39)"
[1] "seed 3670 for j=65 out of 250 (i.e. j=9565 in [9501;9750], as job id is i=39)"
[1] "seed 8435 for j=66 out of 250 (i.e. j=9566 in [9501;9750], as job id is i=39)"
[1] "seed 28090 for j=67 out of 250 (i.e. j=9567 in [9501;9750], as job id is i=39)"
[1] "seed 38085 for j=68 out of 250 (i.e. j=9568 in [9501;9750], as job id is i=39)"
[1] "seed 92177 for j=69 out of 250 (i.e. j=9569 in [9501;9750], as job id is i=39)"
[1] "seed 65555 for j=70 out of 250 (i.e. j=9570 in [9501;9750], as job id is i=39)"
[1] "seed 45117 for j=71 out of 250 (i.e. j=9571 in [9501;9750], as job id is i=39)"
[1] "seed 41405 for j=72 out of 250 (i.e. j=9572 in [9501;9750], as job id is i=39)"
[1] "seed 10934 for j=73 out of 250 (i.e. j=9573 in [9501;9750], as job id is i=39)"
[1] "seed 33651 for j=74 out of 250 (i.e. j=9574 in [9501;9750], as job id is i=39)"
[1] "seed 75714 for j=75 out of 250 (i.e. j=9575 in [9501;9750], as job id is i=39)"
[1] "seed 48859 for j=76 out of 250 (i.e. j=9576 in [9501;9750], as job id is i=39)"
[1] "seed 65518 for j=77 out of 250 (i.e. j=9577 in [9501;9750], as job id is i=39)"
[1] "seed 19919 for j=78 out of 250 (i.e. j=9578 in [9501;9750], as job id is i=39)"
[1] "seed 3339 for j=79 out of 250 (i.e. j=9579 in [9501;9750], as job id is i=39)"
[1] "seed 36542 for j=80 out of 250 (i.e. j=9580 in [9501;9750], as job id is i=39)"
[1] "seed 60289 for j=81 out of 250 (i.e. j=9581 in [9501;9750], as job id is i=39)"
[1] "seed 37154 for j=82 out of 250 (i.e. j=9582 in [9501;9750], as job id is i=39)"
[1] "seed 40146 for j=83 out of 250 (i.e. j=9583 in [9501;9750], as job id is i=39)"
[1] "seed 38174 for j=84 out of 250 (i.e. j=9584 in [9501;9750], as job id is i=39)"
[1] "seed 52969 for j=85 out of 250 (i.e. j=9585 in [9501;9750], as job id is i=39)"
[1] "seed 98279 for j=86 out of 250 (i.e. j=9586 in [9501;9750], as job id is i=39)"
[1] "seed 76966 for j=87 out of 250 (i.e. j=9587 in [9501;9750], as job id is i=39)"
[1] "seed 42951 for j=88 out of 250 (i.e. j=9588 in [9501;9750], as job id is i=39)"
[1] "seed 25337 for j=89 out of 250 (i.e. j=9589 in [9501;9750], as job id is i=39)"
[1] "seed 36939 for j=90 out of 250 (i.e. j=9590 in [9501;9750], as job id is i=39)"
[1] "seed 82150 for j=91 out of 250 (i.e. j=9591 in [9501;9750], as job id is i=39)"
[1] "seed 87169 for j=92 out of 250 (i.e. j=9592 in [9501;9750], as job id is i=39)"
[1] "seed 31868 for j=93 out of 250 (i.e. j=9593 in [9501;9750], as job id is i=39)"
[1] "seed 41679 for j=94 out of 250 (i.e. j=9594 in [9501;9750], as job id is i=39)"
[1] "seed 36069 for j=95 out of 250 (i.e. j=9595 in [9501;9750], as job id is i=39)"
[1] "seed 52764 for j=96 out of 250 (i.e. j=9596 in [9501;9750], as job id is i=39)"
[1] "seed 19494 for j=97 out of 250 (i.e. j=9597 in [9501;9750], as job id is i=39)"
[1] "seed 97949 for j=98 out of 250 (i.e. j=9598 in [9501;9750], as job id is i=39)"
[1] "seed 99866 for j=99 out of 250 (i.e. j=9599 in [9501;9750], as job id is i=39)"
[1] "seed 92192 for j=100 out of 250 (i.e. j=9600 in [9501;9750], as job id is i=39)"
[1] "seed 82291 for j=101 out of 250 (i.e. j=9601 in [9501;9750], as job id is i=39)"
[1] "seed 79604 for j=102 out of 250 (i.e. j=9602 in [9501;9750], as job id is i=39)"
[1] "seed 77196 for j=103 out of 250 (i.e. j=9603 in [9501;9750], as job id is i=39)"
[1] "seed 76353 for j=104 out of 250 (i.e. j=9604 in [9501;9750], as job id is i=39)"
[1] "seed 12821 for j=105 out of 250 (i.e. j=9605 in [9501;9750], as job id is i=39)"
[1] "seed 41550 for j=106 out of 250 (i.e. j=9606 in [9501;9750], as job id is i=39)"
[1] "seed 84700 for j=107 out of 250 (i.e. j=9607 in [9501;9750], as job id is i=39)"
[1] "seed 83592 for j=108 out of 250 (i.e. j=9608 in [9501;9750], as job id is i=39)"
[1] "seed 66153 for j=109 out of 250 (i.e. j=9609 in [9501;9750], as job id is i=39)"
[1] "seed 1842 for j=110 out of 250 (i.e. j=9610 in [9501;9750], as job id is i=39)"
[1] "seed 80135 for j=111 out of 250 (i.e. j=9611 in [9501;9750], as job id is i=39)"
[1] "seed 51728 for j=112 out of 250 (i.e. j=9612 in [9501;9750], as job id is i=39)"
[1] "seed 47109 for j=113 out of 250 (i.e. j=9613 in [9501;9750], as job id is i=39)"
[1] "seed 58108 for j=114 out of 250 (i.e. j=9614 in [9501;9750], as job id is i=39)"
[1] "seed 73140 for j=115 out of 250 (i.e. j=9615 in [9501;9750], as job id is i=39)"
[1] "seed 49486 for j=116 out of 250 (i.e. j=9616 in [9501;9750], as job id is i=39)"
[1] "seed 84439 for j=117 out of 250 (i.e. j=9617 in [9501;9750], as job id is i=39)"
[1] "seed 2335 for j=118 out of 250 (i.e. j=9618 in [9501;9750], as job id is i=39)"
[1] "seed 35835 for j=119 out of 250 (i.e. j=9619 in [9501;9750], as job id is i=39)"
[1] "seed 73762 for j=120 out of 250 (i.e. j=9620 in [9501;9750], as job id is i=39)"
[1] "seed 1619 for j=121 out of 250 (i.e. j=9621 in [9501;9750], as job id is i=39)"
[1] "seed 54809 for j=122 out of 250 (i.e. j=9622 in [9501;9750], as job id is i=39)"
[1] "seed 27457 for j=123 out of 250 (i.e. j=9623 in [9501;9750], as job id is i=39)"
[1] "seed 70815 for j=124 out of 250 (i.e. j=9624 in [9501;9750], as job id is i=39)"
[1] "seed 79101 for j=125 out of 250 (i.e. j=9625 in [9501;9750], as job id is i=39)"
[1] "seed 62630 for j=126 out of 250 (i.e. j=9626 in [9501;9750], as job id is i=39)"
[1] "seed 65977 for j=127 out of 250 (i.e. j=9627 in [9501;9750], as job id is i=39)"
[1] "seed 83636 for j=128 out of 250 (i.e. j=9628 in [9501;9750], as job id is i=39)"
[1] "seed 98063 for j=129 out of 250 (i.e. j=9629 in [9501;9750], as job id is i=39)"
[1] "seed 75846 for j=130 out of 250 (i.e. j=9630 in [9501;9750], as job id is i=39)"
[1] "seed 8679 for j=131 out of 250 (i.e. j=9631 in [9501;9750], as job id is i=39)"
[1] "seed 94127 for j=132 out of 250 (i.e. j=9632 in [9501;9750], as job id is i=39)"
[1] "seed 8950 for j=133 out of 250 (i.e. j=9633 in [9501;9750], as job id is i=39)"
[1] "seed 10474 for j=134 out of 250 (i.e. j=9634 in [9501;9750], as job id is i=39)"
[1] "seed 78513 for j=135 out of 250 (i.e. j=9635 in [9501;9750], as job id is i=39)"
[1] "seed 15058 for j=136 out of 250 (i.e. j=9636 in [9501;9750], as job id is i=39)"
[1] "seed 11429 for j=137 out of 250 (i.e. j=9637 in [9501;9750], as job id is i=39)"
[1] "seed 79968 for j=138 out of 250 (i.e. j=9638 in [9501;9750], as job id is i=39)"
[1] "seed 25847 for j=139 out of 250 (i.e. j=9639 in [9501;9750], as job id is i=39)"
[1] "seed 45128 for j=140 out of 250 (i.e. j=9640 in [9501;9750], as job id is i=39)"
[1] "seed 57919 for j=141 out of 250 (i.e. j=9641 in [9501;9750], as job id is i=39)"
[1] "seed 38879 for j=142 out of 250 (i.e. j=9642 in [9501;9750], as job id is i=39)"
[1] "seed 7337 for j=143 out of 250 (i.e. j=9643 in [9501;9750], as job id is i=39)"
[1] "seed 7088 for j=144 out of 250 (i.e. j=9644 in [9501;9750], as job id is i=39)"
[1] "seed 77995 for j=145 out of 250 (i.e. j=9645 in [9501;9750], as job id is i=39)"
[1] "seed 94338 for j=146 out of 250 (i.e. j=9646 in [9501;9750], as job id is i=39)"
[1] "seed 86983 for j=147 out of 250 (i.e. j=9647 in [9501;9750], as job id is i=39)"
[1] "seed 55809 for j=148 out of 250 (i.e. j=9648 in [9501;9750], as job id is i=39)"
[1] "seed 36948 for j=149 out of 250 (i.e. j=9649 in [9501;9750], as job id is i=39)"
[1] "seed 74223 for j=150 out of 250 (i.e. j=9650 in [9501;9750], as job id is i=39)"
[1] "seed 1975 for j=151 out of 250 (i.e. j=9651 in [9501;9750], as job id is i=39)"
[1] "seed 55498 for j=152 out of 250 (i.e. j=9652 in [9501;9750], as job id is i=39)"
[1] "seed 69016 for j=153 out of 250 (i.e. j=9653 in [9501;9750], as job id is i=39)"
[1] "seed 73198 for j=154 out of 250 (i.e. j=9654 in [9501;9750], as job id is i=39)"
[1] "seed 48340 for j=155 out of 250 (i.e. j=9655 in [9501;9750], as job id is i=39)"
[1] "seed 65897 for j=156 out of 250 (i.e. j=9656 in [9501;9750], as job id is i=39)"
[1] "seed 70749 for j=157 out of 250 (i.e. j=9657 in [9501;9750], as job id is i=39)"
[1] "seed 66239 for j=158 out of 250 (i.e. j=9658 in [9501;9750], as job id is i=39)"
[1] "seed 59422 for j=159 out of 250 (i.e. j=9659 in [9501;9750], as job id is i=39)"
[1] "seed 64523 for j=160 out of 250 (i.e. j=9660 in [9501;9750], as job id is i=39)"
[1] "seed 60812 for j=161 out of 250 (i.e. j=9661 in [9501;9750], as job id is i=39)"
[1] "seed 3683 for j=162 out of 250 (i.e. j=9662 in [9501;9750], as job id is i=39)"
[1] "seed 22570 for j=163 out of 250 (i.e. j=9663 in [9501;9750], as job id is i=39)"
[1] "seed 89390 for j=164 out of 250 (i.e. j=9664 in [9501;9750], as job id is i=39)"
[1] "seed 87081 for j=165 out of 250 (i.e. j=9665 in [9501;9750], as job id is i=39)"
[1] "seed 77756 for j=166 out of 250 (i.e. j=9666 in [9501;9750], as job id is i=39)"
[1] "seed 59557 for j=167 out of 250 (i.e. j=9667 in [9501;9750], as job id is i=39)"
[1] "seed 85477 for j=168 out of 250 (i.e. j=9668 in [9501;9750], as job id is i=39)"
[1] "seed 28575 for j=169 out of 250 (i.e. j=9669 in [9501;9750], as job id is i=39)"
[1] "seed 3545 for j=170 out of 250 (i.e. j=9670 in [9501;9750], as job id is i=39)"
[1] "seed 83593 for j=171 out of 250 (i.e. j=9671 in [9501;9750], as job id is i=39)"
[1] "seed 68869 for j=172 out of 250 (i.e. j=9672 in [9501;9750], as job id is i=39)"
[1] "seed 86997 for j=173 out of 250 (i.e. j=9673 in [9501;9750], as job id is i=39)"
[1] "seed 41835 for j=174 out of 250 (i.e. j=9674 in [9501;9750], as job id is i=39)"
[1] "seed 76425 for j=175 out of 250 (i.e. j=9675 in [9501;9750], as job id is i=39)"
[1] "seed 26444 for j=176 out of 250 (i.e. j=9676 in [9501;9750], as job id is i=39)"
[1] "seed 85333 for j=177 out of 250 (i.e. j=9677 in [9501;9750], as job id is i=39)"
[1] "seed 9282 for j=178 out of 250 (i.e. j=9678 in [9501;9750], as job id is i=39)"
[1] "seed 11619 for j=179 out of 250 (i.e. j=9679 in [9501;9750], as job id is i=39)"
[1] "seed 23588 for j=180 out of 250 (i.e. j=9680 in [9501;9750], as job id is i=39)"
[1] "seed 12499 for j=181 out of 250 (i.e. j=9681 in [9501;9750], as job id is i=39)"
[1] "seed 40690 for j=182 out of 250 (i.e. j=9682 in [9501;9750], as job id is i=39)"
[1] "seed 89473 for j=183 out of 250 (i.e. j=9683 in [9501;9750], as job id is i=39)"
[1] "seed 72684 for j=184 out of 250 (i.e. j=9684 in [9501;9750], as job id is i=39)"
[1] "seed 96504 for j=185 out of 250 (i.e. j=9685 in [9501;9750], as job id is i=39)"
[1] "seed 67886 for j=186 out of 250 (i.e. j=9686 in [9501;9750], as job id is i=39)"
[1] "seed 98492 for j=187 out of 250 (i.e. j=9687 in [9501;9750], as job id is i=39)"
[1] "seed 23778 for j=188 out of 250 (i.e. j=9688 in [9501;9750], as job id is i=39)"
[1] "seed 55302 for j=189 out of 250 (i.e. j=9689 in [9501;9750], as job id is i=39)"
[1] "seed 54587 for j=190 out of 250 (i.e. j=9690 in [9501;9750], as job id is i=39)"
[1] "seed 71426 for j=191 out of 250 (i.e. j=9691 in [9501;9750], as job id is i=39)"
[1] "seed 98585 for j=192 out of 250 (i.e. j=9692 in [9501;9750], as job id is i=39)"
[1] "seed 17325 for j=193 out of 250 (i.e. j=9693 in [9501;9750], as job id is i=39)"
[1] "seed 14840 for j=194 out of 250 (i.e. j=9694 in [9501;9750], as job id is i=39)"
[1] "seed 6482 for j=195 out of 250 (i.e. j=9695 in [9501;9750], as job id is i=39)"
[1] "seed 27868 for j=196 out of 250 (i.e. j=9696 in [9501;9750], as job id is i=39)"
[1] "seed 85880 for j=197 out of 250 (i.e. j=9697 in [9501;9750], as job id is i=39)"
[1] "seed 68805 for j=198 out of 250 (i.e. j=9698 in [9501;9750], as job id is i=39)"
[1] "seed 91008 for j=199 out of 250 (i.e. j=9699 in [9501;9750], as job id is i=39)"
[1] "seed 60085 for j=200 out of 250 (i.e. j=9700 in [9501;9750], as job id is i=39)"
[1] "seed 13434 for j=201 out of 250 (i.e. j=9701 in [9501;9750], as job id is i=39)"
[1] "seed 95596 for j=202 out of 250 (i.e. j=9702 in [9501;9750], as job id is i=39)"
[1] "seed 66270 for j=203 out of 250 (i.e. j=9703 in [9501;9750], as job id is i=39)"
[1] "seed 40106 for j=204 out of 250 (i.e. j=9704 in [9501;9750], as job id is i=39)"
[1] "seed 71005 for j=205 out of 250 (i.e. j=9705 in [9501;9750], as job id is i=39)"
[1] "seed 28930 for j=206 out of 250 (i.e. j=9706 in [9501;9750], as job id is i=39)"
[1] "seed 84223 for j=207 out of 250 (i.e. j=9707 in [9501;9750], as job id is i=39)"
[1] "seed 50176 for j=208 out of 250 (i.e. j=9708 in [9501;9750], as job id is i=39)"
[1] "seed 24392 for j=209 out of 250 (i.e. j=9709 in [9501;9750], as job id is i=39)"
[1] "seed 17910 for j=210 out of 250 (i.e. j=9710 in [9501;9750], as job id is i=39)"
[1] "seed 14495 for j=211 out of 250 (i.e. j=9711 in [9501;9750], as job id is i=39)"
[1] "seed 33654 for j=212 out of 250 (i.e. j=9712 in [9501;9750], as job id is i=39)"
[1] "seed 90512 for j=213 out of 250 (i.e. j=9713 in [9501;9750], as job id is i=39)"
[1] "seed 83530 for j=214 out of 250 (i.e. j=9714 in [9501;9750], as job id is i=39)"
[1] "seed 86779 for j=215 out of 250 (i.e. j=9715 in [9501;9750], as job id is i=39)"
[1] "seed 39117 for j=216 out of 250 (i.e. j=9716 in [9501;9750], as job id is i=39)"
[1] "seed 18358 for j=217 out of 250 (i.e. j=9717 in [9501;9750], as job id is i=39)"
[1] "seed 69911 for j=218 out of 250 (i.e. j=9718 in [9501;9750], as job id is i=39)"
[1] "seed 98847 for j=219 out of 250 (i.e. j=9719 in [9501;9750], as job id is i=39)"
[1] "seed 71225 for j=220 out of 250 (i.e. j=9720 in [9501;9750], as job id is i=39)"
[1] "seed 42866 for j=221 out of 250 (i.e. j=9721 in [9501;9750], as job id is i=39)"
[1] "seed 95059 for j=222 out of 250 (i.e. j=9722 in [9501;9750], as job id is i=39)"
[1] "seed 84298 for j=223 out of 250 (i.e. j=9723 in [9501;9750], as job id is i=39)"
[1] "seed 88739 for j=224 out of 250 (i.e. j=9724 in [9501;9750], as job id is i=39)"
[1] "seed 84128 for j=225 out of 250 (i.e. j=9725 in [9501;9750], as job id is i=39)"
[1] "seed 7504 for j=226 out of 250 (i.e. j=9726 in [9501;9750], as job id is i=39)"
[1] "seed 35361 for j=227 out of 250 (i.e. j=9727 in [9501;9750], as job id is i=39)"
[1] "seed 41996 for j=228 out of 250 (i.e. j=9728 in [9501;9750], as job id is i=39)"
[1] "seed 44578 for j=229 out of 250 (i.e. j=9729 in [9501;9750], as job id is i=39)"
[1] "seed 21212 for j=230 out of 250 (i.e. j=9730 in [9501;9750], as job id is i=39)"
[1] "seed 85104 for j=231 out of 250 (i.e. j=9731 in [9501;9750], as job id is i=39)"
[1] "seed 88546 for j=232 out of 250 (i.e. j=9732 in [9501;9750], as job id is i=39)"
[1] "seed 22647 for j=233 out of 250 (i.e. j=9733 in [9501;9750], as job id is i=39)"
[1] "seed 57673 for j=234 out of 250 (i.e. j=9734 in [9501;9750], as job id is i=39)"
[1] "seed 5530 for j=235 out of 250 (i.e. j=9735 in [9501;9750], as job id is i=39)"
[1] "seed 74224 for j=236 out of 250 (i.e. j=9736 in [9501;9750], as job id is i=39)"
[1] "seed 20952 for j=237 out of 250 (i.e. j=9737 in [9501;9750], as job id is i=39)"
[1] "seed 4672 for j=238 out of 250 (i.e. j=9738 in [9501;9750], as job id is i=39)"
[1] "seed 53736 for j=239 out of 250 (i.e. j=9739 in [9501;9750], as job id is i=39)"
[1] "seed 22659 for j=240 out of 250 (i.e. j=9740 in [9501;9750], as job id is i=39)"
[1] "seed 41281 for j=241 out of 250 (i.e. j=9741 in [9501;9750], as job id is i=39)"
[1] "seed 17158 for j=242 out of 250 (i.e. j=9742 in [9501;9750], as job id is i=39)"
[1] "seed 41447 for j=243 out of 250 (i.e. j=9743 in [9501;9750], as job id is i=39)"
[1] "seed 55031 for j=244 out of 250 (i.e. j=9744 in [9501;9750], as job id is i=39)"
[1] "seed 27968 for j=245 out of 250 (i.e. j=9745 in [9501;9750], as job id is i=39)"
[1] "seed 1796 for j=246 out of 250 (i.e. j=9746 in [9501;9750], as job id is i=39)"
[1] "seed 1445 for j=247 out of 250 (i.e. j=9747 in [9501;9750], as job id is i=39)"
[1] "seed 30291 for j=248 out of 250 (i.e. j=9748 in [9501;9750], as job id is i=39)"
[1] "seed 95534 for j=249 out of 250 (i.e. j=9749 in [9501;9750], as job id is i=39)"
[1] "seed 69954 for j=250 out of 250 (i.e. j=9750 in [9501;9750], as job id is i=39)"
There were 16 warnings (use warnings() to see them)
> rownames(RES) <- NULL
> save(RES,file=paste0(path.res,name,"-",iter_sim,".rda"))
> 
> ## * Summary results
> sessionInfo()
R version 4.1.2 (2021-11-01)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Red Hat Enterprise Linux 8.5 (Ootpa)

Matrix products: default
BLAS:   /opt/software/R/4.1.2/lib64/R/lib/libRblas.so
LAPACK: /opt/software/R/4.1.2/lib64/R/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] mvtnorm_1.1-3    DelayedGSD_0.0.3

loaded via a namespace (and not attached):
 [1] BB_2019.10-1     magrittr_2.0.3   tidyselect_1.1.2 munsell_0.5.0   
 [5] lattice_0.20-45  colorspace_2.0-3 xtable_1.8-4     R6_2.5.1        
 [9] quadprog_1.5-8   rlang_1.0.3      fansi_1.0.3      dplyr_1.0.9     
[13] grid_4.1.2       nlme_3.1-153     gtable_0.3.0     gsDesign_3.3.0  
[17] utf8_1.2.2       cli_3.3.0        ellipsis_0.3.2   tibble_3.1.7    
[21] lifecycle_1.0.1  crayon_1.5.1     purrr_0.3.4      ggplot2_3.3.6   
[25] tidyr_1.2.0      vctrs_0.4.1      glue_1.6.2       compiler_4.1.2  
[29] pillar_1.7.0     generics_0.1.3   scales_1.2.0     pkgconfig_2.0.3 
> summary(RES)
     method        stage           type             statistic     
 Min.   :1.0   Min.   :1.000   Length:1500        Min.   :0.0908  
 1st Qu.:1.0   1st Qu.:1.000   Class :character   1st Qu.:1.6528  
 Median :1.5   Median :1.000   Mode  :character   Median :2.4678  
 Mean   :1.5   Mean   :1.333                      Mean   :2.3782  
 3rd Qu.:2.0   3rd Qu.:2.000                      3rd Qu.:3.0474  
 Max.   :2.0   Max.   :2.000                      Max.   :5.2534  
                                                  NA's   :500     
  estimate_ML          se_ML             info           infoPC      
 Min.   :-0.3233   Min.   :0.3431   Min.   :4.154   Min.   :0.3246  
 1st Qu.: 0.5929   1st Qu.:0.3857   1st Qu.:5.675   1st Qu.:0.4435  
 Median : 0.8685   Median :0.4059   Median :6.181   Median :0.4829  
 Mean   : 0.8599   Mean   :0.4053   Mean   :6.238   Mean   :0.4874  
 3rd Qu.: 1.1214   3rd Qu.:0.4218   3rd Qu.:6.792   3rd Qu.:0.5307  
 Max.   : 1.8202   Max.   :0.4907   Max.   :9.047   Max.   :0.7069  
 NA's   :500       NA's   :1000     NA's   :192     NA's   :192     
   info.pred      infoPC.pred           uk              lk         
 Min.   :4.432   Min.   :0.3463   Min.   :2.290   Min.   :-0.4017  
 1st Qu.:5.948   1st Qu.:0.4648   1st Qu.:2.462   1st Qu.: 0.1291  
 Median :6.460   Median :0.5047   Median :2.535   Median : 0.2758  
 Mean   :6.546   Mean   :0.5115   Mean   :2.529   Mean   : 0.2968  
 3rd Qu.:7.152   3rd Qu.:0.5589   3rd Qu.:2.588   3rd Qu.: 0.4780  
 Max.   :8.984   Max.   :0.7020   Max.   :2.790   Max.   : 0.9799  
 NA's   :1000    NA's   :1000     NA's   :1000    NA's   :1000     
   decision            reason            p.value_ML        lower_ML      
 Length:1500        Length:1500        Min.   :0.0000   Min.   :-0.9770  
 Class :character   Class :character   1st Qu.:0.0012   1st Qu.:-0.0324  
 Mode  :character   Mode  :character   Median :0.0068   Median : 0.1556  
                                       Mean   :0.0629   Mean   : 0.1368  
                                       3rd Qu.:0.0308   3rd Qu.: 0.3409  
                                       Max.   :0.8832   Max.   : 1.0394  
                                       NA's   :1000     NA's   :1000     
    upper_ML       p.value_MUE       lower_MUE         upper_MUE     
 Min.   :0.7094   Min.   :0.0000   Min.   :-0.9747   Min.   :0.7455  
 1st Qu.:1.2567   1st Qu.:0.0021   1st Qu.:-0.0310   1st Qu.:1.2621  
 Median :1.5704   Median :0.0062   Median : 0.1005   Median :1.5615  
 Mean   :1.6043   Mean   :0.0405   Mean   : 0.1141   Mean   :1.6265  
 3rd Qu.:1.9498   3rd Qu.:0.0169   3rd Qu.: 0.2470   3rd Qu.:1.9827  
 Max.   :2.6515   Max.   :1.0000   Max.   : 1.5665   Max.   :2.9686  
 NA's   :1000     NA's   :1000     NA's   :1000      NA's   :1000    
  estimate_MUE           ck          time.interim        seed      
 Min.   :-0.1043   Min.   :0.1414   Min.   :537.0   Min.   : 1445  
 1st Qu.: 0.6229   1st Qu.:1.3913   1st Qu.:584.0   1st Qu.:27457  
 Median : 0.8571   Median :1.4421   Median :601.0   Median :54850  
 Mean   : 0.8738   Mean   :1.4272   Mean   :600.5   Mean   :52374  
 3rd Qu.: 1.1066   3rd Qu.:1.5011   3rd Qu.:620.0   3rd Qu.:76966  
 Max.   : 2.1674   Max.   :1.6725   Max.   :676.0   Max.   :99866  
 NA's   :1000      NA's   :692                                     
  nX1.interim     nX2.interim     nX3.interim    computation.time
 Min.   :145.0   Min.   :131.0   Min.   :119.0   Min.   :0.711   
 1st Qu.:148.0   1st Qu.:135.0   1st Qu.:125.0   1st Qu.:0.925   
 Median :148.0   Median :136.0   Median :127.0   Median :1.014   
 Mean   :148.7   Mean   :136.5   Mean   :126.9   Mean   :1.034   
 3rd Qu.:150.0   3rd Qu.:138.0   3rd Qu.:129.0   3rd Qu.:1.125   
 Max.   :155.0   Max.   :142.0   Max.   :133.0   Max.   :3.616   
                                                                 
> 
> #----------------------------------------------------------------------
> ### BATCH_simuMain.R ends here
> 
> proc.time()
   user  system elapsed 
261.842   0.393 272.891 
