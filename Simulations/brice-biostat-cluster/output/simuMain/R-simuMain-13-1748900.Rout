
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### BATCH_simuMain.R --- 
> #----------------------------------------------------------------------
> ## Author: Paul Blanche
> ## Created: Mar  5 2021 (10:56) 
> ## Version: 
> ## Last-Updated: jul  7 2022 (13:56) 
> ##           By: Brice Ozenne
> ##     Update #: 518
> #----------------------------------------------------------------------
> ## 
> ### Commentary: 
> ## 
> ### Change Log:
> #----------------------------------------------------------------------
> ## 
> ### Code:
> 
> ## ** BATCH loop
> ## cd /projects/biostat01/people/hpl802/DelayedGSD/
> ## for ITER in `seq 1 10`;
> ## do
> ## eval 'R CMD BATCH --vanilla "--args iter_sim='$ITER' n.iter_sim=10" BATCH_simuMain.R output/R-simuMain-'$ITER'.Rout &'
> ## done
> 
> ## [1] 1186669
> ## [2] 1186670
> ## [3] 1186671
> ## [4] 1186672
> ## [5] 1186673
> ## [6] 1186674
> ## [7] 1186675
> ## [8] 1186676
> ## [9] 1186677
> ## [10] 1186678
> 
> rm(list=ls())
>                                    # {{{ parameters
> ## * parameters
> name <- "ScenarioName" # To save the results
> method <- 1:2 # methods used to compute the boundaries
>                                         #---
> myseed <- 140786598
>                                         #--- to plan the trial ----
> NMC <- 250 # number of sequential simulations to run in parallel. Eg. with 250, then we can run 40 scripts in paralell to get N=10,000 runs in total.
> kMax <- 2  #max number of analyses (including final)
> alpha <- 0.025  #type I error (one sided)
> beta <- 0.2  #type II error
> informationRates <- c(0.5,1)  #planned  information rates
> rho_alpha <- 2  # rho parameter for alpha error spending function
> rho_beta <- 2  # rho parameter for beta error spending function
> ## deltaPower <- 0.75 # just to try another value when Id > Imax
> Id <- 0.55  #(expected) information rate at each decision analysis
> binding <- TRUE
>                                         #
>                                         #---- to generate data -----------
>                                         #
> block <- c(1,1,0,0) 
> allsd <- c(2.5,2.1,2.4) # sd, first from baseline measurement, then the two changes from baseline
> mean0 <- c(10,0,0) # mean placebo group (again, first is absolute value, then change from baseline)
> delta <- c(0,0.6,0.8) # treatment effect
> ar <- (0.86*2)*2 # orginial accrual rate from data from Corine is 0.86 per week, hence we multiply by 2 for by 14 days. As to low, we further multiply by 2
> cor011 <- -0.15 # ~ from data from Corine
> corij1 <- 0.68  # ~ from data from Corine
> cor0j1 <- -0.27  # ~ from data from Corine
> Miss11 <- 5/104 # miss both V1 and V2
> Miss12 <- 1/104 # miss V1 and but not V2
> Miss21 <- 6/104 # do not miss V1 and but miss V2
> Miss22 <- 92/104 # miss none
> PropForInterim <- 0.5 # Decide to have interim analysiz when PropForInterim % of all subjects have had the chance to have one follow-up measuement recorded in the data to be available for analysis.
> theDelta.t <- 1.50001 # time lag to process the data and make them ready to analyze after collecting them (unit is time between two follow-up visits)
> TimeFactor <- 14 ## number of days between two visits
>                                         #
>                                         #--- actually for both planing the trial  and generating data-----
>                                         #
>                                         #
> deltaPower <- abs(delta[3]) # effect (NOT Z-scale/unit, but outcome scale/unit!) that the study is powered for: should we choose ourselves or compute from other numbers above ???
> n <- ceiling(2*2*((allsd[3]/deltaPower)^2)*(qnorm(1-beta)-qnorm(alpha))^2) #104 with Corine's data # should we choose ourselves or compute from the above numbers ???
>                                         # inflate SS as required for interim
> 
>                                         # {{{ Set seeds for parallel computing and reproducibility
> ## * Seed
> args <- commandArgs(TRUE) ## BATCH MODE
> if(length(args)>0){
+     for (arg in args){
+         eval(parse(text=arg))
+     }
+ }else{ ## SLUMR
+     iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_ID"))
+     n.iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_COUNT"))
+ } ## interactive
> if(is.na(iter_sim)){iter_sim <- 1}
> if(is.na(n.iter_sim)){n.iter_sim <- 40}
> 
> set.seed(140786598)
> allseeds <- sample.int(n = 10*n.iter_sim*NMC, size = n.iter_sim*NMC, replace=FALSE) #x=1:(.Machine$integer.max) seems to be maximal possible
> # }}}
> 
> # {{{ set path to load and save and othe machine specific variables
> ## * path
> path <- "."
> path.res <- file.path(path,"Results","simuMain")
> if(dir.exists(path.res)==FALSE){
+     if(dir.exists(file.path(path,"Results"))==FALSE){
+     dir.create(file.path(path,"Results"))
+     }
+     dir.create(path.res)
+ }
> path.output <- file.path(path,"output","simuMain")
> if(dir.exists(path.output)==FALSE){
+     if(dir.exists(file.path(path,"output"))==FALSE){
+     dir.create(file.path(path,"output"))
+     }
+     dir.create(path.output)
+ }
> # }}}
> 
> 
> ## * libraries and functions
> library(DelayedGSD)
DelayedGSD version 0.0.3
> ## sourceDir <- function(path, trace = TRUE, ...) {
> ##     for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
> ##         if(trace) cat(nm,":")
> ##         source(file.path(path, nm), ...)
> ##         if(trace) cat("\n")
> ##     }
> ## }
> ## sourceDir(pathToLoad)
>     
> 
> ## * Compute inflation factor and sample size
> plannedB <- vector(mode = "list", length = 3)
> for(iMeth in method){ ## iMeth <- 1
+     plannedB[[iMeth]] <- CalcBoundaries(kMax=kMax,  
+                                         alpha=alpha, 
+                                         beta=beta,  
+                                         InfoR.i=informationRates,  
+                                         InfoR.d=c(Id,1),  
+                                         rho_alpha=rho_alpha,  
+                                         rho_beta=rho_beta,  
+                                         method=iMeth,  
+                                         cNotBelowFixedc=FALSE,
+                                         bindingFutility=binding,
+                                         delta=tail(delta,1))
+     ## summary(plannedB[[1]])
+     ## coef(plannedB[[iMeth]], type = "information")
+ }
Loading required namespace: gsDesign
Loading required package: mvtnorm
Loading required namespace: BB
> inflationFactor <- unlist(lapply(plannedB,function(iP){iP$planned$InflationFactor}))
> nGSD <- ceiling(n*inflationFactor)
> ##  plot(plannedB[[1]])
> 
> #
> # --- just to check---
> ## n
> ## InfoFixed <- ((qnorm(1-beta)-qnorm(alpha))/(deltaPower))^2
> ## InfoFixed
> ## n/(4*(allsd[3])^2)
> #---
> # }}}
> 
> 
> 
> 
> # {{{ technical details to loop
> RES <- NULL # initialize results to save
> allj <- ((iter_sim-1)*NMC + 1):(iter_sim*NMC) # indices of all iterations (replicates) for this job, accountng for the other jobs running in parallel
> # }}}
> 
> ## * Loop
> for(j in allj){ ## j <- 51 ## 5
+     startComp <- Sys.time()
+     myseedi <- allseeds[j]
+     # {{{ TRACE info (e.g. to check the Rout)
+     print(paste0("seed ",myseedi," for ","j=",which(j==allj)," out of ",NMC, " (i.e. j=",j," in [",(iter_sim-1)*NMC + 1,";",iter_sim*NMC,"], as job id is i=",iter_sim,")"))
+     # }}}
+     # {{{ Missing probabilities
+     MyMissProb <- matrix(c(Miss11,Miss12,Miss21,Miss22),ncol=2,nrow=2,byrow=TRUE) # to additionnally remove 1 more because some FASFL=N
+     colnames(MyMissProb) <- c("V2 missing","V2 not missing")
+     rownames(MyMissProb) <- c("V1 missing","V1 not missing")
+     # }}}
+ 
+                                         # {{{ generate data
+     ## ** simulate
+     res <- GenData(n=n, 
+                    N.fw=2,
+                    rand.block=block,
+                    allsd=allsd,
+                    mean0=mean0,
+                    delta=delta,
+                    ar=ar,
+                    cor.01.1=cor011,
+                    cor.ij.1=corij1,
+                    cor.0j.1=cor0j1,
+                    seed=myseedi,
+                    MissProb=MyMissProb,
+                    DigitsOutcome=2,
+                    TimeFactor=TimeFactor,
+                    DigitsTime=0
+                    )
+     d <- res$d
+     ## head(d,n=20)
+                                         # }}}
+                                         # {{{ reformat data like those of Corine
+     ## Make data long format
+     ## dd <- FormatAsCase(d)
+     ## head(dd)
+     ## summary(dd)
+                                         # }}}
+    
+                                         # {{{ make data available at interim
+                                         # Here we stop inclusion data collection for the interim analysis as soon as
+                                         # half of the participants have completed (or had the opportunity to complete) the follow-up 
+     thet <- d$t3[ceiling(n*PropForInterim)]
+     di <- SelectData(d,t=thet)
+     ## ddi <- FormatAsCase(di) # needed ????
+     ## head(d[d$id==52,])
+                                         # }}}
+     ## {{{ analyze data at at interim
+     ## ** interim
+     lmmI <- analyzeData(di, ddf = "nlme", data.decision = sum(d$t1 <= thet + theDelta.t*TimeFactor), getinfo = TRUE, trace = TRUE)
+     ## lmmI <- analyzeData(di, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     currentGSD <- vector(mode = "list", length = 3)
+     out.interim <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+ 
+         currentGSD[[iMeth]] <- update(plannedB[[iMeth]], delta = lmmI, trace = FALSE)
+ 
+         iConfint.interim <- confint(currentGSD[[iMeth]])
+         iInfo.interim <- coef(currentGSD[[iMeth]], type = "information")
+         iBoundary.interim <- coef(currentGSD[[iMeth]], type = "boundary")
+         iDecision.interim <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+         out.interim[[iMeth]] <-  data.frame(statistic = iConfint.interim[1,"statistic"],
+                                             estimate_ML = iConfint.interim[1,"estimate"],
+                                             se_ML = iConfint.interim[1,"se"],
+                                             info = iInfo.interim[1,"Interim"],
+                                             infoPC = iInfo.interim[1,"Interim.pc"],
+                                             info.pred = iInfo.interim[1,"Decision"],
+                                             infoPC.pred = iInfo.interim[1,"Decision.pc"],
+                                             uk = iBoundary.interim[1,"Ebound"],
+                                             lk = iBoundary.interim[1,"Fbound"],
+                                             decision = iDecision.interim["decision","stage 1"],
+                                             reason = iDecision.interim["reason.interim","stage 1"])
+     }
+     ## currentGSD[[1]]
+     ## plot(currentGSD[[1]])
+ 
+     ## ** decision
+     dDecision <- d[which(d$t1 <= thet + theDelta.t*TimeFactor),]
+     lmmD <- analyzeData(dDecision, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+     
+     out.decision <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+           
+         if(out.interim[[iMeth]]$decision == "stop"){
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, trace = FALSE)
+             ## plot(currentGSD[[iMeth]])
+ 
+             iConfint.decision <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.decision  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = iConfint.decision[1,"statistic"],
+                                                 p.value_ML = iConfint.decision[iConfint.decision$method == "ML","p.value"],
+                                                 lower_ML = iConfint.decision[iConfint.decision$method == "ML","lower"],
+                                                 upper_ML = iConfint.decision[iConfint.decision$method == "ML","upper"],
+                                                 estimate_ML = iConfint.decision[iConfint.decision$method == "ML","estimate"],
+                                                 p.value_MUE = iConfint.decision[iConfint.decision$method == "MUE","p.value"],
+                                                 lower_MUE = iConfint.decision[iConfint.decision$method == "MUE","lower"],
+                                                 upper_MUE = iConfint.decision[iConfint.decision$method == "MUE","upper"],
+                                                 estimate_MUE = iConfint.decision[iConfint.decision$method == "MUE","estimate"],
+                                                 info = iInfo.decision[1,"Interim"],
+                                                 infoPC = iInfo.decision[1,"Interim.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = unname(iDecision.decision["decision","stage 2"])
+                                                 )
+ 
+         }else{
+             ## update information
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, k = 1, type.k = "decision", trace = FALSE)
+ 
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = NA,
+                                                 p.value_ML = NA,
+                                                 lower_ML = NA,
+                                                 upper_ML = NA,
+                                                 estimate_ML = NA,
+                                                 p.value_MUE = NA,
+                                                 lower_MUE = NA,
+                                                 upper_MUE = NA,
+                                                 estimate_MUE = NA,
+                                                 info = iInfo.decision[1,"Decision"],
+                                                 infoPC = iInfo.decision[1,"Decision.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = NA)
+         }
+     }
+                                         # }}}
+                                         # {{{ Analyze data at decision
+ 
+     ## ** finale
+     dFinal <- d
+     lmmF <- analyzeData(dFinal, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     out.final <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+         if(out.interim[[iMeth]]$decision == "stop"){
+             out.final[[iMeth]] <- data.frame(statistic = NA,
+                                              p.value_ML = NA,
+                                              lower_ML = NA,
+                                              upper_ML = NA,
+                                              estimate_ML = NA,
+                                              p.value_MUE = NA,
+                                              lower_MUE = NA,
+                                              upper_MUE = NA,
+                                              estimate_MUE = NA,
+                                              info = NA,
+                                              infoPC = NA,
+                                              ck = NA,
+                                              decision = NA)
+ 
+         }else{
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmF, trace = FALSE)
+ 
+             ## plot(test)
+             ## summary(test)
+             iConfint.final <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.final <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.final <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.final  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.final[[iMeth]] <- data.frame(statistic = iConfint.final[1,"statistic"],
+                                              p.value_ML = iConfint.final[iConfint.final$method == "ML","p.value"],
+                                              lower_ML = iConfint.final[iConfint.final$method == "ML","lower"],
+                                              upper_ML = iConfint.final[iConfint.final$method == "ML","upper"],
+                                              estimate_ML = iConfint.final[iConfint.final$method == "ML","estimate"],
+                                              p.value_MUE = iConfint.final[iConfint.final$method == "MUE","p.value"],
+                                              lower_MUE = iConfint.final[iConfint.final$method == "MUE","lower"],
+                                              upper_MUE = iConfint.final[iConfint.final$method == "MUE","upper"],
+                                              estimate_MUE = iConfint.final[iConfint.final$method == "MUE","estimate"],
+                                              info = iInfo.final[1,"Interim"],
+                                              infoPC = iInfo.final[1,"Interim.pc"],
+                                              ck = iBoundary.final[1,"Cbound"],
+                                              decision = unname(coef(currentGSD[[iMeth]], type = "decision")["decision","stage 2"])
+                                              )
+         }
+     }
+                                         # }}}
+ 
+     stopComp <- Sys.time()
+                                         # {{{ Save results
+ 
+     outMerge <- do.call(rbind,lapply(method, function(iMeth){
+         iNames <- unique(c(names(out.interim[[iMeth]]),names(out.decision[[iMeth]]),names(out.final[[iMeth]])))
+         iMerge <- data.frame(matrix(NA, ncol = length(iNames)+3, nrow = 3, dimnames = list(NULL, c("method", "stage", "type", iNames))))
+         iMerge[1,c("method","stage","type",names(out.interim[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "interim", out.interim[[iMeth]]) 
+         iMerge[2,c("method","stage","type",names(out.decision[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "decision", out.decision[[iMeth]]) 
+         iMerge[3,c("method","stage","type",names(out.final[[iMeth]]))] <- data.frame(method = iMeth, stage = 2, type = "final", out.final[[iMeth]])
+         return(iMerge)
+     }))
+ 
+     ## outMerge[outMerge$method==3,]
+ 
+     out <- cbind(
+         ## results
+         outMerge,
+         ## simulation details
+         time.interim = thet,
+         seed=myseedi,             
+         nX1.interim = sum(!is.na(di$X1)),
+         nX2.interim = sum(!is.na(di$X2)),
+         nX3.interim = sum(!is.na(di$X3)),
+         ## computation time
+         computation.time=as.double(round(difftime(stopComp,startComp,units="secs"),3))
+     )
+     ## names(out) <- myColNames
+     RES <- rbind(RES,out)
+     save(RES,file=paste0(path.res,name,"(tempo)-",iter_sim,".rda"))
+                                         # }}}
+ }
[1] "seed 51151 for j=1 out of 250 (i.e. j=3001 in [3001;3250], as job id is i=13)"
Loading required namespace: nlme
[1] "seed 95337 for j=2 out of 250 (i.e. j=3002 in [3001;3250], as job id is i=13)"
[1] "seed 34383 for j=3 out of 250 (i.e. j=3003 in [3001;3250], as job id is i=13)"
[1] "seed 73709 for j=4 out of 250 (i.e. j=3004 in [3001;3250], as job id is i=13)"
[1] "seed 79278 for j=5 out of 250 (i.e. j=3005 in [3001;3250], as job id is i=13)"
[1] "seed 48962 for j=6 out of 250 (i.e. j=3006 in [3001;3250], as job id is i=13)"
[1] "seed 50809 for j=7 out of 250 (i.e. j=3007 in [3001;3250], as job id is i=13)"
[1] "seed 87512 for j=8 out of 250 (i.e. j=3008 in [3001;3250], as job id is i=13)"
[1] "seed 53058 for j=9 out of 250 (i.e. j=3009 in [3001;3250], as job id is i=13)"
[1] "seed 26053 for j=10 out of 250 (i.e. j=3010 in [3001;3250], as job id is i=13)"
[1] "seed 84404 for j=11 out of 250 (i.e. j=3011 in [3001;3250], as job id is i=13)"
[1] "seed 46820 for j=12 out of 250 (i.e. j=3012 in [3001;3250], as job id is i=13)"
[1] "seed 75125 for j=13 out of 250 (i.e. j=3013 in [3001;3250], as job id is i=13)"
[1] "seed 36913 for j=14 out of 250 (i.e. j=3014 in [3001;3250], as job id is i=13)"
[1] "seed 39722 for j=15 out of 250 (i.e. j=3015 in [3001;3250], as job id is i=13)"
[1] "seed 9532 for j=16 out of 250 (i.e. j=3016 in [3001;3250], as job id is i=13)"
[1] "seed 95396 for j=17 out of 250 (i.e. j=3017 in [3001;3250], as job id is i=13)"
[1] "seed 53817 for j=18 out of 250 (i.e. j=3018 in [3001;3250], as job id is i=13)"
[1] "seed 9113 for j=19 out of 250 (i.e. j=3019 in [3001;3250], as job id is i=13)"
[1] "seed 8481 for j=20 out of 250 (i.e. j=3020 in [3001;3250], as job id is i=13)"
[1] "seed 96974 for j=21 out of 250 (i.e. j=3021 in [3001;3250], as job id is i=13)"
[1] "seed 34508 for j=22 out of 250 (i.e. j=3022 in [3001;3250], as job id is i=13)"
[1] "seed 19011 for j=23 out of 250 (i.e. j=3023 in [3001;3250], as job id is i=13)"
[1] "seed 53018 for j=24 out of 250 (i.e. j=3024 in [3001;3250], as job id is i=13)"
[1] "seed 39279 for j=25 out of 250 (i.e. j=3025 in [3001;3250], as job id is i=13)"
[1] "seed 82714 for j=26 out of 250 (i.e. j=3026 in [3001;3250], as job id is i=13)"
[1] "seed 48096 for j=27 out of 250 (i.e. j=3027 in [3001;3250], as job id is i=13)"
[1] "seed 40036 for j=28 out of 250 (i.e. j=3028 in [3001;3250], as job id is i=13)"
[1] "seed 41531 for j=29 out of 250 (i.e. j=3029 in [3001;3250], as job id is i=13)"
[1] "seed 74661 for j=30 out of 250 (i.e. j=3030 in [3001;3250], as job id is i=13)"
[1] "seed 21818 for j=31 out of 250 (i.e. j=3031 in [3001;3250], as job id is i=13)"
[1] "seed 85674 for j=32 out of 250 (i.e. j=3032 in [3001;3250], as job id is i=13)"
[1] "seed 59986 for j=33 out of 250 (i.e. j=3033 in [3001;3250], as job id is i=13)"
[1] "seed 70079 for j=34 out of 250 (i.e. j=3034 in [3001;3250], as job id is i=13)"
[1] "seed 98784 for j=35 out of 250 (i.e. j=3035 in [3001;3250], as job id is i=13)"
[1] "seed 87676 for j=36 out of 250 (i.e. j=3036 in [3001;3250], as job id is i=13)"
[1] "seed 36992 for j=37 out of 250 (i.e. j=3037 in [3001;3250], as job id is i=13)"
[1] "seed 20171 for j=38 out of 250 (i.e. j=3038 in [3001;3250], as job id is i=13)"
[1] "seed 50322 for j=39 out of 250 (i.e. j=3039 in [3001;3250], as job id is i=13)"
[1] "seed 23103 for j=40 out of 250 (i.e. j=3040 in [3001;3250], as job id is i=13)"
[1] "seed 43259 for j=41 out of 250 (i.e. j=3041 in [3001;3250], as job id is i=13)"
[1] "seed 39191 for j=42 out of 250 (i.e. j=3042 in [3001;3250], as job id is i=13)"
[1] "seed 76041 for j=43 out of 250 (i.e. j=3043 in [3001;3250], as job id is i=13)"
[1] "seed 31866 for j=44 out of 250 (i.e. j=3044 in [3001;3250], as job id is i=13)"
[1] "seed 81330 for j=45 out of 250 (i.e. j=3045 in [3001;3250], as job id is i=13)"
[1] "seed 53704 for j=46 out of 250 (i.e. j=3046 in [3001;3250], as job id is i=13)"
[1] "seed 40332 for j=47 out of 250 (i.e. j=3047 in [3001;3250], as job id is i=13)"
[1] "seed 12552 for j=48 out of 250 (i.e. j=3048 in [3001;3250], as job id is i=13)"
[1] "seed 66592 for j=49 out of 250 (i.e. j=3049 in [3001;3250], as job id is i=13)"
[1] "seed 73958 for j=50 out of 250 (i.e. j=3050 in [3001;3250], as job id is i=13)"
[1] "seed 80890 for j=51 out of 250 (i.e. j=3051 in [3001;3250], as job id is i=13)"
[1] "seed 18193 for j=52 out of 250 (i.e. j=3052 in [3001;3250], as job id is i=13)"
[1] "seed 81524 for j=53 out of 250 (i.e. j=3053 in [3001;3250], as job id is i=13)"
[1] "seed 89195 for j=54 out of 250 (i.e. j=3054 in [3001;3250], as job id is i=13)"
[1] "seed 65647 for j=55 out of 250 (i.e. j=3055 in [3001;3250], as job id is i=13)"
[1] "seed 55710 for j=56 out of 250 (i.e. j=3056 in [3001;3250], as job id is i=13)"
[1] "seed 77782 for j=57 out of 250 (i.e. j=3057 in [3001;3250], as job id is i=13)"
[1] "seed 52475 for j=58 out of 250 (i.e. j=3058 in [3001;3250], as job id is i=13)"
[1] "seed 71964 for j=59 out of 250 (i.e. j=3059 in [3001;3250], as job id is i=13)"
[1] "seed 5449 for j=60 out of 250 (i.e. j=3060 in [3001;3250], as job id is i=13)"
[1] "seed 90361 for j=61 out of 250 (i.e. j=3061 in [3001;3250], as job id is i=13)"
[1] "seed 29501 for j=62 out of 250 (i.e. j=3062 in [3001;3250], as job id is i=13)"
[1] "seed 41863 for j=63 out of 250 (i.e. j=3063 in [3001;3250], as job id is i=13)"
[1] "seed 51288 for j=64 out of 250 (i.e. j=3064 in [3001;3250], as job id is i=13)"
[1] "seed 93923 for j=65 out of 250 (i.e. j=3065 in [3001;3250], as job id is i=13)"
[1] "seed 65975 for j=66 out of 250 (i.e. j=3066 in [3001;3250], as job id is i=13)"
[1] "seed 67232 for j=67 out of 250 (i.e. j=3067 in [3001;3250], as job id is i=13)"
[1] "seed 1589 for j=68 out of 250 (i.e. j=3068 in [3001;3250], as job id is i=13)"
[1] "seed 39395 for j=69 out of 250 (i.e. j=3069 in [3001;3250], as job id is i=13)"
[1] "seed 51517 for j=70 out of 250 (i.e. j=3070 in [3001;3250], as job id is i=13)"
[1] "seed 21916 for j=71 out of 250 (i.e. j=3071 in [3001;3250], as job id is i=13)"
[1] "seed 96170 for j=72 out of 250 (i.e. j=3072 in [3001;3250], as job id is i=13)"
[1] "seed 13231 for j=73 out of 250 (i.e. j=3073 in [3001;3250], as job id is i=13)"
[1] "seed 22623 for j=74 out of 250 (i.e. j=3074 in [3001;3250], as job id is i=13)"
[1] "seed 55079 for j=75 out of 250 (i.e. j=3075 in [3001;3250], as job id is i=13)"
[1] "seed 98340 for j=76 out of 250 (i.e. j=3076 in [3001;3250], as job id is i=13)"
[1] "seed 89147 for j=77 out of 250 (i.e. j=3077 in [3001;3250], as job id is i=13)"
[1] "seed 333 for j=78 out of 250 (i.e. j=3078 in [3001;3250], as job id is i=13)"
[1] "seed 56386 for j=79 out of 250 (i.e. j=3079 in [3001;3250], as job id is i=13)"
[1] "seed 33348 for j=80 out of 250 (i.e. j=3080 in [3001;3250], as job id is i=13)"
[1] "seed 26236 for j=81 out of 250 (i.e. j=3081 in [3001;3250], as job id is i=13)"
[1] "seed 14577 for j=82 out of 250 (i.e. j=3082 in [3001;3250], as job id is i=13)"
[1] "seed 31956 for j=83 out of 250 (i.e. j=3083 in [3001;3250], as job id is i=13)"
[1] "seed 99538 for j=84 out of 250 (i.e. j=3084 in [3001;3250], as job id is i=13)"
[1] "seed 33463 for j=85 out of 250 (i.e. j=3085 in [3001;3250], as job id is i=13)"
[1] "seed 91829 for j=86 out of 250 (i.e. j=3086 in [3001;3250], as job id is i=13)"
[1] "seed 74546 for j=87 out of 250 (i.e. j=3087 in [3001;3250], as job id is i=13)"
[1] "seed 81809 for j=88 out of 250 (i.e. j=3088 in [3001;3250], as job id is i=13)"
[1] "seed 64891 for j=89 out of 250 (i.e. j=3089 in [3001;3250], as job id is i=13)"
[1] "seed 33336 for j=90 out of 250 (i.e. j=3090 in [3001;3250], as job id is i=13)"
[1] "seed 58263 for j=91 out of 250 (i.e. j=3091 in [3001;3250], as job id is i=13)"
[1] "seed 80258 for j=92 out of 250 (i.e. j=3092 in [3001;3250], as job id is i=13)"
[1] "seed 83267 for j=93 out of 250 (i.e. j=3093 in [3001;3250], as job id is i=13)"
[1] "seed 52164 for j=94 out of 250 (i.e. j=3094 in [3001;3250], as job id is i=13)"
[1] "seed 84363 for j=95 out of 250 (i.e. j=3095 in [3001;3250], as job id is i=13)"
[1] "seed 26922 for j=96 out of 250 (i.e. j=3096 in [3001;3250], as job id is i=13)"
[1] "seed 56167 for j=97 out of 250 (i.e. j=3097 in [3001;3250], as job id is i=13)"
[1] "seed 54051 for j=98 out of 250 (i.e. j=3098 in [3001;3250], as job id is i=13)"
[1] "seed 46088 for j=99 out of 250 (i.e. j=3099 in [3001;3250], as job id is i=13)"
[1] "seed 7252 for j=100 out of 250 (i.e. j=3100 in [3001;3250], as job id is i=13)"
[1] "seed 71786 for j=101 out of 250 (i.e. j=3101 in [3001;3250], as job id is i=13)"
[1] "seed 13627 for j=102 out of 250 (i.e. j=3102 in [3001;3250], as job id is i=13)"
[1] "seed 1854 for j=103 out of 250 (i.e. j=3103 in [3001;3250], as job id is i=13)"
[1] "seed 55541 for j=104 out of 250 (i.e. j=3104 in [3001;3250], as job id is i=13)"
[1] "seed 72828 for j=105 out of 250 (i.e. j=3105 in [3001;3250], as job id is i=13)"
[1] "seed 81706 for j=106 out of 250 (i.e. j=3106 in [3001;3250], as job id is i=13)"
[1] "seed 35823 for j=107 out of 250 (i.e. j=3107 in [3001;3250], as job id is i=13)"
[1] "seed 31583 for j=108 out of 250 (i.e. j=3108 in [3001;3250], as job id is i=13)"
[1] "seed 18254 for j=109 out of 250 (i.e. j=3109 in [3001;3250], as job id is i=13)"
[1] "seed 2440 for j=110 out of 250 (i.e. j=3110 in [3001;3250], as job id is i=13)"
[1] "seed 3262 for j=111 out of 250 (i.e. j=3111 in [3001;3250], as job id is i=13)"
[1] "seed 94108 for j=112 out of 250 (i.e. j=3112 in [3001;3250], as job id is i=13)"
[1] "seed 43247 for j=113 out of 250 (i.e. j=3113 in [3001;3250], as job id is i=13)"
[1] "seed 23168 for j=114 out of 250 (i.e. j=3114 in [3001;3250], as job id is i=13)"
[1] "seed 15737 for j=115 out of 250 (i.e. j=3115 in [3001;3250], as job id is i=13)"
[1] "seed 67674 for j=116 out of 250 (i.e. j=3116 in [3001;3250], as job id is i=13)"
[1] "seed 75198 for j=117 out of 250 (i.e. j=3117 in [3001;3250], as job id is i=13)"
[1] "seed 54910 for j=118 out of 250 (i.e. j=3118 in [3001;3250], as job id is i=13)"
[1] "seed 23649 for j=119 out of 250 (i.e. j=3119 in [3001;3250], as job id is i=13)"
[1] "seed 61039 for j=120 out of 250 (i.e. j=3120 in [3001;3250], as job id is i=13)"
[1] "seed 96378 for j=121 out of 250 (i.e. j=3121 in [3001;3250], as job id is i=13)"
[1] "seed 52637 for j=122 out of 250 (i.e. j=3122 in [3001;3250], as job id is i=13)"
[1] "seed 17492 for j=123 out of 250 (i.e. j=3123 in [3001;3250], as job id is i=13)"
[1] "seed 26524 for j=124 out of 250 (i.e. j=3124 in [3001;3250], as job id is i=13)"
[1] "seed 99553 for j=125 out of 250 (i.e. j=3125 in [3001;3250], as job id is i=13)"
[1] "seed 14601 for j=126 out of 250 (i.e. j=3126 in [3001;3250], as job id is i=13)"
[1] "seed 17588 for j=127 out of 250 (i.e. j=3127 in [3001;3250], as job id is i=13)"
[1] "seed 37531 for j=128 out of 250 (i.e. j=3128 in [3001;3250], as job id is i=13)"
[1] "seed 71276 for j=129 out of 250 (i.e. j=3129 in [3001;3250], as job id is i=13)"
[1] "seed 10539 for j=130 out of 250 (i.e. j=3130 in [3001;3250], as job id is i=13)"
[1] "seed 34617 for j=131 out of 250 (i.e. j=3131 in [3001;3250], as job id is i=13)"
[1] "seed 50739 for j=132 out of 250 (i.e. j=3132 in [3001;3250], as job id is i=13)"
[1] "seed 51059 for j=133 out of 250 (i.e. j=3133 in [3001;3250], as job id is i=13)"
[1] "seed 30321 for j=134 out of 250 (i.e. j=3134 in [3001;3250], as job id is i=13)"
[1] "seed 5732 for j=135 out of 250 (i.e. j=3135 in [3001;3250], as job id is i=13)"
[1] "seed 88473 for j=136 out of 250 (i.e. j=3136 in [3001;3250], as job id is i=13)"
[1] "seed 40349 for j=137 out of 250 (i.e. j=3137 in [3001;3250], as job id is i=13)"
[1] "seed 86391 for j=138 out of 250 (i.e. j=3138 in [3001;3250], as job id is i=13)"
[1] "seed 36810 for j=139 out of 250 (i.e. j=3139 in [3001;3250], as job id is i=13)"
[1] "seed 39900 for j=140 out of 250 (i.e. j=3140 in [3001;3250], as job id is i=13)"
[1] "seed 92835 for j=141 out of 250 (i.e. j=3141 in [3001;3250], as job id is i=13)"
[1] "seed 2121 for j=142 out of 250 (i.e. j=3142 in [3001;3250], as job id is i=13)"
[1] "seed 35229 for j=143 out of 250 (i.e. j=3143 in [3001;3250], as job id is i=13)"
[1] "seed 88392 for j=144 out of 250 (i.e. j=3144 in [3001;3250], as job id is i=13)"
[1] "seed 12093 for j=145 out of 250 (i.e. j=3145 in [3001;3250], as job id is i=13)"
[1] "seed 49986 for j=146 out of 250 (i.e. j=3146 in [3001;3250], as job id is i=13)"
[1] "seed 34164 for j=147 out of 250 (i.e. j=3147 in [3001;3250], as job id is i=13)"
[1] "seed 45085 for j=148 out of 250 (i.e. j=3148 in [3001;3250], as job id is i=13)"
[1] "seed 29388 for j=149 out of 250 (i.e. j=3149 in [3001;3250], as job id is i=13)"
[1] "seed 90207 for j=150 out of 250 (i.e. j=3150 in [3001;3250], as job id is i=13)"
[1] "seed 13893 for j=151 out of 250 (i.e. j=3151 in [3001;3250], as job id is i=13)"
[1] "seed 38542 for j=152 out of 250 (i.e. j=3152 in [3001;3250], as job id is i=13)"
[1] "seed 59708 for j=153 out of 250 (i.e. j=3153 in [3001;3250], as job id is i=13)"
[1] "seed 71909 for j=154 out of 250 (i.e. j=3154 in [3001;3250], as job id is i=13)"
[1] "seed 4882 for j=155 out of 250 (i.e. j=3155 in [3001;3250], as job id is i=13)"
[1] "seed 44228 for j=156 out of 250 (i.e. j=3156 in [3001;3250], as job id is i=13)"
[1] "seed 88213 for j=157 out of 250 (i.e. j=3157 in [3001;3250], as job id is i=13)"
[1] "seed 73222 for j=158 out of 250 (i.e. j=3158 in [3001;3250], as job id is i=13)"
[1] "seed 71157 for j=159 out of 250 (i.e. j=3159 in [3001;3250], as job id is i=13)"
[1] "seed 81677 for j=160 out of 250 (i.e. j=3160 in [3001;3250], as job id is i=13)"
[1] "seed 63030 for j=161 out of 250 (i.e. j=3161 in [3001;3250], as job id is i=13)"
[1] "seed 68354 for j=162 out of 250 (i.e. j=3162 in [3001;3250], as job id is i=13)"
[1] "seed 60110 for j=163 out of 250 (i.e. j=3163 in [3001;3250], as job id is i=13)"
[1] "seed 91684 for j=164 out of 250 (i.e. j=3164 in [3001;3250], as job id is i=13)"
[1] "seed 65826 for j=165 out of 250 (i.e. j=3165 in [3001;3250], as job id is i=13)"
[1] "seed 33947 for j=166 out of 250 (i.e. j=3166 in [3001;3250], as job id is i=13)"
[1] "seed 14413 for j=167 out of 250 (i.e. j=3167 in [3001;3250], as job id is i=13)"
[1] "seed 27609 for j=168 out of 250 (i.e. j=3168 in [3001;3250], as job id is i=13)"
[1] "seed 32057 for j=169 out of 250 (i.e. j=3169 in [3001;3250], as job id is i=13)"
[1] "seed 28878 for j=170 out of 250 (i.e. j=3170 in [3001;3250], as job id is i=13)"
[1] "seed 66078 for j=171 out of 250 (i.e. j=3171 in [3001;3250], as job id is i=13)"
[1] "seed 49932 for j=172 out of 250 (i.e. j=3172 in [3001;3250], as job id is i=13)"
[1] "seed 50798 for j=173 out of 250 (i.e. j=3173 in [3001;3250], as job id is i=13)"
[1] "seed 62781 for j=174 out of 250 (i.e. j=3174 in [3001;3250], as job id is i=13)"
[1] "seed 94384 for j=175 out of 250 (i.e. j=3175 in [3001;3250], as job id is i=13)"
[1] "seed 95167 for j=176 out of 250 (i.e. j=3176 in [3001;3250], as job id is i=13)"
[1] "seed 35630 for j=177 out of 250 (i.e. j=3177 in [3001;3250], as job id is i=13)"
[1] "seed 1746 for j=178 out of 250 (i.e. j=3178 in [3001;3250], as job id is i=13)"
[1] "seed 37736 for j=179 out of 250 (i.e. j=3179 in [3001;3250], as job id is i=13)"
[1] "seed 36393 for j=180 out of 250 (i.e. j=3180 in [3001;3250], as job id is i=13)"
[1] "seed 53204 for j=181 out of 250 (i.e. j=3181 in [3001;3250], as job id is i=13)"
[1] "seed 17119 for j=182 out of 250 (i.e. j=3182 in [3001;3250], as job id is i=13)"
[1] "seed 29491 for j=183 out of 250 (i.e. j=3183 in [3001;3250], as job id is i=13)"
[1] "seed 30860 for j=184 out of 250 (i.e. j=3184 in [3001;3250], as job id is i=13)"
[1] "seed 48123 for j=185 out of 250 (i.e. j=3185 in [3001;3250], as job id is i=13)"
[1] "seed 37542 for j=186 out of 250 (i.e. j=3186 in [3001;3250], as job id is i=13)"
[1] "seed 56730 for j=187 out of 250 (i.e. j=3187 in [3001;3250], as job id is i=13)"
[1] "seed 48005 for j=188 out of 250 (i.e. j=3188 in [3001;3250], as job id is i=13)"
[1] "seed 87166 for j=189 out of 250 (i.e. j=3189 in [3001;3250], as job id is i=13)"
[1] "seed 68537 for j=190 out of 250 (i.e. j=3190 in [3001;3250], as job id is i=13)"
[1] "seed 89670 for j=191 out of 250 (i.e. j=3191 in [3001;3250], as job id is i=13)"
[1] "seed 46202 for j=192 out of 250 (i.e. j=3192 in [3001;3250], as job id is i=13)"
[1] "seed 75285 for j=193 out of 250 (i.e. j=3193 in [3001;3250], as job id is i=13)"
[1] "seed 93906 for j=194 out of 250 (i.e. j=3194 in [3001;3250], as job id is i=13)"
[1] "seed 72592 for j=195 out of 250 (i.e. j=3195 in [3001;3250], as job id is i=13)"
[1] "seed 75221 for j=196 out of 250 (i.e. j=3196 in [3001;3250], as job id is i=13)"
[1] "seed 25795 for j=197 out of 250 (i.e. j=3197 in [3001;3250], as job id is i=13)"
[1] "seed 86001 for j=198 out of 250 (i.e. j=3198 in [3001;3250], as job id is i=13)"
[1] "seed 25910 for j=199 out of 250 (i.e. j=3199 in [3001;3250], as job id is i=13)"
[1] "seed 12423 for j=200 out of 250 (i.e. j=3200 in [3001;3250], as job id is i=13)"
[1] "seed 27504 for j=201 out of 250 (i.e. j=3201 in [3001;3250], as job id is i=13)"
[1] "seed 34165 for j=202 out of 250 (i.e. j=3202 in [3001;3250], as job id is i=13)"
[1] "seed 23155 for j=203 out of 250 (i.e. j=3203 in [3001;3250], as job id is i=13)"
[1] "seed 54562 for j=204 out of 250 (i.e. j=3204 in [3001;3250], as job id is i=13)"
[1] "seed 68387 for j=205 out of 250 (i.e. j=3205 in [3001;3250], as job id is i=13)"
[1] "seed 82488 for j=206 out of 250 (i.e. j=3206 in [3001;3250], as job id is i=13)"
[1] "seed 29537 for j=207 out of 250 (i.e. j=3207 in [3001;3250], as job id is i=13)"
[1] "seed 94175 for j=208 out of 250 (i.e. j=3208 in [3001;3250], as job id is i=13)"
[1] "seed 69083 for j=209 out of 250 (i.e. j=3209 in [3001;3250], as job id is i=13)"
[1] "seed 21333 for j=210 out of 250 (i.e. j=3210 in [3001;3250], as job id is i=13)"
[1] "seed 78933 for j=211 out of 250 (i.e. j=3211 in [3001;3250], as job id is i=13)"
[1] "seed 26023 for j=212 out of 250 (i.e. j=3212 in [3001;3250], as job id is i=13)"
[1] "seed 89679 for j=213 out of 250 (i.e. j=3213 in [3001;3250], as job id is i=13)"
[1] "seed 5185 for j=214 out of 250 (i.e. j=3214 in [3001;3250], as job id is i=13)"
[1] "seed 16227 for j=215 out of 250 (i.e. j=3215 in [3001;3250], as job id is i=13)"
[1] "seed 39901 for j=216 out of 250 (i.e. j=3216 in [3001;3250], as job id is i=13)"
[1] "seed 97070 for j=217 out of 250 (i.e. j=3217 in [3001;3250], as job id is i=13)"
[1] "seed 9366 for j=218 out of 250 (i.e. j=3218 in [3001;3250], as job id is i=13)"
[1] "seed 21989 for j=219 out of 250 (i.e. j=3219 in [3001;3250], as job id is i=13)"
[1] "seed 75607 for j=220 out of 250 (i.e. j=3220 in [3001;3250], as job id is i=13)"
[1] "seed 94894 for j=221 out of 250 (i.e. j=3221 in [3001;3250], as job id is i=13)"
[1] "seed 34163 for j=222 out of 250 (i.e. j=3222 in [3001;3250], as job id is i=13)"
[1] "seed 75180 for j=223 out of 250 (i.e. j=3223 in [3001;3250], as job id is i=13)"
[1] "seed 29672 for j=224 out of 250 (i.e. j=3224 in [3001;3250], as job id is i=13)"
[1] "seed 88555 for j=225 out of 250 (i.e. j=3225 in [3001;3250], as job id is i=13)"
[1] "seed 5217 for j=226 out of 250 (i.e. j=3226 in [3001;3250], as job id is i=13)"
[1] "seed 87639 for j=227 out of 250 (i.e. j=3227 in [3001;3250], as job id is i=13)"
[1] "seed 46717 for j=228 out of 250 (i.e. j=3228 in [3001;3250], as job id is i=13)"
[1] "seed 82466 for j=229 out of 250 (i.e. j=3229 in [3001;3250], as job id is i=13)"
[1] "seed 53303 for j=230 out of 250 (i.e. j=3230 in [3001;3250], as job id is i=13)"
[1] "seed 64964 for j=231 out of 250 (i.e. j=3231 in [3001;3250], as job id is i=13)"
[1] "seed 67516 for j=232 out of 250 (i.e. j=3232 in [3001;3250], as job id is i=13)"
[1] "seed 69196 for j=233 out of 250 (i.e. j=3233 in [3001;3250], as job id is i=13)"
[1] "seed 86903 for j=234 out of 250 (i.e. j=3234 in [3001;3250], as job id is i=13)"
[1] "seed 57589 for j=235 out of 250 (i.e. j=3235 in [3001;3250], as job id is i=13)"
[1] "seed 20894 for j=236 out of 250 (i.e. j=3236 in [3001;3250], as job id is i=13)"
[1] "seed 51000 for j=237 out of 250 (i.e. j=3237 in [3001;3250], as job id is i=13)"
[1] "seed 4807 for j=238 out of 250 (i.e. j=3238 in [3001;3250], as job id is i=13)"
[1] "seed 48351 for j=239 out of 250 (i.e. j=3239 in [3001;3250], as job id is i=13)"
[1] "seed 14493 for j=240 out of 250 (i.e. j=3240 in [3001;3250], as job id is i=13)"
[1] "seed 74603 for j=241 out of 250 (i.e. j=3241 in [3001;3250], as job id is i=13)"
[1] "seed 30122 for j=242 out of 250 (i.e. j=3242 in [3001;3250], as job id is i=13)"
[1] "seed 31878 for j=243 out of 250 (i.e. j=3243 in [3001;3250], as job id is i=13)"
[1] "seed 2201 for j=244 out of 250 (i.e. j=3244 in [3001;3250], as job id is i=13)"
[1] "seed 21361 for j=245 out of 250 (i.e. j=3245 in [3001;3250], as job id is i=13)"
[1] "seed 73888 for j=246 out of 250 (i.e. j=3246 in [3001;3250], as job id is i=13)"
[1] "seed 19335 for j=247 out of 250 (i.e. j=3247 in [3001;3250], as job id is i=13)"
[1] "seed 7017 for j=248 out of 250 (i.e. j=3248 in [3001;3250], as job id is i=13)"
[1] "seed 71213 for j=249 out of 250 (i.e. j=3249 in [3001;3250], as job id is i=13)"
[1] "seed 96624 for j=250 out of 250 (i.e. j=3250 in [3001;3250], as job id is i=13)"
There were 24 warnings (use warnings() to see them)
> rownames(RES) <- NULL
> save(RES,file=paste0(path.res,name,"-",iter_sim,".rda"))
> 
> ## * Summary results
> sessionInfo()
R version 4.1.2 (2021-11-01)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Red Hat Enterprise Linux 8.5 (Ootpa)

Matrix products: default
BLAS:   /opt/software/R/4.1.2/lib64/R/lib/libRblas.so
LAPACK: /opt/software/R/4.1.2/lib64/R/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] mvtnorm_1.1-3    DelayedGSD_0.0.3

loaded via a namespace (and not attached):
 [1] BB_2019.10-1     magrittr_2.0.3   tidyselect_1.1.2 munsell_0.5.0   
 [5] lattice_0.20-45  colorspace_2.0-3 xtable_1.8-4     R6_2.5.1        
 [9] quadprog_1.5-8   rlang_1.0.3      fansi_1.0.3      dplyr_1.0.9     
[13] grid_4.1.2       nlme_3.1-153     gtable_0.3.0     gsDesign_3.3.0  
[17] utf8_1.2.2       cli_3.3.0        ellipsis_0.3.2   tibble_3.1.7    
[21] lifecycle_1.0.1  crayon_1.5.1     purrr_0.3.4      ggplot2_3.3.6   
[25] tidyr_1.2.0      vctrs_0.4.1      glue_1.6.2       compiler_4.1.2  
[29] pillar_1.7.0     generics_0.1.3   scales_1.2.0     pkgconfig_2.0.3 
> summary(RES)
     method        stage           type             statistic     
 Min.   :1.0   Min.   :1.000   Length:1500        Min.   :0.0481  
 1st Qu.:1.0   1st Qu.:1.000   Class :character   1st Qu.:1.6555  
 Median :1.5   Median :1.000   Mode  :character   Median :2.3898  
 Mean   :1.5   Mean   :1.333                      Mean   :2.3313  
 3rd Qu.:2.0   3rd Qu.:2.000                      3rd Qu.:3.0258  
 Max.   :2.0   Max.   :2.000                      Max.   :5.7349  
                                                  NA's   :500     
  estimate_ML          se_ML             info           infoPC      
 Min.   :-0.2174   Min.   :0.3237   Min.   :4.434   Min.   :0.3464  
 1st Qu.: 0.5763   1st Qu.:0.3842   1st Qu.:5.670   1st Qu.:0.4431  
 Median : 0.8431   Median :0.4033   Median :6.199   Median :0.4844  
 Mean   : 0.8260   Mean   :0.4031   Mean   :6.299   Mean   :0.4922  
 3rd Qu.: 1.0550   3rd Qu.:0.4223   3rd Qu.:6.819   3rd Qu.:0.5329  
 Max.   : 2.2064   Max.   :0.4749   Max.   :9.546   Max.   :0.7459  
 NA's   :500       NA's   :1000     NA's   :166     NA's   :166     
   info.pred       infoPC.pred           uk              lk         
 Min.   : 4.654   Min.   :0.3637   Min.   :2.200   Min.   :-0.2928  
 1st Qu.: 5.970   1st Qu.:0.4665   1st Qu.:2.457   1st Qu.: 0.1245  
 Median : 6.513   Median :0.5089   Median :2.526   Median : 0.3007  
 Mean   : 6.622   Mean   :0.5174   Mean   :2.521   Mean   : 0.3178  
 3rd Qu.: 7.186   3rd Qu.:0.5615   3rd Qu.:2.590   3rd Qu.: 0.4929  
 Max.   :10.031   Max.   :0.7839   Max.   :2.748   Max.   : 1.2527  
 NA's   :1000     NA's   :1000     NA's   :1000    NA's   :1000     
   decision            reason            p.value_ML        lower_ML      
 Length:1500        Length:1500        Min.   :0.0000   Min.   :-1.0226  
 Class :character   Class :character   1st Qu.:0.0016   1st Qu.:-0.0462  
 Mode  :character   Mode  :character   Median :0.0076   Median : 0.1423  
                                       Mean   :0.0663   Mean   : 0.1188  
                                       3rd Qu.:0.0380   3rd Qu.: 0.3030  
                                       Max.   :0.9615   Max.   : 1.2082  
                                       NA's   :1000     NA's   :1000     
    upper_ML       p.value_MUE       lower_MUE         upper_MUE     
 Min.   :0.5902   Min.   :0.0000   Min.   :-1.0185   Min.   :0.5858  
 1st Qu.:1.2366   1st Qu.:0.0029   1st Qu.:-0.0519   1st Qu.:1.2302  
 Median :1.4924   Median :0.0074   Median : 0.0760   Median :1.4583  
 Mean   :1.5514   Mean   :0.0421   Mean   : 0.0990   Mean   :1.5604  
 3rd Qu.:1.8434   3rd Qu.:0.0201   3rd Qu.: 0.2057   3rd Qu.:1.8528  
 Max.   :2.9171   Max.   :0.8088   Max.   : 1.3971   Max.   :2.9123  
 NA's   :1000     NA's   :1000     NA's   :1000      NA's   :1000    
  estimate_MUE           ck          time.interim      seed      
 Min.   :-0.2113   Min.   :0.1421   Min.   :525   Min.   :  333  
 1st Qu.: 0.5958   1st Qu.:1.3884   1st Qu.:583   1st Qu.:29388  
 Median : 0.8135   Median :1.4516   Median :602   Median :50804  
 Mean   : 0.8397   Mean   :1.4138   Mean   :601   Mean   :50949  
 3rd Qu.: 1.0464   3rd Qu.:1.5081   3rd Qu.:622   3rd Qu.:74661  
 Max.   : 2.0627   Max.   :1.7598   Max.   :672   Max.   :99553  
 NA's   :1000      NA's   :666                                   
  nX1.interim     nX2.interim     nX3.interim    computation.time
 Min.   :145.0   Min.   :131.0   Min.   :119.0   Min.   :0.6700  
 1st Qu.:147.0   1st Qu.:135.0   1st Qu.:126.0   1st Qu.:0.8790  
 Median :148.0   Median :137.0   Median :127.0   Median :0.9715  
 Mean   :148.6   Mean   :136.6   Mean   :127.2   Mean   :1.0019  
 3rd Qu.:150.0   3rd Qu.:138.0   3rd Qu.:129.0   3rd Qu.:1.1060  
 Max.   :154.0   Max.   :143.0   Max.   :135.0   Max.   :3.8100  
                                                                 
> 
> #----------------------------------------------------------------------
> ### BATCH_simuMain.R ends here
> 
> proc.time()
   user  system elapsed 
253.577   0.405 264.711 
