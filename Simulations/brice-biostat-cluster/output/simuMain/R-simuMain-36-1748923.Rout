
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### BATCH_simuMain.R --- 
> #----------------------------------------------------------------------
> ## Author: Paul Blanche
> ## Created: Mar  5 2021 (10:56) 
> ## Version: 
> ## Last-Updated: jul  7 2022 (13:56) 
> ##           By: Brice Ozenne
> ##     Update #: 518
> #----------------------------------------------------------------------
> ## 
> ### Commentary: 
> ## 
> ### Change Log:
> #----------------------------------------------------------------------
> ## 
> ### Code:
> 
> ## ** BATCH loop
> ## cd /projects/biostat01/people/hpl802/DelayedGSD/
> ## for ITER in `seq 1 10`;
> ## do
> ## eval 'R CMD BATCH --vanilla "--args iter_sim='$ITER' n.iter_sim=10" BATCH_simuMain.R output/R-simuMain-'$ITER'.Rout &'
> ## done
> 
> ## [1] 1186669
> ## [2] 1186670
> ## [3] 1186671
> ## [4] 1186672
> ## [5] 1186673
> ## [6] 1186674
> ## [7] 1186675
> ## [8] 1186676
> ## [9] 1186677
> ## [10] 1186678
> 
> rm(list=ls())
>                                    # {{{ parameters
> ## * parameters
> name <- "ScenarioName" # To save the results
> method <- 1:2 # methods used to compute the boundaries
>                                         #---
> myseed <- 140786598
>                                         #--- to plan the trial ----
> NMC <- 250 # number of sequential simulations to run in parallel. Eg. with 250, then we can run 40 scripts in paralell to get N=10,000 runs in total.
> kMax <- 2  #max number of analyses (including final)
> alpha <- 0.025  #type I error (one sided)
> beta <- 0.2  #type II error
> informationRates <- c(0.5,1)  #planned  information rates
> rho_alpha <- 2  # rho parameter for alpha error spending function
> rho_beta <- 2  # rho parameter for beta error spending function
> ## deltaPower <- 0.75 # just to try another value when Id > Imax
> Id <- 0.55  #(expected) information rate at each decision analysis
> binding <- TRUE
>                                         #
>                                         #---- to generate data -----------
>                                         #
> block <- c(1,1,0,0) 
> allsd <- c(2.5,2.1,2.4) # sd, first from baseline measurement, then the two changes from baseline
> mean0 <- c(10,0,0) # mean placebo group (again, first is absolute value, then change from baseline)
> delta <- c(0,0.6,0.8) # treatment effect
> ar <- (0.86*2)*2 # orginial accrual rate from data from Corine is 0.86 per week, hence we multiply by 2 for by 14 days. As to low, we further multiply by 2
> cor011 <- -0.15 # ~ from data from Corine
> corij1 <- 0.68  # ~ from data from Corine
> cor0j1 <- -0.27  # ~ from data from Corine
> Miss11 <- 5/104 # miss both V1 and V2
> Miss12 <- 1/104 # miss V1 and but not V2
> Miss21 <- 6/104 # do not miss V1 and but miss V2
> Miss22 <- 92/104 # miss none
> PropForInterim <- 0.5 # Decide to have interim analysiz when PropForInterim % of all subjects have had the chance to have one follow-up measuement recorded in the data to be available for analysis.
> theDelta.t <- 1.50001 # time lag to process the data and make them ready to analyze after collecting them (unit is time between two follow-up visits)
> TimeFactor <- 14 ## number of days between two visits
>                                         #
>                                         #--- actually for both planing the trial  and generating data-----
>                                         #
>                                         #
> deltaPower <- abs(delta[3]) # effect (NOT Z-scale/unit, but outcome scale/unit!) that the study is powered for: should we choose ourselves or compute from other numbers above ???
> n <- ceiling(2*2*((allsd[3]/deltaPower)^2)*(qnorm(1-beta)-qnorm(alpha))^2) #104 with Corine's data # should we choose ourselves or compute from the above numbers ???
>                                         # inflate SS as required for interim
> 
>                                         # {{{ Set seeds for parallel computing and reproducibility
> ## * Seed
> args <- commandArgs(TRUE) ## BATCH MODE
> if(length(args)>0){
+     for (arg in args){
+         eval(parse(text=arg))
+     }
+ }else{ ## SLUMR
+     iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_ID"))
+     n.iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_COUNT"))
+ } ## interactive
> if(is.na(iter_sim)){iter_sim <- 1}
> if(is.na(n.iter_sim)){n.iter_sim <- 40}
> 
> set.seed(140786598)
> allseeds <- sample.int(n = 10*n.iter_sim*NMC, size = n.iter_sim*NMC, replace=FALSE) #x=1:(.Machine$integer.max) seems to be maximal possible
> # }}}
> 
> # {{{ set path to load and save and othe machine specific variables
> ## * path
> path <- "."
> path.res <- file.path(path,"Results","simuMain")
> if(dir.exists(path.res)==FALSE){
+     if(dir.exists(file.path(path,"Results"))==FALSE){
+     dir.create(file.path(path,"Results"))
+     }
+     dir.create(path.res)
+ }
> path.output <- file.path(path,"output","simuMain")
> if(dir.exists(path.output)==FALSE){
+     if(dir.exists(file.path(path,"output"))==FALSE){
+     dir.create(file.path(path,"output"))
+     }
+     dir.create(path.output)
+ }
> # }}}
> 
> 
> ## * libraries and functions
> library(DelayedGSD)
DelayedGSD version 0.0.3
> ## sourceDir <- function(path, trace = TRUE, ...) {
> ##     for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
> ##         if(trace) cat(nm,":")
> ##         source(file.path(path, nm), ...)
> ##         if(trace) cat("\n")
> ##     }
> ## }
> ## sourceDir(pathToLoad)
>     
> 
> ## * Compute inflation factor and sample size
> plannedB <- vector(mode = "list", length = 3)
> for(iMeth in method){ ## iMeth <- 1
+     plannedB[[iMeth]] <- CalcBoundaries(kMax=kMax,  
+                                         alpha=alpha, 
+                                         beta=beta,  
+                                         InfoR.i=informationRates,  
+                                         InfoR.d=c(Id,1),  
+                                         rho_alpha=rho_alpha,  
+                                         rho_beta=rho_beta,  
+                                         method=iMeth,  
+                                         cNotBelowFixedc=FALSE,
+                                         bindingFutility=binding,
+                                         delta=tail(delta,1))
+     ## summary(plannedB[[1]])
+     ## coef(plannedB[[iMeth]], type = "information")
+ }
Loading required namespace: gsDesign
Loading required package: mvtnorm
Loading required namespace: BB
> inflationFactor <- unlist(lapply(plannedB,function(iP){iP$planned$InflationFactor}))
> nGSD <- ceiling(n*inflationFactor)
> ##  plot(plannedB[[1]])
> 
> #
> # --- just to check---
> ## n
> ## InfoFixed <- ((qnorm(1-beta)-qnorm(alpha))/(deltaPower))^2
> ## InfoFixed
> ## n/(4*(allsd[3])^2)
> #---
> # }}}
> 
> 
> 
> 
> # {{{ technical details to loop
> RES <- NULL # initialize results to save
> allj <- ((iter_sim-1)*NMC + 1):(iter_sim*NMC) # indices of all iterations (replicates) for this job, accountng for the other jobs running in parallel
> # }}}
> 
> ## * Loop
> for(j in allj){ ## j <- 51 ## 5
+     startComp <- Sys.time()
+     myseedi <- allseeds[j]
+     # {{{ TRACE info (e.g. to check the Rout)
+     print(paste0("seed ",myseedi," for ","j=",which(j==allj)," out of ",NMC, " (i.e. j=",j," in [",(iter_sim-1)*NMC + 1,";",iter_sim*NMC,"], as job id is i=",iter_sim,")"))
+     # }}}
+     # {{{ Missing probabilities
+     MyMissProb <- matrix(c(Miss11,Miss12,Miss21,Miss22),ncol=2,nrow=2,byrow=TRUE) # to additionnally remove 1 more because some FASFL=N
+     colnames(MyMissProb) <- c("V2 missing","V2 not missing")
+     rownames(MyMissProb) <- c("V1 missing","V1 not missing")
+     # }}}
+ 
+                                         # {{{ generate data
+     ## ** simulate
+     res <- GenData(n=n, 
+                    N.fw=2,
+                    rand.block=block,
+                    allsd=allsd,
+                    mean0=mean0,
+                    delta=delta,
+                    ar=ar,
+                    cor.01.1=cor011,
+                    cor.ij.1=corij1,
+                    cor.0j.1=cor0j1,
+                    seed=myseedi,
+                    MissProb=MyMissProb,
+                    DigitsOutcome=2,
+                    TimeFactor=TimeFactor,
+                    DigitsTime=0
+                    )
+     d <- res$d
+     ## head(d,n=20)
+                                         # }}}
+                                         # {{{ reformat data like those of Corine
+     ## Make data long format
+     ## dd <- FormatAsCase(d)
+     ## head(dd)
+     ## summary(dd)
+                                         # }}}
+    
+                                         # {{{ make data available at interim
+                                         # Here we stop inclusion data collection for the interim analysis as soon as
+                                         # half of the participants have completed (or had the opportunity to complete) the follow-up 
+     thet <- d$t3[ceiling(n*PropForInterim)]
+     di <- SelectData(d,t=thet)
+     ## ddi <- FormatAsCase(di) # needed ????
+     ## head(d[d$id==52,])
+                                         # }}}
+     ## {{{ analyze data at at interim
+     ## ** interim
+     lmmI <- analyzeData(di, ddf = "nlme", data.decision = sum(d$t1 <= thet + theDelta.t*TimeFactor), getinfo = TRUE, trace = TRUE)
+     ## lmmI <- analyzeData(di, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     currentGSD <- vector(mode = "list", length = 3)
+     out.interim <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+ 
+         currentGSD[[iMeth]] <- update(plannedB[[iMeth]], delta = lmmI, trace = FALSE)
+ 
+         iConfint.interim <- confint(currentGSD[[iMeth]])
+         iInfo.interim <- coef(currentGSD[[iMeth]], type = "information")
+         iBoundary.interim <- coef(currentGSD[[iMeth]], type = "boundary")
+         iDecision.interim <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+         out.interim[[iMeth]] <-  data.frame(statistic = iConfint.interim[1,"statistic"],
+                                             estimate_ML = iConfint.interim[1,"estimate"],
+                                             se_ML = iConfint.interim[1,"se"],
+                                             info = iInfo.interim[1,"Interim"],
+                                             infoPC = iInfo.interim[1,"Interim.pc"],
+                                             info.pred = iInfo.interim[1,"Decision"],
+                                             infoPC.pred = iInfo.interim[1,"Decision.pc"],
+                                             uk = iBoundary.interim[1,"Ebound"],
+                                             lk = iBoundary.interim[1,"Fbound"],
+                                             decision = iDecision.interim["decision","stage 1"],
+                                             reason = iDecision.interim["reason.interim","stage 1"])
+     }
+     ## currentGSD[[1]]
+     ## plot(currentGSD[[1]])
+ 
+     ## ** decision
+     dDecision <- d[which(d$t1 <= thet + theDelta.t*TimeFactor),]
+     lmmD <- analyzeData(dDecision, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+     
+     out.decision <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+           
+         if(out.interim[[iMeth]]$decision == "stop"){
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, trace = FALSE)
+             ## plot(currentGSD[[iMeth]])
+ 
+             iConfint.decision <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.decision  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = iConfint.decision[1,"statistic"],
+                                                 p.value_ML = iConfint.decision[iConfint.decision$method == "ML","p.value"],
+                                                 lower_ML = iConfint.decision[iConfint.decision$method == "ML","lower"],
+                                                 upper_ML = iConfint.decision[iConfint.decision$method == "ML","upper"],
+                                                 estimate_ML = iConfint.decision[iConfint.decision$method == "ML","estimate"],
+                                                 p.value_MUE = iConfint.decision[iConfint.decision$method == "MUE","p.value"],
+                                                 lower_MUE = iConfint.decision[iConfint.decision$method == "MUE","lower"],
+                                                 upper_MUE = iConfint.decision[iConfint.decision$method == "MUE","upper"],
+                                                 estimate_MUE = iConfint.decision[iConfint.decision$method == "MUE","estimate"],
+                                                 info = iInfo.decision[1,"Interim"],
+                                                 infoPC = iInfo.decision[1,"Interim.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = unname(iDecision.decision["decision","stage 2"])
+                                                 )
+ 
+         }else{
+             ## update information
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, k = 1, type.k = "decision", trace = FALSE)
+ 
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = NA,
+                                                 p.value_ML = NA,
+                                                 lower_ML = NA,
+                                                 upper_ML = NA,
+                                                 estimate_ML = NA,
+                                                 p.value_MUE = NA,
+                                                 lower_MUE = NA,
+                                                 upper_MUE = NA,
+                                                 estimate_MUE = NA,
+                                                 info = iInfo.decision[1,"Decision"],
+                                                 infoPC = iInfo.decision[1,"Decision.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = NA)
+         }
+     }
+                                         # }}}
+                                         # {{{ Analyze data at decision
+ 
+     ## ** finale
+     dFinal <- d
+     lmmF <- analyzeData(dFinal, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     out.final <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+         if(out.interim[[iMeth]]$decision == "stop"){
+             out.final[[iMeth]] <- data.frame(statistic = NA,
+                                              p.value_ML = NA,
+                                              lower_ML = NA,
+                                              upper_ML = NA,
+                                              estimate_ML = NA,
+                                              p.value_MUE = NA,
+                                              lower_MUE = NA,
+                                              upper_MUE = NA,
+                                              estimate_MUE = NA,
+                                              info = NA,
+                                              infoPC = NA,
+                                              ck = NA,
+                                              decision = NA)
+ 
+         }else{
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmF, trace = FALSE)
+ 
+             ## plot(test)
+             ## summary(test)
+             iConfint.final <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.final <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.final <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.final  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.final[[iMeth]] <- data.frame(statistic = iConfint.final[1,"statistic"],
+                                              p.value_ML = iConfint.final[iConfint.final$method == "ML","p.value"],
+                                              lower_ML = iConfint.final[iConfint.final$method == "ML","lower"],
+                                              upper_ML = iConfint.final[iConfint.final$method == "ML","upper"],
+                                              estimate_ML = iConfint.final[iConfint.final$method == "ML","estimate"],
+                                              p.value_MUE = iConfint.final[iConfint.final$method == "MUE","p.value"],
+                                              lower_MUE = iConfint.final[iConfint.final$method == "MUE","lower"],
+                                              upper_MUE = iConfint.final[iConfint.final$method == "MUE","upper"],
+                                              estimate_MUE = iConfint.final[iConfint.final$method == "MUE","estimate"],
+                                              info = iInfo.final[1,"Interim"],
+                                              infoPC = iInfo.final[1,"Interim.pc"],
+                                              ck = iBoundary.final[1,"Cbound"],
+                                              decision = unname(coef(currentGSD[[iMeth]], type = "decision")["decision","stage 2"])
+                                              )
+         }
+     }
+                                         # }}}
+ 
+     stopComp <- Sys.time()
+                                         # {{{ Save results
+ 
+     outMerge <- do.call(rbind,lapply(method, function(iMeth){
+         iNames <- unique(c(names(out.interim[[iMeth]]),names(out.decision[[iMeth]]),names(out.final[[iMeth]])))
+         iMerge <- data.frame(matrix(NA, ncol = length(iNames)+3, nrow = 3, dimnames = list(NULL, c("method", "stage", "type", iNames))))
+         iMerge[1,c("method","stage","type",names(out.interim[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "interim", out.interim[[iMeth]]) 
+         iMerge[2,c("method","stage","type",names(out.decision[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "decision", out.decision[[iMeth]]) 
+         iMerge[3,c("method","stage","type",names(out.final[[iMeth]]))] <- data.frame(method = iMeth, stage = 2, type = "final", out.final[[iMeth]])
+         return(iMerge)
+     }))
+ 
+     ## outMerge[outMerge$method==3,]
+ 
+     out <- cbind(
+         ## results
+         outMerge,
+         ## simulation details
+         time.interim = thet,
+         seed=myseedi,             
+         nX1.interim = sum(!is.na(di$X1)),
+         nX2.interim = sum(!is.na(di$X2)),
+         nX3.interim = sum(!is.na(di$X3)),
+         ## computation time
+         computation.time=as.double(round(difftime(stopComp,startComp,units="secs"),3))
+     )
+     ## names(out) <- myColNames
+     RES <- rbind(RES,out)
+     save(RES,file=paste0(path.res,name,"(tempo)-",iter_sim,".rda"))
+                                         # }}}
+ }
[1] "seed 59599 for j=1 out of 250 (i.e. j=8751 in [8751;9000], as job id is i=36)"
Loading required namespace: nlme
[1] "seed 82882 for j=2 out of 250 (i.e. j=8752 in [8751;9000], as job id is i=36)"
[1] "seed 18800 for j=3 out of 250 (i.e. j=8753 in [8751;9000], as job id is i=36)"
[1] "seed 97453 for j=4 out of 250 (i.e. j=8754 in [8751;9000], as job id is i=36)"
[1] "seed 94867 for j=5 out of 250 (i.e. j=8755 in [8751;9000], as job id is i=36)"
[1] "seed 63177 for j=6 out of 250 (i.e. j=8756 in [8751;9000], as job id is i=36)"
[1] "seed 49454 for j=7 out of 250 (i.e. j=8757 in [8751;9000], as job id is i=36)"
[1] "seed 97947 for j=8 out of 250 (i.e. j=8758 in [8751;9000], as job id is i=36)"
[1] "seed 878 for j=9 out of 250 (i.e. j=8759 in [8751;9000], as job id is i=36)"
[1] "seed 29349 for j=10 out of 250 (i.e. j=8760 in [8751;9000], as job id is i=36)"
[1] "seed 33983 for j=11 out of 250 (i.e. j=8761 in [8751;9000], as job id is i=36)"
[1] "seed 84202 for j=12 out of 250 (i.e. j=8762 in [8751;9000], as job id is i=36)"
[1] "seed 45434 for j=13 out of 250 (i.e. j=8763 in [8751;9000], as job id is i=36)"
[1] "seed 42654 for j=14 out of 250 (i.e. j=8764 in [8751;9000], as job id is i=36)"
[1] "seed 17284 for j=15 out of 250 (i.e. j=8765 in [8751;9000], as job id is i=36)"
[1] "seed 57169 for j=16 out of 250 (i.e. j=8766 in [8751;9000], as job id is i=36)"
[1] "seed 60608 for j=17 out of 250 (i.e. j=8767 in [8751;9000], as job id is i=36)"
[1] "seed 22419 for j=18 out of 250 (i.e. j=8768 in [8751;9000], as job id is i=36)"
[1] "seed 4920 for j=19 out of 250 (i.e. j=8769 in [8751;9000], as job id is i=36)"
[1] "seed 38169 for j=20 out of 250 (i.e. j=8770 in [8751;9000], as job id is i=36)"
[1] "seed 49186 for j=21 out of 250 (i.e. j=8771 in [8751;9000], as job id is i=36)"
[1] "seed 46122 for j=22 out of 250 (i.e. j=8772 in [8751;9000], as job id is i=36)"
[1] "seed 93811 for j=23 out of 250 (i.e. j=8773 in [8751;9000], as job id is i=36)"
[1] "seed 57440 for j=24 out of 250 (i.e. j=8774 in [8751;9000], as job id is i=36)"
[1] "seed 61852 for j=25 out of 250 (i.e. j=8775 in [8751;9000], as job id is i=36)"
[1] "seed 58020 for j=26 out of 250 (i.e. j=8776 in [8751;9000], as job id is i=36)"
[1] "seed 82222 for j=27 out of 250 (i.e. j=8777 in [8751;9000], as job id is i=36)"
[1] "seed 3532 for j=28 out of 250 (i.e. j=8778 in [8751;9000], as job id is i=36)"
[1] "seed 21114 for j=29 out of 250 (i.e. j=8779 in [8751;9000], as job id is i=36)"
[1] "seed 65781 for j=30 out of 250 (i.e. j=8780 in [8751;9000], as job id is i=36)"
[1] "seed 91396 for j=31 out of 250 (i.e. j=8781 in [8751;9000], as job id is i=36)"
[1] "seed 57687 for j=32 out of 250 (i.e. j=8782 in [8751;9000], as job id is i=36)"
[1] "seed 13398 for j=33 out of 250 (i.e. j=8783 in [8751;9000], as job id is i=36)"
[1] "seed 29352 for j=34 out of 250 (i.e. j=8784 in [8751;9000], as job id is i=36)"
[1] "seed 98029 for j=35 out of 250 (i.e. j=8785 in [8751;9000], as job id is i=36)"
[1] "seed 82812 for j=36 out of 250 (i.e. j=8786 in [8751;9000], as job id is i=36)"
[1] "seed 36241 for j=37 out of 250 (i.e. j=8787 in [8751;9000], as job id is i=36)"
[1] "seed 36154 for j=38 out of 250 (i.e. j=8788 in [8751;9000], as job id is i=36)"
[1] "seed 71204 for j=39 out of 250 (i.e. j=8789 in [8751;9000], as job id is i=36)"
[1] "seed 16887 for j=40 out of 250 (i.e. j=8790 in [8751;9000], as job id is i=36)"
[1] "seed 5095 for j=41 out of 250 (i.e. j=8791 in [8751;9000], as job id is i=36)"
[1] "seed 51018 for j=42 out of 250 (i.e. j=8792 in [8751;9000], as job id is i=36)"
[1] "seed 17155 for j=43 out of 250 (i.e. j=8793 in [8751;9000], as job id is i=36)"
[1] "seed 20792 for j=44 out of 250 (i.e. j=8794 in [8751;9000], as job id is i=36)"
[1] "seed 99169 for j=45 out of 250 (i.e. j=8795 in [8751;9000], as job id is i=36)"
[1] "seed 2290 for j=46 out of 250 (i.e. j=8796 in [8751;9000], as job id is i=36)"
[1] "seed 50371 for j=47 out of 250 (i.e. j=8797 in [8751;9000], as job id is i=36)"
[1] "seed 76926 for j=48 out of 250 (i.e. j=8798 in [8751;9000], as job id is i=36)"
[1] "seed 26569 for j=49 out of 250 (i.e. j=8799 in [8751;9000], as job id is i=36)"
[1] "seed 46559 for j=50 out of 250 (i.e. j=8800 in [8751;9000], as job id is i=36)"
[1] "seed 16453 for j=51 out of 250 (i.e. j=8801 in [8751;9000], as job id is i=36)"
[1] "seed 84653 for j=52 out of 250 (i.e. j=8802 in [8751;9000], as job id is i=36)"
[1] "seed 67967 for j=53 out of 250 (i.e. j=8803 in [8751;9000], as job id is i=36)"
[1] "seed 99047 for j=54 out of 250 (i.e. j=8804 in [8751;9000], as job id is i=36)"
[1] "seed 89731 for j=55 out of 250 (i.e. j=8805 in [8751;9000], as job id is i=36)"
[1] "seed 10858 for j=56 out of 250 (i.e. j=8806 in [8751;9000], as job id is i=36)"
[1] "seed 65567 for j=57 out of 250 (i.e. j=8807 in [8751;9000], as job id is i=36)"
[1] "seed 21230 for j=58 out of 250 (i.e. j=8808 in [8751;9000], as job id is i=36)"
[1] "seed 74937 for j=59 out of 250 (i.e. j=8809 in [8751;9000], as job id is i=36)"
[1] "seed 87036 for j=60 out of 250 (i.e. j=8810 in [8751;9000], as job id is i=36)"
[1] "seed 26568 for j=61 out of 250 (i.e. j=8811 in [8751;9000], as job id is i=36)"
[1] "seed 95897 for j=62 out of 250 (i.e. j=8812 in [8751;9000], as job id is i=36)"
[1] "seed 11713 for j=63 out of 250 (i.e. j=8813 in [8751;9000], as job id is i=36)"
[1] "seed 65176 for j=64 out of 250 (i.e. j=8814 in [8751;9000], as job id is i=36)"
[1] "seed 26102 for j=65 out of 250 (i.e. j=8815 in [8751;9000], as job id is i=36)"
[1] "seed 36309 for j=66 out of 250 (i.e. j=8816 in [8751;9000], as job id is i=36)"
[1] "seed 49323 for j=67 out of 250 (i.e. j=8817 in [8751;9000], as job id is i=36)"
[1] "seed 95732 for j=68 out of 250 (i.e. j=8818 in [8751;9000], as job id is i=36)"
[1] "seed 79835 for j=69 out of 250 (i.e. j=8819 in [8751;9000], as job id is i=36)"
[1] "seed 94891 for j=70 out of 250 (i.e. j=8820 in [8751;9000], as job id is i=36)"
[1] "seed 86645 for j=71 out of 250 (i.e. j=8821 in [8751;9000], as job id is i=36)"
[1] "seed 17549 for j=72 out of 250 (i.e. j=8822 in [8751;9000], as job id is i=36)"
[1] "seed 59144 for j=73 out of 250 (i.e. j=8823 in [8751;9000], as job id is i=36)"
[1] "seed 68416 for j=74 out of 250 (i.e. j=8824 in [8751;9000], as job id is i=36)"
[1] "seed 13199 for j=75 out of 250 (i.e. j=8825 in [8751;9000], as job id is i=36)"
[1] "seed 57424 for j=76 out of 250 (i.e. j=8826 in [8751;9000], as job id is i=36)"
[1] "seed 1902 for j=77 out of 250 (i.e. j=8827 in [8751;9000], as job id is i=36)"
[1] "seed 97328 for j=78 out of 250 (i.e. j=8828 in [8751;9000], as job id is i=36)"
[1] "seed 42980 for j=79 out of 250 (i.e. j=8829 in [8751;9000], as job id is i=36)"
[1] "seed 33989 for j=80 out of 250 (i.e. j=8830 in [8751;9000], as job id is i=36)"
[1] "seed 83091 for j=81 out of 250 (i.e. j=8831 in [8751;9000], as job id is i=36)"
[1] "seed 92293 for j=82 out of 250 (i.e. j=8832 in [8751;9000], as job id is i=36)"
[1] "seed 17503 for j=83 out of 250 (i.e. j=8833 in [8751;9000], as job id is i=36)"
[1] "seed 38546 for j=84 out of 250 (i.e. j=8834 in [8751;9000], as job id is i=36)"
[1] "seed 82734 for j=85 out of 250 (i.e. j=8835 in [8751;9000], as job id is i=36)"
[1] "seed 87290 for j=86 out of 250 (i.e. j=8836 in [8751;9000], as job id is i=36)"
[1] "seed 75977 for j=87 out of 250 (i.e. j=8837 in [8751;9000], as job id is i=36)"
[1] "seed 89359 for j=88 out of 250 (i.e. j=8838 in [8751;9000], as job id is i=36)"
[1] "seed 55999 for j=89 out of 250 (i.e. j=8839 in [8751;9000], as job id is i=36)"
[1] "seed 17984 for j=90 out of 250 (i.e. j=8840 in [8751;9000], as job id is i=36)"
[1] "seed 3308 for j=91 out of 250 (i.e. j=8841 in [8751;9000], as job id is i=36)"
[1] "seed 25983 for j=92 out of 250 (i.e. j=8842 in [8751;9000], as job id is i=36)"
[1] "seed 78651 for j=93 out of 250 (i.e. j=8843 in [8751;9000], as job id is i=36)"
[1] "seed 63743 for j=94 out of 250 (i.e. j=8844 in [8751;9000], as job id is i=36)"
[1] "seed 62462 for j=95 out of 250 (i.e. j=8845 in [8751;9000], as job id is i=36)"
[1] "seed 51506 for j=96 out of 250 (i.e. j=8846 in [8751;9000], as job id is i=36)"
[1] "seed 86786 for j=97 out of 250 (i.e. j=8847 in [8751;9000], as job id is i=36)"
[1] "seed 90791 for j=98 out of 250 (i.e. j=8848 in [8751;9000], as job id is i=36)"
[1] "seed 92047 for j=99 out of 250 (i.e. j=8849 in [8751;9000], as job id is i=36)"
[1] "seed 61729 for j=100 out of 250 (i.e. j=8850 in [8751;9000], as job id is i=36)"
[1] "seed 45203 for j=101 out of 250 (i.e. j=8851 in [8751;9000], as job id is i=36)"
[1] "seed 38260 for j=102 out of 250 (i.e. j=8852 in [8751;9000], as job id is i=36)"
[1] "seed 85822 for j=103 out of 250 (i.e. j=8853 in [8751;9000], as job id is i=36)"
[1] "seed 28062 for j=104 out of 250 (i.e. j=8854 in [8751;9000], as job id is i=36)"
[1] "seed 56160 for j=105 out of 250 (i.e. j=8855 in [8751;9000], as job id is i=36)"
[1] "seed 45654 for j=106 out of 250 (i.e. j=8856 in [8751;9000], as job id is i=36)"
[1] "seed 89928 for j=107 out of 250 (i.e. j=8857 in [8751;9000], as job id is i=36)"
[1] "seed 74329 for j=108 out of 250 (i.e. j=8858 in [8751;9000], as job id is i=36)"
[1] "seed 68582 for j=109 out of 250 (i.e. j=8859 in [8751;9000], as job id is i=36)"
[1] "seed 50560 for j=110 out of 250 (i.e. j=8860 in [8751;9000], as job id is i=36)"
[1] "seed 52149 for j=111 out of 250 (i.e. j=8861 in [8751;9000], as job id is i=36)"
[1] "seed 63538 for j=112 out of 250 (i.e. j=8862 in [8751;9000], as job id is i=36)"
[1] "seed 97191 for j=113 out of 250 (i.e. j=8863 in [8751;9000], as job id is i=36)"
[1] "seed 1457 for j=114 out of 250 (i.e. j=8864 in [8751;9000], as job id is i=36)"
[1] "seed 46849 for j=115 out of 250 (i.e. j=8865 in [8751;9000], as job id is i=36)"
[1] "seed 6928 for j=116 out of 250 (i.e. j=8866 in [8751;9000], as job id is i=36)"
[1] "seed 81173 for j=117 out of 250 (i.e. j=8867 in [8751;9000], as job id is i=36)"
[1] "seed 91274 for j=118 out of 250 (i.e. j=8868 in [8751;9000], as job id is i=36)"
[1] "seed 65429 for j=119 out of 250 (i.e. j=8869 in [8751;9000], as job id is i=36)"
[1] "seed 77667 for j=120 out of 250 (i.e. j=8870 in [8751;9000], as job id is i=36)"
[1] "seed 72736 for j=121 out of 250 (i.e. j=8871 in [8751;9000], as job id is i=36)"
[1] "seed 64229 for j=122 out of 250 (i.e. j=8872 in [8751;9000], as job id is i=36)"
[1] "seed 54811 for j=123 out of 250 (i.e. j=8873 in [8751;9000], as job id is i=36)"
[1] "seed 47180 for j=124 out of 250 (i.e. j=8874 in [8751;9000], as job id is i=36)"
[1] "seed 44029 for j=125 out of 250 (i.e. j=8875 in [8751;9000], as job id is i=36)"
[1] "seed 57916 for j=126 out of 250 (i.e. j=8876 in [8751;9000], as job id is i=36)"
[1] "seed 77803 for j=127 out of 250 (i.e. j=8877 in [8751;9000], as job id is i=36)"
[1] "seed 71260 for j=128 out of 250 (i.e. j=8878 in [8751;9000], as job id is i=36)"
[1] "seed 77932 for j=129 out of 250 (i.e. j=8879 in [8751;9000], as job id is i=36)"
[1] "seed 19984 for j=130 out of 250 (i.e. j=8880 in [8751;9000], as job id is i=36)"
[1] "seed 98924 for j=131 out of 250 (i.e. j=8881 in [8751;9000], as job id is i=36)"
[1] "seed 5911 for j=132 out of 250 (i.e. j=8882 in [8751;9000], as job id is i=36)"
[1] "seed 91794 for j=133 out of 250 (i.e. j=8883 in [8751;9000], as job id is i=36)"
[1] "seed 45571 for j=134 out of 250 (i.e. j=8884 in [8751;9000], as job id is i=36)"
[1] "seed 40460 for j=135 out of 250 (i.e. j=8885 in [8751;9000], as job id is i=36)"
[1] "seed 77143 for j=136 out of 250 (i.e. j=8886 in [8751;9000], as job id is i=36)"
[1] "seed 6825 for j=137 out of 250 (i.e. j=8887 in [8751;9000], as job id is i=36)"
[1] "seed 20264 for j=138 out of 250 (i.e. j=8888 in [8751;9000], as job id is i=36)"
[1] "seed 40563 for j=139 out of 250 (i.e. j=8889 in [8751;9000], as job id is i=36)"
[1] "seed 10712 for j=140 out of 250 (i.e. j=8890 in [8751;9000], as job id is i=36)"
[1] "seed 18476 for j=141 out of 250 (i.e. j=8891 in [8751;9000], as job id is i=36)"
[1] "seed 15003 for j=142 out of 250 (i.e. j=8892 in [8751;9000], as job id is i=36)"
[1] "seed 85377 for j=143 out of 250 (i.e. j=8893 in [8751;9000], as job id is i=36)"
[1] "seed 19770 for j=144 out of 250 (i.e. j=8894 in [8751;9000], as job id is i=36)"
[1] "seed 17438 for j=145 out of 250 (i.e. j=8895 in [8751;9000], as job id is i=36)"
[1] "seed 41217 for j=146 out of 250 (i.e. j=8896 in [8751;9000], as job id is i=36)"
[1] "seed 46256 for j=147 out of 250 (i.e. j=8897 in [8751;9000], as job id is i=36)"
[1] "seed 62829 for j=148 out of 250 (i.e. j=8898 in [8751;9000], as job id is i=36)"
[1] "seed 63679 for j=149 out of 250 (i.e. j=8899 in [8751;9000], as job id is i=36)"
[1] "seed 50222 for j=150 out of 250 (i.e. j=8900 in [8751;9000], as job id is i=36)"
[1] "seed 8922 for j=151 out of 250 (i.e. j=8901 in [8751;9000], as job id is i=36)"
[1] "seed 80321 for j=152 out of 250 (i.e. j=8902 in [8751;9000], as job id is i=36)"
[1] "seed 65010 for j=153 out of 250 (i.e. j=8903 in [8751;9000], as job id is i=36)"
[1] "seed 16765 for j=154 out of 250 (i.e. j=8904 in [8751;9000], as job id is i=36)"
[1] "seed 94141 for j=155 out of 250 (i.e. j=8905 in [8751;9000], as job id is i=36)"
[1] "seed 86618 for j=156 out of 250 (i.e. j=8906 in [8751;9000], as job id is i=36)"
[1] "seed 70433 for j=157 out of 250 (i.e. j=8907 in [8751;9000], as job id is i=36)"
[1] "seed 44989 for j=158 out of 250 (i.e. j=8908 in [8751;9000], as job id is i=36)"
[1] "seed 36375 for j=159 out of 250 (i.e. j=8909 in [8751;9000], as job id is i=36)"
[1] "seed 25655 for j=160 out of 250 (i.e. j=8910 in [8751;9000], as job id is i=36)"
[1] "seed 94866 for j=161 out of 250 (i.e. j=8911 in [8751;9000], as job id is i=36)"
[1] "seed 99037 for j=162 out of 250 (i.e. j=8912 in [8751;9000], as job id is i=36)"
[1] "seed 12217 for j=163 out of 250 (i.e. j=8913 in [8751;9000], as job id is i=36)"
[1] "seed 69797 for j=164 out of 250 (i.e. j=8914 in [8751;9000], as job id is i=36)"
[1] "seed 75119 for j=165 out of 250 (i.e. j=8915 in [8751;9000], as job id is i=36)"
[1] "seed 26469 for j=166 out of 250 (i.e. j=8916 in [8751;9000], as job id is i=36)"
[1] "seed 77775 for j=167 out of 250 (i.e. j=8917 in [8751;9000], as job id is i=36)"
[1] "seed 8571 for j=168 out of 250 (i.e. j=8918 in [8751;9000], as job id is i=36)"
[1] "seed 66380 for j=169 out of 250 (i.e. j=8919 in [8751;9000], as job id is i=36)"
[1] "seed 84155 for j=170 out of 250 (i.e. j=8920 in [8751;9000], as job id is i=36)"
[1] "seed 12480 for j=171 out of 250 (i.e. j=8921 in [8751;9000], as job id is i=36)"
[1] "seed 56917 for j=172 out of 250 (i.e. j=8922 in [8751;9000], as job id is i=36)"
[1] "seed 67697 for j=173 out of 250 (i.e. j=8923 in [8751;9000], as job id is i=36)"
[1] "seed 98761 for j=174 out of 250 (i.e. j=8924 in [8751;9000], as job id is i=36)"
[1] "seed 40728 for j=175 out of 250 (i.e. j=8925 in [8751;9000], as job id is i=36)"
[1] "seed 44672 for j=176 out of 250 (i.e. j=8926 in [8751;9000], as job id is i=36)"
[1] "seed 79998 for j=177 out of 250 (i.e. j=8927 in [8751;9000], as job id is i=36)"
[1] "seed 30279 for j=178 out of 250 (i.e. j=8928 in [8751;9000], as job id is i=36)"
[1] "seed 60512 for j=179 out of 250 (i.e. j=8929 in [8751;9000], as job id is i=36)"
[1] "seed 82364 for j=180 out of 250 (i.e. j=8930 in [8751;9000], as job id is i=36)"
[1] "seed 6354 for j=181 out of 250 (i.e. j=8931 in [8751;9000], as job id is i=36)"
[1] "seed 63570 for j=182 out of 250 (i.e. j=8932 in [8751;9000], as job id is i=36)"
[1] "seed 21081 for j=183 out of 250 (i.e. j=8933 in [8751;9000], as job id is i=36)"
[1] "seed 21384 for j=184 out of 250 (i.e. j=8934 in [8751;9000], as job id is i=36)"
[1] "seed 58087 for j=185 out of 250 (i.e. j=8935 in [8751;9000], as job id is i=36)"
[1] "seed 6065 for j=186 out of 250 (i.e. j=8936 in [8751;9000], as job id is i=36)"
[1] "seed 92173 for j=187 out of 250 (i.e. j=8937 in [8751;9000], as job id is i=36)"
[1] "seed 21288 for j=188 out of 250 (i.e. j=8938 in [8751;9000], as job id is i=36)"
[1] "seed 19635 for j=189 out of 250 (i.e. j=8939 in [8751;9000], as job id is i=36)"
[1] "seed 91891 for j=190 out of 250 (i.e. j=8940 in [8751;9000], as job id is i=36)"
[1] "seed 79020 for j=191 out of 250 (i.e. j=8941 in [8751;9000], as job id is i=36)"
[1] "seed 89256 for j=192 out of 250 (i.e. j=8942 in [8751;9000], as job id is i=36)"
[1] "seed 91905 for j=193 out of 250 (i.e. j=8943 in [8751;9000], as job id is i=36)"
[1] "seed 5717 for j=194 out of 250 (i.e. j=8944 in [8751;9000], as job id is i=36)"
[1] "seed 9251 for j=195 out of 250 (i.e. j=8945 in [8751;9000], as job id is i=36)"
[1] "seed 47716 for j=196 out of 250 (i.e. j=8946 in [8751;9000], as job id is i=36)"
[1] "seed 42249 for j=197 out of 250 (i.e. j=8947 in [8751;9000], as job id is i=36)"
[1] "seed 39280 for j=198 out of 250 (i.e. j=8948 in [8751;9000], as job id is i=36)"
[1] "seed 9030 for j=199 out of 250 (i.e. j=8949 in [8751;9000], as job id is i=36)"
[1] "seed 21460 for j=200 out of 250 (i.e. j=8950 in [8751;9000], as job id is i=36)"
[1] "seed 8689 for j=201 out of 250 (i.e. j=8951 in [8751;9000], as job id is i=36)"
[1] "seed 11512 for j=202 out of 250 (i.e. j=8952 in [8751;9000], as job id is i=36)"
[1] "seed 78239 for j=203 out of 250 (i.e. j=8953 in [8751;9000], as job id is i=36)"
[1] "seed 61299 for j=204 out of 250 (i.e. j=8954 in [8751;9000], as job id is i=36)"
[1] "seed 59711 for j=205 out of 250 (i.e. j=8955 in [8751;9000], as job id is i=36)"
[1] "seed 78278 for j=206 out of 250 (i.e. j=8956 in [8751;9000], as job id is i=36)"
[1] "seed 61192 for j=207 out of 250 (i.e. j=8957 in [8751;9000], as job id is i=36)"
[1] "seed 43332 for j=208 out of 250 (i.e. j=8958 in [8751;9000], as job id is i=36)"
[1] "seed 78019 for j=209 out of 250 (i.e. j=8959 in [8751;9000], as job id is i=36)"
[1] "seed 20300 for j=210 out of 250 (i.e. j=8960 in [8751;9000], as job id is i=36)"
[1] "seed 68355 for j=211 out of 250 (i.e. j=8961 in [8751;9000], as job id is i=36)"
[1] "seed 35077 for j=212 out of 250 (i.e. j=8962 in [8751;9000], as job id is i=36)"
[1] "seed 82649 for j=213 out of 250 (i.e. j=8963 in [8751;9000], as job id is i=36)"
[1] "seed 53835 for j=214 out of 250 (i.e. j=8964 in [8751;9000], as job id is i=36)"
[1] "seed 48383 for j=215 out of 250 (i.e. j=8965 in [8751;9000], as job id is i=36)"
[1] "seed 56875 for j=216 out of 250 (i.e. j=8966 in [8751;9000], as job id is i=36)"
[1] "seed 45321 for j=217 out of 250 (i.e. j=8967 in [8751;9000], as job id is i=36)"
[1] "seed 99320 for j=218 out of 250 (i.e. j=8968 in [8751;9000], as job id is i=36)"
[1] "seed 93035 for j=219 out of 250 (i.e. j=8969 in [8751;9000], as job id is i=36)"
[1] "seed 69270 for j=220 out of 250 (i.e. j=8970 in [8751;9000], as job id is i=36)"
[1] "seed 8285 for j=221 out of 250 (i.e. j=8971 in [8751;9000], as job id is i=36)"
[1] "seed 48147 for j=222 out of 250 (i.e. j=8972 in [8751;9000], as job id is i=36)"
[1] "seed 99083 for j=223 out of 250 (i.e. j=8973 in [8751;9000], as job id is i=36)"
[1] "seed 98000 for j=224 out of 250 (i.e. j=8974 in [8751;9000], as job id is i=36)"
[1] "seed 29155 for j=225 out of 250 (i.e. j=8975 in [8751;9000], as job id is i=36)"
[1] "seed 75214 for j=226 out of 250 (i.e. j=8976 in [8751;9000], as job id is i=36)"
[1] "seed 21165 for j=227 out of 250 (i.e. j=8977 in [8751;9000], as job id is i=36)"
[1] "seed 49218 for j=228 out of 250 (i.e. j=8978 in [8751;9000], as job id is i=36)"
[1] "seed 35452 for j=229 out of 250 (i.e. j=8979 in [8751;9000], as job id is i=36)"
[1] "seed 99638 for j=230 out of 250 (i.e. j=8980 in [8751;9000], as job id is i=36)"
[1] "seed 81795 for j=231 out of 250 (i.e. j=8981 in [8751;9000], as job id is i=36)"
[1] "seed 88574 for j=232 out of 250 (i.e. j=8982 in [8751;9000], as job id is i=36)"
[1] "seed 47651 for j=233 out of 250 (i.e. j=8983 in [8751;9000], as job id is i=36)"
[1] "seed 89259 for j=234 out of 250 (i.e. j=8984 in [8751;9000], as job id is i=36)"
[1] "seed 81106 for j=235 out of 250 (i.e. j=8985 in [8751;9000], as job id is i=36)"
[1] "seed 89667 for j=236 out of 250 (i.e. j=8986 in [8751;9000], as job id is i=36)"
[1] "seed 79855 for j=237 out of 250 (i.e. j=8987 in [8751;9000], as job id is i=36)"
[1] "seed 76854 for j=238 out of 250 (i.e. j=8988 in [8751;9000], as job id is i=36)"
[1] "seed 17994 for j=239 out of 250 (i.e. j=8989 in [8751;9000], as job id is i=36)"
[1] "seed 41910 for j=240 out of 250 (i.e. j=8990 in [8751;9000], as job id is i=36)"
[1] "seed 76728 for j=241 out of 250 (i.e. j=8991 in [8751;9000], as job id is i=36)"
[1] "seed 42526 for j=242 out of 250 (i.e. j=8992 in [8751;9000], as job id is i=36)"
[1] "seed 35569 for j=243 out of 250 (i.e. j=8993 in [8751;9000], as job id is i=36)"
[1] "seed 60160 for j=244 out of 250 (i.e. j=8994 in [8751;9000], as job id is i=36)"
[1] "seed 58192 for j=245 out of 250 (i.e. j=8995 in [8751;9000], as job id is i=36)"
[1] "seed 50937 for j=246 out of 250 (i.e. j=8996 in [8751;9000], as job id is i=36)"
[1] "seed 64782 for j=247 out of 250 (i.e. j=8997 in [8751;9000], as job id is i=36)"
[1] "seed 17117 for j=248 out of 250 (i.e. j=8998 in [8751;9000], as job id is i=36)"
[1] "seed 22096 for j=249 out of 250 (i.e. j=8999 in [8751;9000], as job id is i=36)"
[1] "seed 51423 for j=250 out of 250 (i.e. j=9000 in [8751;9000], as job id is i=36)"
There were 14 warnings (use warnings() to see them)
> rownames(RES) <- NULL
> save(RES,file=paste0(path.res,name,"-",iter_sim,".rda"))
> 
> ## * Summary results
> sessionInfo()
R version 4.1.2 (2021-11-01)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Red Hat Enterprise Linux 8.5 (Ootpa)

Matrix products: default
BLAS:   /opt/software/R/4.1.2/lib64/R/lib/libRblas.so
LAPACK: /opt/software/R/4.1.2/lib64/R/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] mvtnorm_1.1-3    DelayedGSD_0.0.3

loaded via a namespace (and not attached):
 [1] BB_2019.10-1     magrittr_2.0.3   tidyselect_1.1.2 munsell_0.5.0   
 [5] lattice_0.20-45  colorspace_2.0-3 xtable_1.8-4     R6_2.5.1        
 [9] quadprog_1.5-8   rlang_1.0.3      fansi_1.0.3      dplyr_1.0.9     
[13] grid_4.1.2       nlme_3.1-153     gtable_0.3.0     gsDesign_3.3.0  
[17] utf8_1.2.2       cli_3.3.0        ellipsis_0.3.2   tibble_3.1.7    
[21] lifecycle_1.0.1  crayon_1.5.1     purrr_0.3.4      ggplot2_3.3.6   
[25] tidyr_1.2.0      vctrs_0.4.1      glue_1.6.2       compiler_4.1.2  
[29] pillar_1.7.0     generics_0.1.3   scales_1.2.0     pkgconfig_2.0.3 
> summary(RES)
     method        stage           type             statistic     
 Min.   :1.0   Min.   :1.000   Length:1500        Min.   :0.0358  
 1st Qu.:1.0   1st Qu.:1.000   Class :character   1st Qu.:1.5988  
 Median :1.5   Median :1.000   Mode  :character   Median :2.3676  
 Mean   :1.5   Mean   :1.333                      Mean   :2.3233  
 3rd Qu.:2.0   3rd Qu.:2.000                      3rd Qu.:3.0134  
 Max.   :2.0   Max.   :2.000                      Max.   :5.4335  
                                                  NA's   :500     
  estimate_ML          se_ML             info           infoPC      
 Min.   :-0.4512   Min.   :0.3454   Min.   :4.406   Min.   :0.3443  
 1st Qu.: 0.5763   1st Qu.:0.3883   1st Qu.:5.757   1st Qu.:0.4498  
 Median : 0.8323   Median :0.4019   Median :6.235   Median :0.4872  
 Mean   : 0.8219   Mean   :0.4042   Mean   :6.259   Mean   :0.4891  
 3rd Qu.: 1.0913   3rd Qu.:0.4188   3rd Qu.:6.730   3rd Qu.:0.5259  
 Max.   : 1.9314   Max.   :0.4764   Max.   :9.136   Max.   :0.7139  
 NA's   :500       NA's   :1000     NA's   :164     NA's   :164     
   info.pred      infoPC.pred           uk              lk         
 Min.   :4.665   Min.   :0.3645   Min.   :2.300   Min.   :-0.3033  
 1st Qu.:6.045   1st Qu.:0.4723   1st Qu.:2.472   1st Qu.: 0.1560  
 Median :6.577   Median :0.5140   Median :2.521   Median : 0.3137  
 Mean   :6.569   Mean   :0.5133   Mean   :2.526   Mean   : 0.3041  
 3rd Qu.:7.073   3rd Qu.:0.5527   3rd Qu.:2.579   3rd Qu.: 0.4508  
 Max.   :8.800   Max.   :0.6877   Max.   :2.752   Max.   : 0.9495  
 NA's   :1000    NA's   :1000     NA's   :1000    NA's   :1000     
   decision            reason            p.value_ML        lower_ML      
 Length:1500        Length:1500        Min.   :0.0000   Min.   :-1.0071  
 Class :character   Class :character   1st Qu.:0.0013   1st Qu.:-0.0566  
 Mode  :character   Mode  :character   Median :0.0051   Median : 0.1708  
                                       Mean   :0.0833   Mean   : 0.1206  
                                       3rd Qu.:0.0390   3rd Qu.: 0.3208  
                                       Max.   :0.8479   Max.   : 1.1118  
                                       NA's   :1000     NA's   :1000     
    upper_ML       p.value_MUE       lower_MUE         upper_MUE     
 Min.   :0.4314   Min.   :0.0000   Min.   :-0.9582   Min.   :0.6457  
 1st Qu.:1.2469   1st Qu.:0.0033   1st Qu.:-0.0460   1st Qu.:1.2536  
 Median :1.4963   Median :0.0067   Median : 0.0866   Median :1.4805  
 Mean   :1.5590   Mean   :0.0536   Mean   : 0.0813   Mean   :1.5723  
 3rd Qu.:1.8911   3rd Qu.:0.0214   3rd Qu.: 0.2082   3rd Qu.:1.8777  
 Max.   :2.7568   Max.   :1.0000   Max.   : 1.9166   Max.   :3.3404  
 NA's   :1000     NA's   :1000     NA's   :1000      NA's   :1000    
  estimate_MUE           ck          time.interim        seed      
 Min.   :-0.1484   Min.   :0.2764   Min.   :526.0   Min.   :  878  
 1st Qu.: 0.6109   1st Qu.:1.3991   1st Qu.:586.0   1st Qu.:26569  
 Median : 0.8178   Median :1.4526   Median :603.0   Median :56896  
 Mean   : 0.8356   Mean   :1.4292   Mean   :602.8   Mean   :53848  
 3rd Qu.: 1.0799   3rd Qu.:1.5092   3rd Qu.:620.0   3rd Qu.:79020  
 Max.   : 2.5267   Max.   :1.6706   Max.   :711.0   Max.   :99638  
 NA's   :1000      NA's   :664                                     
  nX1.interim     nX2.interim     nX3.interim    computation.time
 Min.   :146.0   Min.   :130.0   Min.   :120.0   Min.   :0.694   
 1st Qu.:148.0   1st Qu.:135.0   1st Qu.:126.0   1st Qu.:0.911   
 Median :149.0   Median :136.0   Median :127.0   Median :1.018   
 Mean   :148.7   Mean   :136.5   Mean   :127.2   Mean   :1.033   
 3rd Qu.:150.0   3rd Qu.:138.0   3rd Qu.:129.0   3rd Qu.:1.136   
 Max.   :154.0   Max.   :143.0   Max.   :134.0   Max.   :3.767   
                                                                 
> 
> #----------------------------------------------------------------------
> ### BATCH_simuMain.R ends here
> 
> proc.time()
   user  system elapsed 
260.912   0.459 271.945 
