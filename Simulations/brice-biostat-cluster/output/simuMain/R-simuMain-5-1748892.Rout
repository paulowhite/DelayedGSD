
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### BATCH_simuMain.R --- 
> #----------------------------------------------------------------------
> ## Author: Paul Blanche
> ## Created: Mar  5 2021 (10:56) 
> ## Version: 
> ## Last-Updated: jul  7 2022 (13:56) 
> ##           By: Brice Ozenne
> ##     Update #: 518
> #----------------------------------------------------------------------
> ## 
> ### Commentary: 
> ## 
> ### Change Log:
> #----------------------------------------------------------------------
> ## 
> ### Code:
> 
> ## ** BATCH loop
> ## cd /projects/biostat01/people/hpl802/DelayedGSD/
> ## for ITER in `seq 1 10`;
> ## do
> ## eval 'R CMD BATCH --vanilla "--args iter_sim='$ITER' n.iter_sim=10" BATCH_simuMain.R output/R-simuMain-'$ITER'.Rout &'
> ## done
> 
> ## [1] 1186669
> ## [2] 1186670
> ## [3] 1186671
> ## [4] 1186672
> ## [5] 1186673
> ## [6] 1186674
> ## [7] 1186675
> ## [8] 1186676
> ## [9] 1186677
> ## [10] 1186678
> 
> rm(list=ls())
>                                    # {{{ parameters
> ## * parameters
> name <- "ScenarioName" # To save the results
> method <- 1:2 # methods used to compute the boundaries
>                                         #---
> myseed <- 140786598
>                                         #--- to plan the trial ----
> NMC <- 250 # number of sequential simulations to run in parallel. Eg. with 250, then we can run 40 scripts in paralell to get N=10,000 runs in total.
> kMax <- 2  #max number of analyses (including final)
> alpha <- 0.025  #type I error (one sided)
> beta <- 0.2  #type II error
> informationRates <- c(0.5,1)  #planned  information rates
> rho_alpha <- 2  # rho parameter for alpha error spending function
> rho_beta <- 2  # rho parameter for beta error spending function
> ## deltaPower <- 0.75 # just to try another value when Id > Imax
> Id <- 0.55  #(expected) information rate at each decision analysis
> binding <- TRUE
>                                         #
>                                         #---- to generate data -----------
>                                         #
> block <- c(1,1,0,0) 
> allsd <- c(2.5,2.1,2.4) # sd, first from baseline measurement, then the two changes from baseline
> mean0 <- c(10,0,0) # mean placebo group (again, first is absolute value, then change from baseline)
> delta <- c(0,0.6,0.8) # treatment effect
> ar <- (0.86*2)*2 # orginial accrual rate from data from Corine is 0.86 per week, hence we multiply by 2 for by 14 days. As to low, we further multiply by 2
> cor011 <- -0.15 # ~ from data from Corine
> corij1 <- 0.68  # ~ from data from Corine
> cor0j1 <- -0.27  # ~ from data from Corine
> Miss11 <- 5/104 # miss both V1 and V2
> Miss12 <- 1/104 # miss V1 and but not V2
> Miss21 <- 6/104 # do not miss V1 and but miss V2
> Miss22 <- 92/104 # miss none
> PropForInterim <- 0.5 # Decide to have interim analysiz when PropForInterim % of all subjects have had the chance to have one follow-up measuement recorded in the data to be available for analysis.
> theDelta.t <- 1.50001 # time lag to process the data and make them ready to analyze after collecting them (unit is time between two follow-up visits)
> TimeFactor <- 14 ## number of days between two visits
>                                         #
>                                         #--- actually for both planing the trial  and generating data-----
>                                         #
>                                         #
> deltaPower <- abs(delta[3]) # effect (NOT Z-scale/unit, but outcome scale/unit!) that the study is powered for: should we choose ourselves or compute from other numbers above ???
> n <- ceiling(2*2*((allsd[3]/deltaPower)^2)*(qnorm(1-beta)-qnorm(alpha))^2) #104 with Corine's data # should we choose ourselves or compute from the above numbers ???
>                                         # inflate SS as required for interim
> 
>                                         # {{{ Set seeds for parallel computing and reproducibility
> ## * Seed
> args <- commandArgs(TRUE) ## BATCH MODE
> if(length(args)>0){
+     for (arg in args){
+         eval(parse(text=arg))
+     }
+ }else{ ## SLUMR
+     iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_ID"))
+     n.iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_COUNT"))
+ } ## interactive
> if(is.na(iter_sim)){iter_sim <- 1}
> if(is.na(n.iter_sim)){n.iter_sim <- 40}
> 
> set.seed(140786598)
> allseeds <- sample.int(n = 10*n.iter_sim*NMC, size = n.iter_sim*NMC, replace=FALSE) #x=1:(.Machine$integer.max) seems to be maximal possible
> # }}}
> 
> # {{{ set path to load and save and othe machine specific variables
> ## * path
> path <- "."
> path.res <- file.path(path,"Results","simuMain")
> if(dir.exists(path.res)==FALSE){
+     if(dir.exists(file.path(path,"Results"))==FALSE){
+     dir.create(file.path(path,"Results"))
+     }
+     dir.create(path.res)
+ }
> path.output <- file.path(path,"output","simuMain")
> if(dir.exists(path.output)==FALSE){
+     if(dir.exists(file.path(path,"output"))==FALSE){
+     dir.create(file.path(path,"output"))
+     }
+     dir.create(path.output)
+ }
> # }}}
> 
> 
> ## * libraries and functions
> library(DelayedGSD)
DelayedGSD version 0.0.3
> ## sourceDir <- function(path, trace = TRUE, ...) {
> ##     for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
> ##         if(trace) cat(nm,":")
> ##         source(file.path(path, nm), ...)
> ##         if(trace) cat("\n")
> ##     }
> ## }
> ## sourceDir(pathToLoad)
>     
> 
> ## * Compute inflation factor and sample size
> plannedB <- vector(mode = "list", length = 3)
> for(iMeth in method){ ## iMeth <- 1
+     plannedB[[iMeth]] <- CalcBoundaries(kMax=kMax,  
+                                         alpha=alpha, 
+                                         beta=beta,  
+                                         InfoR.i=informationRates,  
+                                         InfoR.d=c(Id,1),  
+                                         rho_alpha=rho_alpha,  
+                                         rho_beta=rho_beta,  
+                                         method=iMeth,  
+                                         cNotBelowFixedc=FALSE,
+                                         bindingFutility=binding,
+                                         delta=tail(delta,1))
+     ## summary(plannedB[[1]])
+     ## coef(plannedB[[iMeth]], type = "information")
+ }
Loading required namespace: gsDesign
Loading required package: mvtnorm
Loading required namespace: BB
> inflationFactor <- unlist(lapply(plannedB,function(iP){iP$planned$InflationFactor}))
> nGSD <- ceiling(n*inflationFactor)
> ##  plot(plannedB[[1]])
> 
> #
> # --- just to check---
> ## n
> ## InfoFixed <- ((qnorm(1-beta)-qnorm(alpha))/(deltaPower))^2
> ## InfoFixed
> ## n/(4*(allsd[3])^2)
> #---
> # }}}
> 
> 
> 
> 
> # {{{ technical details to loop
> RES <- NULL # initialize results to save
> allj <- ((iter_sim-1)*NMC + 1):(iter_sim*NMC) # indices of all iterations (replicates) for this job, accountng for the other jobs running in parallel
> # }}}
> 
> ## * Loop
> for(j in allj){ ## j <- 51 ## 5
+     startComp <- Sys.time()
+     myseedi <- allseeds[j]
+     # {{{ TRACE info (e.g. to check the Rout)
+     print(paste0("seed ",myseedi," for ","j=",which(j==allj)," out of ",NMC, " (i.e. j=",j," in [",(iter_sim-1)*NMC + 1,";",iter_sim*NMC,"], as job id is i=",iter_sim,")"))
+     # }}}
+     # {{{ Missing probabilities
+     MyMissProb <- matrix(c(Miss11,Miss12,Miss21,Miss22),ncol=2,nrow=2,byrow=TRUE) # to additionnally remove 1 more because some FASFL=N
+     colnames(MyMissProb) <- c("V2 missing","V2 not missing")
+     rownames(MyMissProb) <- c("V1 missing","V1 not missing")
+     # }}}
+ 
+                                         # {{{ generate data
+     ## ** simulate
+     res <- GenData(n=n, 
+                    N.fw=2,
+                    rand.block=block,
+                    allsd=allsd,
+                    mean0=mean0,
+                    delta=delta,
+                    ar=ar,
+                    cor.01.1=cor011,
+                    cor.ij.1=corij1,
+                    cor.0j.1=cor0j1,
+                    seed=myseedi,
+                    MissProb=MyMissProb,
+                    DigitsOutcome=2,
+                    TimeFactor=TimeFactor,
+                    DigitsTime=0
+                    )
+     d <- res$d
+     ## head(d,n=20)
+                                         # }}}
+                                         # {{{ reformat data like those of Corine
+     ## Make data long format
+     ## dd <- FormatAsCase(d)
+     ## head(dd)
+     ## summary(dd)
+                                         # }}}
+    
+                                         # {{{ make data available at interim
+                                         # Here we stop inclusion data collection for the interim analysis as soon as
+                                         # half of the participants have completed (or had the opportunity to complete) the follow-up 
+     thet <- d$t3[ceiling(n*PropForInterim)]
+     di <- SelectData(d,t=thet)
+     ## ddi <- FormatAsCase(di) # needed ????
+     ## head(d[d$id==52,])
+                                         # }}}
+     ## {{{ analyze data at at interim
+     ## ** interim
+     lmmI <- analyzeData(di, ddf = "nlme", data.decision = sum(d$t1 <= thet + theDelta.t*TimeFactor), getinfo = TRUE, trace = TRUE)
+     ## lmmI <- analyzeData(di, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     currentGSD <- vector(mode = "list", length = 3)
+     out.interim <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+ 
+         currentGSD[[iMeth]] <- update(plannedB[[iMeth]], delta = lmmI, trace = FALSE)
+ 
+         iConfint.interim <- confint(currentGSD[[iMeth]])
+         iInfo.interim <- coef(currentGSD[[iMeth]], type = "information")
+         iBoundary.interim <- coef(currentGSD[[iMeth]], type = "boundary")
+         iDecision.interim <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+         out.interim[[iMeth]] <-  data.frame(statistic = iConfint.interim[1,"statistic"],
+                                             estimate_ML = iConfint.interim[1,"estimate"],
+                                             se_ML = iConfint.interim[1,"se"],
+                                             info = iInfo.interim[1,"Interim"],
+                                             infoPC = iInfo.interim[1,"Interim.pc"],
+                                             info.pred = iInfo.interim[1,"Decision"],
+                                             infoPC.pred = iInfo.interim[1,"Decision.pc"],
+                                             uk = iBoundary.interim[1,"Ebound"],
+                                             lk = iBoundary.interim[1,"Fbound"],
+                                             decision = iDecision.interim["decision","stage 1"],
+                                             reason = iDecision.interim["reason.interim","stage 1"])
+     }
+     ## currentGSD[[1]]
+     ## plot(currentGSD[[1]])
+ 
+     ## ** decision
+     dDecision <- d[which(d$t1 <= thet + theDelta.t*TimeFactor),]
+     lmmD <- analyzeData(dDecision, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+     
+     out.decision <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+           
+         if(out.interim[[iMeth]]$decision == "stop"){
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, trace = FALSE)
+             ## plot(currentGSD[[iMeth]])
+ 
+             iConfint.decision <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.decision  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = iConfint.decision[1,"statistic"],
+                                                 p.value_ML = iConfint.decision[iConfint.decision$method == "ML","p.value"],
+                                                 lower_ML = iConfint.decision[iConfint.decision$method == "ML","lower"],
+                                                 upper_ML = iConfint.decision[iConfint.decision$method == "ML","upper"],
+                                                 estimate_ML = iConfint.decision[iConfint.decision$method == "ML","estimate"],
+                                                 p.value_MUE = iConfint.decision[iConfint.decision$method == "MUE","p.value"],
+                                                 lower_MUE = iConfint.decision[iConfint.decision$method == "MUE","lower"],
+                                                 upper_MUE = iConfint.decision[iConfint.decision$method == "MUE","upper"],
+                                                 estimate_MUE = iConfint.decision[iConfint.decision$method == "MUE","estimate"],
+                                                 info = iInfo.decision[1,"Interim"],
+                                                 infoPC = iInfo.decision[1,"Interim.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = unname(iDecision.decision["decision","stage 2"])
+                                                 )
+ 
+         }else{
+             ## update information
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, k = 1, type.k = "decision", trace = FALSE)
+ 
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = NA,
+                                                 p.value_ML = NA,
+                                                 lower_ML = NA,
+                                                 upper_ML = NA,
+                                                 estimate_ML = NA,
+                                                 p.value_MUE = NA,
+                                                 lower_MUE = NA,
+                                                 upper_MUE = NA,
+                                                 estimate_MUE = NA,
+                                                 info = iInfo.decision[1,"Decision"],
+                                                 infoPC = iInfo.decision[1,"Decision.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = NA)
+         }
+     }
+                                         # }}}
+                                         # {{{ Analyze data at decision
+ 
+     ## ** finale
+     dFinal <- d
+     lmmF <- analyzeData(dFinal, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     out.final <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+         if(out.interim[[iMeth]]$decision == "stop"){
+             out.final[[iMeth]] <- data.frame(statistic = NA,
+                                              p.value_ML = NA,
+                                              lower_ML = NA,
+                                              upper_ML = NA,
+                                              estimate_ML = NA,
+                                              p.value_MUE = NA,
+                                              lower_MUE = NA,
+                                              upper_MUE = NA,
+                                              estimate_MUE = NA,
+                                              info = NA,
+                                              infoPC = NA,
+                                              ck = NA,
+                                              decision = NA)
+ 
+         }else{
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmF, trace = FALSE)
+ 
+             ## plot(test)
+             ## summary(test)
+             iConfint.final <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.final <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.final <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.final  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.final[[iMeth]] <- data.frame(statistic = iConfint.final[1,"statistic"],
+                                              p.value_ML = iConfint.final[iConfint.final$method == "ML","p.value"],
+                                              lower_ML = iConfint.final[iConfint.final$method == "ML","lower"],
+                                              upper_ML = iConfint.final[iConfint.final$method == "ML","upper"],
+                                              estimate_ML = iConfint.final[iConfint.final$method == "ML","estimate"],
+                                              p.value_MUE = iConfint.final[iConfint.final$method == "MUE","p.value"],
+                                              lower_MUE = iConfint.final[iConfint.final$method == "MUE","lower"],
+                                              upper_MUE = iConfint.final[iConfint.final$method == "MUE","upper"],
+                                              estimate_MUE = iConfint.final[iConfint.final$method == "MUE","estimate"],
+                                              info = iInfo.final[1,"Interim"],
+                                              infoPC = iInfo.final[1,"Interim.pc"],
+                                              ck = iBoundary.final[1,"Cbound"],
+                                              decision = unname(coef(currentGSD[[iMeth]], type = "decision")["decision","stage 2"])
+                                              )
+         }
+     }
+                                         # }}}
+ 
+     stopComp <- Sys.time()
+                                         # {{{ Save results
+ 
+     outMerge <- do.call(rbind,lapply(method, function(iMeth){
+         iNames <- unique(c(names(out.interim[[iMeth]]),names(out.decision[[iMeth]]),names(out.final[[iMeth]])))
+         iMerge <- data.frame(matrix(NA, ncol = length(iNames)+3, nrow = 3, dimnames = list(NULL, c("method", "stage", "type", iNames))))
+         iMerge[1,c("method","stage","type",names(out.interim[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "interim", out.interim[[iMeth]]) 
+         iMerge[2,c("method","stage","type",names(out.decision[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "decision", out.decision[[iMeth]]) 
+         iMerge[3,c("method","stage","type",names(out.final[[iMeth]]))] <- data.frame(method = iMeth, stage = 2, type = "final", out.final[[iMeth]])
+         return(iMerge)
+     }))
+ 
+     ## outMerge[outMerge$method==3,]
+ 
+     out <- cbind(
+         ## results
+         outMerge,
+         ## simulation details
+         time.interim = thet,
+         seed=myseedi,             
+         nX1.interim = sum(!is.na(di$X1)),
+         nX2.interim = sum(!is.na(di$X2)),
+         nX3.interim = sum(!is.na(di$X3)),
+         ## computation time
+         computation.time=as.double(round(difftime(stopComp,startComp,units="secs"),3))
+     )
+     ## names(out) <- myColNames
+     RES <- rbind(RES,out)
+     save(RES,file=paste0(path.res,name,"(tempo)-",iter_sim,".rda"))
+                                         # }}}
+ }
[1] "seed 86965 for j=1 out of 250 (i.e. j=1001 in [1001;1250], as job id is i=5)"
Loading required namespace: nlme
[1] "seed 12691 for j=2 out of 250 (i.e. j=1002 in [1001;1250], as job id is i=5)"
[1] "seed 85690 for j=3 out of 250 (i.e. j=1003 in [1001;1250], as job id is i=5)"
[1] "seed 99158 for j=4 out of 250 (i.e. j=1004 in [1001;1250], as job id is i=5)"
[1] "seed 69134 for j=5 out of 250 (i.e. j=1005 in [1001;1250], as job id is i=5)"
[1] "seed 18615 for j=6 out of 250 (i.e. j=1006 in [1001;1250], as job id is i=5)"
[1] "seed 6002 for j=7 out of 250 (i.e. j=1007 in [1001;1250], as job id is i=5)"
[1] "seed 56268 for j=8 out of 250 (i.e. j=1008 in [1001;1250], as job id is i=5)"
[1] "seed 48062 for j=9 out of 250 (i.e. j=1009 in [1001;1250], as job id is i=5)"
[1] "seed 7905 for j=10 out of 250 (i.e. j=1010 in [1001;1250], as job id is i=5)"
[1] "seed 53206 for j=11 out of 250 (i.e. j=1011 in [1001;1250], as job id is i=5)"
[1] "seed 59485 for j=12 out of 250 (i.e. j=1012 in [1001;1250], as job id is i=5)"
[1] "seed 5145 for j=13 out of 250 (i.e. j=1013 in [1001;1250], as job id is i=5)"
[1] "seed 88258 for j=14 out of 250 (i.e. j=1014 in [1001;1250], as job id is i=5)"
[1] "seed 41454 for j=15 out of 250 (i.e. j=1015 in [1001;1250], as job id is i=5)"
[1] "seed 7512 for j=16 out of 250 (i.e. j=1016 in [1001;1250], as job id is i=5)"
[1] "seed 10682 for j=17 out of 250 (i.e. j=1017 in [1001;1250], as job id is i=5)"
[1] "seed 85519 for j=18 out of 250 (i.e. j=1018 in [1001;1250], as job id is i=5)"
[1] "seed 98972 for j=19 out of 250 (i.e. j=1019 in [1001;1250], as job id is i=5)"
[1] "seed 13331 for j=20 out of 250 (i.e. j=1020 in [1001;1250], as job id is i=5)"
[1] "seed 14312 for j=21 out of 250 (i.e. j=1021 in [1001;1250], as job id is i=5)"
[1] "seed 94776 for j=22 out of 250 (i.e. j=1022 in [1001;1250], as job id is i=5)"
[1] "seed 96276 for j=23 out of 250 (i.e. j=1023 in [1001;1250], as job id is i=5)"
[1] "seed 77625 for j=24 out of 250 (i.e. j=1024 in [1001;1250], as job id is i=5)"
[1] "seed 4570 for j=25 out of 250 (i.e. j=1025 in [1001;1250], as job id is i=5)"
[1] "seed 35798 for j=26 out of 250 (i.e. j=1026 in [1001;1250], as job id is i=5)"
[1] "seed 56218 for j=27 out of 250 (i.e. j=1027 in [1001;1250], as job id is i=5)"
[1] "seed 23530 for j=28 out of 250 (i.e. j=1028 in [1001;1250], as job id is i=5)"
[1] "seed 19932 for j=29 out of 250 (i.e. j=1029 in [1001;1250], as job id is i=5)"
[1] "seed 61422 for j=30 out of 250 (i.e. j=1030 in [1001;1250], as job id is i=5)"
[1] "seed 90505 for j=31 out of 250 (i.e. j=1031 in [1001;1250], as job id is i=5)"
[1] "seed 54196 for j=32 out of 250 (i.e. j=1032 in [1001;1250], as job id is i=5)"
[1] "seed 6987 for j=33 out of 250 (i.e. j=1033 in [1001;1250], as job id is i=5)"
[1] "seed 72519 for j=34 out of 250 (i.e. j=1034 in [1001;1250], as job id is i=5)"
[1] "seed 32486 for j=35 out of 250 (i.e. j=1035 in [1001;1250], as job id is i=5)"
[1] "seed 4441 for j=36 out of 250 (i.e. j=1036 in [1001;1250], as job id is i=5)"
[1] "seed 87174 for j=37 out of 250 (i.e. j=1037 in [1001;1250], as job id is i=5)"
[1] "seed 92044 for j=38 out of 250 (i.e. j=1038 in [1001;1250], as job id is i=5)"
[1] "seed 74251 for j=39 out of 250 (i.e. j=1039 in [1001;1250], as job id is i=5)"
[1] "seed 40356 for j=40 out of 250 (i.e. j=1040 in [1001;1250], as job id is i=5)"
[1] "seed 66767 for j=41 out of 250 (i.e. j=1041 in [1001;1250], as job id is i=5)"
[1] "seed 44780 for j=42 out of 250 (i.e. j=1042 in [1001;1250], as job id is i=5)"
[1] "seed 12700 for j=43 out of 250 (i.e. j=1043 in [1001;1250], as job id is i=5)"
[1] "seed 68029 for j=44 out of 250 (i.e. j=1044 in [1001;1250], as job id is i=5)"
[1] "seed 4641 for j=45 out of 250 (i.e. j=1045 in [1001;1250], as job id is i=5)"
[1] "seed 23417 for j=46 out of 250 (i.e. j=1046 in [1001;1250], as job id is i=5)"
[1] "seed 74344 for j=47 out of 250 (i.e. j=1047 in [1001;1250], as job id is i=5)"
[1] "seed 57402 for j=48 out of 250 (i.e. j=1048 in [1001;1250], as job id is i=5)"
[1] "seed 75318 for j=49 out of 250 (i.e. j=1049 in [1001;1250], as job id is i=5)"
[1] "seed 52929 for j=50 out of 250 (i.e. j=1050 in [1001;1250], as job id is i=5)"
[1] "seed 4933 for j=51 out of 250 (i.e. j=1051 in [1001;1250], as job id is i=5)"
[1] "seed 9814 for j=52 out of 250 (i.e. j=1052 in [1001;1250], as job id is i=5)"
[1] "seed 9209 for j=53 out of 250 (i.e. j=1053 in [1001;1250], as job id is i=5)"
[1] "seed 90164 for j=54 out of 250 (i.e. j=1054 in [1001;1250], as job id is i=5)"
[1] "seed 1681 for j=55 out of 250 (i.e. j=1055 in [1001;1250], as job id is i=5)"
[1] "seed 13192 for j=56 out of 250 (i.e. j=1056 in [1001;1250], as job id is i=5)"
[1] "seed 63114 for j=57 out of 250 (i.e. j=1057 in [1001;1250], as job id is i=5)"
[1] "seed 92834 for j=58 out of 250 (i.e. j=1058 in [1001;1250], as job id is i=5)"
[1] "seed 10817 for j=59 out of 250 (i.e. j=1059 in [1001;1250], as job id is i=5)"
[1] "seed 79197 for j=60 out of 250 (i.e. j=1060 in [1001;1250], as job id is i=5)"
[1] "seed 52027 for j=61 out of 250 (i.e. j=1061 in [1001;1250], as job id is i=5)"
[1] "seed 93460 for j=62 out of 250 (i.e. j=1062 in [1001;1250], as job id is i=5)"
[1] "seed 77683 for j=63 out of 250 (i.e. j=1063 in [1001;1250], as job id is i=5)"
[1] "seed 46434 for j=64 out of 250 (i.e. j=1064 in [1001;1250], as job id is i=5)"
[1] "seed 59552 for j=65 out of 250 (i.e. j=1065 in [1001;1250], as job id is i=5)"
[1] "seed 87364 for j=66 out of 250 (i.e. j=1066 in [1001;1250], as job id is i=5)"
[1] "seed 7743 for j=67 out of 250 (i.e. j=1067 in [1001;1250], as job id is i=5)"
[1] "seed 66358 for j=68 out of 250 (i.e. j=1068 in [1001;1250], as job id is i=5)"
[1] "seed 37664 for j=69 out of 250 (i.e. j=1069 in [1001;1250], as job id is i=5)"
[1] "seed 9019 for j=70 out of 250 (i.e. j=1070 in [1001;1250], as job id is i=5)"
[1] "seed 12002 for j=71 out of 250 (i.e. j=1071 in [1001;1250], as job id is i=5)"
[1] "seed 69161 for j=72 out of 250 (i.e. j=1072 in [1001;1250], as job id is i=5)"
[1] "seed 72996 for j=73 out of 250 (i.e. j=1073 in [1001;1250], as job id is i=5)"
[1] "seed 53180 for j=74 out of 250 (i.e. j=1074 in [1001;1250], as job id is i=5)"
[1] "seed 59311 for j=75 out of 250 (i.e. j=1075 in [1001;1250], as job id is i=5)"
[1] "seed 99068 for j=76 out of 250 (i.e. j=1076 in [1001;1250], as job id is i=5)"
[1] "seed 92591 for j=77 out of 250 (i.e. j=1077 in [1001;1250], as job id is i=5)"
[1] "seed 96431 for j=78 out of 250 (i.e. j=1078 in [1001;1250], as job id is i=5)"
[1] "seed 6992 for j=79 out of 250 (i.e. j=1079 in [1001;1250], as job id is i=5)"
[1] "seed 14425 for j=80 out of 250 (i.e. j=1080 in [1001;1250], as job id is i=5)"
[1] "seed 50154 for j=81 out of 250 (i.e. j=1081 in [1001;1250], as job id is i=5)"
[1] "seed 87294 for j=82 out of 250 (i.e. j=1082 in [1001;1250], as job id is i=5)"
[1] "seed 1546 for j=83 out of 250 (i.e. j=1083 in [1001;1250], as job id is i=5)"
[1] "seed 12180 for j=84 out of 250 (i.e. j=1084 in [1001;1250], as job id is i=5)"
[1] "seed 90602 for j=85 out of 250 (i.e. j=1085 in [1001;1250], as job id is i=5)"
[1] "seed 35679 for j=86 out of 250 (i.e. j=1086 in [1001;1250], as job id is i=5)"
[1] "seed 91579 for j=87 out of 250 (i.e. j=1087 in [1001;1250], as job id is i=5)"
[1] "seed 16369 for j=88 out of 250 (i.e. j=1088 in [1001;1250], as job id is i=5)"
[1] "seed 59196 for j=89 out of 250 (i.e. j=1089 in [1001;1250], as job id is i=5)"
[1] "seed 42928 for j=90 out of 250 (i.e. j=1090 in [1001;1250], as job id is i=5)"
[1] "seed 63586 for j=91 out of 250 (i.e. j=1091 in [1001;1250], as job id is i=5)"
[1] "seed 78203 for j=92 out of 250 (i.e. j=1092 in [1001;1250], as job id is i=5)"
[1] "seed 85636 for j=93 out of 250 (i.e. j=1093 in [1001;1250], as job id is i=5)"
[1] "seed 74376 for j=94 out of 250 (i.e. j=1094 in [1001;1250], as job id is i=5)"
[1] "seed 54937 for j=95 out of 250 (i.e. j=1095 in [1001;1250], as job id is i=5)"
[1] "seed 75863 for j=96 out of 250 (i.e. j=1096 in [1001;1250], as job id is i=5)"
[1] "seed 45294 for j=97 out of 250 (i.e. j=1097 in [1001;1250], as job id is i=5)"
[1] "seed 51687 for j=98 out of 250 (i.e. j=1098 in [1001;1250], as job id is i=5)"
[1] "seed 33893 for j=99 out of 250 (i.e. j=1099 in [1001;1250], as job id is i=5)"
[1] "seed 5913 for j=100 out of 250 (i.e. j=1100 in [1001;1250], as job id is i=5)"
[1] "seed 56465 for j=101 out of 250 (i.e. j=1101 in [1001;1250], as job id is i=5)"
[1] "seed 57848 for j=102 out of 250 (i.e. j=1102 in [1001;1250], as job id is i=5)"
[1] "seed 37234 for j=103 out of 250 (i.e. j=1103 in [1001;1250], as job id is i=5)"
[1] "seed 29324 for j=104 out of 250 (i.e. j=1104 in [1001;1250], as job id is i=5)"
[1] "seed 82980 for j=105 out of 250 (i.e. j=1105 in [1001;1250], as job id is i=5)"
[1] "seed 1669 for j=106 out of 250 (i.e. j=1106 in [1001;1250], as job id is i=5)"
[1] "seed 85716 for j=107 out of 250 (i.e. j=1107 in [1001;1250], as job id is i=5)"
[1] "seed 24070 for j=108 out of 250 (i.e. j=1108 in [1001;1250], as job id is i=5)"
[1] "seed 23532 for j=109 out of 250 (i.e. j=1109 in [1001;1250], as job id is i=5)"
[1] "seed 49841 for j=110 out of 250 (i.e. j=1110 in [1001;1250], as job id is i=5)"
[1] "seed 46422 for j=111 out of 250 (i.e. j=1111 in [1001;1250], as job id is i=5)"
[1] "seed 44418 for j=112 out of 250 (i.e. j=1112 in [1001;1250], as job id is i=5)"
[1] "seed 67402 for j=113 out of 250 (i.e. j=1113 in [1001;1250], as job id is i=5)"
[1] "seed 60773 for j=114 out of 250 (i.e. j=1114 in [1001;1250], as job id is i=5)"
[1] "seed 35325 for j=115 out of 250 (i.e. j=1115 in [1001;1250], as job id is i=5)"
[1] "seed 41805 for j=116 out of 250 (i.e. j=1116 in [1001;1250], as job id is i=5)"
[1] "seed 60704 for j=117 out of 250 (i.e. j=1117 in [1001;1250], as job id is i=5)"
[1] "seed 86251 for j=118 out of 250 (i.e. j=1118 in [1001;1250], as job id is i=5)"
[1] "seed 74356 for j=119 out of 250 (i.e. j=1119 in [1001;1250], as job id is i=5)"
[1] "seed 46506 for j=120 out of 250 (i.e. j=1120 in [1001;1250], as job id is i=5)"
[1] "seed 81873 for j=121 out of 250 (i.e. j=1121 in [1001;1250], as job id is i=5)"
[1] "seed 57927 for j=122 out of 250 (i.e. j=1122 in [1001;1250], as job id is i=5)"
[1] "seed 39566 for j=123 out of 250 (i.e. j=1123 in [1001;1250], as job id is i=5)"
[1] "seed 50156 for j=124 out of 250 (i.e. j=1124 in [1001;1250], as job id is i=5)"
[1] "seed 47813 for j=125 out of 250 (i.e. j=1125 in [1001;1250], as job id is i=5)"
[1] "seed 39529 for j=126 out of 250 (i.e. j=1126 in [1001;1250], as job id is i=5)"
[1] "seed 71971 for j=127 out of 250 (i.e. j=1127 in [1001;1250], as job id is i=5)"
[1] "seed 35052 for j=128 out of 250 (i.e. j=1128 in [1001;1250], as job id is i=5)"
[1] "seed 6062 for j=129 out of 250 (i.e. j=1129 in [1001;1250], as job id is i=5)"
[1] "seed 64448 for j=130 out of 250 (i.e. j=1130 in [1001;1250], as job id is i=5)"
[1] "seed 57215 for j=131 out of 250 (i.e. j=1131 in [1001;1250], as job id is i=5)"
[1] "seed 58741 for j=132 out of 250 (i.e. j=1132 in [1001;1250], as job id is i=5)"
[1] "seed 94173 for j=133 out of 250 (i.e. j=1133 in [1001;1250], as job id is i=5)"
[1] "seed 27651 for j=134 out of 250 (i.e. j=1134 in [1001;1250], as job id is i=5)"
[1] "seed 52993 for j=135 out of 250 (i.e. j=1135 in [1001;1250], as job id is i=5)"
[1] "seed 24593 for j=136 out of 250 (i.e. j=1136 in [1001;1250], as job id is i=5)"
[1] "seed 79073 for j=137 out of 250 (i.e. j=1137 in [1001;1250], as job id is i=5)"
[1] "seed 78228 for j=138 out of 250 (i.e. j=1138 in [1001;1250], as job id is i=5)"
[1] "seed 44582 for j=139 out of 250 (i.e. j=1139 in [1001;1250], as job id is i=5)"
[1] "seed 18075 for j=140 out of 250 (i.e. j=1140 in [1001;1250], as job id is i=5)"
[1] "seed 27490 for j=141 out of 250 (i.e. j=1141 in [1001;1250], as job id is i=5)"
[1] "seed 97642 for j=142 out of 250 (i.e. j=1142 in [1001;1250], as job id is i=5)"
[1] "seed 47006 for j=143 out of 250 (i.e. j=1143 in [1001;1250], as job id is i=5)"
[1] "seed 68534 for j=144 out of 250 (i.e. j=1144 in [1001;1250], as job id is i=5)"
[1] "seed 75017 for j=145 out of 250 (i.e. j=1145 in [1001;1250], as job id is i=5)"
[1] "seed 9659 for j=146 out of 250 (i.e. j=1146 in [1001;1250], as job id is i=5)"
[1] "seed 34432 for j=147 out of 250 (i.e. j=1147 in [1001;1250], as job id is i=5)"
[1] "seed 31276 for j=148 out of 250 (i.e. j=1148 in [1001;1250], as job id is i=5)"
[1] "seed 86341 for j=149 out of 250 (i.e. j=1149 in [1001;1250], as job id is i=5)"
[1] "seed 51239 for j=150 out of 250 (i.e. j=1150 in [1001;1250], as job id is i=5)"
[1] "seed 47081 for j=151 out of 250 (i.e. j=1151 in [1001;1250], as job id is i=5)"
[1] "seed 30111 for j=152 out of 250 (i.e. j=1152 in [1001;1250], as job id is i=5)"
[1] "seed 1549 for j=153 out of 250 (i.e. j=1153 in [1001;1250], as job id is i=5)"
[1] "seed 58769 for j=154 out of 250 (i.e. j=1154 in [1001;1250], as job id is i=5)"
[1] "seed 45385 for j=155 out of 250 (i.e. j=1155 in [1001;1250], as job id is i=5)"
[1] "seed 28806 for j=156 out of 250 (i.e. j=1156 in [1001;1250], as job id is i=5)"
[1] "seed 92655 for j=157 out of 250 (i.e. j=1157 in [1001;1250], as job id is i=5)"
[1] "seed 36027 for j=158 out of 250 (i.e. j=1158 in [1001;1250], as job id is i=5)"
[1] "seed 34392 for j=159 out of 250 (i.e. j=1159 in [1001;1250], as job id is i=5)"
[1] "seed 20843 for j=160 out of 250 (i.e. j=1160 in [1001;1250], as job id is i=5)"
[1] "seed 13505 for j=161 out of 250 (i.e. j=1161 in [1001;1250], as job id is i=5)"
[1] "seed 57537 for j=162 out of 250 (i.e. j=1162 in [1001;1250], as job id is i=5)"
[1] "seed 28567 for j=163 out of 250 (i.e. j=1163 in [1001;1250], as job id is i=5)"
[1] "seed 10056 for j=164 out of 250 (i.e. j=1164 in [1001;1250], as job id is i=5)"
[1] "seed 85743 for j=165 out of 250 (i.e. j=1165 in [1001;1250], as job id is i=5)"
[1] "seed 68161 for j=166 out of 250 (i.e. j=1166 in [1001;1250], as job id is i=5)"
[1] "seed 37447 for j=167 out of 250 (i.e. j=1167 in [1001;1250], as job id is i=5)"
[1] "seed 64845 for j=168 out of 250 (i.e. j=1168 in [1001;1250], as job id is i=5)"
[1] "seed 30462 for j=169 out of 250 (i.e. j=1169 in [1001;1250], as job id is i=5)"
[1] "seed 4851 for j=170 out of 250 (i.e. j=1170 in [1001;1250], as job id is i=5)"
[1] "seed 15861 for j=171 out of 250 (i.e. j=1171 in [1001;1250], as job id is i=5)"
[1] "seed 22217 for j=172 out of 250 (i.e. j=1172 in [1001;1250], as job id is i=5)"
[1] "seed 493 for j=173 out of 250 (i.e. j=1173 in [1001;1250], as job id is i=5)"
[1] "seed 40126 for j=174 out of 250 (i.e. j=1174 in [1001;1250], as job id is i=5)"
[1] "seed 41709 for j=175 out of 250 (i.e. j=1175 in [1001;1250], as job id is i=5)"
[1] "seed 1077 for j=176 out of 250 (i.e. j=1176 in [1001;1250], as job id is i=5)"
[1] "seed 83848 for j=177 out of 250 (i.e. j=1177 in [1001;1250], as job id is i=5)"
[1] "seed 70098 for j=178 out of 250 (i.e. j=1178 in [1001;1250], as job id is i=5)"
[1] "seed 77644 for j=179 out of 250 (i.e. j=1179 in [1001;1250], as job id is i=5)"
[1] "seed 406 for j=180 out of 250 (i.e. j=1180 in [1001;1250], as job id is i=5)"
[1] "seed 82888 for j=181 out of 250 (i.e. j=1181 in [1001;1250], as job id is i=5)"
[1] "seed 12979 for j=182 out of 250 (i.e. j=1182 in [1001;1250], as job id is i=5)"
[1] "seed 55071 for j=183 out of 250 (i.e. j=1183 in [1001;1250], as job id is i=5)"
[1] "seed 8873 for j=184 out of 250 (i.e. j=1184 in [1001;1250], as job id is i=5)"
[1] "seed 22028 for j=185 out of 250 (i.e. j=1185 in [1001;1250], as job id is i=5)"
[1] "seed 26819 for j=186 out of 250 (i.e. j=1186 in [1001;1250], as job id is i=5)"
[1] "seed 5682 for j=187 out of 250 (i.e. j=1187 in [1001;1250], as job id is i=5)"
[1] "seed 78948 for j=188 out of 250 (i.e. j=1188 in [1001;1250], as job id is i=5)"
[1] "seed 53453 for j=189 out of 250 (i.e. j=1189 in [1001;1250], as job id is i=5)"
[1] "seed 28631 for j=190 out of 250 (i.e. j=1190 in [1001;1250], as job id is i=5)"
[1] "seed 87620 for j=191 out of 250 (i.e. j=1191 in [1001;1250], as job id is i=5)"
[1] "seed 215 for j=192 out of 250 (i.e. j=1192 in [1001;1250], as job id is i=5)"
[1] "seed 92726 for j=193 out of 250 (i.e. j=1193 in [1001;1250], as job id is i=5)"
[1] "seed 44016 for j=194 out of 250 (i.e. j=1194 in [1001;1250], as job id is i=5)"
[1] "seed 39276 for j=195 out of 250 (i.e. j=1195 in [1001;1250], as job id is i=5)"
[1] "seed 75204 for j=196 out of 250 (i.e. j=1196 in [1001;1250], as job id is i=5)"
[1] "seed 43021 for j=197 out of 250 (i.e. j=1197 in [1001;1250], as job id is i=5)"
[1] "seed 89341 for j=198 out of 250 (i.e. j=1198 in [1001;1250], as job id is i=5)"
[1] "seed 6675 for j=199 out of 250 (i.e. j=1199 in [1001;1250], as job id is i=5)"
[1] "seed 73579 for j=200 out of 250 (i.e. j=1200 in [1001;1250], as job id is i=5)"
[1] "seed 65947 for j=201 out of 250 (i.e. j=1201 in [1001;1250], as job id is i=5)"
[1] "seed 70920 for j=202 out of 250 (i.e. j=1202 in [1001;1250], as job id is i=5)"
[1] "seed 38914 for j=203 out of 250 (i.e. j=1203 in [1001;1250], as job id is i=5)"
[1] "seed 74604 for j=204 out of 250 (i.e. j=1204 in [1001;1250], as job id is i=5)"
[1] "seed 81942 for j=205 out of 250 (i.e. j=1205 in [1001;1250], as job id is i=5)"
[1] "seed 85565 for j=206 out of 250 (i.e. j=1206 in [1001;1250], as job id is i=5)"
[1] "seed 57609 for j=207 out of 250 (i.e. j=1207 in [1001;1250], as job id is i=5)"
[1] "seed 69470 for j=208 out of 250 (i.e. j=1208 in [1001;1250], as job id is i=5)"
[1] "seed 48359 for j=209 out of 250 (i.e. j=1209 in [1001;1250], as job id is i=5)"
[1] "seed 3697 for j=210 out of 250 (i.e. j=1210 in [1001;1250], as job id is i=5)"
[1] "seed 46933 for j=211 out of 250 (i.e. j=1211 in [1001;1250], as job id is i=5)"
[1] "seed 29387 for j=212 out of 250 (i.e. j=1212 in [1001;1250], as job id is i=5)"
[1] "seed 93851 for j=213 out of 250 (i.e. j=1213 in [1001;1250], as job id is i=5)"
[1] "seed 35395 for j=214 out of 250 (i.e. j=1214 in [1001;1250], as job id is i=5)"
[1] "seed 45130 for j=215 out of 250 (i.e. j=1215 in [1001;1250], as job id is i=5)"
[1] "seed 32055 for j=216 out of 250 (i.e. j=1216 in [1001;1250], as job id is i=5)"
[1] "seed 56041 for j=217 out of 250 (i.e. j=1217 in [1001;1250], as job id is i=5)"
[1] "seed 70030 for j=218 out of 250 (i.e. j=1218 in [1001;1250], as job id is i=5)"
[1] "seed 43533 for j=219 out of 250 (i.e. j=1219 in [1001;1250], as job id is i=5)"
[1] "seed 54371 for j=220 out of 250 (i.e. j=1220 in [1001;1250], as job id is i=5)"
[1] "seed 75312 for j=221 out of 250 (i.e. j=1221 in [1001;1250], as job id is i=5)"
[1] "seed 35376 for j=222 out of 250 (i.e. j=1222 in [1001;1250], as job id is i=5)"
[1] "seed 46444 for j=223 out of 250 (i.e. j=1223 in [1001;1250], as job id is i=5)"
[1] "seed 21930 for j=224 out of 250 (i.e. j=1224 in [1001;1250], as job id is i=5)"
[1] "seed 76967 for j=225 out of 250 (i.e. j=1225 in [1001;1250], as job id is i=5)"
[1] "seed 11682 for j=226 out of 250 (i.e. j=1226 in [1001;1250], as job id is i=5)"
[1] "seed 16061 for j=227 out of 250 (i.e. j=1227 in [1001;1250], as job id is i=5)"
[1] "seed 25763 for j=228 out of 250 (i.e. j=1228 in [1001;1250], as job id is i=5)"
[1] "seed 93261 for j=229 out of 250 (i.e. j=1229 in [1001;1250], as job id is i=5)"
[1] "seed 2957 for j=230 out of 250 (i.e. j=1230 in [1001;1250], as job id is i=5)"
[1] "seed 37095 for j=231 out of 250 (i.e. j=1231 in [1001;1250], as job id is i=5)"
[1] "seed 14042 for j=232 out of 250 (i.e. j=1232 in [1001;1250], as job id is i=5)"
[1] "seed 92763 for j=233 out of 250 (i.e. j=1233 in [1001;1250], as job id is i=5)"
[1] "seed 48467 for j=234 out of 250 (i.e. j=1234 in [1001;1250], as job id is i=5)"
[1] "seed 77352 for j=235 out of 250 (i.e. j=1235 in [1001;1250], as job id is i=5)"
[1] "seed 92926 for j=236 out of 250 (i.e. j=1236 in [1001;1250], as job id is i=5)"
[1] "seed 80628 for j=237 out of 250 (i.e. j=1237 in [1001;1250], as job id is i=5)"
[1] "seed 50199 for j=238 out of 250 (i.e. j=1238 in [1001;1250], as job id is i=5)"
[1] "seed 13399 for j=239 out of 250 (i.e. j=1239 in [1001;1250], as job id is i=5)"
[1] "seed 89494 for j=240 out of 250 (i.e. j=1240 in [1001;1250], as job id is i=5)"
[1] "seed 61734 for j=241 out of 250 (i.e. j=1241 in [1001;1250], as job id is i=5)"
[1] "seed 61304 for j=242 out of 250 (i.e. j=1242 in [1001;1250], as job id is i=5)"
[1] "seed 44687 for j=243 out of 250 (i.e. j=1243 in [1001;1250], as job id is i=5)"
[1] "seed 42651 for j=244 out of 250 (i.e. j=1244 in [1001;1250], as job id is i=5)"
[1] "seed 82561 for j=245 out of 250 (i.e. j=1245 in [1001;1250], as job id is i=5)"
[1] "seed 95932 for j=246 out of 250 (i.e. j=1246 in [1001;1250], as job id is i=5)"
[1] "seed 65360 for j=247 out of 250 (i.e. j=1247 in [1001;1250], as job id is i=5)"
[1] "seed 71633 for j=248 out of 250 (i.e. j=1248 in [1001;1250], as job id is i=5)"
[1] "seed 60825 for j=249 out of 250 (i.e. j=1249 in [1001;1250], as job id is i=5)"
[1] "seed 39874 for j=250 out of 250 (i.e. j=1250 in [1001;1250], as job id is i=5)"
There were 18 warnings (use warnings() to see them)
> rownames(RES) <- NULL
> save(RES,file=paste0(path.res,name,"-",iter_sim,".rda"))
> 
> ## * Summary results
> sessionInfo()
R version 4.1.2 (2021-11-01)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Red Hat Enterprise Linux 8.5 (Ootpa)

Matrix products: default
BLAS:   /opt/software/R/4.1.2/lib64/R/lib/libRblas.so
LAPACK: /opt/software/R/4.1.2/lib64/R/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] mvtnorm_1.1-3    DelayedGSD_0.0.3

loaded via a namespace (and not attached):
 [1] BB_2019.10-1     magrittr_2.0.3   tidyselect_1.1.2 munsell_0.5.0   
 [5] lattice_0.20-45  colorspace_2.0-3 xtable_1.8-4     R6_2.5.1        
 [9] quadprog_1.5-8   rlang_1.0.3      fansi_1.0.3      dplyr_1.0.9     
[13] grid_4.1.2       nlme_3.1-153     gtable_0.3.0     gsDesign_3.3.0  
[17] utf8_1.2.2       cli_3.3.0        ellipsis_0.3.2   tibble_3.1.7    
[21] lifecycle_1.0.1  crayon_1.5.1     purrr_0.3.4      ggplot2_3.3.6   
[25] tidyr_1.2.0      vctrs_0.4.1      glue_1.6.2       compiler_4.1.2  
[29] pillar_1.7.0     generics_0.1.3   scales_1.2.0     pkgconfig_2.0.3 
> summary(RES)
     method        stage           type             statistic     
 Min.   :1.0   Min.   :1.000   Length:1500        Min.   :0.0024  
 1st Qu.:1.0   1st Qu.:1.000   Class :character   1st Qu.:1.3932  
 Median :1.5   Median :1.000   Mode  :character   Median :2.2484  
 Mean   :1.5   Mean   :1.333                      Mean   :2.1860  
 3rd Qu.:2.0   3rd Qu.:2.000                      3rd Qu.:2.9008  
 Max.   :2.0   Max.   :2.000                      Max.   :5.3608  
                                                  NA's   :500     
  estimate_ML          se_ML             info           infoPC      
 Min.   :-0.3147   Min.   :0.3287   Min.   :4.484   Min.   :0.3504  
 1st Qu.: 0.5173   1st Qu.:0.3844   1st Qu.:5.714   1st Qu.:0.4465  
 Median : 0.7837   Median :0.4038   Median :6.241   Median :0.4877  
 Mean   : 0.7754   Mean   :0.4033   Mean   :6.323   Mean   :0.4941  
 3rd Qu.: 1.0335   3rd Qu.:0.4221   3rd Qu.:6.849   3rd Qu.:0.5352  
 Max.   : 1.8962   Max.   :0.4722   Max.   :9.833   Max.   :0.7684  
 NA's   :500       NA's   :1000     NA's   :160     NA's   :160     
   info.pred      infoPC.pred           uk              lk         
 Min.   :4.806   Min.   :0.3755   Min.   :2.224   Min.   :-0.2735  
 1st Qu.:5.972   1st Qu.:0.4667   1st Qu.:2.458   1st Qu.: 0.1264  
 Median :6.520   Median :0.5095   Median :2.528   Median : 0.2952  
 Mean   :6.615   Mean   :0.5169   Mean   :2.522   Mean   : 0.3160  
 3rd Qu.:7.184   3rd Qu.:0.5614   3rd Qu.:2.589   3rd Qu.: 0.4916  
 Max.   :9.725   Max.   :0.7599   Max.   :2.740   Max.   : 1.1785  
 NA's   :1000    NA's   :1000     NA's   :1000    NA's   :1000     
   decision            reason            p.value_ML        lower_ML      
 Length:1500        Length:1500        Min.   :0.0000   Min.   :-1.0146  
 Class :character   Class :character   1st Qu.:0.0018   1st Qu.:-0.0960  
 Mode  :character   Mode  :character   Median :0.0094   Median : 0.1068  
                                       Mean   :0.0858   Mean   : 0.0817  
                                       3rd Qu.:0.0534   3rd Qu.: 0.2832  
                                       Max.   :0.9981   Max.   : 0.8489  
                                       NA's   :1000     NA's   :1000     
    upper_ML       p.value_MUE       lower_MUE         upper_MUE    
 Min.   :0.7477   Min.   :0.0000   Min.   :-1.0111   Min.   :0.743  
 1st Qu.:1.2046   1st Qu.:0.0042   1st Qu.:-0.0856   1st Qu.:1.217  
 Median :1.4500   Median :0.0084   Median : 0.0579   Median :1.434  
 Mean   :1.5163   Mean   :0.0550   Mean   : 0.0515   Mean   :1.534  
 3rd Qu.:1.8008   3rd Qu.:0.0283   3rd Qu.: 0.1668   3rd Qu.:1.797  
 Max.   :2.6423   Max.   :1.0000   Max.   : 1.6208   Max.   :3.187  
 NA's   :1000     NA's   :1000     NA's   :1000      NA's   :1000   
  estimate_MUE           ck           time.interim        seed      
 Min.   :-0.1339   Min.   :-0.0614   Min.   :522.0   Min.   :  215  
 1st Qu.: 0.5688   1st Qu.: 1.3983   1st Qu.:584.0   1st Qu.:25763  
 Median : 0.7689   Median : 1.4553   Median :600.5   Median :50155  
 Mean   : 0.7975   Mean   : 1.4354   Mean   :602.0   Mean   :49600  
 3rd Qu.: 0.9983   3rd Qu.: 1.5040   3rd Qu.:621.0   3rd Qu.:74376  
 Max.   : 2.2921   Max.   : 1.7426   Max.   :681.0   Max.   :99158  
 NA's   :1000      NA's   :660                                      
  nX1.interim     nX2.interim     nX3.interim  computation.time
 Min.   :145.0   Min.   :129.0   Min.   :120   Min.   :0.6840  
 1st Qu.:147.0   1st Qu.:135.0   1st Qu.:125   1st Qu.:0.9190  
 Median :149.0   Median :137.0   Median :127   Median :0.9835  
 Mean   :148.7   Mean   :136.5   Mean   :127   Mean   :1.0090  
 3rd Qu.:150.0   3rd Qu.:138.0   3rd Qu.:129   3rd Qu.:1.0870  
 Max.   :154.0   Max.   :142.0   Max.   :136   Max.   :3.7970  
                                                               
> 
> #----------------------------------------------------------------------
> ### BATCH_simuMain.R ends here
> 
> proc.time()
   user  system elapsed 
255.161   0.384 266.113 
