
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### BATCH_simuMain.R --- 
> #----------------------------------------------------------------------
> ## Author: Paul Blanche
> ## Created: Mar  5 2021 (10:56) 
> ## Version: 
> ## Last-Updated: jul  7 2022 (13:56) 
> ##           By: Brice Ozenne
> ##     Update #: 518
> #----------------------------------------------------------------------
> ## 
> ### Commentary: 
> ## 
> ### Change Log:
> #----------------------------------------------------------------------
> ## 
> ### Code:
> 
> ## ** BATCH loop
> ## cd /projects/biostat01/people/hpl802/DelayedGSD/
> ## for ITER in `seq 1 10`;
> ## do
> ## eval 'R CMD BATCH --vanilla "--args iter_sim='$ITER' n.iter_sim=10" BATCH_simuMain.R output/R-simuMain-'$ITER'.Rout &'
> ## done
> 
> ## [1] 1186669
> ## [2] 1186670
> ## [3] 1186671
> ## [4] 1186672
> ## [5] 1186673
> ## [6] 1186674
> ## [7] 1186675
> ## [8] 1186676
> ## [9] 1186677
> ## [10] 1186678
> 
> rm(list=ls())
>                                    # {{{ parameters
> ## * parameters
> name <- "ScenarioName" # To save the results
> method <- 1:2 # methods used to compute the boundaries
>                                         #---
> myseed <- 140786598
>                                         #--- to plan the trial ----
> NMC <- 250 # number of sequential simulations to run in parallel. Eg. with 250, then we can run 40 scripts in paralell to get N=10,000 runs in total.
> kMax <- 2  #max number of analyses (including final)
> alpha <- 0.025  #type I error (one sided)
> beta <- 0.2  #type II error
> informationRates <- c(0.5,1)  #planned  information rates
> rho_alpha <- 2  # rho parameter for alpha error spending function
> rho_beta <- 2  # rho parameter for beta error spending function
> ## deltaPower <- 0.75 # just to try another value when Id > Imax
> Id <- 0.55  #(expected) information rate at each decision analysis
> binding <- TRUE
>                                         #
>                                         #---- to generate data -----------
>                                         #
> block <- c(1,1,0,0) 
> allsd <- c(2.5,2.1,2.4) # sd, first from baseline measurement, then the two changes from baseline
> mean0 <- c(10,0,0) # mean placebo group (again, first is absolute value, then change from baseline)
> delta <- c(0,0.6,0.8) # treatment effect
> ar <- (0.86*2)*2 # orginial accrual rate from data from Corine is 0.86 per week, hence we multiply by 2 for by 14 days. As to low, we further multiply by 2
> cor011 <- -0.15 # ~ from data from Corine
> corij1 <- 0.68  # ~ from data from Corine
> cor0j1 <- -0.27  # ~ from data from Corine
> Miss11 <- 5/104 # miss both V1 and V2
> Miss12 <- 1/104 # miss V1 and but not V2
> Miss21 <- 6/104 # do not miss V1 and but miss V2
> Miss22 <- 92/104 # miss none
> PropForInterim <- 0.5 # Decide to have interim analysiz when PropForInterim % of all subjects have had the chance to have one follow-up measuement recorded in the data to be available for analysis.
> theDelta.t <- 1.50001 # time lag to process the data and make them ready to analyze after collecting them (unit is time between two follow-up visits)
> TimeFactor <- 14 ## number of days between two visits
>                                         #
>                                         #--- actually for both planing the trial  and generating data-----
>                                         #
>                                         #
> deltaPower <- abs(delta[3]) # effect (NOT Z-scale/unit, but outcome scale/unit!) that the study is powered for: should we choose ourselves or compute from other numbers above ???
> n <- ceiling(2*2*((allsd[3]/deltaPower)^2)*(qnorm(1-beta)-qnorm(alpha))^2) #104 with Corine's data # should we choose ourselves or compute from the above numbers ???
>                                         # inflate SS as required for interim
> 
>                                         # {{{ Set seeds for parallel computing and reproducibility
> ## * Seed
> args <- commandArgs(TRUE) ## BATCH MODE
> if(length(args)>0){
+     for (arg in args){
+         eval(parse(text=arg))
+     }
+ }else{ ## SLUMR
+     iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_ID"))
+     n.iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_COUNT"))
+ } ## interactive
> if(is.na(iter_sim)){iter_sim <- 1}
> if(is.na(n.iter_sim)){n.iter_sim <- 40}
> 
> set.seed(140786598)
> allseeds <- sample.int(n = 10*n.iter_sim*NMC, size = n.iter_sim*NMC, replace=FALSE) #x=1:(.Machine$integer.max) seems to be maximal possible
> # }}}
> 
> # {{{ set path to load and save and othe machine specific variables
> ## * path
> path <- "."
> path.res <- file.path(path,"Results","simuMain")
> if(dir.exists(path.res)==FALSE){
+     if(dir.exists(file.path(path,"Results"))==FALSE){
+     dir.create(file.path(path,"Results"))
+     }
+     dir.create(path.res)
+ }
> path.output <- file.path(path,"output","simuMain")
> if(dir.exists(path.output)==FALSE){
+     if(dir.exists(file.path(path,"output"))==FALSE){
+     dir.create(file.path(path,"output"))
+     }
+     dir.create(path.output)
+ }
> # }}}
> 
> 
> ## * libraries and functions
> library(DelayedGSD)
DelayedGSD version 0.0.3
> ## sourceDir <- function(path, trace = TRUE, ...) {
> ##     for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
> ##         if(trace) cat(nm,":")
> ##         source(file.path(path, nm), ...)
> ##         if(trace) cat("\n")
> ##     }
> ## }
> ## sourceDir(pathToLoad)
>     
> 
> ## * Compute inflation factor and sample size
> plannedB <- vector(mode = "list", length = 3)
> for(iMeth in method){ ## iMeth <- 1
+     plannedB[[iMeth]] <- CalcBoundaries(kMax=kMax,  
+                                         alpha=alpha, 
+                                         beta=beta,  
+                                         InfoR.i=informationRates,  
+                                         InfoR.d=c(Id,1),  
+                                         rho_alpha=rho_alpha,  
+                                         rho_beta=rho_beta,  
+                                         method=iMeth,  
+                                         cNotBelowFixedc=FALSE,
+                                         bindingFutility=binding,
+                                         delta=tail(delta,1))
+     ## summary(plannedB[[1]])
+     ## coef(plannedB[[iMeth]], type = "information")
+ }
Loading required namespace: gsDesign
Loading required package: mvtnorm
Loading required namespace: BB
> inflationFactor <- unlist(lapply(plannedB,function(iP){iP$planned$InflationFactor}))
> nGSD <- ceiling(n*inflationFactor)
> ##  plot(plannedB[[1]])
> 
> #
> # --- just to check---
> ## n
> ## InfoFixed <- ((qnorm(1-beta)-qnorm(alpha))/(deltaPower))^2
> ## InfoFixed
> ## n/(4*(allsd[3])^2)
> #---
> # }}}
> 
> 
> 
> 
> # {{{ technical details to loop
> RES <- NULL # initialize results to save
> allj <- ((iter_sim-1)*NMC + 1):(iter_sim*NMC) # indices of all iterations (replicates) for this job, accountng for the other jobs running in parallel
> # }}}
> 
> ## * Loop
> for(j in allj){ ## j <- 51 ## 5
+     startComp <- Sys.time()
+     myseedi <- allseeds[j]
+     # {{{ TRACE info (e.g. to check the Rout)
+     print(paste0("seed ",myseedi," for ","j=",which(j==allj)," out of ",NMC, " (i.e. j=",j," in [",(iter_sim-1)*NMC + 1,";",iter_sim*NMC,"], as job id is i=",iter_sim,")"))
+     # }}}
+     # {{{ Missing probabilities
+     MyMissProb <- matrix(c(Miss11,Miss12,Miss21,Miss22),ncol=2,nrow=2,byrow=TRUE) # to additionnally remove 1 more because some FASFL=N
+     colnames(MyMissProb) <- c("V2 missing","V2 not missing")
+     rownames(MyMissProb) <- c("V1 missing","V1 not missing")
+     # }}}
+ 
+                                         # {{{ generate data
+     ## ** simulate
+     res <- GenData(n=n, 
+                    N.fw=2,
+                    rand.block=block,
+                    allsd=allsd,
+                    mean0=mean0,
+                    delta=delta,
+                    ar=ar,
+                    cor.01.1=cor011,
+                    cor.ij.1=corij1,
+                    cor.0j.1=cor0j1,
+                    seed=myseedi,
+                    MissProb=MyMissProb,
+                    DigitsOutcome=2,
+                    TimeFactor=TimeFactor,
+                    DigitsTime=0
+                    )
+     d <- res$d
+     ## head(d,n=20)
+                                         # }}}
+                                         # {{{ reformat data like those of Corine
+     ## Make data long format
+     ## dd <- FormatAsCase(d)
+     ## head(dd)
+     ## summary(dd)
+                                         # }}}
+    
+                                         # {{{ make data available at interim
+                                         # Here we stop inclusion data collection for the interim analysis as soon as
+                                         # half of the participants have completed (or had the opportunity to complete) the follow-up 
+     thet <- d$t3[ceiling(n*PropForInterim)]
+     di <- SelectData(d,t=thet)
+     ## ddi <- FormatAsCase(di) # needed ????
+     ## head(d[d$id==52,])
+                                         # }}}
+     ## {{{ analyze data at at interim
+     ## ** interim
+     lmmI <- analyzeData(di, ddf = "nlme", data.decision = sum(d$t1 <= thet + theDelta.t*TimeFactor), getinfo = TRUE, trace = TRUE)
+     ## lmmI <- analyzeData(di, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     currentGSD <- vector(mode = "list", length = 3)
+     out.interim <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+ 
+         currentGSD[[iMeth]] <- update(plannedB[[iMeth]], delta = lmmI, trace = FALSE)
+ 
+         iConfint.interim <- confint(currentGSD[[iMeth]])
+         iInfo.interim <- coef(currentGSD[[iMeth]], type = "information")
+         iBoundary.interim <- coef(currentGSD[[iMeth]], type = "boundary")
+         iDecision.interim <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+         out.interim[[iMeth]] <-  data.frame(statistic = iConfint.interim[1,"statistic"],
+                                             estimate_ML = iConfint.interim[1,"estimate"],
+                                             se_ML = iConfint.interim[1,"se"],
+                                             info = iInfo.interim[1,"Interim"],
+                                             infoPC = iInfo.interim[1,"Interim.pc"],
+                                             info.pred = iInfo.interim[1,"Decision"],
+                                             infoPC.pred = iInfo.interim[1,"Decision.pc"],
+                                             uk = iBoundary.interim[1,"Ebound"],
+                                             lk = iBoundary.interim[1,"Fbound"],
+                                             decision = iDecision.interim["decision","stage 1"],
+                                             reason = iDecision.interim["reason.interim","stage 1"])
+     }
+     ## currentGSD[[1]]
+     ## plot(currentGSD[[1]])
+ 
+     ## ** decision
+     dDecision <- d[which(d$t1 <= thet + theDelta.t*TimeFactor),]
+     lmmD <- analyzeData(dDecision, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+     
+     out.decision <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+           
+         if(out.interim[[iMeth]]$decision == "stop"){
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, trace = FALSE)
+             ## plot(currentGSD[[iMeth]])
+ 
+             iConfint.decision <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.decision  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = iConfint.decision[1,"statistic"],
+                                                 p.value_ML = iConfint.decision[iConfint.decision$method == "ML","p.value"],
+                                                 lower_ML = iConfint.decision[iConfint.decision$method == "ML","lower"],
+                                                 upper_ML = iConfint.decision[iConfint.decision$method == "ML","upper"],
+                                                 estimate_ML = iConfint.decision[iConfint.decision$method == "ML","estimate"],
+                                                 p.value_MUE = iConfint.decision[iConfint.decision$method == "MUE","p.value"],
+                                                 lower_MUE = iConfint.decision[iConfint.decision$method == "MUE","lower"],
+                                                 upper_MUE = iConfint.decision[iConfint.decision$method == "MUE","upper"],
+                                                 estimate_MUE = iConfint.decision[iConfint.decision$method == "MUE","estimate"],
+                                                 info = iInfo.decision[1,"Interim"],
+                                                 infoPC = iInfo.decision[1,"Interim.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = unname(iDecision.decision["decision","stage 2"])
+                                                 )
+ 
+         }else{
+             ## update information
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmD, k = 1, type.k = "decision", trace = FALSE)
+ 
+             iInfo.decision <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.decision <- coef(currentGSD[[iMeth]], type = "boundary")
+ 
+             out.decision[[iMeth]] <- data.frame(statistic = NA,
+                                                 p.value_ML = NA,
+                                                 lower_ML = NA,
+                                                 upper_ML = NA,
+                                                 estimate_ML = NA,
+                                                 p.value_MUE = NA,
+                                                 lower_MUE = NA,
+                                                 upper_MUE = NA,
+                                                 estimate_MUE = NA,
+                                                 info = iInfo.decision[1,"Decision"],
+                                                 infoPC = iInfo.decision[1,"Decision.pc"],
+                                                 ck = iBoundary.decision[1,"Cbound"],
+                                                 decision = NA)
+         }
+     }
+                                         # }}}
+                                         # {{{ Analyze data at decision
+ 
+     ## ** finale
+     dFinal <- d
+     lmmF <- analyzeData(dFinal, ddf = "nlme", getinfo = TRUE, trace = TRUE)
+ 
+     out.final <- vector(mode = "list", length = 3)
+     for(iMeth in method){ ## iMeth <- 1
+         if(out.interim[[iMeth]]$decision == "stop"){
+             out.final[[iMeth]] <- data.frame(statistic = NA,
+                                              p.value_ML = NA,
+                                              lower_ML = NA,
+                                              upper_ML = NA,
+                                              estimate_ML = NA,
+                                              p.value_MUE = NA,
+                                              lower_MUE = NA,
+                                              upper_MUE = NA,
+                                              estimate_MUE = NA,
+                                              info = NA,
+                                              infoPC = NA,
+                                              ck = NA,
+                                              decision = NA)
+ 
+         }else{
+             currentGSD[[iMeth]] <- update(currentGSD[[iMeth]], delta = lmmF, trace = FALSE)
+ 
+             ## plot(test)
+             ## summary(test)
+             iConfint.final <- confint(currentGSD[[iMeth]], method = c("ML","MUE"))
+             iInfo.final <- coef(currentGSD[[iMeth]], type = "information")
+             iBoundary.final <- coef(currentGSD[[iMeth]], type = "boundary")
+             iDecision.final  <- coef(currentGSD[[iMeth]], type = "decision")
+ 
+             out.final[[iMeth]] <- data.frame(statistic = iConfint.final[1,"statistic"],
+                                              p.value_ML = iConfint.final[iConfint.final$method == "ML","p.value"],
+                                              lower_ML = iConfint.final[iConfint.final$method == "ML","lower"],
+                                              upper_ML = iConfint.final[iConfint.final$method == "ML","upper"],
+                                              estimate_ML = iConfint.final[iConfint.final$method == "ML","estimate"],
+                                              p.value_MUE = iConfint.final[iConfint.final$method == "MUE","p.value"],
+                                              lower_MUE = iConfint.final[iConfint.final$method == "MUE","lower"],
+                                              upper_MUE = iConfint.final[iConfint.final$method == "MUE","upper"],
+                                              estimate_MUE = iConfint.final[iConfint.final$method == "MUE","estimate"],
+                                              info = iInfo.final[1,"Interim"],
+                                              infoPC = iInfo.final[1,"Interim.pc"],
+                                              ck = iBoundary.final[1,"Cbound"],
+                                              decision = unname(coef(currentGSD[[iMeth]], type = "decision")["decision","stage 2"])
+                                              )
+         }
+     }
+                                         # }}}
+ 
+     stopComp <- Sys.time()
+                                         # {{{ Save results
+ 
+     outMerge <- do.call(rbind,lapply(method, function(iMeth){
+         iNames <- unique(c(names(out.interim[[iMeth]]),names(out.decision[[iMeth]]),names(out.final[[iMeth]])))
+         iMerge <- data.frame(matrix(NA, ncol = length(iNames)+3, nrow = 3, dimnames = list(NULL, c("method", "stage", "type", iNames))))
+         iMerge[1,c("method","stage","type",names(out.interim[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "interim", out.interim[[iMeth]]) 
+         iMerge[2,c("method","stage","type",names(out.decision[[iMeth]]))] <- data.frame(method = iMeth, stage = 1, type = "decision", out.decision[[iMeth]]) 
+         iMerge[3,c("method","stage","type",names(out.final[[iMeth]]))] <- data.frame(method = iMeth, stage = 2, type = "final", out.final[[iMeth]])
+         return(iMerge)
+     }))
+ 
+     ## outMerge[outMerge$method==3,]
+ 
+     out <- cbind(
+         ## results
+         outMerge,
+         ## simulation details
+         time.interim = thet,
+         seed=myseedi,             
+         nX1.interim = sum(!is.na(di$X1)),
+         nX2.interim = sum(!is.na(di$X2)),
+         nX3.interim = sum(!is.na(di$X3)),
+         ## computation time
+         computation.time=as.double(round(difftime(stopComp,startComp,units="secs"),3))
+     )
+     ## names(out) <- myColNames
+     RES <- rbind(RES,out)
+     save(RES,file=paste0(path.res,name,"(tempo)-",iter_sim,".rda"))
+                                         # }}}
+ }
[1] "seed 62188 for j=1 out of 250 (i.e. j=3251 in [3251;3500], as job id is i=14)"
Loading required namespace: nlme
[1] "seed 15392 for j=2 out of 250 (i.e. j=3252 in [3251;3500], as job id is i=14)"
[1] "seed 8986 for j=3 out of 250 (i.e. j=3253 in [3251;3500], as job id is i=14)"
[1] "seed 22653 for j=4 out of 250 (i.e. j=3254 in [3251;3500], as job id is i=14)"
[1] "seed 79937 for j=5 out of 250 (i.e. j=3255 in [3251;3500], as job id is i=14)"
[1] "seed 97022 for j=6 out of 250 (i.e. j=3256 in [3251;3500], as job id is i=14)"
[1] "seed 91872 for j=7 out of 250 (i.e. j=3257 in [3251;3500], as job id is i=14)"
[1] "seed 2501 for j=8 out of 250 (i.e. j=3258 in [3251;3500], as job id is i=14)"
[1] "seed 29032 for j=9 out of 250 (i.e. j=3259 in [3251;3500], as job id is i=14)"
[1] "seed 49738 for j=10 out of 250 (i.e. j=3260 in [3251;3500], as job id is i=14)"
[1] "seed 18936 for j=11 out of 250 (i.e. j=3261 in [3251;3500], as job id is i=14)"
[1] "seed 96240 for j=12 out of 250 (i.e. j=3262 in [3251;3500], as job id is i=14)"
[1] "seed 16852 for j=13 out of 250 (i.e. j=3263 in [3251;3500], as job id is i=14)"
[1] "seed 73216 for j=14 out of 250 (i.e. j=3264 in [3251;3500], as job id is i=14)"
[1] "seed 4669 for j=15 out of 250 (i.e. j=3265 in [3251;3500], as job id is i=14)"
[1] "seed 73108 for j=16 out of 250 (i.e. j=3266 in [3251;3500], as job id is i=14)"
[1] "seed 95077 for j=17 out of 250 (i.e. j=3267 in [3251;3500], as job id is i=14)"
[1] "seed 24601 for j=18 out of 250 (i.e. j=3268 in [3251;3500], as job id is i=14)"
[1] "seed 71719 for j=19 out of 250 (i.e. j=3269 in [3251;3500], as job id is i=14)"
[1] "seed 88412 for j=20 out of 250 (i.e. j=3270 in [3251;3500], as job id is i=14)"
[1] "seed 83714 for j=21 out of 250 (i.e. j=3271 in [3251;3500], as job id is i=14)"
[1] "seed 14457 for j=22 out of 250 (i.e. j=3272 in [3251;3500], as job id is i=14)"
[1] "seed 77627 for j=23 out of 250 (i.e. j=3273 in [3251;3500], as job id is i=14)"
[1] "seed 89828 for j=24 out of 250 (i.e. j=3274 in [3251;3500], as job id is i=14)"
[1] "seed 92648 for j=25 out of 250 (i.e. j=3275 in [3251;3500], as job id is i=14)"
[1] "seed 17713 for j=26 out of 250 (i.e. j=3276 in [3251;3500], as job id is i=14)"
[1] "seed 45815 for j=27 out of 250 (i.e. j=3277 in [3251;3500], as job id is i=14)"
[1] "seed 64986 for j=28 out of 250 (i.e. j=3278 in [3251;3500], as job id is i=14)"
[1] "seed 20599 for j=29 out of 250 (i.e. j=3279 in [3251;3500], as job id is i=14)"
[1] "seed 68180 for j=30 out of 250 (i.e. j=3280 in [3251;3500], as job id is i=14)"
[1] "seed 90482 for j=31 out of 250 (i.e. j=3281 in [3251;3500], as job id is i=14)"
[1] "seed 42082 for j=32 out of 250 (i.e. j=3282 in [3251;3500], as job id is i=14)"
[1] "seed 8111 for j=33 out of 250 (i.e. j=3283 in [3251;3500], as job id is i=14)"
[1] "seed 18045 for j=34 out of 250 (i.e. j=3284 in [3251;3500], as job id is i=14)"
[1] "seed 77300 for j=35 out of 250 (i.e. j=3285 in [3251;3500], as job id is i=14)"
[1] "seed 79094 for j=36 out of 250 (i.e. j=3286 in [3251;3500], as job id is i=14)"
[1] "seed 99335 for j=37 out of 250 (i.e. j=3287 in [3251;3500], as job id is i=14)"
[1] "seed 53356 for j=38 out of 250 (i.e. j=3288 in [3251;3500], as job id is i=14)"
[1] "seed 41610 for j=39 out of 250 (i.e. j=3289 in [3251;3500], as job id is i=14)"
[1] "seed 20942 for j=40 out of 250 (i.e. j=3290 in [3251;3500], as job id is i=14)"
[1] "seed 16663 for j=41 out of 250 (i.e. j=3291 in [3251;3500], as job id is i=14)"
[1] "seed 11231 for j=42 out of 250 (i.e. j=3292 in [3251;3500], as job id is i=14)"
[1] "seed 29208 for j=43 out of 250 (i.e. j=3293 in [3251;3500], as job id is i=14)"
[1] "seed 16923 for j=44 out of 250 (i.e. j=3294 in [3251;3500], as job id is i=14)"
[1] "seed 64789 for j=45 out of 250 (i.e. j=3295 in [3251;3500], as job id is i=14)"
[1] "seed 76931 for j=46 out of 250 (i.e. j=3296 in [3251;3500], as job id is i=14)"
[1] "seed 92802 for j=47 out of 250 (i.e. j=3297 in [3251;3500], as job id is i=14)"
[1] "seed 7601 for j=48 out of 250 (i.e. j=3298 in [3251;3500], as job id is i=14)"
[1] "seed 33369 for j=49 out of 250 (i.e. j=3299 in [3251;3500], as job id is i=14)"
[1] "seed 7 for j=50 out of 250 (i.e. j=3300 in [3251;3500], as job id is i=14)"
[1] "seed 77656 for j=51 out of 250 (i.e. j=3301 in [3251;3500], as job id is i=14)"
[1] "seed 31394 for j=52 out of 250 (i.e. j=3302 in [3251;3500], as job id is i=14)"
[1] "seed 98614 for j=53 out of 250 (i.e. j=3303 in [3251;3500], as job id is i=14)"
[1] "seed 27734 for j=54 out of 250 (i.e. j=3304 in [3251;3500], as job id is i=14)"
[1] "seed 95490 for j=55 out of 250 (i.e. j=3305 in [3251;3500], as job id is i=14)"
[1] "seed 1124 for j=56 out of 250 (i.e. j=3306 in [3251;3500], as job id is i=14)"
[1] "seed 59972 for j=57 out of 250 (i.e. j=3307 in [3251;3500], as job id is i=14)"
[1] "seed 76498 for j=58 out of 250 (i.e. j=3308 in [3251;3500], as job id is i=14)"
[1] "seed 47286 for j=59 out of 250 (i.e. j=3309 in [3251;3500], as job id is i=14)"
[1] "seed 87233 for j=60 out of 250 (i.e. j=3310 in [3251;3500], as job id is i=14)"
[1] "seed 67001 for j=61 out of 250 (i.e. j=3311 in [3251;3500], as job id is i=14)"
[1] "seed 90727 for j=62 out of 250 (i.e. j=3312 in [3251;3500], as job id is i=14)"
[1] "seed 98540 for j=63 out of 250 (i.e. j=3313 in [3251;3500], as job id is i=14)"
[1] "seed 75502 for j=64 out of 250 (i.e. j=3314 in [3251;3500], as job id is i=14)"
[1] "seed 55409 for j=65 out of 250 (i.e. j=3315 in [3251;3500], as job id is i=14)"
[1] "seed 5473 for j=66 out of 250 (i.e. j=3316 in [3251;3500], as job id is i=14)"
[1] "seed 4226 for j=67 out of 250 (i.e. j=3317 in [3251;3500], as job id is i=14)"
[1] "seed 17217 for j=68 out of 250 (i.e. j=3318 in [3251;3500], as job id is i=14)"
[1] "seed 90957 for j=69 out of 250 (i.e. j=3319 in [3251;3500], as job id is i=14)"
[1] "seed 60106 for j=70 out of 250 (i.e. j=3320 in [3251;3500], as job id is i=14)"
[1] "seed 61756 for j=71 out of 250 (i.e. j=3321 in [3251;3500], as job id is i=14)"
[1] "seed 73193 for j=72 out of 250 (i.e. j=3322 in [3251;3500], as job id is i=14)"
[1] "seed 94098 for j=73 out of 250 (i.e. j=3323 in [3251;3500], as job id is i=14)"
[1] "seed 65497 for j=74 out of 250 (i.e. j=3324 in [3251;3500], as job id is i=14)"
[1] "seed 62037 for j=75 out of 250 (i.e. j=3325 in [3251;3500], as job id is i=14)"
[1] "seed 36036 for j=76 out of 250 (i.e. j=3326 in [3251;3500], as job id is i=14)"
[1] "seed 26062 for j=77 out of 250 (i.e. j=3327 in [3251;3500], as job id is i=14)"
[1] "seed 17090 for j=78 out of 250 (i.e. j=3328 in [3251;3500], as job id is i=14)"
[1] "seed 48590 for j=79 out of 250 (i.e. j=3329 in [3251;3500], as job id is i=14)"
[1] "seed 15077 for j=80 out of 250 (i.e. j=3330 in [3251;3500], as job id is i=14)"
[1] "seed 82769 for j=81 out of 250 (i.e. j=3331 in [3251;3500], as job id is i=14)"
[1] "seed 19151 for j=82 out of 250 (i.e. j=3332 in [3251;3500], as job id is i=14)"
[1] "seed 66565 for j=83 out of 250 (i.e. j=3333 in [3251;3500], as job id is i=14)"
[1] "seed 32376 for j=84 out of 250 (i.e. j=3334 in [3251;3500], as job id is i=14)"
[1] "seed 22500 for j=85 out of 250 (i.e. j=3335 in [3251;3500], as job id is i=14)"
[1] "seed 27717 for j=86 out of 250 (i.e. j=3336 in [3251;3500], as job id is i=14)"
[1] "seed 24944 for j=87 out of 250 (i.e. j=3337 in [3251;3500], as job id is i=14)"
[1] "seed 27334 for j=88 out of 250 (i.e. j=3338 in [3251;3500], as job id is i=14)"
[1] "seed 16648 for j=89 out of 250 (i.e. j=3339 in [3251;3500], as job id is i=14)"
[1] "seed 94618 for j=90 out of 250 (i.e. j=3340 in [3251;3500], as job id is i=14)"
[1] "seed 12818 for j=91 out of 250 (i.e. j=3341 in [3251;3500], as job id is i=14)"
[1] "seed 53778 for j=92 out of 250 (i.e. j=3342 in [3251;3500], as job id is i=14)"
[1] "seed 11042 for j=93 out of 250 (i.e. j=3343 in [3251;3500], as job id is i=14)"
[1] "seed 66685 for j=94 out of 250 (i.e. j=3344 in [3251;3500], as job id is i=14)"
[1] "seed 38783 for j=95 out of 250 (i.e. j=3345 in [3251;3500], as job id is i=14)"
[1] "seed 20870 for j=96 out of 250 (i.e. j=3346 in [3251;3500], as job id is i=14)"
[1] "seed 96047 for j=97 out of 250 (i.e. j=3347 in [3251;3500], as job id is i=14)"
[1] "seed 40751 for j=98 out of 250 (i.e. j=3348 in [3251;3500], as job id is i=14)"
[1] "seed 3512 for j=99 out of 250 (i.e. j=3349 in [3251;3500], as job id is i=14)"
[1] "seed 9932 for j=100 out of 250 (i.e. j=3350 in [3251;3500], as job id is i=14)"
[1] "seed 30862 for j=101 out of 250 (i.e. j=3351 in [3251;3500], as job id is i=14)"
[1] "seed 58715 for j=102 out of 250 (i.e. j=3352 in [3251;3500], as job id is i=14)"
[1] "seed 79779 for j=103 out of 250 (i.e. j=3353 in [3251;3500], as job id is i=14)"
[1] "seed 26066 for j=104 out of 250 (i.e. j=3354 in [3251;3500], as job id is i=14)"
[1] "seed 27659 for j=105 out of 250 (i.e. j=3355 in [3251;3500], as job id is i=14)"
[1] "seed 73478 for j=106 out of 250 (i.e. j=3356 in [3251;3500], as job id is i=14)"
[1] "seed 38945 for j=107 out of 250 (i.e. j=3357 in [3251;3500], as job id is i=14)"
[1] "seed 43292 for j=108 out of 250 (i.e. j=3358 in [3251;3500], as job id is i=14)"
[1] "seed 22475 for j=109 out of 250 (i.e. j=3359 in [3251;3500], as job id is i=14)"
[1] "seed 1225 for j=110 out of 250 (i.e. j=3360 in [3251;3500], as job id is i=14)"
[1] "seed 34785 for j=111 out of 250 (i.e. j=3361 in [3251;3500], as job id is i=14)"
[1] "seed 72607 for j=112 out of 250 (i.e. j=3362 in [3251;3500], as job id is i=14)"
[1] "seed 34990 for j=113 out of 250 (i.e. j=3363 in [3251;3500], as job id is i=14)"
[1] "seed 81684 for j=114 out of 250 (i.e. j=3364 in [3251;3500], as job id is i=14)"
[1] "seed 64870 for j=115 out of 250 (i.e. j=3365 in [3251;3500], as job id is i=14)"
[1] "seed 14155 for j=116 out of 250 (i.e. j=3366 in [3251;3500], as job id is i=14)"
[1] "seed 30369 for j=117 out of 250 (i.e. j=3367 in [3251;3500], as job id is i=14)"
[1] "seed 16518 for j=118 out of 250 (i.e. j=3368 in [3251;3500], as job id is i=14)"
[1] "seed 12396 for j=119 out of 250 (i.e. j=3369 in [3251;3500], as job id is i=14)"
[1] "seed 275 for j=120 out of 250 (i.e. j=3370 in [3251;3500], as job id is i=14)"
[1] "seed 14213 for j=121 out of 250 (i.e. j=3371 in [3251;3500], as job id is i=14)"
[1] "seed 28472 for j=122 out of 250 (i.e. j=3372 in [3251;3500], as job id is i=14)"
[1] "seed 15180 for j=123 out of 250 (i.e. j=3373 in [3251;3500], as job id is i=14)"
[1] "seed 50933 for j=124 out of 250 (i.e. j=3374 in [3251;3500], as job id is i=14)"
[1] "seed 85589 for j=125 out of 250 (i.e. j=3375 in [3251;3500], as job id is i=14)"
[1] "seed 2328 for j=126 out of 250 (i.e. j=3376 in [3251;3500], as job id is i=14)"
[1] "seed 25387 for j=127 out of 250 (i.e. j=3377 in [3251;3500], as job id is i=14)"
[1] "seed 90490 for j=128 out of 250 (i.e. j=3378 in [3251;3500], as job id is i=14)"
[1] "seed 38528 for j=129 out of 250 (i.e. j=3379 in [3251;3500], as job id is i=14)"
[1] "seed 11588 for j=130 out of 250 (i.e. j=3380 in [3251;3500], as job id is i=14)"
[1] "seed 27317 for j=131 out of 250 (i.e. j=3381 in [3251;3500], as job id is i=14)"
[1] "seed 41900 for j=132 out of 250 (i.e. j=3382 in [3251;3500], as job id is i=14)"
[1] "seed 33311 for j=133 out of 250 (i.e. j=3383 in [3251;3500], as job id is i=14)"
[1] "seed 94336 for j=134 out of 250 (i.e. j=3384 in [3251;3500], as job id is i=14)"
[1] "seed 56285 for j=135 out of 250 (i.e. j=3385 in [3251;3500], as job id is i=14)"
[1] "seed 12698 for j=136 out of 250 (i.e. j=3386 in [3251;3500], as job id is i=14)"
[1] "seed 25060 for j=137 out of 250 (i.e. j=3387 in [3251;3500], as job id is i=14)"
[1] "seed 90017 for j=138 out of 250 (i.e. j=3388 in [3251;3500], as job id is i=14)"
[1] "seed 75420 for j=139 out of 250 (i.e. j=3389 in [3251;3500], as job id is i=14)"
[1] "seed 40999 for j=140 out of 250 (i.e. j=3390 in [3251;3500], as job id is i=14)"
[1] "seed 37522 for j=141 out of 250 (i.e. j=3391 in [3251;3500], as job id is i=14)"
[1] "seed 52111 for j=142 out of 250 (i.e. j=3392 in [3251;3500], as job id is i=14)"
[1] "seed 2581 for j=143 out of 250 (i.e. j=3393 in [3251;3500], as job id is i=14)"
[1] "seed 47773 for j=144 out of 250 (i.e. j=3394 in [3251;3500], as job id is i=14)"
[1] "seed 76079 for j=145 out of 250 (i.e. j=3395 in [3251;3500], as job id is i=14)"
[1] "seed 8547 for j=146 out of 250 (i.e. j=3396 in [3251;3500], as job id is i=14)"
[1] "seed 61921 for j=147 out of 250 (i.e. j=3397 in [3251;3500], as job id is i=14)"
[1] "seed 63541 for j=148 out of 250 (i.e. j=3398 in [3251;3500], as job id is i=14)"
[1] "seed 36088 for j=149 out of 250 (i.e. j=3399 in [3251;3500], as job id is i=14)"
[1] "seed 34120 for j=150 out of 250 (i.e. j=3400 in [3251;3500], as job id is i=14)"
[1] "seed 678 for j=151 out of 250 (i.e. j=3401 in [3251;3500], as job id is i=14)"
[1] "seed 67759 for j=152 out of 250 (i.e. j=3402 in [3251;3500], as job id is i=14)"
[1] "seed 1253 for j=153 out of 250 (i.e. j=3403 in [3251;3500], as job id is i=14)"
[1] "seed 58371 for j=154 out of 250 (i.e. j=3404 in [3251;3500], as job id is i=14)"
[1] "seed 6402 for j=155 out of 250 (i.e. j=3405 in [3251;3500], as job id is i=14)"
[1] "seed 52564 for j=156 out of 250 (i.e. j=3406 in [3251;3500], as job id is i=14)"
[1] "seed 3092 for j=157 out of 250 (i.e. j=3407 in [3251;3500], as job id is i=14)"
[1] "seed 72020 for j=158 out of 250 (i.e. j=3408 in [3251;3500], as job id is i=14)"
[1] "seed 63349 for j=159 out of 250 (i.e. j=3409 in [3251;3500], as job id is i=14)"
[1] "seed 90975 for j=160 out of 250 (i.e. j=3410 in [3251;3500], as job id is i=14)"
[1] "seed 96518 for j=161 out of 250 (i.e. j=3411 in [3251;3500], as job id is i=14)"
[1] "seed 58258 for j=162 out of 250 (i.e. j=3412 in [3251;3500], as job id is i=14)"
[1] "seed 65391 for j=163 out of 250 (i.e. j=3413 in [3251;3500], as job id is i=14)"
[1] "seed 98328 for j=164 out of 250 (i.e. j=3414 in [3251;3500], as job id is i=14)"
[1] "seed 92848 for j=165 out of 250 (i.e. j=3415 in [3251;3500], as job id is i=14)"
[1] "seed 23370 for j=166 out of 250 (i.e. j=3416 in [3251;3500], as job id is i=14)"
[1] "seed 1521 for j=167 out of 250 (i.e. j=3417 in [3251;3500], as job id is i=14)"
[1] "seed 1850 for j=168 out of 250 (i.e. j=3418 in [3251;3500], as job id is i=14)"
[1] "seed 47024 for j=169 out of 250 (i.e. j=3419 in [3251;3500], as job id is i=14)"
[1] "seed 88410 for j=170 out of 250 (i.e. j=3420 in [3251;3500], as job id is i=14)"
[1] "seed 12918 for j=171 out of 250 (i.e. j=3421 in [3251;3500], as job id is i=14)"
[1] "seed 69630 for j=172 out of 250 (i.e. j=3422 in [3251;3500], as job id is i=14)"
[1] "seed 75264 for j=173 out of 250 (i.e. j=3423 in [3251;3500], as job id is i=14)"
[1] "seed 80618 for j=174 out of 250 (i.e. j=3424 in [3251;3500], as job id is i=14)"
[1] "seed 25166 for j=175 out of 250 (i.e. j=3425 in [3251;3500], as job id is i=14)"
[1] "seed 21120 for j=176 out of 250 (i.e. j=3426 in [3251;3500], as job id is i=14)"
[1] "seed 42056 for j=177 out of 250 (i.e. j=3427 in [3251;3500], as job id is i=14)"
[1] "seed 69945 for j=178 out of 250 (i.e. j=3428 in [3251;3500], as job id is i=14)"
[1] "seed 78780 for j=179 out of 250 (i.e. j=3429 in [3251;3500], as job id is i=14)"
[1] "seed 53345 for j=180 out of 250 (i.e. j=3430 in [3251;3500], as job id is i=14)"
[1] "seed 71700 for j=181 out of 250 (i.e. j=3431 in [3251;3500], as job id is i=14)"
[1] "seed 34248 for j=182 out of 250 (i.e. j=3432 in [3251;3500], as job id is i=14)"
[1] "seed 95346 for j=183 out of 250 (i.e. j=3433 in [3251;3500], as job id is i=14)"
[1] "seed 79763 for j=184 out of 250 (i.e. j=3434 in [3251;3500], as job id is i=14)"
[1] "seed 59078 for j=185 out of 250 (i.e. j=3435 in [3251;3500], as job id is i=14)"
[1] "seed 96196 for j=186 out of 250 (i.e. j=3436 in [3251;3500], as job id is i=14)"
[1] "seed 84263 for j=187 out of 250 (i.e. j=3437 in [3251;3500], as job id is i=14)"
[1] "seed 91069 for j=188 out of 250 (i.e. j=3438 in [3251;3500], as job id is i=14)"
[1] "seed 27359 for j=189 out of 250 (i.e. j=3439 in [3251;3500], as job id is i=14)"
[1] "seed 84502 for j=190 out of 250 (i.e. j=3440 in [3251;3500], as job id is i=14)"
[1] "seed 49546 for j=191 out of 250 (i.e. j=3441 in [3251;3500], as job id is i=14)"
[1] "seed 12016 for j=192 out of 250 (i.e. j=3442 in [3251;3500], as job id is i=14)"
[1] "seed 33138 for j=193 out of 250 (i.e. j=3443 in [3251;3500], as job id is i=14)"
[1] "seed 41498 for j=194 out of 250 (i.e. j=3444 in [3251;3500], as job id is i=14)"
[1] "seed 31536 for j=195 out of 250 (i.e. j=3445 in [3251;3500], as job id is i=14)"
[1] "seed 17802 for j=196 out of 250 (i.e. j=3446 in [3251;3500], as job id is i=14)"
[1] "seed 54130 for j=197 out of 250 (i.e. j=3447 in [3251;3500], as job id is i=14)"
[1] "seed 68200 for j=198 out of 250 (i.e. j=3448 in [3251;3500], as job id is i=14)"
[1] "seed 60565 for j=199 out of 250 (i.e. j=3449 in [3251;3500], as job id is i=14)"
[1] "seed 13216 for j=200 out of 250 (i.e. j=3450 in [3251;3500], as job id is i=14)"
[1] "seed 27633 for j=201 out of 250 (i.e. j=3451 in [3251;3500], as job id is i=14)"
[1] "seed 34167 for j=202 out of 250 (i.e. j=3452 in [3251;3500], as job id is i=14)"
[1] "seed 57820 for j=203 out of 250 (i.e. j=3453 in [3251;3500], as job id is i=14)"
[1] "seed 64532 for j=204 out of 250 (i.e. j=3454 in [3251;3500], as job id is i=14)"
[1] "seed 55229 for j=205 out of 250 (i.e. j=3455 in [3251;3500], as job id is i=14)"
[1] "seed 83051 for j=206 out of 250 (i.e. j=3456 in [3251;3500], as job id is i=14)"
[1] "seed 32136 for j=207 out of 250 (i.e. j=3457 in [3251;3500], as job id is i=14)"
[1] "seed 75345 for j=208 out of 250 (i.e. j=3458 in [3251;3500], as job id is i=14)"
[1] "seed 33019 for j=209 out of 250 (i.e. j=3459 in [3251;3500], as job id is i=14)"
[1] "seed 67481 for j=210 out of 250 (i.e. j=3460 in [3251;3500], as job id is i=14)"
[1] "seed 37187 for j=211 out of 250 (i.e. j=3461 in [3251;3500], as job id is i=14)"
[1] "seed 56094 for j=212 out of 250 (i.e. j=3462 in [3251;3500], as job id is i=14)"
[1] "seed 58243 for j=213 out of 250 (i.e. j=3463 in [3251;3500], as job id is i=14)"
[1] "seed 27278 for j=214 out of 250 (i.e. j=3464 in [3251;3500], as job id is i=14)"
[1] "seed 52714 for j=215 out of 250 (i.e. j=3465 in [3251;3500], as job id is i=14)"
[1] "seed 50716 for j=216 out of 250 (i.e. j=3466 in [3251;3500], as job id is i=14)"
[1] "seed 73372 for j=217 out of 250 (i.e. j=3467 in [3251;3500], as job id is i=14)"
[1] "seed 306 for j=218 out of 250 (i.e. j=3468 in [3251;3500], as job id is i=14)"
[1] "seed 94658 for j=219 out of 250 (i.e. j=3469 in [3251;3500], as job id is i=14)"
[1] "seed 3974 for j=220 out of 250 (i.e. j=3470 in [3251;3500], as job id is i=14)"
[1] "seed 50813 for j=221 out of 250 (i.e. j=3471 in [3251;3500], as job id is i=14)"
[1] "seed 85337 for j=222 out of 250 (i.e. j=3472 in [3251;3500], as job id is i=14)"
[1] "seed 78034 for j=223 out of 250 (i.e. j=3473 in [3251;3500], as job id is i=14)"
[1] "seed 99562 for j=224 out of 250 (i.e. j=3474 in [3251;3500], as job id is i=14)"
[1] "seed 60357 for j=225 out of 250 (i.e. j=3475 in [3251;3500], as job id is i=14)"
[1] "seed 89770 for j=226 out of 250 (i.e. j=3476 in [3251;3500], as job id is i=14)"
[1] "seed 61244 for j=227 out of 250 (i.e. j=3477 in [3251;3500], as job id is i=14)"
[1] "seed 77719 for j=228 out of 250 (i.e. j=3478 in [3251;3500], as job id is i=14)"
[1] "seed 98456 for j=229 out of 250 (i.e. j=3479 in [3251;3500], as job id is i=14)"
[1] "seed 48121 for j=230 out of 250 (i.e. j=3480 in [3251;3500], as job id is i=14)"
[1] "seed 21907 for j=231 out of 250 (i.e. j=3481 in [3251;3500], as job id is i=14)"
[1] "seed 14189 for j=232 out of 250 (i.e. j=3482 in [3251;3500], as job id is i=14)"
[1] "seed 22218 for j=233 out of 250 (i.e. j=3483 in [3251;3500], as job id is i=14)"
[1] "seed 3203 for j=234 out of 250 (i.e. j=3484 in [3251;3500], as job id is i=14)"
[1] "seed 14530 for j=235 out of 250 (i.e. j=3485 in [3251;3500], as job id is i=14)"
[1] "seed 10233 for j=236 out of 250 (i.e. j=3486 in [3251;3500], as job id is i=14)"
[1] "seed 45298 for j=237 out of 250 (i.e. j=3487 in [3251;3500], as job id is i=14)"
[1] "seed 42085 for j=238 out of 250 (i.e. j=3488 in [3251;3500], as job id is i=14)"
[1] "seed 39366 for j=239 out of 250 (i.e. j=3489 in [3251;3500], as job id is i=14)"
[1] "seed 69162 for j=240 out of 250 (i.e. j=3490 in [3251;3500], as job id is i=14)"
[1] "seed 30435 for j=241 out of 250 (i.e. j=3491 in [3251;3500], as job id is i=14)"
[1] "seed 38854 for j=242 out of 250 (i.e. j=3492 in [3251;3500], as job id is i=14)"
[1] "seed 64225 for j=243 out of 250 (i.e. j=3493 in [3251;3500], as job id is i=14)"
[1] "seed 847 for j=244 out of 250 (i.e. j=3494 in [3251;3500], as job id is i=14)"
[1] "seed 23267 for j=245 out of 250 (i.e. j=3495 in [3251;3500], as job id is i=14)"
[1] "seed 43035 for j=246 out of 250 (i.e. j=3496 in [3251;3500], as job id is i=14)"
[1] "seed 18557 for j=247 out of 250 (i.e. j=3497 in [3251;3500], as job id is i=14)"
[1] "seed 99431 for j=248 out of 250 (i.e. j=3498 in [3251;3500], as job id is i=14)"
[1] "seed 22020 for j=249 out of 250 (i.e. j=3499 in [3251;3500], as job id is i=14)"
[1] "seed 23951 for j=250 out of 250 (i.e. j=3500 in [3251;3500], as job id is i=14)"
There were 18 warnings (use warnings() to see them)
> rownames(RES) <- NULL
> save(RES,file=paste0(path.res,name,"-",iter_sim,".rda"))
> 
> ## * Summary results
> sessionInfo()
R version 4.1.2 (2021-11-01)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Red Hat Enterprise Linux 8.5 (Ootpa)

Matrix products: default
BLAS:   /opt/software/R/4.1.2/lib64/R/lib/libRblas.so
LAPACK: /opt/software/R/4.1.2/lib64/R/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] mvtnorm_1.1-3    DelayedGSD_0.0.3

loaded via a namespace (and not attached):
 [1] BB_2019.10-1     magrittr_2.0.3   tidyselect_1.1.2 munsell_0.5.0   
 [5] lattice_0.20-45  colorspace_2.0-3 xtable_1.8-4     R6_2.5.1        
 [9] quadprog_1.5-8   rlang_1.0.3      fansi_1.0.3      dplyr_1.0.9     
[13] grid_4.1.2       nlme_3.1-153     gtable_0.3.0     gsDesign_3.3.0  
[17] utf8_1.2.2       cli_3.3.0        ellipsis_0.3.2   tibble_3.1.7    
[21] lifecycle_1.0.1  crayon_1.5.1     purrr_0.3.4      ggplot2_3.3.6   
[25] tidyr_1.2.0      vctrs_0.4.1      glue_1.6.2       compiler_4.1.2  
[29] pillar_1.7.0     generics_0.1.3   scales_1.2.0     pkgconfig_2.0.3 
> summary(RES)
     method        stage           type             statistic     
 Min.   :1.0   Min.   :1.000   Length:1500        Min.   :0.0074  
 1st Qu.:1.0   1st Qu.:1.000   Class :character   1st Qu.:1.4749  
 Median :1.5   Median :1.000   Mode  :character   Median :2.2527  
 Mean   :1.5   Mean   :1.333                      Mean   :2.2465  
 3rd Qu.:2.0   3rd Qu.:2.000                      3rd Qu.:3.0154  
 Max.   :2.0   Max.   :2.000                      Max.   :4.8589  
                                                  NA's   :500     
  estimate_ML          se_ML             info           infoPC      
 Min.   :-0.3764   Min.   :0.3383   Min.   :4.385   Min.   :0.3426  
 1st Qu.: 0.5415   1st Qu.:0.3831   1st Qu.:5.709   1st Qu.:0.4461  
 Median : 0.7851   Median :0.4034   Median :6.299   Median :0.4922  
 Mean   : 0.7931   Mean   :0.4031   Mean   :6.307   Mean   :0.4928  
 3rd Qu.: 1.0737   3rd Qu.:0.4209   3rd Qu.:6.879   3rd Qu.:0.5375  
 Max.   : 1.9547   Max.   :0.4776   Max.   :8.908   Max.   :0.6961  
 NA's   :500       NA's   :1000     NA's   :168     NA's   :168     
   info.pred      infoPC.pred           uk              lk         
 Min.   :4.671   Min.   :0.3650   Min.   :2.268   Min.   :-0.3115  
 1st Qu.:5.997   1st Qu.:0.4686   1st Qu.:2.453   1st Qu.: 0.1375  
 Median :6.561   Median :0.5127   Median :2.526   Median : 0.2997  
 Mean   :6.630   Mean   :0.5181   Mean   :2.521   Mean   : 0.3189  
 3rd Qu.:7.219   3rd Qu.:0.5641   3rd Qu.:2.585   3rd Qu.: 0.5050  
 Max.   :9.291   Max.   :0.7260   Max.   :2.755   Max.   : 1.0446  
 NA's   :1000    NA's   :1000     NA's   :1000    NA's   :1000     
   decision            reason            p.value_ML        lower_ML      
 Length:1500        Length:1500        Min.   :0.0000   Min.   :-1.1179  
 Class :character   Class :character   1st Qu.:0.0012   1st Qu.:-0.0733  
 Mode  :character   Mode  :character   Median :0.0078   Median : 0.1312  
                                       Mean   :0.0775   Mean   : 0.1026  
                                       3rd Qu.:0.0477   3rd Qu.: 0.3083  
                                       Max.   :0.9369   Max.   : 1.0228  
                                       NA's   :1000     NA's   :1000     
    upper_ML       p.value_MUE       lower_MUE         upper_MUE     
 Min.   :0.4968   Min.   :0.0000   Min.   :-1.1136   Min.   :0.4925  
 1st Qu.:1.2135   1st Qu.:0.0028   1st Qu.:-0.0823   1st Qu.:1.2209  
 Median :1.4598   Median :0.0076   Median : 0.0661   Median :1.4363  
 Mean   :1.5364   Mean   :0.0421   Mean   : 0.0781   Mean   :1.5526  
 3rd Qu.:1.8769   3rd Qu.:0.0254   3rd Qu.: 0.2096   3rd Qu.:1.8776  
 Max.   :2.7927   Max.   :0.8070   Max.   : 1.8108   Max.   :3.2721  
 NA's   :1000     NA's   :1000     NA's   :1000      NA's   :1000    
  estimate_MUE           ck          time.interim        seed      
 Min.   :-0.3106   Min.   :0.1996   Min.   :515.0   Min.   :    7  
 1st Qu.: 0.5759   1st Qu.:1.3993   1st Qu.:581.0   1st Qu.:22020  
 Median : 0.7966   Median :1.4526   Median :600.0   Median :46420  
 Mean   : 0.8266   Mean   :1.4324   Mean   :601.4   Mean   :47859  
 3rd Qu.: 1.0715   3rd Qu.:1.5043   3rd Qu.:618.0   3rd Qu.:73372  
 Max.   : 2.4370   Max.   :1.6773   Max.   :671.0   Max.   :99562  
 NA's   :1000      NA's   :668                                     
  nX1.interim     nX2.interim     nX3.interim    computation.time
 Min.   :145.0   Min.   :131.0   Min.   :119.0   Min.   :0.6910  
 1st Qu.:148.0   1st Qu.:135.0   1st Qu.:125.0   1st Qu.:0.8890  
 Median :148.0   Median :136.0   Median :127.0   Median :0.9785  
 Mean   :148.6   Mean   :136.5   Mean   :127.1   Mean   :1.0087  
 3rd Qu.:150.0   3rd Qu.:138.0   3rd Qu.:129.0   3rd Qu.:1.1060  
 Max.   :154.0   Max.   :142.0   Max.   :133.0   Max.   :3.6010  
                                                                 
> 
> #----------------------------------------------------------------------
> ### BATCH_simuMain.R ends here
> 
> proc.time()
   user  system elapsed 
255.102   0.397 266.289 
